apiVersion: dialogflowcx.gcp.upbound.io/v1beta1
kind: Page
metadata:
  annotations:
    meta.upbound.io/example-id: dialogflowcx/v1beta1/page
  labels:
    testing.upbound.io/example-name: basic_page
  name: basic-page
spec:
  forProvider:
    displayName: MyPage
    entryFulfillment:
    - conditionalCases:
      - cases: |-
          ${jsonencode([
                  {
                    condition = "$sys.func.RAND() < 0.5",
                    caseContent = [
                      {
                        message = { text = { text = ["First case"] } }
                      },
                      {
                        additionalCases = {
                          cases = [
                            {
                              condition = "$sys.func.RAND() < 0.2"
                              caseContent = [
                                {
                                  message = { text = { text = ["Nested case"] } }
                                }
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  },
                  {
                    caseContent = [
                      {
                        message = { text = { text = ["Final case"] } }
                      }
                    ]
                  },
                ])}
      messages:
      - channel: some-channel
        text:
        - text:
          - Welcome to page
      - payload: |2
                  {"some-key": "some-value", "other-key": ["other-value"]}
      - conversationSuccess:
        - metadata: |2
                      {"some-metadata-key": "some-value", "other-metadata-key": 1234}
      - outputAudioText:
        - text: some output text
      - outputAudioText:
        - ssml: |2
                      <speak>Some example <say-as interpret-as="characters">SSML XML</say-as></speak>
      - liveAgentHandoff:
        - metadata: |2
                      {"some-metadata-key": "some-value", "other-metadata-key": 1234}
      - playAudio:
        - audioUri: http://example.com/some-audio-file.mp3
      - telephonyTransferCall:
        - phoneNumber: 1-234-567-8901
      setParameterActions:
      - parameter: some-param
        value: "123.45"
      - parameter: another-param
        value: ${jsonencode("abc")}
      - parameter: other-param
        value: ${jsonencode(["foo"])}
    eventHandlers:
    - event: some-event
      triggerFulfillment:
      - conditionalCases:
        - cases: |-
            ${jsonencode([
                      {
                        condition = "$sys.func.RAND() < 0.5",
                        caseContent = [
                          {
                            message = { text = { text = ["First case"] } }
                          },
                          {
                            additionalCases = {
                              cases = [
                                {
                                  condition = "$sys.func.RAND() < 0.2"
                                  caseContent = [
                                    {
                                      message = { text = { text = ["Nested case"] } }
                                    }
                                  ]
                                }
                              ]
                            }
                          }
                        ]
                      },
                      {
                        caseContent = [
                          {
                            message = { text = { text = ["Final case"] } }
                          }
                        ]
                      },
                    ])}
        messages:
        - channel: some-channel
          text:
          - text:
            - Some text
        - payload: |2
                      {"some-key": "some-value", "other-key": ["other-value"]}
        - conversationSuccess:
          - metadata: |2
                          {"some-metadata-key": "some-value", "other-metadata-key": 1234}
        - outputAudioText:
          - text: some output text
        - outputAudioText:
          - ssml: |2
                          <speak>Some example <say-as interpret-as="characters">SSML XML</say-as></speak>
        - liveAgentHandoff:
          - metadata: |2
                          {"some-metadata-key": "some-value", "other-metadata-key": 1234}
        - playAudio:
          - audioUri: http://example.com/some-audio-file.mp3
        - telephonyTransferCall:
          - phoneNumber: 1-234-567-8901
        returnPartialResponses: true
        setParameterActions:
        - parameter: some-param
          value: "123.45"
        - parameter: another-param
          value: ${jsonencode("abc")}
        - parameter: other-param
          value: ${jsonencode(["foo"])}
    form:
    - parameters:
      - defaultValue: ${jsonencode("2000-01-01")}
        displayName: param1
        entityType: projects/-/locations/-/agents/-/entityTypes/sys.date
        fillBehavior:
        - initialPromptFulfillment:
          - conditionalCases:
            - cases: |-
                ${jsonencode([
                              {
                                condition = "$sys.func.RAND() < 0.5",
                                caseContent = [
                                  {
                                    message = { text = { text = ["First case"] } }
                                  },
                                  {
                                    additionalCases = {
                                      cases = [
                                        {
                                          condition = "$sys.func.RAND() < 0.2"
                                          caseContent = [
                                            {
                                              message = { text = { text = ["Nested case"] } }
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  }
                                ]
                              },
                              {
                                caseContent = [
                                  {
                                    message = { text = { text = ["Final case"] } }
                                  }
                                ]
                              },
                            ])}
            messages:
            - channel: some-channel
              text:
              - text:
                - Please provide param1
            - payload: |2
                              {"some-key": "some-value", "other-key": ["other-value"]}
            - conversationSuccess:
              - metadata: |2
                                  {"some-metadata-key": "some-value", "other-metadata-key": 1234}
            - outputAudioText:
              - text: some output text
            - outputAudioText:
              - ssml: |2
                                  <speak>Some example <say-as interpret-as="characters">SSML XML</say-as></speak>
            - liveAgentHandoff:
              - metadata: |2
                                  {"some-metadata-key": "some-value", "other-metadata-key": 1234}
            - playAudio:
              - audioUri: http://example.com/some-audio-file.mp3
            - telephonyTransferCall:
              - phoneNumber: 1-234-567-8901
            setParameterActions:
            - parameter: some-param
              value: "123.45"
            - parameter: another-param
              value: ${jsonencode("abc")}
            - parameter: other-param
              value: ${jsonencode(["foo"])}
          repromptEventHandlers:
          - event: sys.no-match-1
            triggerFulfillment:
            - conditionalCases:
              - cases: |-
                  ${jsonencode([
                                  {
                                    condition = "$sys.func.RAND() < 0.5",
                                    caseContent = [
                                      {
                                        message = { text = { text = ["First case"] } }
                                      },
                                      {
                                        additionalCases = {
                                          cases = [
                                            {
                                              condition = "$sys.func.RAND() < 0.2"
                                              caseContent = [
                                                {
                                                  message = { text = { text = ["Nested case"] } }
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  },
                                  {
                                    caseContent = [
                                      {
                                        message = { text = { text = ["Final case"] } }
                                      }
                                    ]
                                  },
                                ])}
              messages:
              - channel: some-channel
                text:
                - text:
                  - Please provide param1
              - payload: |2
                                  {"some-key": "some-value", "other-key": ["other-value"]}
              - conversationSuccess:
                - metadata: |2
                                      {"some-metadata-key": "some-value", "other-metadata-key": 1234}
              - outputAudioText:
                - text: some output text
              - outputAudioText:
                - ssml: |2
                                      <speak>Some example <say-as interpret-as="characters">SSML XML</say-as></speak>
              - liveAgentHandoff:
                - metadata: |2
                                      {"some-metadata-key": "some-value", "other-metadata-key": 1234}
              - playAudio:
                - audioUri: http://example.com/some-audio-file.mp3
              - telephonyTransferCall:
                - phoneNumber: 1-234-567-8901
              returnPartialResponses: true
              setParameterActions:
              - parameter: some-param
                value: "123.45"
              - parameter: another-param
                value: ${jsonencode("abc")}
              - parameter: other-param
                value: ${jsonencode(["foo"])}
              tag: some-tag
              webhookSelector:
                matchLabels:
                  testing.upbound.io/example-name: my_webhook
          - event: sys.no-match-2
            targetFlowSelector:
              matchLabels:
                testing.upbound.io/example-name: agent
          - event: sys.no-match-3
            targetPageSelector:
              matchLabels:
                testing.upbound.io/example-name: my_page2
        redact: "true"
        required: "true"
    parentSelector:
      matchLabels:
        testing.upbound.io/example-name: agent
    transitionRoutes:
    - condition: $page.params.status = 'FINAL'
      targetPageSelector:
        matchLabels:
          testing.upbound.io/example-name: my_page2
      triggerFulfillment:
      - conditionalCases:
        - cases: |-
            ${jsonencode([
                      {
                        condition = "$sys.func.RAND() < 0.5",
                        caseContent = [
                          {
                            message = { text = { text = ["First case"] } }
                          },
                          {
                            additionalCases = {
                              cases = [
                                {
                                  condition = "$sys.func.RAND() < 0.2"
                                  caseContent = [
                                    {
                                      message = { text = { text = ["Nested case"] } }
                                    }
                                  ]
                                }
                              ]
                            }
                          }
                        ]
                      },
                      {
                        caseContent = [
                          {
                            message = { text = { text = ["Final case"] } }
                          }
                        ]
                      },
                    ])}
        messages:
        - channel: some-channel
          text:
          - text:
            - information completed, navigating to page 2
        - payload: |2
                      {"some-key": "some-value", "other-key": ["other-value"]}
        - conversationSuccess:
          - metadata: |2
                          {"some-metadata-key": "some-value", "other-metadata-key": 1234}
        - outputAudioText:
          - text: some output text
        - outputAudioText:
          - ssml: |2
                          <speak>Some example <say-as interpret-as="characters">SSML XML</say-as></speak>
        - liveAgentHandoff:
          - metadata: |2
                          {"some-metadata-key": "some-value", "other-metadata-key": 1234}
        - playAudio:
          - audioUri: http://example.com/some-audio-file.mp3
        - telephonyTransferCall:
          - phoneNumber: 1-234-567-8901
        setParameterActions:
        - parameter: some-param
          value: "123.45"
        - parameter: another-param
          value: ${jsonencode("abc")}
        - parameter: other-param
          value: ${jsonencode(["foo"])}

---

apiVersion: dialogflowcx.gcp.upbound.io/v1beta1
kind: Agent
metadata:
  annotations:
    meta.upbound.io/example-id: dialogflowcx/v1beta1/page
  labels:
    testing.upbound.io/example-name: agent
  name: agent
spec:
  forProvider:
    avatarUri: https://cloud.google.com/_static/images/cloud/icons/favicons/onecloud/super_cloud.png
    defaultLanguageCode: en
    description: Example description.
    displayName: dialogflowcx-agent
    enableSpellCorrection: true
    enableStackdriverLogging: true
    location: global
    speechToTextSettings:
    - enableSpeechAdaptation: true
    supportedLanguageCodes:
    - fr
    - de
    - es
    timeZone: America/New_York

---

apiVersion: dialogflowcx.gcp.upbound.io/v1beta1
kind: Webhook
metadata:
  annotations:
    meta.upbound.io/example-id: dialogflowcx/v1beta1/page
  labels:
    testing.upbound.io/example-name: my_webhook
  name: my-webhook
spec:
  forProvider:
    displayName: MyWebhook
    genericWebService:
    - uri: https://example.com
    parentSelector:
      matchLabels:
        testing.upbound.io/example-name: agent
