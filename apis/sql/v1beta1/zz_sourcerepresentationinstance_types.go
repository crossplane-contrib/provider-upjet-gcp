// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SourceRepresentationInstanceInitParameters struct {

	// The CA certificate on the external server. Include only if SSL/TLS is used on the external server.
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`

	// The client certificate on the external server. Required only for server-client authentication. Include only if SSL/TLS is used on the external server.
	ClientCertificate *string `json:"clientCertificate,omitempty" tf:"client_certificate,omitempty"`

	// The private key file for the client certificate on the external server. Required only for server-client authentication. Include only if SSL/TLS is used on the external server.
	ClientKey *string `json:"clientKey,omitempty" tf:"client_key,omitempty"`

	// The MySQL version running on your source database server.
	// Possible values are: MYSQL_5_6, MYSQL_5_7, MYSQL_8_0, POSTGRES_9_6, POSTGRES_10, POSTGRES_11, POSTGRES_12, POSTGRES_13, POSTGRES_14.
	DatabaseVersion *string `json:"databaseVersion,omitempty" tf:"database_version,omitempty"`

	// A file in the bucket that contains the data from the external server.
	DumpFilePath *string `json:"dumpFilePath,omitempty" tf:"dump_file_path,omitempty"`

	// The externally accessible IPv4 address for the source database server.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// The externally accessible port for the source database server.
	// Defaults to 3306.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The Region in which the created instance should reside.
	// If it is not provided, the provider region is used.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The replication user account on the external server.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type SourceRepresentationInstanceObservation struct {

	// The CA certificate on the external server. Include only if SSL/TLS is used on the external server.
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`

	// The client certificate on the external server. Required only for server-client authentication. Include only if SSL/TLS is used on the external server.
	ClientCertificate *string `json:"clientCertificate,omitempty" tf:"client_certificate,omitempty"`

	// The private key file for the client certificate on the external server. Required only for server-client authentication. Include only if SSL/TLS is used on the external server.
	ClientKey *string `json:"clientKey,omitempty" tf:"client_key,omitempty"`

	// The MySQL version running on your source database server.
	// Possible values are: MYSQL_5_6, MYSQL_5_7, MYSQL_8_0, POSTGRES_9_6, POSTGRES_10, POSTGRES_11, POSTGRES_12, POSTGRES_13, POSTGRES_14.
	DatabaseVersion *string `json:"databaseVersion,omitempty" tf:"database_version,omitempty"`

	// A file in the bucket that contains the data from the external server.
	DumpFilePath *string `json:"dumpFilePath,omitempty" tf:"dump_file_path,omitempty"`

	// The externally accessible IPv4 address for the source database server.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// an identifier for the resource with format projects/{{project}}/instances/{{name}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The externally accessible port for the source database server.
	// Defaults to 3306.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The Region in which the created instance should reside.
	// If it is not provided, the provider region is used.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The replication user account on the external server.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type SourceRepresentationInstanceParameters struct {

	// The CA certificate on the external server. Include only if SSL/TLS is used on the external server.
	// +kubebuilder:validation:Optional
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`

	// The client certificate on the external server. Required only for server-client authentication. Include only if SSL/TLS is used on the external server.
	// +kubebuilder:validation:Optional
	ClientCertificate *string `json:"clientCertificate,omitempty" tf:"client_certificate,omitempty"`

	// The private key file for the client certificate on the external server. Required only for server-client authentication. Include only if SSL/TLS is used on the external server.
	// +kubebuilder:validation:Optional
	ClientKey *string `json:"clientKey,omitempty" tf:"client_key,omitempty"`

	// The MySQL version running on your source database server.
	// Possible values are: MYSQL_5_6, MYSQL_5_7, MYSQL_8_0, POSTGRES_9_6, POSTGRES_10, POSTGRES_11, POSTGRES_12, POSTGRES_13, POSTGRES_14.
	// +kubebuilder:validation:Optional
	DatabaseVersion *string `json:"databaseVersion,omitempty" tf:"database_version,omitempty"`

	// A file in the bucket that contains the data from the external server.
	// +kubebuilder:validation:Optional
	DumpFilePath *string `json:"dumpFilePath,omitempty" tf:"dump_file_path,omitempty"`

	// The externally accessible IPv4 address for the source database server.
	// +kubebuilder:validation:Optional
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// The password for the replication user account.
	// Note: This property is sensitive and will not be displayed in the plan.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// The externally accessible port for the source database server.
	// Defaults to 3306.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The Region in which the created instance should reside.
	// If it is not provided, the provider region is used.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The replication user account on the external server.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

// SourceRepresentationInstanceSpec defines the desired state of SourceRepresentationInstance
type SourceRepresentationInstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SourceRepresentationInstanceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SourceRepresentationInstanceInitParameters `json:"initProvider,omitempty"`
}

// SourceRepresentationInstanceStatus defines the observed state of SourceRepresentationInstance.
type SourceRepresentationInstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SourceRepresentationInstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SourceRepresentationInstance is the Schema for the SourceRepresentationInstances API. A source representation instance is a Cloud SQL instance that represents the source database server to the Cloud SQL replica.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type SourceRepresentationInstance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.databaseVersion) || (has(self.initProvider) && has(self.initProvider.databaseVersion))",message="spec.forProvider.databaseVersion is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.host) || (has(self.initProvider) && has(self.initProvider.host))",message="spec.forProvider.host is a required parameter"
	Spec   SourceRepresentationInstanceSpec   `json:"spec"`
	Status SourceRepresentationInstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SourceRepresentationInstanceList contains a list of SourceRepresentationInstances
type SourceRepresentationInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SourceRepresentationInstance `json:"items"`
}

// Repository type metadata.
var (
	SourceRepresentationInstance_Kind             = "SourceRepresentationInstance"
	SourceRepresentationInstance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SourceRepresentationInstance_Kind}.String()
	SourceRepresentationInstance_KindAPIVersion   = SourceRepresentationInstance_Kind + "." + CRDGroupVersion.String()
	SourceRepresentationInstance_GroupVersionKind = CRDGroupVersion.WithKind(SourceRepresentationInstance_Kind)
)

func init() {
	SchemeBuilder.Register(&SourceRepresentationInstance{}, &SourceRepresentationInstanceList{})
}
