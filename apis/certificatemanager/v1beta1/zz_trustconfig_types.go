// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AllowlistedCertificatesInitParameters struct {

	// PEM certificate that is allowlisted. The certificate can be up to 5k bytes, and must be a parseable X.509 certificate.
	PemCertificate *string `json:"pemCertificate,omitempty" tf:"pem_certificate,omitempty"`
}

type AllowlistedCertificatesObservation struct {

	// PEM certificate that is allowlisted. The certificate can be up to 5k bytes, and must be a parseable X.509 certificate.
	PemCertificate *string `json:"pemCertificate,omitempty" tf:"pem_certificate,omitempty"`
}

type AllowlistedCertificatesParameters struct {

	// PEM certificate that is allowlisted. The certificate can be up to 5k bytes, and must be a parseable X.509 certificate.
	// +kubebuilder:validation:Optional
	PemCertificate *string `json:"pemCertificate" tf:"pem_certificate,omitempty"`
}

type IntermediateCasInitParameters struct {

	// PEM root certificate of the PKI used for validation.
	// Each certificate provided in PEM format may occupy up to 5kB.
	// Note: This property is sensitive and will not be displayed in the plan.
	PemCertificateSecretRef *v1.SecretKeySelector `json:"pemCertificateSecretRef,omitempty" tf:"-"`
}

type IntermediateCasObservation struct {
}

type IntermediateCasParameters struct {

	// PEM root certificate of the PKI used for validation.
	// Each certificate provided in PEM format may occupy up to 5kB.
	// Note: This property is sensitive and will not be displayed in the plan.
	// +kubebuilder:validation:Optional
	PemCertificateSecretRef *v1.SecretKeySelector `json:"pemCertificateSecretRef,omitempty" tf:"-"`
}

type TrustAnchorsInitParameters struct {

	// PEM root certificate of the PKI used for validation.
	// Each certificate provided in PEM format may occupy up to 5kB.
	// Note: This property is sensitive and will not be displayed in the plan.
	PemCertificateSecretRef *v1.SecretKeySelector `json:"pemCertificateSecretRef,omitempty" tf:"-"`
}

type TrustAnchorsObservation struct {
}

type TrustAnchorsParameters struct {

	// PEM root certificate of the PKI used for validation.
	// Each certificate provided in PEM format may occupy up to 5kB.
	// Note: This property is sensitive and will not be displayed in the plan.
	// +kubebuilder:validation:Optional
	PemCertificateSecretRef *v1.SecretKeySelector `json:"pemCertificateSecretRef,omitempty" tf:"-"`
}

type TrustConfigInitParameters struct {

	// Allowlisted PEM-encoded certificates. A certificate matching an allowlisted certificate is always considered valid as long as
	// the certificate is parseable, proof of private key possession is established, and constraints on the certificate's SAN field are met.
	// Structure is documented below.
	AllowlistedCertificates []AllowlistedCertificatesInitParameters `json:"allowlistedCertificates,omitempty" tf:"allowlisted_certificates,omitempty"`

	// One or more paragraphs of text description of a trust config.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Set of label tags associated with the trust config.
	// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field effective_labels for all of the labels present on the resource.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Set of trust stores to perform validation against.
	// This field is supported when TrustConfig is configured with Load Balancers, currently not supported for SPIFFE certificate validation.
	// Structure is documented below.
	TrustStores []TrustStoresInitParameters `json:"trustStores,omitempty" tf:"trust_stores,omitempty"`
}

type TrustConfigObservation struct {

	// Allowlisted PEM-encoded certificates. A certificate matching an allowlisted certificate is always considered valid as long as
	// the certificate is parseable, proof of private key possession is established, and constraints on the certificate's SAN field are met.
	// Structure is documented below.
	AllowlistedCertificates []AllowlistedCertificatesObservation `json:"allowlistedCertificates,omitempty" tf:"allowlisted_certificates,omitempty"`

	// The creation timestamp of a TrustConfig.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// One or more paragraphs of text description of a trust config.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +mapType=granular
	EffectiveLabels map[string]*string `json:"effectiveLabels,omitempty" tf:"effective_labels,omitempty"`

	// an identifier for the resource with format projects/{{project}}/locations/{{location}}/trustConfigs/{{name}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Set of label tags associated with the trust config.
	// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field effective_labels for all of the labels present on the resource.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The trust config location.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	// +mapType=granular
	TerraformLabels map[string]*string `json:"terraformLabels,omitempty" tf:"terraform_labels,omitempty"`

	// Set of trust stores to perform validation against.
	// This field is supported when TrustConfig is configured with Load Balancers, currently not supported for SPIFFE certificate validation.
	// Structure is documented below.
	TrustStores []TrustStoresObservation `json:"trustStores,omitempty" tf:"trust_stores,omitempty"`

	// The last update timestamp of a TrustConfig.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type TrustConfigParameters struct {

	// Allowlisted PEM-encoded certificates. A certificate matching an allowlisted certificate is always considered valid as long as
	// the certificate is parseable, proof of private key possession is established, and constraints on the certificate's SAN field are met.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	AllowlistedCertificates []AllowlistedCertificatesParameters `json:"allowlistedCertificates,omitempty" tf:"allowlisted_certificates,omitempty"`

	// One or more paragraphs of text description of a trust config.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Set of label tags associated with the trust config.
	// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field effective_labels for all of the labels present on the resource.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The trust config location.
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Set of trust stores to perform validation against.
	// This field is supported when TrustConfig is configured with Load Balancers, currently not supported for SPIFFE certificate validation.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	TrustStores []TrustStoresParameters `json:"trustStores,omitempty" tf:"trust_stores,omitempty"`
}

type TrustStoresInitParameters struct {

	// Set of intermediate CA certificates used for the path building phase of chain validation.
	// The field is currently not supported if trust config is used for the workload certificate feature.
	// Structure is documented below.
	IntermediateCas []IntermediateCasInitParameters `json:"intermediateCas,omitempty" tf:"intermediate_cas,omitempty"`

	// List of Trust Anchors to be used while performing validation against a given TrustStore.
	// Structure is documented below.
	TrustAnchors []TrustAnchorsInitParameters `json:"trustAnchors,omitempty" tf:"trust_anchors,omitempty"`
}

type TrustStoresObservation struct {

	// Set of intermediate CA certificates used for the path building phase of chain validation.
	// The field is currently not supported if trust config is used for the workload certificate feature.
	// Structure is documented below.
	IntermediateCas []IntermediateCasParameters `json:"intermediateCas,omitempty" tf:"intermediate_cas,omitempty"`

	// List of Trust Anchors to be used while performing validation against a given TrustStore.
	// Structure is documented below.
	TrustAnchors []TrustAnchorsParameters `json:"trustAnchors,omitempty" tf:"trust_anchors,omitempty"`
}

type TrustStoresParameters struct {

	// Set of intermediate CA certificates used for the path building phase of chain validation.
	// The field is currently not supported if trust config is used for the workload certificate feature.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	IntermediateCas []IntermediateCasParameters `json:"intermediateCas,omitempty" tf:"intermediate_cas,omitempty"`

	// List of Trust Anchors to be used while performing validation against a given TrustStore.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	TrustAnchors []TrustAnchorsParameters `json:"trustAnchors,omitempty" tf:"trust_anchors,omitempty"`
}

// TrustConfigSpec defines the desired state of TrustConfig
type TrustConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TrustConfigParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TrustConfigInitParameters `json:"initProvider,omitempty"`
}

// TrustConfigStatus defines the observed state of TrustConfig.
type TrustConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TrustConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TrustConfig is the Schema for the TrustConfigs API. TrustConfig represents a resource that represents your Public Key Infrastructure (PKI) configuration in Certificate Manager for use in mutual TLS authentication scenarios.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type TrustConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TrustConfigSpec   `json:"spec"`
	Status            TrustConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TrustConfigList contains a list of TrustConfigs
type TrustConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TrustConfig `json:"items"`
}

// Repository type metadata.
var (
	TrustConfig_Kind             = "TrustConfig"
	TrustConfig_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TrustConfig_Kind}.String()
	TrustConfig_KindAPIVersion   = TrustConfig_Kind + "." + CRDGroupVersion.String()
	TrustConfig_GroupVersionKind = CRDGroupVersion.WithKind(TrustConfig_Kind)
)

func init() {
	SchemeBuilder.Register(&TrustConfig{}, &TrustConfigList{})
}
