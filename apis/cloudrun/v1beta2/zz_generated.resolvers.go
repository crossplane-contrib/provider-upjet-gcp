// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta2

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	apisresolver "github.com/upbound/provider-gcp/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *DomainMapping) ResolveReferences( // ResolveReferences of this DomainMapping.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	if mg.Spec.ForProvider.Metadata != nil {
		{
			m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "Project", "ProjectList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Metadata.Namespace),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.Metadata.NamespaceRef,
				Selector:     mg.Spec.ForProvider.Metadata.NamespaceSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Metadata.Namespace")
		}
		mg.Spec.ForProvider.Metadata.Namespace = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Metadata.NamespaceRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.Spec != nil {
		{
			m, l, err = apisresolver.GetManagedResource("cloudrun.gcp.upbound.io", "v1beta2", "Service", "ServiceList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Spec.RouteName),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.Spec.RouteNameRef,
				Selector:     mg.Spec.ForProvider.Spec.RouteNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Spec.RouteName")
		}
		mg.Spec.ForProvider.Spec.RouteName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Spec.RouteNameRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.Metadata != nil {
		{
			m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "Project", "ProjectList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Metadata.Namespace),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.Metadata.NamespaceRef,
				Selector:     mg.Spec.InitProvider.Metadata.NamespaceSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Metadata.Namespace")
		}
		mg.Spec.InitProvider.Metadata.Namespace = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Metadata.NamespaceRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.Spec != nil {
		{
			m, l, err = apisresolver.GetManagedResource("cloudrun.gcp.upbound.io", "v1beta2", "Service", "ServiceList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Spec.RouteName),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.Spec.RouteNameRef,
				Selector:     mg.Spec.InitProvider.Spec.RouteNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Spec.RouteName")
		}
		mg.Spec.InitProvider.Spec.RouteName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Spec.RouteNameRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this Service.
func (mg *Service) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	if mg.Spec.ForProvider.Metadata != nil {
		{
			m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "Project", "ProjectList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Metadata.Namespace),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.Metadata.NamespaceRef,
				Selector:     mg.Spec.ForProvider.Metadata.NamespaceSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Metadata.Namespace")
		}
		mg.Spec.ForProvider.Metadata.Namespace = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Metadata.NamespaceRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.Template != nil {
		if mg.Spec.ForProvider.Template.Spec != nil {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Template.Spec.Containers); i5++ {
				for i6 := 0; i6 < len(mg.Spec.ForProvider.Template.Spec.Containers[i5].Env); i6++ {
					if mg.Spec.ForProvider.Template.Spec.Containers[i5].Env[i6].ValueFrom != nil {
						if mg.Spec.ForProvider.Template.Spec.Containers[i5].Env[i6].ValueFrom.SecretKeyRef != nil {
							{
								m, l, err = apisresolver.GetManagedResource("secretmanager.gcp.upbound.io", "v1beta2", "Secret", "SecretList")
								if err != nil {
									return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
								}
								rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
									CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Template.Spec.Containers[i5].Env[i6].ValueFrom.SecretKeyRef.Name),
									Extract:      reference.ExternalName(),
									Reference:    mg.Spec.ForProvider.Template.Spec.Containers[i5].Env[i6].ValueFrom.SecretKeyRef.NameRef,
									Selector:     mg.Spec.ForProvider.Template.Spec.Containers[i5].Env[i6].ValueFrom.SecretKeyRef.NameSelector,
									To:           reference.To{List: l, Managed: m},
								})
							}
							if err != nil {
								return errors.Wrap(err, "mg.Spec.ForProvider.Template.Spec.Containers[i5].Env[i6].ValueFrom.SecretKeyRef.Name")
							}
							mg.Spec.ForProvider.Template.Spec.Containers[i5].Env[i6].ValueFrom.SecretKeyRef.Name = reference.ToPtrValue(rsp.ResolvedValue)
							mg.Spec.ForProvider.Template.Spec.Containers[i5].Env[i6].ValueFrom.SecretKeyRef.NameRef = rsp.ResolvedReference

						}
					}
				}
			}
		}
	}
	if mg.Spec.ForProvider.Template != nil {
		if mg.Spec.ForProvider.Template.Spec != nil {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Template.Spec.Volumes); i5++ {
				if mg.Spec.ForProvider.Template.Spec.Volumes[i5].Secret != nil {
					{
						m, l, err = apisresolver.GetManagedResource("secretmanager.gcp.upbound.io", "v1beta2", "Secret", "SecretList")
						if err != nil {
							return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
						}
						rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
							CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Template.Spec.Volumes[i5].Secret.SecretName),
							Extract:      reference.ExternalName(),
							Reference:    mg.Spec.ForProvider.Template.Spec.Volumes[i5].Secret.SecretNameRef,
							Selector:     mg.Spec.ForProvider.Template.Spec.Volumes[i5].Secret.SecretNameSelector,
							To:           reference.To{List: l, Managed: m},
						})
					}
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.Template.Spec.Volumes[i5].Secret.SecretName")
					}
					mg.Spec.ForProvider.Template.Spec.Volumes[i5].Secret.SecretName = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.Template.Spec.Volumes[i5].Secret.SecretNameRef = rsp.ResolvedReference

				}
			}
		}
	}
	if mg.Spec.InitProvider.Metadata != nil {
		{
			m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "Project", "ProjectList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Metadata.Namespace),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.Metadata.NamespaceRef,
				Selector:     mg.Spec.InitProvider.Metadata.NamespaceSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Metadata.Namespace")
		}
		mg.Spec.InitProvider.Metadata.Namespace = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Metadata.NamespaceRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.Template != nil {
		if mg.Spec.InitProvider.Template.Spec != nil {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.Template.Spec.Containers); i5++ {
				for i6 := 0; i6 < len(mg.Spec.InitProvider.Template.Spec.Containers[i5].Env); i6++ {
					if mg.Spec.InitProvider.Template.Spec.Containers[i5].Env[i6].ValueFrom != nil {
						if mg.Spec.InitProvider.Template.Spec.Containers[i5].Env[i6].ValueFrom.SecretKeyRef != nil {
							{
								m, l, err = apisresolver.GetManagedResource("secretmanager.gcp.upbound.io", "v1beta2", "Secret", "SecretList")
								if err != nil {
									return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
								}
								rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
									CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Template.Spec.Containers[i5].Env[i6].ValueFrom.SecretKeyRef.Name),
									Extract:      reference.ExternalName(),
									Reference:    mg.Spec.InitProvider.Template.Spec.Containers[i5].Env[i6].ValueFrom.SecretKeyRef.NameRef,
									Selector:     mg.Spec.InitProvider.Template.Spec.Containers[i5].Env[i6].ValueFrom.SecretKeyRef.NameSelector,
									To:           reference.To{List: l, Managed: m},
								})
							}
							if err != nil {
								return errors.Wrap(err, "mg.Spec.InitProvider.Template.Spec.Containers[i5].Env[i6].ValueFrom.SecretKeyRef.Name")
							}
							mg.Spec.InitProvider.Template.Spec.Containers[i5].Env[i6].ValueFrom.SecretKeyRef.Name = reference.ToPtrValue(rsp.ResolvedValue)
							mg.Spec.InitProvider.Template.Spec.Containers[i5].Env[i6].ValueFrom.SecretKeyRef.NameRef = rsp.ResolvedReference

						}
					}
				}
			}
		}
	}
	if mg.Spec.InitProvider.Template != nil {
		if mg.Spec.InitProvider.Template.Spec != nil {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.Template.Spec.Volumes); i5++ {
				if mg.Spec.InitProvider.Template.Spec.Volumes[i5].Secret != nil {
					{
						m, l, err = apisresolver.GetManagedResource("secretmanager.gcp.upbound.io", "v1beta2", "Secret", "SecretList")
						if err != nil {
							return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
						}
						rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
							CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Template.Spec.Volumes[i5].Secret.SecretName),
							Extract:      reference.ExternalName(),
							Reference:    mg.Spec.InitProvider.Template.Spec.Volumes[i5].Secret.SecretNameRef,
							Selector:     mg.Spec.InitProvider.Template.Spec.Volumes[i5].Secret.SecretNameSelector,
							To:           reference.To{List: l, Managed: m},
						})
					}
					if err != nil {
						return errors.Wrap(err, "mg.Spec.InitProvider.Template.Spec.Volumes[i5].Secret.SecretName")
					}
					mg.Spec.InitProvider.Template.Spec.Volumes[i5].Secret.SecretName = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.InitProvider.Template.Spec.Volumes[i5].Secret.SecretNameRef = rsp.ResolvedReference

				}
			}
		}
	}

	return nil
}

// ResolveReferences of this ServiceIAMMember.
func (mg *ServiceIAMMember) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Project),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ProjectRef,
			Selector:     mg.Spec.ForProvider.ProjectSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Project")
	}
	mg.Spec.ForProvider.Project = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("cloudrun.gcp.upbound.io", "v1beta2", "Service", "ServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Service),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ServiceRef,
			Selector:     mg.Spec.ForProvider.ServiceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Service")
	}
	mg.Spec.ForProvider.Service = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServiceRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Project),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ProjectRef,
			Selector:     mg.Spec.InitProvider.ProjectSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Project")
	}
	mg.Spec.InitProvider.Project = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("cloudrun.gcp.upbound.io", "v1beta2", "Service", "ServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Service),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ServiceRef,
			Selector:     mg.Spec.InitProvider.ServiceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Service")
	}
	mg.Spec.InitProvider.Service = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ServiceRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this V2Job.
func (mg *V2Job) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	if mg.Spec.ForProvider.Template != nil {
		if mg.Spec.ForProvider.Template.Template != nil {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Template.Template.Containers); i5++ {
				for i6 := 0; i6 < len(mg.Spec.ForProvider.Template.Template.Containers[i5].Env); i6++ {
					if mg.Spec.ForProvider.Template.Template.Containers[i5].Env[i6].ValueSource != nil {
						if mg.Spec.ForProvider.Template.Template.Containers[i5].Env[i6].ValueSource.SecretKeyRef != nil {
							{
								m, l, err = apisresolver.GetManagedResource("secretmanager.gcp.upbound.io", "v1beta2", "Secret", "SecretList")
								if err != nil {
									return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
								}
								rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
									CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Template.Template.Containers[i5].Env[i6].ValueSource.SecretKeyRef.Secret),
									Extract:      reference.ExternalName(),
									Reference:    mg.Spec.ForProvider.Template.Template.Containers[i5].Env[i6].ValueSource.SecretKeyRef.SecretRef,
									Selector:     mg.Spec.ForProvider.Template.Template.Containers[i5].Env[i6].ValueSource.SecretKeyRef.SecretSelector,
									To:           reference.To{List: l, Managed: m},
								})
							}
							if err != nil {
								return errors.Wrap(err, "mg.Spec.ForProvider.Template.Template.Containers[i5].Env[i6].ValueSource.SecretKeyRef.Secret")
							}
							mg.Spec.ForProvider.Template.Template.Containers[i5].Env[i6].ValueSource.SecretKeyRef.Secret = reference.ToPtrValue(rsp.ResolvedValue)
							mg.Spec.ForProvider.Template.Template.Containers[i5].Env[i6].ValueSource.SecretKeyRef.SecretRef = rsp.ResolvedReference

						}
					}
				}
			}
		}
	}
	if mg.Spec.ForProvider.Template != nil {
		if mg.Spec.ForProvider.Template.Template != nil {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Template.Template.Volumes); i5++ {
				if mg.Spec.ForProvider.Template.Template.Volumes[i5].CloudSQLInstance != nil {
					{
						m, l, err = apisresolver.GetManagedResource("sql.gcp.upbound.io", "v1beta2", "DatabaseInstance", "DatabaseInstanceList")
						if err != nil {
							return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
						}
						mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
							CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.Template.Template.Volumes[i5].CloudSQLInstance.Instances),
							Extract:       resource.ExtractParamPath("connection_name", true),
							References:    mg.Spec.ForProvider.Template.Template.Volumes[i5].CloudSQLInstance.InstancesRefs,
							Selector:      mg.Spec.ForProvider.Template.Template.Volumes[i5].CloudSQLInstance.InstancesSelector,
							To:            reference.To{List: l, Managed: m},
						})
					}
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.Template.Template.Volumes[i5].CloudSQLInstance.Instances")
					}
					mg.Spec.ForProvider.Template.Template.Volumes[i5].CloudSQLInstance.Instances = reference.ToPtrValues(mrsp.ResolvedValues)
					mg.Spec.ForProvider.Template.Template.Volumes[i5].CloudSQLInstance.InstancesRefs = mrsp.ResolvedReferences

				}
			}
		}
	}
	if mg.Spec.ForProvider.Template != nil {
		if mg.Spec.ForProvider.Template.Template != nil {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Template.Template.Volumes); i5++ {
				if mg.Spec.ForProvider.Template.Template.Volumes[i5].Secret != nil {
					{
						m, l, err = apisresolver.GetManagedResource("secretmanager.gcp.upbound.io", "v1beta2", "Secret", "SecretList")
						if err != nil {
							return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
						}
						rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
							CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Template.Template.Volumes[i5].Secret.Secret),
							Extract:      reference.ExternalName(),
							Reference:    mg.Spec.ForProvider.Template.Template.Volumes[i5].Secret.SecretRef,
							Selector:     mg.Spec.ForProvider.Template.Template.Volumes[i5].Secret.SecretSelector,
							To:           reference.To{List: l, Managed: m},
						})
					}
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.Template.Template.Volumes[i5].Secret.Secret")
					}
					mg.Spec.ForProvider.Template.Template.Volumes[i5].Secret.Secret = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.Template.Template.Volumes[i5].Secret.SecretRef = rsp.ResolvedReference

				}
			}
		}
	}
	if mg.Spec.InitProvider.Template != nil {
		if mg.Spec.InitProvider.Template.Template != nil {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.Template.Template.Containers); i5++ {
				for i6 := 0; i6 < len(mg.Spec.InitProvider.Template.Template.Containers[i5].Env); i6++ {
					if mg.Spec.InitProvider.Template.Template.Containers[i5].Env[i6].ValueSource != nil {
						if mg.Spec.InitProvider.Template.Template.Containers[i5].Env[i6].ValueSource.SecretKeyRef != nil {
							{
								m, l, err = apisresolver.GetManagedResource("secretmanager.gcp.upbound.io", "v1beta2", "Secret", "SecretList")
								if err != nil {
									return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
								}
								rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
									CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Template.Template.Containers[i5].Env[i6].ValueSource.SecretKeyRef.Secret),
									Extract:      reference.ExternalName(),
									Reference:    mg.Spec.InitProvider.Template.Template.Containers[i5].Env[i6].ValueSource.SecretKeyRef.SecretRef,
									Selector:     mg.Spec.InitProvider.Template.Template.Containers[i5].Env[i6].ValueSource.SecretKeyRef.SecretSelector,
									To:           reference.To{List: l, Managed: m},
								})
							}
							if err != nil {
								return errors.Wrap(err, "mg.Spec.InitProvider.Template.Template.Containers[i5].Env[i6].ValueSource.SecretKeyRef.Secret")
							}
							mg.Spec.InitProvider.Template.Template.Containers[i5].Env[i6].ValueSource.SecretKeyRef.Secret = reference.ToPtrValue(rsp.ResolvedValue)
							mg.Spec.InitProvider.Template.Template.Containers[i5].Env[i6].ValueSource.SecretKeyRef.SecretRef = rsp.ResolvedReference

						}
					}
				}
			}
		}
	}
	if mg.Spec.InitProvider.Template != nil {
		if mg.Spec.InitProvider.Template.Template != nil {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.Template.Template.Volumes); i5++ {
				if mg.Spec.InitProvider.Template.Template.Volumes[i5].CloudSQLInstance != nil {
					{
						m, l, err = apisresolver.GetManagedResource("sql.gcp.upbound.io", "v1beta2", "DatabaseInstance", "DatabaseInstanceList")
						if err != nil {
							return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
						}
						mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
							CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.Template.Template.Volumes[i5].CloudSQLInstance.Instances),
							Extract:       resource.ExtractParamPath("connection_name", true),
							References:    mg.Spec.InitProvider.Template.Template.Volumes[i5].CloudSQLInstance.InstancesRefs,
							Selector:      mg.Spec.InitProvider.Template.Template.Volumes[i5].CloudSQLInstance.InstancesSelector,
							To:            reference.To{List: l, Managed: m},
						})
					}
					if err != nil {
						return errors.Wrap(err, "mg.Spec.InitProvider.Template.Template.Volumes[i5].CloudSQLInstance.Instances")
					}
					mg.Spec.InitProvider.Template.Template.Volumes[i5].CloudSQLInstance.Instances = reference.ToPtrValues(mrsp.ResolvedValues)
					mg.Spec.InitProvider.Template.Template.Volumes[i5].CloudSQLInstance.InstancesRefs = mrsp.ResolvedReferences

				}
			}
		}
	}
	if mg.Spec.InitProvider.Template != nil {
		if mg.Spec.InitProvider.Template.Template != nil {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.Template.Template.Volumes); i5++ {
				if mg.Spec.InitProvider.Template.Template.Volumes[i5].Secret != nil {
					{
						m, l, err = apisresolver.GetManagedResource("secretmanager.gcp.upbound.io", "v1beta2", "Secret", "SecretList")
						if err != nil {
							return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
						}
						rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
							CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Template.Template.Volumes[i5].Secret.Secret),
							Extract:      reference.ExternalName(),
							Reference:    mg.Spec.InitProvider.Template.Template.Volumes[i5].Secret.SecretRef,
							Selector:     mg.Spec.InitProvider.Template.Template.Volumes[i5].Secret.SecretSelector,
							To:           reference.To{List: l, Managed: m},
						})
					}
					if err != nil {
						return errors.Wrap(err, "mg.Spec.InitProvider.Template.Template.Volumes[i5].Secret.Secret")
					}
					mg.Spec.InitProvider.Template.Template.Volumes[i5].Secret.Secret = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.InitProvider.Template.Template.Volumes[i5].Secret.SecretRef = rsp.ResolvedReference

				}
			}
		}
	}

	return nil
}

// ResolveReferences of this V2Service.
func (mg *V2Service) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	if mg.Spec.ForProvider.Template != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Template.Containers); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Template.Containers[i4].Env); i5++ {
				if mg.Spec.ForProvider.Template.Containers[i4].Env[i5].ValueSource != nil {
					if mg.Spec.ForProvider.Template.Containers[i4].Env[i5].ValueSource.SecretKeyRef != nil {
						{
							m, l, err = apisresolver.GetManagedResource("secretmanager.gcp.upbound.io", "v1beta2", "Secret", "SecretList")
							if err != nil {
								return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
							}
							rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
								CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Template.Containers[i4].Env[i5].ValueSource.SecretKeyRef.Secret),
								Extract:      reference.ExternalName(),
								Reference:    mg.Spec.ForProvider.Template.Containers[i4].Env[i5].ValueSource.SecretKeyRef.SecretRef,
								Selector:     mg.Spec.ForProvider.Template.Containers[i4].Env[i5].ValueSource.SecretKeyRef.SecretSelector,
								To:           reference.To{List: l, Managed: m},
							})
						}
						if err != nil {
							return errors.Wrap(err, "mg.Spec.ForProvider.Template.Containers[i4].Env[i5].ValueSource.SecretKeyRef.Secret")
						}
						mg.Spec.ForProvider.Template.Containers[i4].Env[i5].ValueSource.SecretKeyRef.Secret = reference.ToPtrValue(rsp.ResolvedValue)
						mg.Spec.ForProvider.Template.Containers[i4].Env[i5].ValueSource.SecretKeyRef.SecretRef = rsp.ResolvedReference

					}
				}
			}
		}
	}
	if mg.Spec.ForProvider.Template != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Template.Volumes); i4++ {
			if mg.Spec.ForProvider.Template.Volumes[i4].CloudSQLInstance != nil {
				{
					m, l, err = apisresolver.GetManagedResource("sql.gcp.upbound.io", "v1beta2", "DatabaseInstance", "DatabaseInstanceList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
						CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.Template.Volumes[i4].CloudSQLInstance.Instances),
						Extract:       resource.ExtractParamPath("connection_name", true),
						References:    mg.Spec.ForProvider.Template.Volumes[i4].CloudSQLInstance.InstancesRefs,
						Selector:      mg.Spec.ForProvider.Template.Volumes[i4].CloudSQLInstance.InstancesSelector,
						To:            reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.Template.Volumes[i4].CloudSQLInstance.Instances")
				}
				mg.Spec.ForProvider.Template.Volumes[i4].CloudSQLInstance.Instances = reference.ToPtrValues(mrsp.ResolvedValues)
				mg.Spec.ForProvider.Template.Volumes[i4].CloudSQLInstance.InstancesRefs = mrsp.ResolvedReferences

			}
		}
	}
	if mg.Spec.ForProvider.Template != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Template.Volumes); i4++ {
			if mg.Spec.ForProvider.Template.Volumes[i4].Gcs != nil {
				{
					m, l, err = apisresolver.GetManagedResource("storage.gcp.upbound.io", "v1beta2", "Bucket", "BucketList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Template.Volumes[i4].Gcs.Bucket),
						Extract:      reference.ExternalName(),
						Reference:    mg.Spec.ForProvider.Template.Volumes[i4].Gcs.BucketRef,
						Selector:     mg.Spec.ForProvider.Template.Volumes[i4].Gcs.BucketSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.Template.Volumes[i4].Gcs.Bucket")
				}
				mg.Spec.ForProvider.Template.Volumes[i4].Gcs.Bucket = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.ForProvider.Template.Volumes[i4].Gcs.BucketRef = rsp.ResolvedReference

			}
		}
	}
	if mg.Spec.ForProvider.Template != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Template.Volumes); i4++ {
			if mg.Spec.ForProvider.Template.Volumes[i4].Secret != nil {
				{
					m, l, err = apisresolver.GetManagedResource("secretmanager.gcp.upbound.io", "v1beta2", "Secret", "SecretList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Template.Volumes[i4].Secret.Secret),
						Extract:      reference.ExternalName(),
						Reference:    mg.Spec.ForProvider.Template.Volumes[i4].Secret.SecretRef,
						Selector:     mg.Spec.ForProvider.Template.Volumes[i4].Secret.SecretSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.Template.Volumes[i4].Secret.Secret")
				}
				mg.Spec.ForProvider.Template.Volumes[i4].Secret.Secret = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.ForProvider.Template.Volumes[i4].Secret.SecretRef = rsp.ResolvedReference

			}
		}
	}
	if mg.Spec.InitProvider.Template != nil {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Template.Containers); i4++ {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.Template.Containers[i4].Env); i5++ {
				if mg.Spec.InitProvider.Template.Containers[i4].Env[i5].ValueSource != nil {
					if mg.Spec.InitProvider.Template.Containers[i4].Env[i5].ValueSource.SecretKeyRef != nil {
						{
							m, l, err = apisresolver.GetManagedResource("secretmanager.gcp.upbound.io", "v1beta2", "Secret", "SecretList")
							if err != nil {
								return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
							}
							rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
								CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Template.Containers[i4].Env[i5].ValueSource.SecretKeyRef.Secret),
								Extract:      reference.ExternalName(),
								Reference:    mg.Spec.InitProvider.Template.Containers[i4].Env[i5].ValueSource.SecretKeyRef.SecretRef,
								Selector:     mg.Spec.InitProvider.Template.Containers[i4].Env[i5].ValueSource.SecretKeyRef.SecretSelector,
								To:           reference.To{List: l, Managed: m},
							})
						}
						if err != nil {
							return errors.Wrap(err, "mg.Spec.InitProvider.Template.Containers[i4].Env[i5].ValueSource.SecretKeyRef.Secret")
						}
						mg.Spec.InitProvider.Template.Containers[i4].Env[i5].ValueSource.SecretKeyRef.Secret = reference.ToPtrValue(rsp.ResolvedValue)
						mg.Spec.InitProvider.Template.Containers[i4].Env[i5].ValueSource.SecretKeyRef.SecretRef = rsp.ResolvedReference

					}
				}
			}
		}
	}
	if mg.Spec.InitProvider.Template != nil {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Template.Volumes); i4++ {
			if mg.Spec.InitProvider.Template.Volumes[i4].CloudSQLInstance != nil {
				{
					m, l, err = apisresolver.GetManagedResource("sql.gcp.upbound.io", "v1beta2", "DatabaseInstance", "DatabaseInstanceList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
						CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.Template.Volumes[i4].CloudSQLInstance.Instances),
						Extract:       resource.ExtractParamPath("connection_name", true),
						References:    mg.Spec.InitProvider.Template.Volumes[i4].CloudSQLInstance.InstancesRefs,
						Selector:      mg.Spec.InitProvider.Template.Volumes[i4].CloudSQLInstance.InstancesSelector,
						To:            reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.InitProvider.Template.Volumes[i4].CloudSQLInstance.Instances")
				}
				mg.Spec.InitProvider.Template.Volumes[i4].CloudSQLInstance.Instances = reference.ToPtrValues(mrsp.ResolvedValues)
				mg.Spec.InitProvider.Template.Volumes[i4].CloudSQLInstance.InstancesRefs = mrsp.ResolvedReferences

			}
		}
	}
	if mg.Spec.InitProvider.Template != nil {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Template.Volumes); i4++ {
			if mg.Spec.InitProvider.Template.Volumes[i4].Gcs != nil {
				{
					m, l, err = apisresolver.GetManagedResource("storage.gcp.upbound.io", "v1beta2", "Bucket", "BucketList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Template.Volumes[i4].Gcs.Bucket),
						Extract:      reference.ExternalName(),
						Reference:    mg.Spec.InitProvider.Template.Volumes[i4].Gcs.BucketRef,
						Selector:     mg.Spec.InitProvider.Template.Volumes[i4].Gcs.BucketSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.InitProvider.Template.Volumes[i4].Gcs.Bucket")
				}
				mg.Spec.InitProvider.Template.Volumes[i4].Gcs.Bucket = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.InitProvider.Template.Volumes[i4].Gcs.BucketRef = rsp.ResolvedReference

			}
		}
	}
	if mg.Spec.InitProvider.Template != nil {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Template.Volumes); i4++ {
			if mg.Spec.InitProvider.Template.Volumes[i4].Secret != nil {
				{
					m, l, err = apisresolver.GetManagedResource("secretmanager.gcp.upbound.io", "v1beta2", "Secret", "SecretList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Template.Volumes[i4].Secret.Secret),
						Extract:      reference.ExternalName(),
						Reference:    mg.Spec.InitProvider.Template.Volumes[i4].Secret.SecretRef,
						Selector:     mg.Spec.InitProvider.Template.Volumes[i4].Secret.SecretSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.InitProvider.Template.Volumes[i4].Secret.Secret")
				}
				mg.Spec.InitProvider.Template.Volumes[i4].Secret.Secret = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.InitProvider.Template.Volumes[i4].Secret.SecretRef = rsp.ResolvedReference

			}
		}
	}

	return nil
}
