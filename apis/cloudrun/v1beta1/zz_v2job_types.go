// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BinaryAuthorizationInitParameters struct {

	// If present, indicates to use Breakglass using this justification. If useDefault is False, then it must be empty. For more information on breakglass, see https://cloud.google.com/binary-authorization/docs/using-breakglass
	BreakglassJustification *string `json:"breakglassJustification,omitempty" tf:"breakglass_justification,omitempty"`

	// If True, indicates to use the default project's binary authorization policy. If False, binary authorization will be disabled.
	UseDefault *bool `json:"useDefault,omitempty" tf:"use_default,omitempty"`
}

type BinaryAuthorizationObservation struct {

	// If present, indicates to use Breakglass using this justification. If useDefault is False, then it must be empty. For more information on breakglass, see https://cloud.google.com/binary-authorization/docs/using-breakglass
	BreakglassJustification *string `json:"breakglassJustification,omitempty" tf:"breakglass_justification,omitempty"`

	// If True, indicates to use the default project's binary authorization policy. If False, binary authorization will be disabled.
	UseDefault *bool `json:"useDefault,omitempty" tf:"use_default,omitempty"`
}

type BinaryAuthorizationParameters struct {

	// If present, indicates to use Breakglass using this justification. If useDefault is False, then it must be empty. For more information on breakglass, see https://cloud.google.com/binary-authorization/docs/using-breakglass
	// +kubebuilder:validation:Optional
	BreakglassJustification *string `json:"breakglassJustification,omitempty" tf:"breakglass_justification,omitempty"`

	// If True, indicates to use the default project's binary authorization policy. If False, binary authorization will be disabled.
	// +kubebuilder:validation:Optional
	UseDefault *bool `json:"useDefault,omitempty" tf:"use_default,omitempty"`
}

type CloudSQLInstanceInitParameters struct {

	// The Cloud SQL instance connection names, as can be found in https://console.cloud.google.com/sql/instances. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run. Format: {project}:{location}:{instance}
	Instances []*string `json:"instances,omitempty" tf:"instances,omitempty"`
}

type CloudSQLInstanceObservation struct {

	// The Cloud SQL instance connection names, as can be found in https://console.cloud.google.com/sql/instances. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run. Format: {project}:{location}:{instance}
	Instances []*string `json:"instances,omitempty" tf:"instances,omitempty"`
}

type CloudSQLInstanceParameters struct {

	// The Cloud SQL instance connection names, as can be found in https://console.cloud.google.com/sql/instances. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run. Format: {project}:{location}:{instance}
	// +kubebuilder:validation:Optional
	Instances []*string `json:"instances,omitempty" tf:"instances,omitempty"`
}

type ContainersEnvInitParameters struct {

	// Volume's name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any route environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "", and the maximum length is 32768 bytes
	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	// Source for the environment variable's value.
	// Structure is documented below.
	ValueSource []ValueSourceInitParameters `json:"valueSource,omitempty" tf:"value_source,omitempty"`
}

type ContainersEnvObservation struct {

	// Volume's name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any route environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "", and the maximum length is 32768 bytes
	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	// Source for the environment variable's value.
	// Structure is documented below.
	ValueSource []ValueSourceObservation `json:"valueSource,omitempty" tf:"value_source,omitempty"`
}

type ContainersEnvParameters struct {

	// Volume's name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any route environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "", and the maximum length is 32768 bytes
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	// Source for the environment variable's value.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	ValueSource []ValueSourceParameters `json:"valueSource,omitempty" tf:"value_source,omitempty"`
}

type ContainersPortsInitParameters struct {

	// Port number the container listens on. This must be a valid TCP port number, 0 < containerPort < 65536.
	ContainerPort *float64 `json:"containerPort,omitempty" tf:"container_port,omitempty"`

	// Volume's name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ContainersPortsObservation struct {

	// Port number the container listens on. This must be a valid TCP port number, 0 < containerPort < 65536.
	ContainerPort *float64 `json:"containerPort,omitempty" tf:"container_port,omitempty"`

	// Volume's name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ContainersPortsParameters struct {

	// Port number the container listens on. This must be a valid TCP port number, 0 < containerPort < 65536.
	// +kubebuilder:validation:Optional
	ContainerPort *float64 `json:"containerPort,omitempty" tf:"container_port,omitempty"`

	// Volume's name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ContainersResourcesInitParameters struct {

	// Only memory and CPU are supported. Use key cpu for CPU limit and memory for memory limit. Note: The only supported values for CPU are '1', '2', '4', and '8'. Setting 4 CPU requires at least 2Gi of memory. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
	// +mapType=granular
	Limits map[string]*string `json:"limits,omitempty" tf:"limits,omitempty"`
}

type ContainersResourcesObservation struct {

	// Only memory and CPU are supported. Use key cpu for CPU limit and memory for memory limit. Note: The only supported values for CPU are '1', '2', '4', and '8'. Setting 4 CPU requires at least 2Gi of memory. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
	// +mapType=granular
	Limits map[string]*string `json:"limits,omitempty" tf:"limits,omitempty"`
}

type ContainersResourcesParameters struct {

	// Only memory and CPU are supported. Use key cpu for CPU limit and memory for memory limit. Note: The only supported values for CPU are '1', '2', '4', and '8'. Setting 4 CPU requires at least 2Gi of memory. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Limits map[string]*string `json:"limits,omitempty" tf:"limits,omitempty"`
}

type ContainersVolumeMountsInitParameters struct {

	// Path within the container at which the volume should be mounted. Must not contain ':'. For Cloud SQL volumes, it can be left empty, or must otherwise be /cloudsql. All instances defined in the Volume will be available as /cloudsql/[instance]. For more information on Cloud SQL volumes, visit https://cloud.google.com/sql/docs/mysql/connect-run
	MountPath *string `json:"mountPath,omitempty" tf:"mount_path,omitempty"`

	// Volume's name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ContainersVolumeMountsObservation struct {

	// Path within the container at which the volume should be mounted. Must not contain ':'. For Cloud SQL volumes, it can be left empty, or must otherwise be /cloudsql. All instances defined in the Volume will be available as /cloudsql/[instance]. For more information on Cloud SQL volumes, visit https://cloud.google.com/sql/docs/mysql/connect-run
	MountPath *string `json:"mountPath,omitempty" tf:"mount_path,omitempty"`

	// Volume's name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ContainersVolumeMountsParameters struct {

	// Path within the container at which the volume should be mounted. Must not contain ':'. For Cloud SQL volumes, it can be left empty, or must otherwise be /cloudsql. All instances defined in the Volume will be available as /cloudsql/[instance]. For more information on Cloud SQL volumes, visit https://cloud.google.com/sql/docs/mysql/connect-run
	// +kubebuilder:validation:Optional
	MountPath *string `json:"mountPath" tf:"mount_path,omitempty"`

	// Volume's name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`
}

type LatestCreatedExecutionInitParameters struct {
}

type LatestCreatedExecutionObservation struct {

	// (Output)
	// Completion timestamp of the execution.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CompletionTime *string `json:"completionTime,omitempty" tf:"completion_time,omitempty"`

	// (Output)
	// Creation timestamp of the execution.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// (Output)
	// Name of the execution.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type LatestCreatedExecutionParameters struct {
}

type NetworkInterfacesInitParameters struct {

	// The VPC network that the Cloud Run resource will be able to send traffic to. At least one of network or subnetwork must be specified. If both
	// network and subnetwork are specified, the given VPC subnetwork must belong to the given VPC network. If network is not specified, it will be
	// looked up from the subnetwork.
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// The VPC subnetwork that the Cloud Run resource will get IPs from. At least one of network or subnetwork must be specified. If both
	// network and subnetwork are specified, the given VPC subnetwork must belong to the given VPC network. If subnetwork is not specified, the
	// subnetwork with the same name with the network will be used.
	Subnetwork *string `json:"subnetwork,omitempty" tf:"subnetwork,omitempty"`

	// Network tags applied to this Cloud Run job.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type NetworkInterfacesObservation struct {

	// The VPC network that the Cloud Run resource will be able to send traffic to. At least one of network or subnetwork must be specified. If both
	// network and subnetwork are specified, the given VPC subnetwork must belong to the given VPC network. If network is not specified, it will be
	// looked up from the subnetwork.
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// The VPC subnetwork that the Cloud Run resource will get IPs from. At least one of network or subnetwork must be specified. If both
	// network and subnetwork are specified, the given VPC subnetwork must belong to the given VPC network. If subnetwork is not specified, the
	// subnetwork with the same name with the network will be used.
	Subnetwork *string `json:"subnetwork,omitempty" tf:"subnetwork,omitempty"`

	// Network tags applied to this Cloud Run job.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type NetworkInterfacesParameters struct {

	// The VPC network that the Cloud Run resource will be able to send traffic to. At least one of network or subnetwork must be specified. If both
	// network and subnetwork are specified, the given VPC subnetwork must belong to the given VPC network. If network is not specified, it will be
	// looked up from the subnetwork.
	// +kubebuilder:validation:Optional
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// The VPC subnetwork that the Cloud Run resource will get IPs from. At least one of network or subnetwork must be specified. If both
	// network and subnetwork are specified, the given VPC subnetwork must belong to the given VPC network. If subnetwork is not specified, the
	// subnetwork with the same name with the network will be used.
	// +kubebuilder:validation:Optional
	Subnetwork *string `json:"subnetwork,omitempty" tf:"subnetwork,omitempty"`

	// Network tags applied to this Cloud Run job.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type SecretItemsInitParameters struct {

	// Integer octal mode bits to use on this file, must be a value between 01 and 0777 (octal). If 0 or not set, the Volume's default mode will be used.
	Mode *float64 `json:"mode,omitempty" tf:"mode,omitempty"`

	// The relative path of the secret in the container.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type SecretItemsObservation struct {

	// Integer octal mode bits to use on this file, must be a value between 01 and 0777 (octal). If 0 or not set, the Volume's default mode will be used.
	Mode *float64 `json:"mode,omitempty" tf:"mode,omitempty"`

	// The relative path of the secret in the container.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type SecretItemsParameters struct {

	// Integer octal mode bits to use on this file, must be a value between 01 and 0777 (octal). If 0 or not set, the Volume's default mode will be used.
	// +kubebuilder:validation:Optional
	Mode *float64 `json:"mode,omitempty" tf:"mode,omitempty"`

	// The relative path of the secret in the container.
	// +kubebuilder:validation:Optional
	Path *string `json:"path" tf:"path,omitempty"`

	// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
	// +kubebuilder:validation:Optional
	Version *string `json:"version" tf:"version,omitempty"`
}

type TemplateContainersInitParameters struct {

	// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Args []*string `json:"args,omitempty" tf:"args,omitempty"`

	// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Command []*string `json:"command,omitempty" tf:"command,omitempty"`

	// List of environment variables to set in the container.
	// Structure is documented below.
	Env []ContainersEnvInitParameters `json:"env,omitempty" tf:"env,omitempty"`

	// URL of the Container image in Google Container Registry or Google Artifact Registry. More info: https://kubernetes.io/docs/concepts/containers/images
	Image *string `json:"image,omitempty" tf:"image,omitempty"`

	// Volume's name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible.
	// If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on
	// Structure is documented below.
	Ports []ContainersPortsInitParameters `json:"ports,omitempty" tf:"ports,omitempty"`

	// Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
	// Structure is documented below.
	Resources []ContainersResourcesInitParameters `json:"resources,omitempty" tf:"resources,omitempty"`

	// Volume to mount into the container's filesystem.
	// Structure is documented below.
	VolumeMounts []ContainersVolumeMountsInitParameters `json:"volumeMounts,omitempty" tf:"volume_mounts,omitempty"`

	// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.
	WorkingDir *string `json:"workingDir,omitempty" tf:"working_dir,omitempty"`
}

type TemplateContainersObservation struct {

	// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Args []*string `json:"args,omitempty" tf:"args,omitempty"`

	// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Command []*string `json:"command,omitempty" tf:"command,omitempty"`

	// List of environment variables to set in the container.
	// Structure is documented below.
	Env []ContainersEnvObservation `json:"env,omitempty" tf:"env,omitempty"`

	// URL of the Container image in Google Container Registry or Google Artifact Registry. More info: https://kubernetes.io/docs/concepts/containers/images
	Image *string `json:"image,omitempty" tf:"image,omitempty"`

	// Volume's name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible.
	// If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on
	// Structure is documented below.
	Ports []ContainersPortsObservation `json:"ports,omitempty" tf:"ports,omitempty"`

	// Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
	// Structure is documented below.
	Resources []ContainersResourcesObservation `json:"resources,omitempty" tf:"resources,omitempty"`

	// Volume to mount into the container's filesystem.
	// Structure is documented below.
	VolumeMounts []ContainersVolumeMountsObservation `json:"volumeMounts,omitempty" tf:"volume_mounts,omitempty"`

	// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.
	WorkingDir *string `json:"workingDir,omitempty" tf:"working_dir,omitempty"`
}

type TemplateContainersParameters struct {

	// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	// +kubebuilder:validation:Optional
	Args []*string `json:"args,omitempty" tf:"args,omitempty"`

	// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	// +kubebuilder:validation:Optional
	Command []*string `json:"command,omitempty" tf:"command,omitempty"`

	// List of environment variables to set in the container.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Env []ContainersEnvParameters `json:"env,omitempty" tf:"env,omitempty"`

	// URL of the Container image in Google Container Registry or Google Artifact Registry. More info: https://kubernetes.io/docs/concepts/containers/images
	// +kubebuilder:validation:Optional
	Image *string `json:"image" tf:"image,omitempty"`

	// Volume's name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible.
	// If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Ports []ContainersPortsParameters `json:"ports,omitempty" tf:"ports,omitempty"`

	// Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Resources []ContainersResourcesParameters `json:"resources,omitempty" tf:"resources,omitempty"`

	// Volume to mount into the container's filesystem.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	VolumeMounts []ContainersVolumeMountsParameters `json:"volumeMounts,omitempty" tf:"volume_mounts,omitempty"`

	// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.
	// +kubebuilder:validation:Optional
	WorkingDir *string `json:"workingDir,omitempty" tf:"working_dir,omitempty"`
}

type TemplateTemplateInitParameters struct {

	// Holds the single container that defines the unit of execution for this task.
	// Structure is documented below.
	Containers []TemplateContainersInitParameters `json:"containers,omitempty" tf:"containers,omitempty"`

	// A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek
	EncryptionKey *string `json:"encryptionKey,omitempty" tf:"encryption_key,omitempty"`

	// The execution environment being used to host this Task.
	// Possible values are: EXECUTION_ENVIRONMENT_GEN1, EXECUTION_ENVIRONMENT_GEN2.
	ExecutionEnvironment *string `json:"executionEnvironment,omitempty" tf:"execution_environment,omitempty"`

	// Number of retries allowed per Task, before marking this Task failed.
	MaxRetries *float64 `json:"maxRetries,omitempty" tf:"max_retries,omitempty"`

	// Email address of the IAM service account associated with the Task of a Job. The service account represents the identity of the running task, and determines what permissions the task has. If not provided, the task will use the project's default service account.
	ServiceAccount *string `json:"serviceAccount,omitempty" tf:"service_account,omitempty"`

	// Max allowed time duration the Task may be active before the system will actively try to mark it failed and kill associated containers. This applies per attempt of a task, meaning each retry can run for the full timeout.
	// A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// VPC Access configuration to use for this Task. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.
	// Structure is documented below.
	VPCAccess []VPCAccessInitParameters `json:"vpcAccess,omitempty" tf:"vpc_access,omitempty"`

	// A list of Volumes to make available to containers.
	// Structure is documented below.
	Volumes []TemplateVolumesInitParameters `json:"volumes,omitempty" tf:"volumes,omitempty"`
}

type TemplateTemplateObservation struct {

	// Holds the single container that defines the unit of execution for this task.
	// Structure is documented below.
	Containers []TemplateContainersObservation `json:"containers,omitempty" tf:"containers,omitempty"`

	// A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek
	EncryptionKey *string `json:"encryptionKey,omitempty" tf:"encryption_key,omitempty"`

	// The execution environment being used to host this Task.
	// Possible values are: EXECUTION_ENVIRONMENT_GEN1, EXECUTION_ENVIRONMENT_GEN2.
	ExecutionEnvironment *string `json:"executionEnvironment,omitempty" tf:"execution_environment,omitempty"`

	// Number of retries allowed per Task, before marking this Task failed.
	MaxRetries *float64 `json:"maxRetries,omitempty" tf:"max_retries,omitempty"`

	// Email address of the IAM service account associated with the Task of a Job. The service account represents the identity of the running task, and determines what permissions the task has. If not provided, the task will use the project's default service account.
	ServiceAccount *string `json:"serviceAccount,omitempty" tf:"service_account,omitempty"`

	// Max allowed time duration the Task may be active before the system will actively try to mark it failed and kill associated containers. This applies per attempt of a task, meaning each retry can run for the full timeout.
	// A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// VPC Access configuration to use for this Task. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.
	// Structure is documented below.
	VPCAccess []VPCAccessObservation `json:"vpcAccess,omitempty" tf:"vpc_access,omitempty"`

	// A list of Volumes to make available to containers.
	// Structure is documented below.
	Volumes []TemplateVolumesObservation `json:"volumes,omitempty" tf:"volumes,omitempty"`
}

type TemplateTemplateParameters struct {

	// Holds the single container that defines the unit of execution for this task.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Containers []TemplateContainersParameters `json:"containers,omitempty" tf:"containers,omitempty"`

	// A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek
	// +kubebuilder:validation:Optional
	EncryptionKey *string `json:"encryptionKey,omitempty" tf:"encryption_key,omitempty"`

	// The execution environment being used to host this Task.
	// Possible values are: EXECUTION_ENVIRONMENT_GEN1, EXECUTION_ENVIRONMENT_GEN2.
	// +kubebuilder:validation:Optional
	ExecutionEnvironment *string `json:"executionEnvironment,omitempty" tf:"execution_environment,omitempty"`

	// Number of retries allowed per Task, before marking this Task failed.
	// +kubebuilder:validation:Optional
	MaxRetries *float64 `json:"maxRetries,omitempty" tf:"max_retries,omitempty"`

	// Email address of the IAM service account associated with the Task of a Job. The service account represents the identity of the running task, and determines what permissions the task has. If not provided, the task will use the project's default service account.
	// +kubebuilder:validation:Optional
	ServiceAccount *string `json:"serviceAccount,omitempty" tf:"service_account,omitempty"`

	// Max allowed time duration the Task may be active before the system will actively try to mark it failed and kill associated containers. This applies per attempt of a task, meaning each retry can run for the full timeout.
	// A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
	// +kubebuilder:validation:Optional
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// VPC Access configuration to use for this Task. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	VPCAccess []VPCAccessParameters `json:"vpcAccess,omitempty" tf:"vpc_access,omitempty"`

	// A list of Volumes to make available to containers.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Volumes []TemplateVolumesParameters `json:"volumes,omitempty" tf:"volumes,omitempty"`
}

type TemplateVolumesInitParameters struct {

	// For Cloud SQL volumes, contains the specific instances that should be mounted. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run.
	// Structure is documented below.
	CloudSQLInstance []CloudSQLInstanceInitParameters `json:"cloudSqlInstance,omitempty" tf:"cloud_sql_instance,omitempty"`

	// Volume's name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	// Structure is documented below.
	Secret []VolumesSecretInitParameters `json:"secret,omitempty" tf:"secret,omitempty"`
}

type TemplateVolumesObservation struct {

	// For Cloud SQL volumes, contains the specific instances that should be mounted. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run.
	// Structure is documented below.
	CloudSQLInstance []CloudSQLInstanceObservation `json:"cloudSqlInstance,omitempty" tf:"cloud_sql_instance,omitempty"`

	// Volume's name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	// Structure is documented below.
	Secret []VolumesSecretObservation `json:"secret,omitempty" tf:"secret,omitempty"`
}

type TemplateVolumesParameters struct {

	// For Cloud SQL volumes, contains the specific instances that should be mounted. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	CloudSQLInstance []CloudSQLInstanceParameters `json:"cloudSqlInstance,omitempty" tf:"cloud_sql_instance,omitempty"`

	// Volume's name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Secret []VolumesSecretParameters `json:"secret,omitempty" tf:"secret,omitempty"`
}

type TerminalConditionInitParameters struct {
}

type TerminalConditionObservation struct {

	// (Output)
	// A reason for the execution condition.
	ExecutionReason *string `json:"executionReason,omitempty" tf:"execution_reason,omitempty"`

	// (Output)
	// Last time the condition transitioned from one status to another.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	LastTransitionTime *string `json:"lastTransitionTime,omitempty" tf:"last_transition_time,omitempty"`

	// (Output)
	// Human readable message indicating details about the current status.
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// (Output)
	// A common (service-level) reason for this condition.
	Reason *string `json:"reason,omitempty" tf:"reason,omitempty"`

	// (Output)
	// A reason for the revision condition.
	RevisionReason *string `json:"revisionReason,omitempty" tf:"revision_reason,omitempty"`

	// (Output)
	// How to interpret failures of this condition, one of Error, Warning, Info
	Severity *string `json:"severity,omitempty" tf:"severity,omitempty"`

	// (Output)
	// State of the condition.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// (Output)
	// type is used to communicate the status of the reconciliation process. See also: https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting Types common to all resources include: * "Ready": True when the Resource is ready.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TerminalConditionParameters struct {
}

type V2JobConditionsInitParameters struct {
}

type V2JobConditionsObservation struct {

	// (Output)
	// A reason for the execution condition.
	ExecutionReason *string `json:"executionReason,omitempty" tf:"execution_reason,omitempty"`

	// (Output)
	// Last time the condition transitioned from one status to another.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	LastTransitionTime *string `json:"lastTransitionTime,omitempty" tf:"last_transition_time,omitempty"`

	// (Output)
	// Human readable message indicating details about the current status.
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// (Output)
	// A common (service-level) reason for this condition.
	Reason *string `json:"reason,omitempty" tf:"reason,omitempty"`

	// (Output)
	// A reason for the revision condition.
	RevisionReason *string `json:"revisionReason,omitempty" tf:"revision_reason,omitempty"`

	// (Output)
	// How to interpret failures of this condition, one of Error, Warning, Info
	Severity *string `json:"severity,omitempty" tf:"severity,omitempty"`

	// (Output)
	// State of the condition.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// (Output)
	// type is used to communicate the status of the reconciliation process. See also: https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting Types common to all resources include: * "Ready": True when the Resource is ready.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type V2JobConditionsParameters struct {
}

type V2JobInitParameters struct {

	// Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.
	// Cloud Run API v2 does not support annotations with run.googleapis.com, cloud.googleapis.com, serving.knative.dev, or autoscaling.knative.dev namespaces, and they will be rejected.
	// All system annotations in v1 now have a corresponding field in v2 ExecutionTemplate.
	// This field follows Kubernetes annotations' namespacing, limits, and rules.
	// +mapType=granular
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Settings for the Binary Authorization feature.
	// Structure is documented below.
	BinaryAuthorization []BinaryAuthorizationInitParameters `json:"binaryAuthorization,omitempty" tf:"binary_authorization,omitempty"`

	// Arbitrary identifier for the API client.
	Client *string `json:"client,omitempty" tf:"client,omitempty"`

	// Arbitrary version identifier for the API client.
	ClientVersion *string `json:"clientVersion,omitempty" tf:"client_version,omitempty"`

	// Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter,
	// or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or
	// https://cloud.google.com/run/docs/configuring/labels.
	// Cloud Run API v2 does not support labels with run.googleapis.com, cloud.googleapis.com, serving.knative.dev, or autoscaling.knative.dev namespaces, and they will be rejected.
	// All system labels in v1 now have a corresponding field in v2 ExecutionTemplate.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The launch stage as defined by Google Cloud Platform Launch Stages. Cloud Run supports ALPHA, BETA, and GA.
	// If no value is specified, GA is assumed. Set the launch stage to a preview stage on input to allow use of preview features in that stage. On read (or output), describes whether the resource uses preview features.
	// For example, if ALPHA is provided as input, but only BETA and GA-level features are used, this field will be BETA on output.
	// Possible values are: UNIMPLEMENTED, PRELAUNCH, EARLY_ACCESS, ALPHA, BETA, GA, DEPRECATED.
	LaunchStage *string `json:"launchStage,omitempty" tf:"launch_stage,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The template used to create executions for this Job.
	// Structure is documented below.
	Template []V2JobTemplateInitParameters `json:"template,omitempty" tf:"template,omitempty"`
}

type V2JobObservation struct {

	// Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.
	// Cloud Run API v2 does not support annotations with run.googleapis.com, cloud.googleapis.com, serving.knative.dev, or autoscaling.knative.dev namespaces, and they will be rejected.
	// All system annotations in v1 now have a corresponding field in v2 ExecutionTemplate.
	// This field follows Kubernetes annotations' namespacing, limits, and rules.
	// +mapType=granular
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Settings for the Binary Authorization feature.
	// Structure is documented below.
	BinaryAuthorization []BinaryAuthorizationObservation `json:"binaryAuthorization,omitempty" tf:"binary_authorization,omitempty"`

	// Arbitrary identifier for the API client.
	Client *string `json:"client,omitempty" tf:"client,omitempty"`

	// Arbitrary version identifier for the API client.
	ClientVersion *string `json:"clientVersion,omitempty" tf:"client_version,omitempty"`

	// The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the Job does not reach its desired state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
	// Structure is documented below.
	Conditions []V2JobConditionsObservation `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// The creation time.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Email address of the authenticated creator.
	Creator *string `json:"creator,omitempty" tf:"creator,omitempty"`

	// The deletion time.
	DeleteTime *string `json:"deleteTime,omitempty" tf:"delete_time,omitempty"`

	// +mapType=granular
	EffectiveAnnotations map[string]*string `json:"effectiveAnnotations,omitempty" tf:"effective_annotations,omitempty"`

	// +mapType=granular
	EffectiveLabels map[string]*string `json:"effectiveLabels,omitempty" tf:"effective_labels,omitempty"`

	// A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	// Number of executions created for this job.
	ExecutionCount *float64 `json:"executionCount,omitempty" tf:"execution_count,omitempty"`

	// For a deleted resource, the time after which it will be permamently deleted.
	ExpireTime *string `json:"expireTime,omitempty" tf:"expire_time,omitempty"`

	// A number that monotonically increases every time the user modifies the desired state.
	Generation *string `json:"generation,omitempty" tf:"generation,omitempty"`

	// an identifier for the resource with format projects/{{project}}/locations/{{location}}/jobs/{{name}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter,
	// or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or
	// https://cloud.google.com/run/docs/configuring/labels.
	// Cloud Run API v2 does not support labels with run.googleapis.com, cloud.googleapis.com, serving.knative.dev, or autoscaling.knative.dev namespaces, and they will be rejected.
	// All system labels in v1 now have a corresponding field in v2 ExecutionTemplate.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Email address of the last authenticated modifier.
	LastModifier *string `json:"lastModifier,omitempty" tf:"last_modifier,omitempty"`

	// Name of the last created execution.
	// Structure is documented below.
	LatestCreatedExecution []LatestCreatedExecutionObservation `json:"latestCreatedExecution,omitempty" tf:"latest_created_execution,omitempty"`

	// The launch stage as defined by Google Cloud Platform Launch Stages. Cloud Run supports ALPHA, BETA, and GA.
	// If no value is specified, GA is assumed. Set the launch stage to a preview stage on input to allow use of preview features in that stage. On read (or output), describes whether the resource uses preview features.
	// For example, if ALPHA is provided as input, but only BETA and GA-level features are used, this field will be BETA on output.
	// Possible values are: UNIMPLEMENTED, PRELAUNCH, EARLY_ACCESS, ALPHA, BETA, GA, DEPRECATED.
	LaunchStage *string `json:"launchStage,omitempty" tf:"launch_stage,omitempty"`

	// The location of the cloud run job
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// The generation of this Job. See comments in reconciling for additional information on reconciliation process in Cloud Run.
	ObservedGeneration *string `json:"observedGeneration,omitempty" tf:"observed_generation,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Returns true if the Job is currently being acted upon by the system to bring it into the desired state.
	// When a new Job is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring the Job to the desired state. This process is called reconciliation. While reconciliation is in process, observedGeneration and latest_succeeded_execution, will have transient values that might mismatch the intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation succeeded and the state matches the Job, or there was an error, and reconciliation failed. This state can be found in terminalCondition.state.
	// If reconciliation succeeded, the following fields will match: observedGeneration and generation, latest_succeeded_execution and latestCreatedExecution.
	// If reconciliation failed, observedGeneration and latest_succeeded_execution will have the state of the last succeeded execution or empty for newly created Job. Additional information on the failure can be found in terminalCondition and conditions
	Reconciling *bool `json:"reconciling,omitempty" tf:"reconciling,omitempty"`

	// The template used to create executions for this Job.
	// Structure is documented below.
	Template []V2JobTemplateObservation `json:"template,omitempty" tf:"template,omitempty"`

	// The Condition of this Job, containing its readiness status, and detailed error information in case it did not reach the desired state
	// Structure is documented below.
	TerminalCondition []TerminalConditionObservation `json:"terminalCondition,omitempty" tf:"terminal_condition,omitempty"`

	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	// +mapType=granular
	TerraformLabels map[string]*string `json:"terraformLabels,omitempty" tf:"terraform_labels,omitempty"`

	// Server assigned unique identifier for the Execution. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`

	// The last-modified time.
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type V2JobParameters struct {

	// Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.
	// Cloud Run API v2 does not support annotations with run.googleapis.com, cloud.googleapis.com, serving.knative.dev, or autoscaling.knative.dev namespaces, and they will be rejected.
	// All system annotations in v1 now have a corresponding field in v2 ExecutionTemplate.
	// This field follows Kubernetes annotations' namespacing, limits, and rules.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Settings for the Binary Authorization feature.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	BinaryAuthorization []BinaryAuthorizationParameters `json:"binaryAuthorization,omitempty" tf:"binary_authorization,omitempty"`

	// Arbitrary identifier for the API client.
	// +kubebuilder:validation:Optional
	Client *string `json:"client,omitempty" tf:"client,omitempty"`

	// Arbitrary version identifier for the API client.
	// +kubebuilder:validation:Optional
	ClientVersion *string `json:"clientVersion,omitempty" tf:"client_version,omitempty"`

	// Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter,
	// or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or
	// https://cloud.google.com/run/docs/configuring/labels.
	// Cloud Run API v2 does not support labels with run.googleapis.com, cloud.googleapis.com, serving.knative.dev, or autoscaling.knative.dev namespaces, and they will be rejected.
	// All system labels in v1 now have a corresponding field in v2 ExecutionTemplate.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The launch stage as defined by Google Cloud Platform Launch Stages. Cloud Run supports ALPHA, BETA, and GA.
	// If no value is specified, GA is assumed. Set the launch stage to a preview stage on input to allow use of preview features in that stage. On read (or output), describes whether the resource uses preview features.
	// For example, if ALPHA is provided as input, but only BETA and GA-level features are used, this field will be BETA on output.
	// Possible values are: UNIMPLEMENTED, PRELAUNCH, EARLY_ACCESS, ALPHA, BETA, GA, DEPRECATED.
	// +kubebuilder:validation:Optional
	LaunchStage *string `json:"launchStage,omitempty" tf:"launch_stage,omitempty"`

	// The location of the cloud run job
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The template used to create executions for this Job.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Template []V2JobTemplateParameters `json:"template,omitempty" tf:"template,omitempty"`
}

type V2JobTemplateInitParameters struct {

	// Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.
	// Cloud Run API v2 does not support annotations with run.googleapis.com, cloud.googleapis.com, serving.knative.dev, or autoscaling.knative.dev namespaces, and they will be rejected.
	// All system annotations in v1 now have a corresponding field in v2 ExecutionTemplate.
	// This field follows Kubernetes annotations' namespacing, limits, and rules.
	// +mapType=granular
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter,
	// or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or
	// https://cloud.google.com/run/docs/configuring/labels.
	// Cloud Run API v2 does not support labels with run.googleapis.com, cloud.googleapis.com, serving.knative.dev, or autoscaling.knative.dev namespaces, and they will be rejected.
	// All system labels in v1 now have a corresponding field in v2 ExecutionTemplate.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Specifies the maximum desired number of tasks the execution should run at given time. Must be <= taskCount. When the job is run, if this field is 0 or unset, the maximum possible value will be used for that execution. The actual number of tasks running in steady state will be less than this number when there are fewer tasks waiting to be completed remaining, i.e. when the work left to do is less than max parallelism.
	Parallelism *float64 `json:"parallelism,omitempty" tf:"parallelism,omitempty"`

	// Specifies the desired number of tasks the execution should run. Setting to 1 means that parallelism is limited to 1 and the success of that task signals the success of the execution. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	TaskCount *float64 `json:"taskCount,omitempty" tf:"task_count,omitempty"`

	// Describes the task(s) that will be created when executing an execution
	// Structure is documented below.
	Template []TemplateTemplateInitParameters `json:"template,omitempty" tf:"template,omitempty"`
}

type V2JobTemplateObservation struct {

	// Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.
	// Cloud Run API v2 does not support annotations with run.googleapis.com, cloud.googleapis.com, serving.knative.dev, or autoscaling.knative.dev namespaces, and they will be rejected.
	// All system annotations in v1 now have a corresponding field in v2 ExecutionTemplate.
	// This field follows Kubernetes annotations' namespacing, limits, and rules.
	// +mapType=granular
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter,
	// or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or
	// https://cloud.google.com/run/docs/configuring/labels.
	// Cloud Run API v2 does not support labels with run.googleapis.com, cloud.googleapis.com, serving.knative.dev, or autoscaling.knative.dev namespaces, and they will be rejected.
	// All system labels in v1 now have a corresponding field in v2 ExecutionTemplate.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Specifies the maximum desired number of tasks the execution should run at given time. Must be <= taskCount. When the job is run, if this field is 0 or unset, the maximum possible value will be used for that execution. The actual number of tasks running in steady state will be less than this number when there are fewer tasks waiting to be completed remaining, i.e. when the work left to do is less than max parallelism.
	Parallelism *float64 `json:"parallelism,omitempty" tf:"parallelism,omitempty"`

	// Specifies the desired number of tasks the execution should run. Setting to 1 means that parallelism is limited to 1 and the success of that task signals the success of the execution. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	TaskCount *float64 `json:"taskCount,omitempty" tf:"task_count,omitempty"`

	// Describes the task(s) that will be created when executing an execution
	// Structure is documented below.
	Template []TemplateTemplateObservation `json:"template,omitempty" tf:"template,omitempty"`
}

type V2JobTemplateParameters struct {

	// Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.
	// Cloud Run API v2 does not support annotations with run.googleapis.com, cloud.googleapis.com, serving.knative.dev, or autoscaling.knative.dev namespaces, and they will be rejected.
	// All system annotations in v1 now have a corresponding field in v2 ExecutionTemplate.
	// This field follows Kubernetes annotations' namespacing, limits, and rules.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter,
	// or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or
	// https://cloud.google.com/run/docs/configuring/labels.
	// Cloud Run API v2 does not support labels with run.googleapis.com, cloud.googleapis.com, serving.knative.dev, or autoscaling.knative.dev namespaces, and they will be rejected.
	// All system labels in v1 now have a corresponding field in v2 ExecutionTemplate.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Specifies the maximum desired number of tasks the execution should run at given time. Must be <= taskCount. When the job is run, if this field is 0 or unset, the maximum possible value will be used for that execution. The actual number of tasks running in steady state will be less than this number when there are fewer tasks waiting to be completed remaining, i.e. when the work left to do is less than max parallelism.
	// +kubebuilder:validation:Optional
	Parallelism *float64 `json:"parallelism,omitempty" tf:"parallelism,omitempty"`

	// Specifies the desired number of tasks the execution should run. Setting to 1 means that parallelism is limited to 1 and the success of that task signals the success of the execution. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	// +kubebuilder:validation:Optional
	TaskCount *float64 `json:"taskCount,omitempty" tf:"task_count,omitempty"`

	// Describes the task(s) that will be created when executing an execution
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Template []TemplateTemplateParameters `json:"template" tf:"template,omitempty"`
}

type VPCAccessInitParameters struct {

	// VPC Access connector name. Format: projects/{project}/locations/{location}/connectors/{connector}, where {project} can be project id or number.
	Connector *string `json:"connector,omitempty" tf:"connector,omitempty"`

	// Traffic VPC egress settings.
	// Possible values are: ALL_TRAFFIC, PRIVATE_RANGES_ONLY.
	Egress *string `json:"egress,omitempty" tf:"egress,omitempty"`

	// Direct VPC egress settings. Currently only single network interface is supported.
	// Structure is documented below.
	NetworkInterfaces []NetworkInterfacesInitParameters `json:"networkInterfaces,omitempty" tf:"network_interfaces,omitempty"`
}

type VPCAccessObservation struct {

	// VPC Access connector name. Format: projects/{project}/locations/{location}/connectors/{connector}, where {project} can be project id or number.
	Connector *string `json:"connector,omitempty" tf:"connector,omitempty"`

	// Traffic VPC egress settings.
	// Possible values are: ALL_TRAFFIC, PRIVATE_RANGES_ONLY.
	Egress *string `json:"egress,omitempty" tf:"egress,omitempty"`

	// Direct VPC egress settings. Currently only single network interface is supported.
	// Structure is documented below.
	NetworkInterfaces []NetworkInterfacesObservation `json:"networkInterfaces,omitempty" tf:"network_interfaces,omitempty"`
}

type VPCAccessParameters struct {

	// VPC Access connector name. Format: projects/{project}/locations/{location}/connectors/{connector}, where {project} can be project id or number.
	// +kubebuilder:validation:Optional
	Connector *string `json:"connector,omitempty" tf:"connector,omitempty"`

	// Traffic VPC egress settings.
	// Possible values are: ALL_TRAFFIC, PRIVATE_RANGES_ONLY.
	// +kubebuilder:validation:Optional
	Egress *string `json:"egress,omitempty" tf:"egress,omitempty"`

	// Direct VPC egress settings. Currently only single network interface is supported.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	NetworkInterfaces []NetworkInterfacesParameters `json:"networkInterfaces,omitempty" tf:"network_interfaces,omitempty"`
}

type ValueSourceInitParameters struct {

	// Selects a secret and a specific version from Cloud Secret Manager.
	// Structure is documented below.
	SecretKeyRef []ValueSourceSecretKeyRefInitParameters `json:"secretKeyRef,omitempty" tf:"secret_key_ref,omitempty"`
}

type ValueSourceObservation struct {

	// Selects a secret and a specific version from Cloud Secret Manager.
	// Structure is documented below.
	SecretKeyRef []ValueSourceSecretKeyRefObservation `json:"secretKeyRef,omitempty" tf:"secret_key_ref,omitempty"`
}

type ValueSourceParameters struct {

	// Selects a secret and a specific version from Cloud Secret Manager.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	SecretKeyRef []ValueSourceSecretKeyRefParameters `json:"secretKeyRef,omitempty" tf:"secret_key_ref,omitempty"`
}

type ValueSourceSecretKeyRefInitParameters struct {

	// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	// Structure is documented below.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/secretmanager/v1beta1.Secret
	Secret *string `json:"secret,omitempty" tf:"secret,omitempty"`

	// Reference to a Secret in secretmanager to populate secret.
	// +kubebuilder:validation:Optional
	SecretRef *v1.Reference `json:"secretRef,omitempty" tf:"-"`

	// Selector for a Secret in secretmanager to populate secret.
	// +kubebuilder:validation:Optional
	SecretSelector *v1.Selector `json:"secretSelector,omitempty" tf:"-"`

	// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type ValueSourceSecretKeyRefObservation struct {

	// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	// Structure is documented below.
	Secret *string `json:"secret,omitempty" tf:"secret,omitempty"`

	// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type ValueSourceSecretKeyRefParameters struct {

	// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	// Structure is documented below.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/secretmanager/v1beta1.Secret
	// +kubebuilder:validation:Optional
	Secret *string `json:"secret,omitempty" tf:"secret,omitempty"`

	// Reference to a Secret in secretmanager to populate secret.
	// +kubebuilder:validation:Optional
	SecretRef *v1.Reference `json:"secretRef,omitempty" tf:"-"`

	// Selector for a Secret in secretmanager to populate secret.
	// +kubebuilder:validation:Optional
	SecretSelector *v1.Selector `json:"secretSelector,omitempty" tf:"-"`

	// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
	// +kubebuilder:validation:Optional
	Version *string `json:"version" tf:"version,omitempty"`
}

type VolumesSecretInitParameters struct {

	// Integer representation of mode bits to use on created files by default. Must be a value between 0000 and 0777 (octal), defaulting to 0444. Directories within the path are not affected by this setting.
	DefaultMode *float64 `json:"defaultMode,omitempty" tf:"default_mode,omitempty"`

	// If unspecified, the volume will expose a file whose name is the secret, relative to VolumeMount.mount_path. If specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify a path and a version.
	// Structure is documented below.
	Items []SecretItemsInitParameters `json:"items,omitempty" tf:"items,omitempty"`

	// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	// Structure is documented below.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/secretmanager/v1beta1.Secret
	Secret *string `json:"secret,omitempty" tf:"secret,omitempty"`

	// Reference to a Secret in secretmanager to populate secret.
	// +kubebuilder:validation:Optional
	SecretRef *v1.Reference `json:"secretRef,omitempty" tf:"-"`

	// Selector for a Secret in secretmanager to populate secret.
	// +kubebuilder:validation:Optional
	SecretSelector *v1.Selector `json:"secretSelector,omitempty" tf:"-"`
}

type VolumesSecretObservation struct {

	// Integer representation of mode bits to use on created files by default. Must be a value between 0000 and 0777 (octal), defaulting to 0444. Directories within the path are not affected by this setting.
	DefaultMode *float64 `json:"defaultMode,omitempty" tf:"default_mode,omitempty"`

	// If unspecified, the volume will expose a file whose name is the secret, relative to VolumeMount.mount_path. If specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify a path and a version.
	// Structure is documented below.
	Items []SecretItemsObservation `json:"items,omitempty" tf:"items,omitempty"`

	// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	// Structure is documented below.
	Secret *string `json:"secret,omitempty" tf:"secret,omitempty"`
}

type VolumesSecretParameters struct {

	// Integer representation of mode bits to use on created files by default. Must be a value between 0000 and 0777 (octal), defaulting to 0444. Directories within the path are not affected by this setting.
	// +kubebuilder:validation:Optional
	DefaultMode *float64 `json:"defaultMode,omitempty" tf:"default_mode,omitempty"`

	// If unspecified, the volume will expose a file whose name is the secret, relative to VolumeMount.mount_path. If specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify a path and a version.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Items []SecretItemsParameters `json:"items,omitempty" tf:"items,omitempty"`

	// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	// Structure is documented below.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/secretmanager/v1beta1.Secret
	// +kubebuilder:validation:Optional
	Secret *string `json:"secret,omitempty" tf:"secret,omitempty"`

	// Reference to a Secret in secretmanager to populate secret.
	// +kubebuilder:validation:Optional
	SecretRef *v1.Reference `json:"secretRef,omitempty" tf:"-"`

	// Selector for a Secret in secretmanager to populate secret.
	// +kubebuilder:validation:Optional
	SecretSelector *v1.Selector `json:"secretSelector,omitempty" tf:"-"`
}

// V2JobSpec defines the desired state of V2Job
type V2JobSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     V2JobParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider V2JobInitParameters `json:"initProvider,omitempty"`
}

// V2JobStatus defines the observed state of V2Job.
type V2JobStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        V2JobObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// V2Job is the Schema for the V2Jobs API. A Cloud Run Job resource that references a container image which is run to completion.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type V2Job struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.template) || (has(self.initProvider) && has(self.initProvider.template))",message="spec.forProvider.template is a required parameter"
	Spec   V2JobSpec   `json:"spec"`
	Status V2JobStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// V2JobList contains a list of V2Jobs
type V2JobList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []V2Job `json:"items"`
}

// Repository type metadata.
var (
	V2Job_Kind             = "V2Job"
	V2Job_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: V2Job_Kind}.String()
	V2Job_KindAPIVersion   = V2Job_Kind + "." + CRDGroupVersion.String()
	V2Job_GroupVersionKind = CRDGroupVersion.WithKind(V2Job_Kind)
)

func init() {
	SchemeBuilder.Register(&V2Job{}, &V2JobList{})
}
