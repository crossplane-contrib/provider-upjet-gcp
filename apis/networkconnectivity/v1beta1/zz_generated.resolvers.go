// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	client "sigs.k8s.io/controller-runtime/pkg/client"

	// ResolveReferences of this Spoke.
	apisresolver "github.com/upbound/provider-gcp/internal/apis"
)

func (mg *Spoke) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("networkconnectivity.gcp.upbound.io", "v1beta1", "Hub", "HubList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Hub),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.HubRef,
			Selector:     mg.Spec.ForProvider.HubSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Hub")
	}
	mg.Spec.ForProvider.Hub = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.HubRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.LinkedRouterApplianceInstances); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.LinkedRouterApplianceInstances[i3].Instances); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Instance", "InstanceList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LinkedRouterApplianceInstances[i3].Instances[i4].VirtualMachine),
					Extract:      resource.ExtractParamPath("self_link", true),
					Reference:    mg.Spec.ForProvider.LinkedRouterApplianceInstances[i3].Instances[i4].VirtualMachineRef,
					Selector:     mg.Spec.ForProvider.LinkedRouterApplianceInstances[i3].Instances[i4].VirtualMachineSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.LinkedRouterApplianceInstances[i3].Instances[i4].VirtualMachine")
			}
			mg.Spec.ForProvider.LinkedRouterApplianceInstances[i3].Instances[i4].VirtualMachine = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.LinkedRouterApplianceInstances[i3].Instances[i4].VirtualMachineRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.LinkedVPCNetwork); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LinkedVPCNetwork[i3].URI),
				Extract:      resource.ExtractParamPath("self_link", true),
				Reference:    mg.Spec.ForProvider.LinkedVPCNetwork[i3].URIRef,
				Selector:     mg.Spec.ForProvider.LinkedVPCNetwork[i3].URISelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.LinkedVPCNetwork[i3].URI")
		}
		mg.Spec.ForProvider.LinkedVPCNetwork[i3].URI = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.LinkedVPCNetwork[i3].URIRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("networkconnectivity.gcp.upbound.io", "v1beta1", "Hub", "HubList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Hub),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.HubRef,
			Selector:     mg.Spec.InitProvider.HubSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Hub")
	}
	mg.Spec.InitProvider.Hub = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.HubRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.LinkedRouterApplianceInstances); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.LinkedRouterApplianceInstances[i3].Instances); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Instance", "InstanceList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LinkedRouterApplianceInstances[i3].Instances[i4].VirtualMachine),
					Extract:      resource.ExtractParamPath("self_link", true),
					Reference:    mg.Spec.InitProvider.LinkedRouterApplianceInstances[i3].Instances[i4].VirtualMachineRef,
					Selector:     mg.Spec.InitProvider.LinkedRouterApplianceInstances[i3].Instances[i4].VirtualMachineSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.LinkedRouterApplianceInstances[i3].Instances[i4].VirtualMachine")
			}
			mg.Spec.InitProvider.LinkedRouterApplianceInstances[i3].Instances[i4].VirtualMachine = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.LinkedRouterApplianceInstances[i3].Instances[i4].VirtualMachineRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.LinkedVPCNetwork); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LinkedVPCNetwork[i3].URI),
				Extract:      resource.ExtractParamPath("self_link", true),
				Reference:    mg.Spec.InitProvider.LinkedVPCNetwork[i3].URIRef,
				Selector:     mg.Spec.InitProvider.LinkedVPCNetwork[i3].URISelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.LinkedVPCNetwork[i3].URI")
		}
		mg.Spec.InitProvider.LinkedVPCNetwork[i3].URI = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.LinkedVPCNetwork[i3].URIRef = rsp.ResolvedReference

	}

	return nil
}
