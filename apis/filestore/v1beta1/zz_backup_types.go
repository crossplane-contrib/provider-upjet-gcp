// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BackupInitParameters struct {

	// A description of the backup with 2048 characters or less. Requests with longer descriptions will be rejected.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Resource labels to represent user-provided metadata.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Name of the file share in the source Cloud Filestore instance that the backup is created from.
	SourceFileShare *string `json:"sourceFileShare,omitempty" tf:"source_file_share,omitempty"`

	// The resource name of the source Cloud Filestore instance, in the format projects/{projectId}/locations/{locationId}/instances/{instanceId}, used to create this backup.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/filestore/v1beta1.Instance
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	SourceInstance *string `json:"sourceInstance,omitempty" tf:"source_instance,omitempty"`

	// Reference to a Instance in filestore to populate sourceInstance.
	// +kubebuilder:validation:Optional
	SourceInstanceRef *v1.Reference `json:"sourceInstanceRef,omitempty" tf:"-"`

	// Selector for a Instance in filestore to populate sourceInstance.
	// +kubebuilder:validation:Optional
	SourceInstanceSelector *v1.Selector `json:"sourceInstanceSelector,omitempty" tf:"-"`
}

type BackupObservation struct {

	// The amount of bytes needed to allocate a full copy of the snapshot content.
	CapacityGb *string `json:"capacityGb,omitempty" tf:"capacity_gb,omitempty"`

	// The time when the snapshot was created in RFC3339 text format.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// A description of the backup with 2048 characters or less. Requests with longer descriptions will be rejected.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Amount of bytes that will be downloaded if the backup is restored.
	DownloadBytes *string `json:"downloadBytes,omitempty" tf:"download_bytes,omitempty"`

	// for all of the labels present on the resource.
	// +mapType=granular
	EffectiveLabels map[string]*string `json:"effectiveLabels,omitempty" tf:"effective_labels,omitempty"`

	// an identifier for the resource with format projects/{{project}}/locations/{{location}}/backups/{{name}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// KMS key name used for data encryption.
	KMSKeyName *string `json:"kmsKeyName,omitempty" tf:"kms_key_name,omitempty"`

	// Resource labels to represent user-provided metadata.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The name of the location of the instance. This can be a region for ENTERPRISE tier instances.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Name of the file share in the source Cloud Filestore instance that the backup is created from.
	SourceFileShare *string `json:"sourceFileShare,omitempty" tf:"source_file_share,omitempty"`

	// The resource name of the source Cloud Filestore instance, in the format projects/{projectId}/locations/{locationId}/instances/{instanceId}, used to create this backup.
	SourceInstance *string `json:"sourceInstance,omitempty" tf:"source_instance,omitempty"`

	// The service tier of the source Cloud Filestore instance that this backup is created from.
	SourceInstanceTier *string `json:"sourceInstanceTier,omitempty" tf:"source_instance_tier,omitempty"`

	// The backup state.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// The size of the storage used by the backup. As backups share storage, this number is expected to change with backup creation/deletion.
	StorageBytes *string `json:"storageBytes,omitempty" tf:"storage_bytes,omitempty"`

	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	// +mapType=granular
	TerraformLabels map[string]*string `json:"terraformLabels,omitempty" tf:"terraform_labels,omitempty"`
}

type BackupParameters struct {

	// A description of the backup with 2048 characters or less. Requests with longer descriptions will be rejected.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Resource labels to represent user-provided metadata.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The name of the location of the instance. This can be a region for ENTERPRISE tier instances.
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Name of the file share in the source Cloud Filestore instance that the backup is created from.
	// +kubebuilder:validation:Optional
	SourceFileShare *string `json:"sourceFileShare,omitempty" tf:"source_file_share,omitempty"`

	// The resource name of the source Cloud Filestore instance, in the format projects/{projectId}/locations/{locationId}/instances/{instanceId}, used to create this backup.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/filestore/v1beta1.Instance
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	SourceInstance *string `json:"sourceInstance,omitempty" tf:"source_instance,omitempty"`

	// Reference to a Instance in filestore to populate sourceInstance.
	// +kubebuilder:validation:Optional
	SourceInstanceRef *v1.Reference `json:"sourceInstanceRef,omitempty" tf:"-"`

	// Selector for a Instance in filestore to populate sourceInstance.
	// +kubebuilder:validation:Optional
	SourceInstanceSelector *v1.Selector `json:"sourceInstanceSelector,omitempty" tf:"-"`
}

// BackupSpec defines the desired state of Backup
type BackupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BackupParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BackupInitParameters `json:"initProvider,omitempty"`
}

// BackupStatus defines the observed state of Backup.
type BackupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BackupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Backup is the Schema for the Backups API. A Google Cloud Filestore backup.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type Backup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sourceFileShare) || (has(self.initProvider) && has(self.initProvider.sourceFileShare))",message="spec.forProvider.sourceFileShare is a required parameter"
	Spec   BackupSpec   `json:"spec"`
	Status BackupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BackupList contains a list of Backups
type BackupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Backup `json:"items"`
}

// Repository type metadata.
var (
	Backup_Kind             = "Backup"
	Backup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Backup_Kind}.String()
	Backup_KindAPIVersion   = Backup_Kind + "." + CRDGroupVersion.String()
	Backup_GroupVersionKind = CRDGroupVersion.WithKind(Backup_Kind)
)

func init() {
	SchemeBuilder.Register(&Backup{}, &BackupList{})
}
