// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ProjectServiceInitParameters struct {

	// If true, services that are enabled
	// and which depend on this service should also be disabled when this service is
	// destroyed. If false or unset, an error will be generated if any enabled
	// services depend on this service when destroying it.
	DisableDependentServices *bool `json:"disableDependentServices,omitempty" tf:"disable_dependent_services,omitempty"`

	// Defaults to true. May be useful in the event
	// that a project is long-lived but the infrastructure running in that project
	// changes frequently.
	DisableOnDestroy *bool `json:"disableOnDestroy,omitempty" tf:"disable_on_destroy,omitempty"`

	// The project ID. If not provided, the provider project
	// is used.
	// +crossplane:generate:reference:type=Project
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Reference to a Project to populate project.
	// +kubebuilder:validation:Optional
	ProjectRef *v1.Reference `json:"projectRef,omitempty" tf:"-"`

	// Selector for a Project to populate project.
	// +kubebuilder:validation:Optional
	ProjectSelector *v1.Selector `json:"projectSelector,omitempty" tf:"-"`

	// The service to enable.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`
}

type ProjectServiceObservation struct {

	// If true, services that are enabled
	// and which depend on this service should also be disabled when this service is
	// destroyed. If false or unset, an error will be generated if any enabled
	// services depend on this service when destroying it.
	DisableDependentServices *bool `json:"disableDependentServices,omitempty" tf:"disable_dependent_services,omitempty"`

	// Defaults to true. May be useful in the event
	// that a project is long-lived but the infrastructure running in that project
	// changes frequently.
	DisableOnDestroy *bool `json:"disableOnDestroy,omitempty" tf:"disable_on_destroy,omitempty"`

	// an identifier for the resource with format {{project}}/{{service}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The project ID. If not provided, the provider project
	// is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The service to enable.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`
}

type ProjectServiceParameters struct {

	// If true, services that are enabled
	// and which depend on this service should also be disabled when this service is
	// destroyed. If false or unset, an error will be generated if any enabled
	// services depend on this service when destroying it.
	// +kubebuilder:validation:Optional
	DisableDependentServices *bool `json:"disableDependentServices,omitempty" tf:"disable_dependent_services,omitempty"`

	// Defaults to true. May be useful in the event
	// that a project is long-lived but the infrastructure running in that project
	// changes frequently.
	// +kubebuilder:validation:Optional
	DisableOnDestroy *bool `json:"disableOnDestroy,omitempty" tf:"disable_on_destroy,omitempty"`

	// The project ID. If not provided, the provider project
	// is used.
	// +crossplane:generate:reference:type=Project
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Reference to a Project to populate project.
	// +kubebuilder:validation:Optional
	ProjectRef *v1.Reference `json:"projectRef,omitempty" tf:"-"`

	// Selector for a Project to populate project.
	// +kubebuilder:validation:Optional
	ProjectSelector *v1.Selector `json:"projectSelector,omitempty" tf:"-"`

	// The service to enable.
	// +kubebuilder:validation:Optional
	Service *string `json:"service,omitempty" tf:"service,omitempty"`
}

// ProjectServiceSpec defines the desired state of ProjectService
type ProjectServiceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProjectServiceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ProjectServiceInitParameters `json:"initProvider,omitempty"`
}

// ProjectServiceStatus defines the observed state of ProjectService.
type ProjectServiceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProjectServiceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ProjectService is the Schema for the ProjectServices API. Allows management of a single API service for a Google Cloud Platform project.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type ProjectService struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.service) || (has(self.initProvider) && has(self.initProvider.service))",message="spec.forProvider.service is a required parameter"
	Spec   ProjectServiceSpec   `json:"spec"`
	Status ProjectServiceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProjectServiceList contains a list of ProjectServices
type ProjectServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProjectService `json:"items"`
}

// Repository type metadata.
var (
	ProjectService_Kind             = "ProjectService"
	ProjectService_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProjectService_Kind}.String()
	ProjectService_KindAPIVersion   = ProjectService_Kind + "." + CRDGroupVersion.String()
	ProjectService_GroupVersionKind = CRDGroupVersion.WithKind(ProjectService_Kind)
)

func init() {
	SchemeBuilder.Register(&ProjectService{}, &ProjectServiceList{})
}
