// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EndpointAttachmentInitParameters struct {
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.ServiceAttachment
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-gcp/config/common.ExtractResourceID()
	ServiceAttachment *string `json:"serviceAttachment,omitempty" tf:"service_attachment,omitempty"`

	// Reference to a ServiceAttachment in compute to populate serviceAttachment.
	// +kubebuilder:validation:Optional
	ServiceAttachmentRef *v1.Reference `json:"serviceAttachmentRef,omitempty" tf:"-"`

	// Selector for a ServiceAttachment in compute to populate serviceAttachment.
	// +kubebuilder:validation:Optional
	ServiceAttachmentSelector *v1.Selector `json:"serviceAttachmentSelector,omitempty" tf:"-"`
}

type EndpointAttachmentObservation struct {
	ConnectionState *string `json:"connectionState,omitempty" tf:"connection_state,omitempty"`

	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	ServiceAttachment *string `json:"serviceAttachment,omitempty" tf:"service_attachment,omitempty"`
}

type EndpointAttachmentParameters struct {

	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	OrgID *string `json:"orgId" tf:"org_id,omitempty"`

	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.ServiceAttachment
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-gcp/config/common.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ServiceAttachment *string `json:"serviceAttachment,omitempty" tf:"service_attachment,omitempty"`

	// Reference to a ServiceAttachment in compute to populate serviceAttachment.
	// +kubebuilder:validation:Optional
	ServiceAttachmentRef *v1.Reference `json:"serviceAttachmentRef,omitempty" tf:"-"`

	// Selector for a ServiceAttachment in compute to populate serviceAttachment.
	// +kubebuilder:validation:Optional
	ServiceAttachmentSelector *v1.Selector `json:"serviceAttachmentSelector,omitempty" tf:"-"`
}

// EndpointAttachmentSpec defines the desired state of EndpointAttachment
type EndpointAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EndpointAttachmentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EndpointAttachmentInitParameters `json:"initProvider,omitempty"`
}

// EndpointAttachmentStatus defines the observed state of EndpointAttachment.
type EndpointAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EndpointAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// EndpointAttachment is the Schema for the EndpointAttachments API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type EndpointAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) && has(self.initProvider.location))",message="spec.forProvider.location is a required parameter"
	Spec   EndpointAttachmentSpec   `json:"spec"`
	Status EndpointAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EndpointAttachmentList contains a list of EndpointAttachments
type EndpointAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EndpointAttachment `json:"items"`
}

// Repository type metadata.
var (
	EndpointAttachment_Kind             = "EndpointAttachment"
	EndpointAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EndpointAttachment_Kind}.String()
	EndpointAttachment_KindAPIVersion   = EndpointAttachment_Kind + "." + CRDGroupVersion.String()
	EndpointAttachment_GroupVersionKind = CRDGroupVersion.WithKind(EndpointAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&EndpointAttachment{}, &EndpointAttachmentList{})
}
