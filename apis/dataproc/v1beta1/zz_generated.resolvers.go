// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	client "sigs.k8s.io/controller-runtime/pkg/client"

	// ResolveReferences of this Cluster.
	apisresolver "github.com/upbound/provider-gcp/internal/apis"
)

func (mg *Cluster) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.ClusterConfig); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.ClusterConfig[i3].GceClusterConfig); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "ServiceAccount", "ServiceAccountList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterConfig[i3].GceClusterConfig[i4].ServiceAccount),
					Extract:      resource.ExtractParamPath("email", true),
					Reference:    mg.Spec.ForProvider.ClusterConfig[i3].GceClusterConfig[i4].ServiceAccountRef,
					Selector:     mg.Spec.ForProvider.ClusterConfig[i3].GceClusterConfig[i4].ServiceAccountSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.ClusterConfig[i3].GceClusterConfig[i4].ServiceAccount")
			}
			mg.Spec.ForProvider.ClusterConfig[i3].GceClusterConfig[i4].ServiceAccount = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.ClusterConfig[i3].GceClusterConfig[i4].ServiceAccountRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.ClusterConfig); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.ClusterConfig[i3].GceClusterConfig); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "ServiceAccount", "ServiceAccountList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterConfig[i3].GceClusterConfig[i4].ServiceAccount),
					Extract:      resource.ExtractParamPath("email", true),
					Reference:    mg.Spec.InitProvider.ClusterConfig[i3].GceClusterConfig[i4].ServiceAccountRef,
					Selector:     mg.Spec.InitProvider.ClusterConfig[i3].GceClusterConfig[i4].ServiceAccountSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.ClusterConfig[i3].GceClusterConfig[i4].ServiceAccount")
			}
			mg.Spec.InitProvider.ClusterConfig[i3].GceClusterConfig[i4].ServiceAccount = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.ClusterConfig[i3].GceClusterConfig[i4].ServiceAccountRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this Job.
func (mg *Job) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Placement); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("dataproc.gcp.upbound.io", "v1beta1", "Cluster", "ClusterList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Placement[i3].ClusterName),
				Extract:      resource.ExtractParamPath("name", false),
				Reference:    mg.Spec.ForProvider.Placement[i3].ClusterNameRef,
				Selector:     mg.Spec.ForProvider.Placement[i3].ClusterNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Placement[i3].ClusterName")
		}
		mg.Spec.ForProvider.Placement[i3].ClusterName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Placement[i3].ClusterNameRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("dataproc.gcp.upbound.io", "v1beta1", "Cluster", "ClusterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Region),
			Extract:      resource.ExtractParamPath("region", false),
			Reference:    mg.Spec.ForProvider.RegionRef,
			Selector:     mg.Spec.ForProvider.RegionSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Region")
	}
	mg.Spec.ForProvider.Region = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RegionRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.Placement); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("dataproc.gcp.upbound.io", "v1beta1", "Cluster", "ClusterList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Placement[i3].ClusterName),
				Extract:      resource.ExtractParamPath("name", false),
				Reference:    mg.Spec.InitProvider.Placement[i3].ClusterNameRef,
				Selector:     mg.Spec.InitProvider.Placement[i3].ClusterNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Placement[i3].ClusterName")
		}
		mg.Spec.InitProvider.Placement[i3].ClusterName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Placement[i3].ClusterNameRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("dataproc.gcp.upbound.io", "v1beta1", "Cluster", "ClusterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Region),
			Extract:      resource.ExtractParamPath("region", false),
			Reference:    mg.Spec.InitProvider.RegionRef,
			Selector:     mg.Spec.InitProvider.RegionSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Region")
	}
	mg.Spec.InitProvider.Region = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RegionRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MetastoreService.
func (mg *MetastoreService) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.EncryptionConfig); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("kms.gcp.upbound.io", "v1beta1", "CryptoKey", "CryptoKeyList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EncryptionConfig[i3].KMSKey),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.EncryptionConfig[i3].KMSKeyRef,
				Selector:     mg.Spec.ForProvider.EncryptionConfig[i3].KMSKeySelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.EncryptionConfig[i3].KMSKey")
		}
		mg.Spec.ForProvider.EncryptionConfig[i3].KMSKey = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.EncryptionConfig[i3].KMSKeyRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.NetworkConfig); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.NetworkConfig[i3].Consumers); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Subnetwork", "SubnetworkList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkConfig[i3].Consumers[i4].Subnetwork),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.ForProvider.NetworkConfig[i3].Consumers[i4].SubnetworkRef,
					Selector:     mg.Spec.ForProvider.NetworkConfig[i3].Consumers[i4].SubnetworkSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.NetworkConfig[i3].Consumers[i4].Subnetwork")
			}
			mg.Spec.ForProvider.NetworkConfig[i3].Consumers[i4].Subnetwork = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.NetworkConfig[i3].Consumers[i4].SubnetworkRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.EncryptionConfig); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("kms.gcp.upbound.io", "v1beta1", "CryptoKey", "CryptoKeyList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.EncryptionConfig[i3].KMSKey),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.EncryptionConfig[i3].KMSKeyRef,
				Selector:     mg.Spec.InitProvider.EncryptionConfig[i3].KMSKeySelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.EncryptionConfig[i3].KMSKey")
		}
		mg.Spec.InitProvider.EncryptionConfig[i3].KMSKey = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.EncryptionConfig[i3].KMSKeyRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.NetworkConfig); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.NetworkConfig[i3].Consumers); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Subnetwork", "SubnetworkList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NetworkConfig[i3].Consumers[i4].Subnetwork),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.InitProvider.NetworkConfig[i3].Consumers[i4].SubnetworkRef,
					Selector:     mg.Spec.InitProvider.NetworkConfig[i3].Consumers[i4].SubnetworkSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.NetworkConfig[i3].Consumers[i4].Subnetwork")
			}
			mg.Spec.InitProvider.NetworkConfig[i3].Consumers[i4].Subnetwork = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.NetworkConfig[i3].Consumers[i4].SubnetworkRef = rsp.ResolvedReference

		}
	}

	return nil
}
