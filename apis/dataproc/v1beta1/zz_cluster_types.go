// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AcceleratorsInitParameters struct {

	// The number of the accelerator cards of this type exposed to this instance. Often restricted to one of 1, 2, 4, or 8.
	AcceleratorCount *float64 `json:"acceleratorCount,omitempty" tf:"accelerator_count,omitempty"`

	// The short name of the accelerator type to expose to this instance. For example, nvidia-tesla-k80.
	AcceleratorType *string `json:"acceleratorType,omitempty" tf:"accelerator_type,omitempty"`
}

type AcceleratorsObservation struct {

	// The number of the accelerator cards of this type exposed to this instance. Often restricted to one of 1, 2, 4, or 8.
	AcceleratorCount *float64 `json:"acceleratorCount,omitempty" tf:"accelerator_count,omitempty"`

	// The short name of the accelerator type to expose to this instance. For example, nvidia-tesla-k80.
	AcceleratorType *string `json:"acceleratorType,omitempty" tf:"accelerator_type,omitempty"`
}

type AcceleratorsParameters struct {

	// The number of the accelerator cards of this type exposed to this instance. Often restricted to one of 1, 2, 4, or 8.
	// +kubebuilder:validation:Optional
	AcceleratorCount *float64 `json:"acceleratorCount" tf:"accelerator_count,omitempty"`

	// The short name of the accelerator type to expose to this instance. For example, nvidia-tesla-k80.
	// +kubebuilder:validation:Optional
	AcceleratorType *string `json:"acceleratorType" tf:"accelerator_type,omitempty"`
}

type AutoscalingConfigInitParameters struct {

	// The autoscaling policy used by the cluster.
	PolicyURI *string `json:"policyUri,omitempty" tf:"policy_uri,omitempty"`
}

type AutoscalingConfigObservation struct {

	// The autoscaling policy used by the cluster.
	PolicyURI *string `json:"policyUri,omitempty" tf:"policy_uri,omitempty"`
}

type AutoscalingConfigParameters struct {

	// The autoscaling policy used by the cluster.
	// +kubebuilder:validation:Optional
	PolicyURI *string `json:"policyUri" tf:"policy_uri,omitempty"`
}

type AutoscalingInitParameters struct {

	// The maximum number of nodes in the node pool. Must be >= minNodeCount, and must be > 0.
	MaxNodeCount *float64 `json:"maxNodeCount,omitempty" tf:"max_node_count,omitempty"`

	// The minimum number of nodes in the node pool. Must be >= 0 and <= maxNodeCount.
	MinNodeCount *float64 `json:"minNodeCount,omitempty" tf:"min_node_count,omitempty"`
}

type AutoscalingObservation struct {

	// The maximum number of nodes in the node pool. Must be >= minNodeCount, and must be > 0.
	MaxNodeCount *float64 `json:"maxNodeCount,omitempty" tf:"max_node_count,omitempty"`

	// The minimum number of nodes in the node pool. Must be >= 0 and <= maxNodeCount.
	MinNodeCount *float64 `json:"minNodeCount,omitempty" tf:"min_node_count,omitempty"`
}

type AutoscalingParameters struct {

	// The maximum number of nodes in the node pool. Must be >= minNodeCount, and must be > 0.
	// +kubebuilder:validation:Optional
	MaxNodeCount *float64 `json:"maxNodeCount,omitempty" tf:"max_node_count,omitempty"`

	// The minimum number of nodes in the node pool. Must be >= 0 and <= maxNodeCount.
	// +kubebuilder:validation:Optional
	MinNodeCount *float64 `json:"minNodeCount,omitempty" tf:"min_node_count,omitempty"`
}

type AuxiliaryNodeGroupsInitParameters struct {

	// Node group configuration.
	NodeGroup []NodeGroupInitParameters `json:"nodeGroup,omitempty" tf:"node_group,omitempty"`

	NodeGroupID *string `json:"nodeGroupId,omitempty" tf:"node_group_id,omitempty"`
}

type AuxiliaryNodeGroupsObservation struct {

	// Node group configuration.
	NodeGroup []NodeGroupObservation `json:"nodeGroup,omitempty" tf:"node_group,omitempty"`

	NodeGroupID *string `json:"nodeGroupId,omitempty" tf:"node_group_id,omitempty"`
}

type AuxiliaryNodeGroupsParameters struct {

	// Node group configuration.
	// +kubebuilder:validation:Optional
	NodeGroup []NodeGroupParameters `json:"nodeGroup" tf:"node_group,omitempty"`

	// +kubebuilder:validation:Optional
	NodeGroupID *string `json:"nodeGroupId,omitempty" tf:"node_group_id,omitempty"`
}

type AuxiliaryServicesConfigInitParameters struct {

	// The config setting for metastore service with the cluster.
	// Structure defined below.
	MetastoreConfig []AuxiliaryServicesConfigMetastoreConfigInitParameters `json:"metastoreConfig,omitempty" tf:"metastore_config,omitempty"`

	// The Spark History Server configuration for the workload.
	SparkHistoryServerConfig []SparkHistoryServerConfigInitParameters `json:"sparkHistoryServerConfig,omitempty" tf:"spark_history_server_config,omitempty"`
}

type AuxiliaryServicesConfigMetastoreConfigInitParameters struct {

	// Resource name of an existing Dataproc Metastore service.
	DataprocMetastoreService *string `json:"dataprocMetastoreService,omitempty" tf:"dataproc_metastore_service,omitempty"`
}

type AuxiliaryServicesConfigMetastoreConfigObservation struct {

	// Resource name of an existing Dataproc Metastore service.
	DataprocMetastoreService *string `json:"dataprocMetastoreService,omitempty" tf:"dataproc_metastore_service,omitempty"`
}

type AuxiliaryServicesConfigMetastoreConfigParameters struct {

	// Resource name of an existing Dataproc Metastore service.
	// +kubebuilder:validation:Optional
	DataprocMetastoreService *string `json:"dataprocMetastoreService,omitempty" tf:"dataproc_metastore_service,omitempty"`
}

type AuxiliaryServicesConfigObservation struct {

	// The config setting for metastore service with the cluster.
	// Structure defined below.
	MetastoreConfig []AuxiliaryServicesConfigMetastoreConfigObservation `json:"metastoreConfig,omitempty" tf:"metastore_config,omitempty"`

	// The Spark History Server configuration for the workload.
	SparkHistoryServerConfig []SparkHistoryServerConfigObservation `json:"sparkHistoryServerConfig,omitempty" tf:"spark_history_server_config,omitempty"`
}

type AuxiliaryServicesConfigParameters struct {

	// The config setting for metastore service with the cluster.
	// Structure defined below.
	// +kubebuilder:validation:Optional
	MetastoreConfig []AuxiliaryServicesConfigMetastoreConfigParameters `json:"metastoreConfig,omitempty" tf:"metastore_config,omitempty"`

	// The Spark History Server configuration for the workload.
	// +kubebuilder:validation:Optional
	SparkHistoryServerConfig []SparkHistoryServerConfigParameters `json:"sparkHistoryServerConfig,omitempty" tf:"spark_history_server_config,omitempty"`
}

type ClusterConfigInitParameters struct {

	// The autoscaling policy config associated with the cluster.
	// Note that once set, if autoscaling_config is the only field set in cluster_config, it can
	// only be removed by setting policy_uri = "", rather than removing the whole block.
	// Structure defined below.
	AutoscalingConfig []AutoscalingConfigInitParameters `json:"autoscalingConfig,omitempty" tf:"autoscaling_config,omitempty"`

	// A Dataproc NodeGroup resource is a group of Dataproc cluster nodes that execute an assigned role.
	// Structure defined below.
	AuxiliaryNodeGroups []AuxiliaryNodeGroupsInitParameters `json:"auxiliaryNodeGroups,omitempty" tf:"auxiliary_node_groups,omitempty"`

	// The Compute Engine accelerator (GPU) configuration for these instances. Can be specified multiple times.
	// Structure defined below.
	DataprocMetricConfig []DataprocMetricConfigInitParameters `json:"dataprocMetricConfig,omitempty" tf:"dataproc_metric_config,omitempty"`

	// The Customer managed encryption keys settings for the cluster.
	// Structure defined below.
	EncryptionConfig []EncryptionConfigInitParameters `json:"encryptionConfig,omitempty" tf:"encryption_config,omitempty"`

	// The config settings for port access on the cluster.
	// Structure defined below.
	EndpointConfig []EndpointConfigInitParameters `json:"endpointConfig,omitempty" tf:"endpoint_config,omitempty"`

	// Common config settings for resources of Google Compute Engine cluster
	// instances, applicable to all instances in the cluster. Structure defined below.
	GceClusterConfig []GceClusterConfigInitParameters `json:"gceClusterConfig,omitempty" tf:"gce_cluster_config,omitempty"`

	// Commands to execute on each node after config is completed.
	// You can specify multiple versions of these. Structure defined below.
	InitializationAction []InitializationActionInitParameters `json:"initializationAction,omitempty" tf:"initialization_action,omitempty"`

	// The settings for auto deletion cluster schedule.
	// Structure defined below.
	LifecycleConfig []LifecycleConfigInitParameters `json:"lifecycleConfig,omitempty" tf:"lifecycle_config,omitempty"`

	// The Google Compute Engine config settings for the master instances
	// in a cluster. Structure defined below.
	MasterConfig []MasterConfigInitParameters `json:"masterConfig,omitempty" tf:"master_config,omitempty"`

	// The config setting for metastore service with the cluster.
	// Structure defined below.
	MetastoreConfig []MetastoreConfigInitParameters `json:"metastoreConfig,omitempty" tf:"metastore_config,omitempty"`

	// The Google Compute Engine config settings for the additional
	// instances in a cluster. Structure defined below.
	PreemptibleWorkerConfig []PreemptibleWorkerConfigInitParameters `json:"preemptibleWorkerConfig,omitempty" tf:"preemptible_worker_config,omitempty"`

	// Security related configuration. Structure defined below.
	SecurityConfig []SecurityConfigInitParameters `json:"securityConfig,omitempty" tf:"security_config,omitempty"`

	// The config settings for software inside the cluster.
	// Structure defined below.
	SoftwareConfig []SoftwareConfigInitParameters `json:"softwareConfig,omitempty" tf:"software_config,omitempty"`

	// The Cloud Storage staging bucket used to stage files,
	// such as Hadoop jars, between client machines and the cluster.
	// Note: If you don't explicitly specify a staging_bucket
	// then GCP will auto create / assign one for you. However, you are not guaranteed
	// an auto generated bucket which is solely dedicated to your cluster; it may be shared
	// with other clusters in the same region/zone also choosing to use the auto generation
	// option.
	StagingBucket *string `json:"stagingBucket,omitempty" tf:"staging_bucket,omitempty"`

	// The Cloud Storage temp bucket used to store ephemeral cluster
	// and jobs data, such as Spark and MapReduce history files.
	// Note: If you don't explicitly specify a temp_bucket then GCP will auto create / assign one for you.
	TempBucket *string `json:"tempBucket,omitempty" tf:"temp_bucket,omitempty"`

	// The Google Compute Engine config settings for the worker instances
	// in a cluster. Structure defined below.
	WorkerConfig []ClusterConfigWorkerConfigInitParameters `json:"workerConfig,omitempty" tf:"worker_config,omitempty"`
}

type ClusterConfigObservation struct {

	// The autoscaling policy config associated with the cluster.
	// Note that once set, if autoscaling_config is the only field set in cluster_config, it can
	// only be removed by setting policy_uri = "", rather than removing the whole block.
	// Structure defined below.
	AutoscalingConfig []AutoscalingConfigObservation `json:"autoscalingConfig,omitempty" tf:"autoscaling_config,omitempty"`

	// A Dataproc NodeGroup resource is a group of Dataproc cluster nodes that execute an assigned role.
	// Structure defined below.
	AuxiliaryNodeGroups []AuxiliaryNodeGroupsObservation `json:"auxiliaryNodeGroups,omitempty" tf:"auxiliary_node_groups,omitempty"`

	// The name of the cloud storage bucket ultimately used to house the staging data
	// for the cluster. If staging_bucket is specified, it will contain this value, otherwise
	// it will be the auto generated name.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// The Compute Engine accelerator (GPU) configuration for these instances. Can be specified multiple times.
	// Structure defined below.
	DataprocMetricConfig []DataprocMetricConfigObservation `json:"dataprocMetricConfig,omitempty" tf:"dataproc_metric_config,omitempty"`

	// The Customer managed encryption keys settings for the cluster.
	// Structure defined below.
	EncryptionConfig []EncryptionConfigObservation `json:"encryptionConfig,omitempty" tf:"encryption_config,omitempty"`

	// The config settings for port access on the cluster.
	// Structure defined below.
	EndpointConfig []EndpointConfigObservation `json:"endpointConfig,omitempty" tf:"endpoint_config,omitempty"`

	// Common config settings for resources of Google Compute Engine cluster
	// instances, applicable to all instances in the cluster. Structure defined below.
	GceClusterConfig []GceClusterConfigObservation `json:"gceClusterConfig,omitempty" tf:"gce_cluster_config,omitempty"`

	// Commands to execute on each node after config is completed.
	// You can specify multiple versions of these. Structure defined below.
	InitializationAction []InitializationActionObservation `json:"initializationAction,omitempty" tf:"initialization_action,omitempty"`

	// The settings for auto deletion cluster schedule.
	// Structure defined below.
	LifecycleConfig []LifecycleConfigObservation `json:"lifecycleConfig,omitempty" tf:"lifecycle_config,omitempty"`

	// The Google Compute Engine config settings for the master instances
	// in a cluster. Structure defined below.
	MasterConfig []MasterConfigObservation `json:"masterConfig,omitempty" tf:"master_config,omitempty"`

	// The config setting for metastore service with the cluster.
	// Structure defined below.
	MetastoreConfig []MetastoreConfigObservation `json:"metastoreConfig,omitempty" tf:"metastore_config,omitempty"`

	// The Google Compute Engine config settings for the additional
	// instances in a cluster. Structure defined below.
	PreemptibleWorkerConfig []PreemptibleWorkerConfigObservation `json:"preemptibleWorkerConfig,omitempty" tf:"preemptible_worker_config,omitempty"`

	// Security related configuration. Structure defined below.
	SecurityConfig []SecurityConfigObservation `json:"securityConfig,omitempty" tf:"security_config,omitempty"`

	// The config settings for software inside the cluster.
	// Structure defined below.
	SoftwareConfig []SoftwareConfigObservation `json:"softwareConfig,omitempty" tf:"software_config,omitempty"`

	// The Cloud Storage staging bucket used to stage files,
	// such as Hadoop jars, between client machines and the cluster.
	// Note: If you don't explicitly specify a staging_bucket
	// then GCP will auto create / assign one for you. However, you are not guaranteed
	// an auto generated bucket which is solely dedicated to your cluster; it may be shared
	// with other clusters in the same region/zone also choosing to use the auto generation
	// option.
	StagingBucket *string `json:"stagingBucket,omitempty" tf:"staging_bucket,omitempty"`

	// The Cloud Storage temp bucket used to store ephemeral cluster
	// and jobs data, such as Spark and MapReduce history files.
	// Note: If you don't explicitly specify a temp_bucket then GCP will auto create / assign one for you.
	TempBucket *string `json:"tempBucket,omitempty" tf:"temp_bucket,omitempty"`

	// The Google Compute Engine config settings for the worker instances
	// in a cluster. Structure defined below.
	WorkerConfig []ClusterConfigWorkerConfigObservation `json:"workerConfig,omitempty" tf:"worker_config,omitempty"`
}

type ClusterConfigParameters struct {

	// The autoscaling policy config associated with the cluster.
	// Note that once set, if autoscaling_config is the only field set in cluster_config, it can
	// only be removed by setting policy_uri = "", rather than removing the whole block.
	// Structure defined below.
	// +kubebuilder:validation:Optional
	AutoscalingConfig []AutoscalingConfigParameters `json:"autoscalingConfig,omitempty" tf:"autoscaling_config,omitempty"`

	// A Dataproc NodeGroup resource is a group of Dataproc cluster nodes that execute an assigned role.
	// Structure defined below.
	// +kubebuilder:validation:Optional
	AuxiliaryNodeGroups []AuxiliaryNodeGroupsParameters `json:"auxiliaryNodeGroups,omitempty" tf:"auxiliary_node_groups,omitempty"`

	// The Compute Engine accelerator (GPU) configuration for these instances. Can be specified multiple times.
	// Structure defined below.
	// +kubebuilder:validation:Optional
	DataprocMetricConfig []DataprocMetricConfigParameters `json:"dataprocMetricConfig,omitempty" tf:"dataproc_metric_config,omitempty"`

	// The Customer managed encryption keys settings for the cluster.
	// Structure defined below.
	// +kubebuilder:validation:Optional
	EncryptionConfig []EncryptionConfigParameters `json:"encryptionConfig,omitempty" tf:"encryption_config,omitempty"`

	// The config settings for port access on the cluster.
	// Structure defined below.
	// +kubebuilder:validation:Optional
	EndpointConfig []EndpointConfigParameters `json:"endpointConfig,omitempty" tf:"endpoint_config,omitempty"`

	// Common config settings for resources of Google Compute Engine cluster
	// instances, applicable to all instances in the cluster. Structure defined below.
	// +kubebuilder:validation:Optional
	GceClusterConfig []GceClusterConfigParameters `json:"gceClusterConfig,omitempty" tf:"gce_cluster_config,omitempty"`

	// Commands to execute on each node after config is completed.
	// You can specify multiple versions of these. Structure defined below.
	// +kubebuilder:validation:Optional
	InitializationAction []InitializationActionParameters `json:"initializationAction,omitempty" tf:"initialization_action,omitempty"`

	// The settings for auto deletion cluster schedule.
	// Structure defined below.
	// +kubebuilder:validation:Optional
	LifecycleConfig []LifecycleConfigParameters `json:"lifecycleConfig,omitempty" tf:"lifecycle_config,omitempty"`

	// The Google Compute Engine config settings for the master instances
	// in a cluster. Structure defined below.
	// +kubebuilder:validation:Optional
	MasterConfig []MasterConfigParameters `json:"masterConfig,omitempty" tf:"master_config,omitempty"`

	// The config setting for metastore service with the cluster.
	// Structure defined below.
	// +kubebuilder:validation:Optional
	MetastoreConfig []MetastoreConfigParameters `json:"metastoreConfig,omitempty" tf:"metastore_config,omitempty"`

	// The Google Compute Engine config settings for the additional
	// instances in a cluster. Structure defined below.
	// +kubebuilder:validation:Optional
	PreemptibleWorkerConfig []PreemptibleWorkerConfigParameters `json:"preemptibleWorkerConfig,omitempty" tf:"preemptible_worker_config,omitempty"`

	// Security related configuration. Structure defined below.
	// +kubebuilder:validation:Optional
	SecurityConfig []SecurityConfigParameters `json:"securityConfig,omitempty" tf:"security_config,omitempty"`

	// The config settings for software inside the cluster.
	// Structure defined below.
	// +kubebuilder:validation:Optional
	SoftwareConfig []SoftwareConfigParameters `json:"softwareConfig,omitempty" tf:"software_config,omitempty"`

	// The Cloud Storage staging bucket used to stage files,
	// such as Hadoop jars, between client machines and the cluster.
	// Note: If you don't explicitly specify a staging_bucket
	// then GCP will auto create / assign one for you. However, you are not guaranteed
	// an auto generated bucket which is solely dedicated to your cluster; it may be shared
	// with other clusters in the same region/zone also choosing to use the auto generation
	// option.
	// +kubebuilder:validation:Optional
	StagingBucket *string `json:"stagingBucket,omitempty" tf:"staging_bucket,omitempty"`

	// The Cloud Storage temp bucket used to store ephemeral cluster
	// and jobs data, such as Spark and MapReduce history files.
	// Note: If you don't explicitly specify a temp_bucket then GCP will auto create / assign one for you.
	// +kubebuilder:validation:Optional
	TempBucket *string `json:"tempBucket,omitempty" tf:"temp_bucket,omitempty"`

	// The Google Compute Engine config settings for the worker instances
	// in a cluster. Structure defined below.
	// +kubebuilder:validation:Optional
	WorkerConfig []ClusterConfigWorkerConfigParameters `json:"workerConfig,omitempty" tf:"worker_config,omitempty"`
}

type ClusterConfigWorkerConfigInitParameters struct {

	// The Compute Engine accelerator configuration for these instances. Can be specified multiple times.
	Accelerators []WorkerConfigAcceleratorsInitParameters `json:"accelerators,omitempty" tf:"accelerators,omitempty"`

	// Disk Config
	DiskConfig []WorkerConfigDiskConfigInitParameters `json:"diskConfig,omitempty" tf:"disk_config,omitempty"`

	// The URI for the image to use for this worker.  See the guide
	// for more information.
	ImageURI *string `json:"imageUri,omitempty" tf:"image_uri,omitempty"`

	// The name of a Google Compute Engine machine type
	// to create for the worker nodes. If not specified, GCP will default to a predetermined
	// computed value (currently n1-standard-4).
	MachineType *string `json:"machineType,omitempty" tf:"machine_type,omitempty"`

	// The name of a minimum generation of CPU family
	// for the master. If not specified, GCP will default to a predetermined computed value
	// for each zone. See the guide
	// for details about which CPU families are available (and defaulted) for each zone.
	MinCPUPlatform *string `json:"minCpuPlatform,omitempty" tf:"min_cpu_platform,omitempty"`

	// The minimum number of primary worker instances to create.  If min_num_instances is set, cluster creation will succeed if the number of primary workers created is at least equal to the min_num_instances number.
	MinNumInstances *float64 `json:"minNumInstances,omitempty" tf:"min_num_instances,omitempty"`

	// Specifies the number of worker nodes to create.
	// If not specified, GCP will default to a predetermined computed value (currently 2).
	// There is currently a beta feature which allows you to run a
	// Single Node Cluster.
	// In order to take advantage of this you need to set
	// "dataproc:dataproc.allow.zero.workers" = "true" in
	// cluster_config.software_config.properties
	NumInstances *float64 `json:"numInstances,omitempty" tf:"num_instances,omitempty"`
}

type ClusterConfigWorkerConfigObservation struct {

	// The Compute Engine accelerator configuration for these instances. Can be specified multiple times.
	Accelerators []WorkerConfigAcceleratorsObservation `json:"accelerators,omitempty" tf:"accelerators,omitempty"`

	// Disk Config
	DiskConfig []WorkerConfigDiskConfigObservation `json:"diskConfig,omitempty" tf:"disk_config,omitempty"`

	// The URI for the image to use for this worker.  See the guide
	// for more information.
	ImageURI *string `json:"imageUri,omitempty" tf:"image_uri,omitempty"`

	// List of worker instance names which have been assigned
	// to the cluster.
	InstanceNames []*string `json:"instanceNames,omitempty" tf:"instance_names,omitempty"`

	// The name of a Google Compute Engine machine type
	// to create for the worker nodes. If not specified, GCP will default to a predetermined
	// computed value (currently n1-standard-4).
	MachineType *string `json:"machineType,omitempty" tf:"machine_type,omitempty"`

	// The name of a minimum generation of CPU family
	// for the master. If not specified, GCP will default to a predetermined computed value
	// for each zone. See the guide
	// for details about which CPU families are available (and defaulted) for each zone.
	MinCPUPlatform *string `json:"minCpuPlatform,omitempty" tf:"min_cpu_platform,omitempty"`

	// The minimum number of primary worker instances to create.  If min_num_instances is set, cluster creation will succeed if the number of primary workers created is at least equal to the min_num_instances number.
	MinNumInstances *float64 `json:"minNumInstances,omitempty" tf:"min_num_instances,omitempty"`

	// Specifies the number of worker nodes to create.
	// If not specified, GCP will default to a predetermined computed value (currently 2).
	// There is currently a beta feature which allows you to run a
	// Single Node Cluster.
	// In order to take advantage of this you need to set
	// "dataproc:dataproc.allow.zero.workers" = "true" in
	// cluster_config.software_config.properties
	NumInstances *float64 `json:"numInstances,omitempty" tf:"num_instances,omitempty"`
}

type ClusterConfigWorkerConfigParameters struct {

	// The Compute Engine accelerator configuration for these instances. Can be specified multiple times.
	// +kubebuilder:validation:Optional
	Accelerators []WorkerConfigAcceleratorsParameters `json:"accelerators,omitempty" tf:"accelerators,omitempty"`

	// Disk Config
	// +kubebuilder:validation:Optional
	DiskConfig []WorkerConfigDiskConfigParameters `json:"diskConfig,omitempty" tf:"disk_config,omitempty"`

	// The URI for the image to use for this worker.  See the guide
	// for more information.
	// +kubebuilder:validation:Optional
	ImageURI *string `json:"imageUri,omitempty" tf:"image_uri,omitempty"`

	// The name of a Google Compute Engine machine type
	// to create for the worker nodes. If not specified, GCP will default to a predetermined
	// computed value (currently n1-standard-4).
	// +kubebuilder:validation:Optional
	MachineType *string `json:"machineType,omitempty" tf:"machine_type,omitempty"`

	// The name of a minimum generation of CPU family
	// for the master. If not specified, GCP will default to a predetermined computed value
	// for each zone. See the guide
	// for details about which CPU families are available (and defaulted) for each zone.
	// +kubebuilder:validation:Optional
	MinCPUPlatform *string `json:"minCpuPlatform,omitempty" tf:"min_cpu_platform,omitempty"`

	// The minimum number of primary worker instances to create.  If min_num_instances is set, cluster creation will succeed if the number of primary workers created is at least equal to the min_num_instances number.
	// +kubebuilder:validation:Optional
	MinNumInstances *float64 `json:"minNumInstances,omitempty" tf:"min_num_instances,omitempty"`

	// Specifies the number of worker nodes to create.
	// If not specified, GCP will default to a predetermined computed value (currently 2).
	// There is currently a beta feature which allows you to run a
	// Single Node Cluster.
	// In order to take advantage of this you need to set
	// "dataproc:dataproc.allow.zero.workers" = "true" in
	// cluster_config.software_config.properties
	// +kubebuilder:validation:Optional
	NumInstances *float64 `json:"numInstances,omitempty" tf:"num_instances,omitempty"`
}

type ClusterInitParameters struct {

	// Allows you to configure various aspects of the cluster.
	// Structure defined below.
	ClusterConfig []ClusterConfigInitParameters `json:"clusterConfig,omitempty" tf:"cluster_config,omitempty"`

	// Does not affect auto scaling decomissioning from an autoscaling policy.
	// Graceful decommissioning allows removing nodes from the cluster without interrupting jobs in progress.
	// Timeout specifies how long to wait for jobs in progress to finish before forcefully removing nodes (and potentially interrupting jobs).
	// Default timeout is 0 (for forceful decommission), and the maximum allowed timeout is 1 day. (see JSON representation of
	// Duration).
	// Only supported on Dataproc image versions 1.2 and higher.
	// For more context see the docs
	GracefulDecommissionTimeout *string `json:"gracefulDecommissionTimeout,omitempty" tf:"graceful_decommission_timeout,omitempty"`

	// Note: This field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field effective_labels for all of the labels present on the resource.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The name of the cluster, unique within the project and
	// zone.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of the project in which the cluster will exist. If it
	// is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The region in which the cluster and associated nodes will be created in.
	// Defaults to global.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Allows you to configure a virtual Dataproc on GKE cluster.
	// Structure defined below.
	VirtualClusterConfig []VirtualClusterConfigInitParameters `json:"virtualClusterConfig,omitempty" tf:"virtual_cluster_config,omitempty"`
}

type ClusterObservation struct {

	// Allows you to configure various aspects of the cluster.
	// Structure defined below.
	ClusterConfig []ClusterConfigObservation `json:"clusterConfig,omitempty" tf:"cluster_config,omitempty"`

	// (Computed) The list of labels (key/value pairs) to be applied to
	// instances in the cluster. GCP generates some itself including goog-dataproc-cluster-name
	// which is the name of the cluster.
	// +mapType=granular
	EffectiveLabels map[string]*string `json:"effectiveLabels,omitempty" tf:"effective_labels,omitempty"`

	// Does not affect auto scaling decomissioning from an autoscaling policy.
	// Graceful decommissioning allows removing nodes from the cluster without interrupting jobs in progress.
	// Timeout specifies how long to wait for jobs in progress to finish before forcefully removing nodes (and potentially interrupting jobs).
	// Default timeout is 0 (for forceful decommission), and the maximum allowed timeout is 1 day. (see JSON representation of
	// Duration).
	// Only supported on Dataproc image versions 1.2 and higher.
	// For more context see the docs
	GracefulDecommissionTimeout *string `json:"gracefulDecommissionTimeout,omitempty" tf:"graceful_decommission_timeout,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Note: This field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field effective_labels for all of the labels present on the resource.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The name of the cluster, unique within the project and
	// zone.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of the project in which the cluster will exist. If it
	// is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The region in which the cluster and associated nodes will be created in.
	// Defaults to global.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The combination of labels configured directly on the resource and default labels configured on the provider.
	// +mapType=granular
	TerraformLabels map[string]*string `json:"terraformLabels,omitempty" tf:"terraform_labels,omitempty"`

	// Allows you to configure a virtual Dataproc on GKE cluster.
	// Structure defined below.
	VirtualClusterConfig []VirtualClusterConfigObservation `json:"virtualClusterConfig,omitempty" tf:"virtual_cluster_config,omitempty"`
}

type ClusterParameters struct {

	// Allows you to configure various aspects of the cluster.
	// Structure defined below.
	// +kubebuilder:validation:Optional
	ClusterConfig []ClusterConfigParameters `json:"clusterConfig,omitempty" tf:"cluster_config,omitempty"`

	// Does not affect auto scaling decomissioning from an autoscaling policy.
	// Graceful decommissioning allows removing nodes from the cluster without interrupting jobs in progress.
	// Timeout specifies how long to wait for jobs in progress to finish before forcefully removing nodes (and potentially interrupting jobs).
	// Default timeout is 0 (for forceful decommission), and the maximum allowed timeout is 1 day. (see JSON representation of
	// Duration).
	// Only supported on Dataproc image versions 1.2 and higher.
	// For more context see the docs
	// +kubebuilder:validation:Optional
	GracefulDecommissionTimeout *string `json:"gracefulDecommissionTimeout,omitempty" tf:"graceful_decommission_timeout,omitempty"`

	// Note: This field is non-authoritative, and will only manage the labels present in your configuration. Please refer to the field effective_labels for all of the labels present on the resource.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The name of the cluster, unique within the project and
	// zone.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of the project in which the cluster will exist. If it
	// is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The region in which the cluster and associated nodes will be created in.
	// Defaults to global.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Allows you to configure a virtual Dataproc on GKE cluster.
	// Structure defined below.
	// +kubebuilder:validation:Optional
	VirtualClusterConfig []VirtualClusterConfigParameters `json:"virtualClusterConfig,omitempty" tf:"virtual_cluster_config,omitempty"`
}

type ConfigInitParameters struct {

	// The number of local SSD disks to attach to the node,
	// which is limited by the maximum number of disks allowable per zone.
	LocalSsdCount *float64 `json:"localSsdCount,omitempty" tf:"local_ssd_count,omitempty"`

	// The name of a Compute Engine machine type.
	MachineType *string `json:"machineType,omitempty" tf:"machine_type,omitempty"`

	// Minimum CPU platform to be used by this instance.
	// The instance may be scheduled on the specified or a newer CPU platform.
	// Specify the friendly names of CPU platforms, such as "Intel Haswell" or "Intel Sandy Bridge".
	MinCPUPlatform *string `json:"minCpuPlatform,omitempty" tf:"min_cpu_platform,omitempty"`

	// Whether the nodes are created as preemptible VM instances.
	// Preemptible nodes cannot be used in a node pool with the CONTROLLER role or in the DEFAULT node pool if the
	// CONTROLLER role is not assigned (the DEFAULT node pool will assume the CONTROLLER role).
	Preemptible *bool `json:"preemptible,omitempty" tf:"preemptible,omitempty"`

	// Spot flag for enabling Spot VM, which is a rebrand of the existing preemptible flag.
	Spot *bool `json:"spot,omitempty" tf:"spot,omitempty"`
}

type ConfigObservation struct {

	// The number of local SSD disks to attach to the node,
	// which is limited by the maximum number of disks allowable per zone.
	LocalSsdCount *float64 `json:"localSsdCount,omitempty" tf:"local_ssd_count,omitempty"`

	// The name of a Compute Engine machine type.
	MachineType *string `json:"machineType,omitempty" tf:"machine_type,omitempty"`

	// Minimum CPU platform to be used by this instance.
	// The instance may be scheduled on the specified or a newer CPU platform.
	// Specify the friendly names of CPU platforms, such as "Intel Haswell" or "Intel Sandy Bridge".
	MinCPUPlatform *string `json:"minCpuPlatform,omitempty" tf:"min_cpu_platform,omitempty"`

	// Whether the nodes are created as preemptible VM instances.
	// Preemptible nodes cannot be used in a node pool with the CONTROLLER role or in the DEFAULT node pool if the
	// CONTROLLER role is not assigned (the DEFAULT node pool will assume the CONTROLLER role).
	Preemptible *bool `json:"preemptible,omitempty" tf:"preemptible,omitempty"`

	// Spot flag for enabling Spot VM, which is a rebrand of the existing preemptible flag.
	Spot *bool `json:"spot,omitempty" tf:"spot,omitempty"`
}

type ConfigParameters struct {

	// The number of local SSD disks to attach to the node,
	// which is limited by the maximum number of disks allowable per zone.
	// +kubebuilder:validation:Optional
	LocalSsdCount *float64 `json:"localSsdCount,omitempty" tf:"local_ssd_count,omitempty"`

	// The name of a Compute Engine machine type.
	// +kubebuilder:validation:Optional
	MachineType *string `json:"machineType,omitempty" tf:"machine_type,omitempty"`

	// Minimum CPU platform to be used by this instance.
	// The instance may be scheduled on the specified or a newer CPU platform.
	// Specify the friendly names of CPU platforms, such as "Intel Haswell" or "Intel Sandy Bridge".
	// +kubebuilder:validation:Optional
	MinCPUPlatform *string `json:"minCpuPlatform,omitempty" tf:"min_cpu_platform,omitempty"`

	// Whether the nodes are created as preemptible VM instances.
	// Preemptible nodes cannot be used in a node pool with the CONTROLLER role or in the DEFAULT node pool if the
	// CONTROLLER role is not assigned (the DEFAULT node pool will assume the CONTROLLER role).
	// +kubebuilder:validation:Optional
	Preemptible *bool `json:"preemptible,omitempty" tf:"preemptible,omitempty"`

	// Spot flag for enabling Spot VM, which is a rebrand of the existing preemptible flag.
	// +kubebuilder:validation:Optional
	Spot *bool `json:"spot,omitempty" tf:"spot,omitempty"`
}

type DataprocMetricConfigInitParameters struct {

	// Metrics sources to enable.
	Metrics []MetricsInitParameters `json:"metrics,omitempty" tf:"metrics,omitempty"`
}

type DataprocMetricConfigObservation struct {

	// Metrics sources to enable.
	Metrics []MetricsObservation `json:"metrics,omitempty" tf:"metrics,omitempty"`
}

type DataprocMetricConfigParameters struct {

	// Metrics sources to enable.
	// +kubebuilder:validation:Optional
	Metrics []MetricsParameters `json:"metrics" tf:"metrics,omitempty"`
}

type DiskConfigInitParameters struct {

	// Size of the primary disk attached to each node, specified
	// in GB. The primary disk contains the boot volume and system libraries, and the
	// smallest allowed disk size is 10GB. GCP will default to a predetermined
	// computed value if not set (currently 500GB). Note: If SSDs are not
	// attached, it also contains the HDFS data blocks and Hadoop working directories.
	BootDiskSizeGb *float64 `json:"bootDiskSizeGb,omitempty" tf:"boot_disk_size_gb,omitempty"`

	// The disk type of the primary disk attached to each node.
	// One of "pd-ssd" or "pd-standard". Defaults to "pd-standard".
	BootDiskType *string `json:"bootDiskType,omitempty" tf:"boot_disk_type,omitempty"`

	// The amount of local SSD disks that will be
	// attached to each master cluster node. Defaults to 0.
	NumLocalSsds *float64 `json:"numLocalSsds,omitempty" tf:"num_local_ssds,omitempty"`
}

type DiskConfigObservation struct {

	// Size of the primary disk attached to each node, specified
	// in GB. The primary disk contains the boot volume and system libraries, and the
	// smallest allowed disk size is 10GB. GCP will default to a predetermined
	// computed value if not set (currently 500GB). Note: If SSDs are not
	// attached, it also contains the HDFS data blocks and Hadoop working directories.
	BootDiskSizeGb *float64 `json:"bootDiskSizeGb,omitempty" tf:"boot_disk_size_gb,omitempty"`

	// The disk type of the primary disk attached to each node.
	// One of "pd-ssd" or "pd-standard". Defaults to "pd-standard".
	BootDiskType *string `json:"bootDiskType,omitempty" tf:"boot_disk_type,omitempty"`

	// The amount of local SSD disks that will be
	// attached to each master cluster node. Defaults to 0.
	NumLocalSsds *float64 `json:"numLocalSsds,omitempty" tf:"num_local_ssds,omitempty"`
}

type DiskConfigParameters struct {

	// Size of the primary disk attached to each node, specified
	// in GB. The primary disk contains the boot volume and system libraries, and the
	// smallest allowed disk size is 10GB. GCP will default to a predetermined
	// computed value if not set (currently 500GB). Note: If SSDs are not
	// attached, it also contains the HDFS data blocks and Hadoop working directories.
	// +kubebuilder:validation:Optional
	BootDiskSizeGb *float64 `json:"bootDiskSizeGb,omitempty" tf:"boot_disk_size_gb,omitempty"`

	// The disk type of the primary disk attached to each node.
	// One of "pd-ssd" or "pd-standard". Defaults to "pd-standard".
	// +kubebuilder:validation:Optional
	BootDiskType *string `json:"bootDiskType,omitempty" tf:"boot_disk_type,omitempty"`

	// The amount of local SSD disks that will be
	// attached to each master cluster node. Defaults to 0.
	// +kubebuilder:validation:Optional
	NumLocalSsds *float64 `json:"numLocalSsds,omitempty" tf:"num_local_ssds,omitempty"`
}

type EncryptionConfigInitParameters struct {

	// The Cloud KMS key name to use for PD disk encryption for
	// all instances in the cluster.
	KMSKeyName *string `json:"kmsKeyName,omitempty" tf:"kms_key_name,omitempty"`
}

type EncryptionConfigObservation struct {

	// The Cloud KMS key name to use for PD disk encryption for
	// all instances in the cluster.
	KMSKeyName *string `json:"kmsKeyName,omitempty" tf:"kms_key_name,omitempty"`
}

type EncryptionConfigParameters struct {

	// The Cloud KMS key name to use for PD disk encryption for
	// all instances in the cluster.
	// +kubebuilder:validation:Optional
	KMSKeyName *string `json:"kmsKeyName" tf:"kms_key_name,omitempty"`
}

type EndpointConfigInitParameters struct {

	// The flag to enable http access to specific ports
	// on the cluster from external sources (aka Component Gateway). Defaults to false.
	EnableHTTPPortAccess *bool `json:"enableHttpPortAccess,omitempty" tf:"enable_http_port_access,omitempty"`
}

type EndpointConfigObservation struct {

	// The flag to enable http access to specific ports
	// on the cluster from external sources (aka Component Gateway). Defaults to false.
	EnableHTTPPortAccess *bool `json:"enableHttpPortAccess,omitempty" tf:"enable_http_port_access,omitempty"`

	// The map of port descriptions to URLs. Will only be populated if
	// enable_http_port_access is true.
	// +mapType=granular
	HTTPPorts map[string]*string `json:"httpPorts,omitempty" tf:"http_ports,omitempty"`
}

type EndpointConfigParameters struct {

	// The flag to enable http access to specific ports
	// on the cluster from external sources (aka Component Gateway). Defaults to false.
	// +kubebuilder:validation:Optional
	EnableHTTPPortAccess *bool `json:"enableHttpPortAccess" tf:"enable_http_port_access,omitempty"`
}

type GceClusterConfigInitParameters struct {

	// By default, clusters are not restricted to internal IP addresses,
	// and will have ephemeral external IP addresses assigned to each instance. If set to true, all
	// instances in the cluster will only have internal IP addresses. Note: Private Google Access
	// (also known as privateIpGoogleAccess) must be enabled on the subnetwork that the cluster
	// will be launched in.
	InternalIPOnly *bool `json:"internalIpOnly,omitempty" tf:"internal_ip_only,omitempty"`

	// A map of the Compute Engine metadata entries to add to all instances
	// (see Project and instance metadata).
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// The name or self_link of the Google Compute Engine
	// network to the cluster will be part of. Conflicts with subnetwork.
	// If neither is specified, this defaults to the "default" network.
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// Node Group Affinity for sole-tenant clusters.
	NodeGroupAffinity []NodeGroupAffinityInitParameters `json:"nodeGroupAffinity,omitempty" tf:"node_group_affinity,omitempty"`

	// Reservation Affinity for consuming zonal reservation.
	ReservationAffinity []ReservationAffinityInitParameters `json:"reservationAffinity,omitempty" tf:"reservation_affinity,omitempty"`

	// The service account to be used by the Node VMs.
	// If not specified, the "default" service account is used.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/cloudplatform/v1beta1.ServiceAccount
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("email",true)
	ServiceAccount *string `json:"serviceAccount,omitempty" tf:"service_account,omitempty"`

	// Reference to a ServiceAccount in cloudplatform to populate serviceAccount.
	// +kubebuilder:validation:Optional
	ServiceAccountRef *v1.Reference `json:"serviceAccountRef,omitempty" tf:"-"`

	// The set of Google API scopes
	// to be made available on all of the node VMs under the service_account
	// specified. Both OAuth2 URLs and gcloud
	// short names are supported. To allow full access to all Cloud APIs, use the
	// cloud-platform scope. See a complete list of scopes here.
	// +listType=set
	ServiceAccountScopes []*string `json:"serviceAccountScopes,omitempty" tf:"service_account_scopes,omitempty"`

	// Selector for a ServiceAccount in cloudplatform to populate serviceAccount.
	// +kubebuilder:validation:Optional
	ServiceAccountSelector *v1.Selector `json:"serviceAccountSelector,omitempty" tf:"-"`

	// Shielded Instance Config for clusters using Compute Engine Shielded VMs.
	ShieldedInstanceConfig []ShieldedInstanceConfigInitParameters `json:"shieldedInstanceConfig,omitempty" tf:"shielded_instance_config,omitempty"`

	// The name or self_link of the Google Compute Engine
	// subnetwork the cluster will be part of. Conflicts with network.
	Subnetwork *string `json:"subnetwork,omitempty" tf:"subnetwork,omitempty"`

	// The list of instance tags applied to instances in the cluster.
	// Tags are used to identify valid sources or targets for network firewalls.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The GCP zone where your data is stored and used (i.e. where
	// the master and the worker nodes will be created in). If region is set to 'global' (default)
	// then zone is mandatory, otherwise GCP is able to make use of Auto Zone Placement
	// to determine this automatically for you.
	// Note: This setting additionally determines and restricts
	// which computing resources are available for use with other configs such as
	// cluster_config.master_config.machine_type and cluster_config.worker_config.machine_type.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type GceClusterConfigObservation struct {

	// By default, clusters are not restricted to internal IP addresses,
	// and will have ephemeral external IP addresses assigned to each instance. If set to true, all
	// instances in the cluster will only have internal IP addresses. Note: Private Google Access
	// (also known as privateIpGoogleAccess) must be enabled on the subnetwork that the cluster
	// will be launched in.
	InternalIPOnly *bool `json:"internalIpOnly,omitempty" tf:"internal_ip_only,omitempty"`

	// A map of the Compute Engine metadata entries to add to all instances
	// (see Project and instance metadata).
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// The name or self_link of the Google Compute Engine
	// network to the cluster will be part of. Conflicts with subnetwork.
	// If neither is specified, this defaults to the "default" network.
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// Node Group Affinity for sole-tenant clusters.
	NodeGroupAffinity []NodeGroupAffinityObservation `json:"nodeGroupAffinity,omitempty" tf:"node_group_affinity,omitempty"`

	// Reservation Affinity for consuming zonal reservation.
	ReservationAffinity []ReservationAffinityObservation `json:"reservationAffinity,omitempty" tf:"reservation_affinity,omitempty"`

	// The service account to be used by the Node VMs.
	// If not specified, the "default" service account is used.
	ServiceAccount *string `json:"serviceAccount,omitempty" tf:"service_account,omitempty"`

	// The set of Google API scopes
	// to be made available on all of the node VMs under the service_account
	// specified. Both OAuth2 URLs and gcloud
	// short names are supported. To allow full access to all Cloud APIs, use the
	// cloud-platform scope. See a complete list of scopes here.
	// +listType=set
	ServiceAccountScopes []*string `json:"serviceAccountScopes,omitempty" tf:"service_account_scopes,omitempty"`

	// Shielded Instance Config for clusters using Compute Engine Shielded VMs.
	ShieldedInstanceConfig []ShieldedInstanceConfigObservation `json:"shieldedInstanceConfig,omitempty" tf:"shielded_instance_config,omitempty"`

	// The name or self_link of the Google Compute Engine
	// subnetwork the cluster will be part of. Conflicts with network.
	Subnetwork *string `json:"subnetwork,omitempty" tf:"subnetwork,omitempty"`

	// The list of instance tags applied to instances in the cluster.
	// Tags are used to identify valid sources or targets for network firewalls.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The GCP zone where your data is stored and used (i.e. where
	// the master and the worker nodes will be created in). If region is set to 'global' (default)
	// then zone is mandatory, otherwise GCP is able to make use of Auto Zone Placement
	// to determine this automatically for you.
	// Note: This setting additionally determines and restricts
	// which computing resources are available for use with other configs such as
	// cluster_config.master_config.machine_type and cluster_config.worker_config.machine_type.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type GceClusterConfigParameters struct {

	// By default, clusters are not restricted to internal IP addresses,
	// and will have ephemeral external IP addresses assigned to each instance. If set to true, all
	// instances in the cluster will only have internal IP addresses. Note: Private Google Access
	// (also known as privateIpGoogleAccess) must be enabled on the subnetwork that the cluster
	// will be launched in.
	// +kubebuilder:validation:Optional
	InternalIPOnly *bool `json:"internalIpOnly,omitempty" tf:"internal_ip_only,omitempty"`

	// A map of the Compute Engine metadata entries to add to all instances
	// (see Project and instance metadata).
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// The name or self_link of the Google Compute Engine
	// network to the cluster will be part of. Conflicts with subnetwork.
	// If neither is specified, this defaults to the "default" network.
	// +kubebuilder:validation:Optional
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// Node Group Affinity for sole-tenant clusters.
	// +kubebuilder:validation:Optional
	NodeGroupAffinity []NodeGroupAffinityParameters `json:"nodeGroupAffinity,omitempty" tf:"node_group_affinity,omitempty"`

	// Reservation Affinity for consuming zonal reservation.
	// +kubebuilder:validation:Optional
	ReservationAffinity []ReservationAffinityParameters `json:"reservationAffinity,omitempty" tf:"reservation_affinity,omitempty"`

	// The service account to be used by the Node VMs.
	// If not specified, the "default" service account is used.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/cloudplatform/v1beta1.ServiceAccount
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("email",true)
	// +kubebuilder:validation:Optional
	ServiceAccount *string `json:"serviceAccount,omitempty" tf:"service_account,omitempty"`

	// Reference to a ServiceAccount in cloudplatform to populate serviceAccount.
	// +kubebuilder:validation:Optional
	ServiceAccountRef *v1.Reference `json:"serviceAccountRef,omitempty" tf:"-"`

	// The set of Google API scopes
	// to be made available on all of the node VMs under the service_account
	// specified. Both OAuth2 URLs and gcloud
	// short names are supported. To allow full access to all Cloud APIs, use the
	// cloud-platform scope. See a complete list of scopes here.
	// +kubebuilder:validation:Optional
	// +listType=set
	ServiceAccountScopes []*string `json:"serviceAccountScopes,omitempty" tf:"service_account_scopes,omitempty"`

	// Selector for a ServiceAccount in cloudplatform to populate serviceAccount.
	// +kubebuilder:validation:Optional
	ServiceAccountSelector *v1.Selector `json:"serviceAccountSelector,omitempty" tf:"-"`

	// Shielded Instance Config for clusters using Compute Engine Shielded VMs.
	// +kubebuilder:validation:Optional
	ShieldedInstanceConfig []ShieldedInstanceConfigParameters `json:"shieldedInstanceConfig,omitempty" tf:"shielded_instance_config,omitempty"`

	// The name or self_link of the Google Compute Engine
	// subnetwork the cluster will be part of. Conflicts with network.
	// +kubebuilder:validation:Optional
	Subnetwork *string `json:"subnetwork,omitempty" tf:"subnetwork,omitempty"`

	// The list of instance tags applied to instances in the cluster.
	// Tags are used to identify valid sources or targets for network firewalls.
	// +kubebuilder:validation:Optional
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The GCP zone where your data is stored and used (i.e. where
	// the master and the worker nodes will be created in). If region is set to 'global' (default)
	// then zone is mandatory, otherwise GCP is able to make use of Auto Zone Placement
	// to determine this automatically for you.
	// Note: This setting additionally determines and restricts
	// which computing resources are available for use with other configs such as
	// cluster_config.master_config.machine_type and cluster_config.worker_config.machine_type.
	// +kubebuilder:validation:Optional
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type GkeClusterConfigInitParameters struct {

	// A target GKE cluster to deploy to. It must be in the same project and region as the Dataproc cluster
	// (the GKE cluster can be zonal or regional)
	GkeClusterTarget *string `json:"gkeClusterTarget,omitempty" tf:"gke_cluster_target,omitempty"`

	// GKE node pools where workloads will be scheduled. At least one node pool must be assigned the DEFAULT
	// GkeNodePoolTarget.Role. If a GkeNodePoolTarget is not specified, Dataproc constructs a DEFAULT GkeNodePoolTarget.
	// Each role can be given to only one GkeNodePoolTarget. All node pools must have the same location settings.
	NodePoolTarget []NodePoolTargetInitParameters `json:"nodePoolTarget,omitempty" tf:"node_pool_target,omitempty"`
}

type GkeClusterConfigObservation struct {

	// A target GKE cluster to deploy to. It must be in the same project and region as the Dataproc cluster
	// (the GKE cluster can be zonal or regional)
	GkeClusterTarget *string `json:"gkeClusterTarget,omitempty" tf:"gke_cluster_target,omitempty"`

	// GKE node pools where workloads will be scheduled. At least one node pool must be assigned the DEFAULT
	// GkeNodePoolTarget.Role. If a GkeNodePoolTarget is not specified, Dataproc constructs a DEFAULT GkeNodePoolTarget.
	// Each role can be given to only one GkeNodePoolTarget. All node pools must have the same location settings.
	NodePoolTarget []NodePoolTargetObservation `json:"nodePoolTarget,omitempty" tf:"node_pool_target,omitempty"`
}

type GkeClusterConfigParameters struct {

	// A target GKE cluster to deploy to. It must be in the same project and region as the Dataproc cluster
	// (the GKE cluster can be zonal or regional)
	// +kubebuilder:validation:Optional
	GkeClusterTarget *string `json:"gkeClusterTarget,omitempty" tf:"gke_cluster_target,omitempty"`

	// GKE node pools where workloads will be scheduled. At least one node pool must be assigned the DEFAULT
	// GkeNodePoolTarget.Role. If a GkeNodePoolTarget is not specified, Dataproc constructs a DEFAULT GkeNodePoolTarget.
	// Each role can be given to only one GkeNodePoolTarget. All node pools must have the same location settings.
	// +kubebuilder:validation:Optional
	NodePoolTarget []NodePoolTargetParameters `json:"nodePoolTarget,omitempty" tf:"node_pool_target,omitempty"`
}

type InitializationActionInitParameters struct {

	// The script to be executed during initialization of the cluster.
	// The script must be a GCS file with a gs:// prefix.
	Script *string `json:"script,omitempty" tf:"script,omitempty"`

	// The maximum duration (in seconds) which script is
	// allowed to take to execute its action. GCP will default to a predetermined
	// computed value if not set (currently 300).
	TimeoutSec *float64 `json:"timeoutSec,omitempty" tf:"timeout_sec,omitempty"`
}

type InitializationActionObservation struct {

	// The script to be executed during initialization of the cluster.
	// The script must be a GCS file with a gs:// prefix.
	Script *string `json:"script,omitempty" tf:"script,omitempty"`

	// The maximum duration (in seconds) which script is
	// allowed to take to execute its action. GCP will default to a predetermined
	// computed value if not set (currently 300).
	TimeoutSec *float64 `json:"timeoutSec,omitempty" tf:"timeout_sec,omitempty"`
}

type InitializationActionParameters struct {

	// The script to be executed during initialization of the cluster.
	// The script must be a GCS file with a gs:// prefix.
	// +kubebuilder:validation:Optional
	Script *string `json:"script" tf:"script,omitempty"`

	// The maximum duration (in seconds) which script is
	// allowed to take to execute its action. GCP will default to a predetermined
	// computed value if not set (currently 300).
	// +kubebuilder:validation:Optional
	TimeoutSec *float64 `json:"timeoutSec,omitempty" tf:"timeout_sec,omitempty"`
}

type InstanceFlexibilityPolicyInitParameters struct {

	// List of instance selection options that the group will use when creating new VMs.
	InstanceSelectionList []InstanceSelectionListInitParameters `json:"instanceSelectionList,omitempty" tf:"instance_selection_list,omitempty"`
}

type InstanceFlexibilityPolicyObservation struct {

	// List of instance selection options that the group will use when creating new VMs.
	InstanceSelectionList []InstanceSelectionListObservation `json:"instanceSelectionList,omitempty" tf:"instance_selection_list,omitempty"`

	InstanceSelectionResults []InstanceSelectionResultsObservation `json:"instanceSelectionResults,omitempty" tf:"instance_selection_results,omitempty"`
}

type InstanceFlexibilityPolicyParameters struct {

	// List of instance selection options that the group will use when creating new VMs.
	// +kubebuilder:validation:Optional
	InstanceSelectionList []InstanceSelectionListParameters `json:"instanceSelectionList,omitempty" tf:"instance_selection_list,omitempty"`
}

type InstanceSelectionListInitParameters struct {

	// Full machine-type names, e.g. "n1-standard-16".
	MachineTypes []*string `json:"machineTypes,omitempty" tf:"machine_types,omitempty"`

	// Preference of this instance selection. A lower number means higher preference. Dataproc will first try to create a VM based on the machine-type with priority rank and fallback to next rank based on availability. Machine types and instance selections with the same priority have the same preference.
	Rank *float64 `json:"rank,omitempty" tf:"rank,omitempty"`
}

type InstanceSelectionListObservation struct {

	// Full machine-type names, e.g. "n1-standard-16".
	MachineTypes []*string `json:"machineTypes,omitempty" tf:"machine_types,omitempty"`

	// Preference of this instance selection. A lower number means higher preference. Dataproc will first try to create a VM based on the machine-type with priority rank and fallback to next rank based on availability. Machine types and instance selections with the same priority have the same preference.
	Rank *float64 `json:"rank,omitempty" tf:"rank,omitempty"`
}

type InstanceSelectionListParameters struct {

	// Full machine-type names, e.g. "n1-standard-16".
	// +kubebuilder:validation:Optional
	MachineTypes []*string `json:"machineTypes,omitempty" tf:"machine_types,omitempty"`

	// Preference of this instance selection. A lower number means higher preference. Dataproc will first try to create a VM based on the machine-type with priority rank and fallback to next rank based on availability. Machine types and instance selections with the same priority have the same preference.
	// +kubebuilder:validation:Optional
	Rank *float64 `json:"rank,omitempty" tf:"rank,omitempty"`
}

type InstanceSelectionResultsInitParameters struct {
}

type InstanceSelectionResultsObservation struct {

	// The name of a Compute Engine machine type.
	MachineType *string `json:"machineType,omitempty" tf:"machine_type,omitempty"`

	VMCount *float64 `json:"vmCount,omitempty" tf:"vm_count,omitempty"`
}

type InstanceSelectionResultsParameters struct {
}

type KerberosConfigInitParameters struct {

	// The admin server (IP or hostname) for the
	// remote trusted realm in a cross realm trust relationship.
	CrossRealmTrustAdminServer *string `json:"crossRealmTrustAdminServer,omitempty" tf:"cross_realm_trust_admin_server,omitempty"`

	// The KDC (IP or hostname) for the
	// remote trusted realm in a cross realm trust relationship.
	CrossRealmTrustKdc *string `json:"crossRealmTrustKdc,omitempty" tf:"cross_realm_trust_kdc,omitempty"`

	// The remote realm the Dataproc on-cluster KDC will
	// trust, should the user enable cross realm trust.
	CrossRealmTrustRealm *string `json:"crossRealmTrustRealm,omitempty" tf:"cross_realm_trust_realm,omitempty"`

	// The Cloud Storage URI of a KMS
	// encrypted file containing the shared password between the on-cluster Kerberos realm
	// and the remote trusted realm, in a cross realm trust relationship.
	CrossRealmTrustSharedPasswordURI *string `json:"crossRealmTrustSharedPasswordUri,omitempty" tf:"cross_realm_trust_shared_password_uri,omitempty"`

	// Flag to indicate whether to Kerberize the cluster.
	EnableKerberos *bool `json:"enableKerberos,omitempty" tf:"enable_kerberos,omitempty"`

	// The URI of the KMS key used to encrypt various sensitive files.
	KMSKeyURI *string `json:"kmsKeyUri,omitempty" tf:"kms_key_uri,omitempty"`

	// The Cloud Storage URI of a KMS encrypted file containing
	// the master key of the KDC database.
	KdcDBKeyURI *string `json:"kdcDbKeyUri,omitempty" tf:"kdc_db_key_uri,omitempty"`

	// The Cloud Storage URI of a KMS encrypted file containing
	// the password to the user provided key. For the self-signed certificate, this password
	// is generated by Dataproc.
	KeyPasswordURI *string `json:"keyPasswordUri,omitempty" tf:"key_password_uri,omitempty"`

	// The Cloud Storage URI of a KMS encrypted file containing
	// the password to the user provided keystore. For the self-signed certificated, the password
	// is generated by Dataproc.
	KeystorePasswordURI *string `json:"keystorePasswordUri,omitempty" tf:"keystore_password_uri,omitempty"`

	// The Cloud Storage URI of the keystore file used for SSL encryption.
	// If not provided, Dataproc will provide a self-signed certificate.
	KeystoreURI *string `json:"keystoreUri,omitempty" tf:"keystore_uri,omitempty"`

	// The name of the on-cluster Kerberos realm. If not specified, the
	// uppercased domain of hostnames will be the realm.
	Realm *string `json:"realm,omitempty" tf:"realm,omitempty"`

	// The Cloud Storage URI of a KMS encrypted file
	// containing the root principal password.
	RootPrincipalPasswordURI *string `json:"rootPrincipalPasswordUri,omitempty" tf:"root_principal_password_uri,omitempty"`

	// The lifetime of the ticket granting ticket, in hours.
	TgtLifetimeHours *float64 `json:"tgtLifetimeHours,omitempty" tf:"tgt_lifetime_hours,omitempty"`

	// The Cloud Storage URI of a KMS encrypted file
	// containing the password to the user provided truststore. For the self-signed
	// certificate, this password is generated by Dataproc.
	TruststorePasswordURI *string `json:"truststorePasswordUri,omitempty" tf:"truststore_password_uri,omitempty"`

	// The Cloud Storage URI of the truststore file used for
	// SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
	TruststoreURI *string `json:"truststoreUri,omitempty" tf:"truststore_uri,omitempty"`
}

type KerberosConfigObservation struct {

	// The admin server (IP or hostname) for the
	// remote trusted realm in a cross realm trust relationship.
	CrossRealmTrustAdminServer *string `json:"crossRealmTrustAdminServer,omitempty" tf:"cross_realm_trust_admin_server,omitempty"`

	// The KDC (IP or hostname) for the
	// remote trusted realm in a cross realm trust relationship.
	CrossRealmTrustKdc *string `json:"crossRealmTrustKdc,omitempty" tf:"cross_realm_trust_kdc,omitempty"`

	// The remote realm the Dataproc on-cluster KDC will
	// trust, should the user enable cross realm trust.
	CrossRealmTrustRealm *string `json:"crossRealmTrustRealm,omitempty" tf:"cross_realm_trust_realm,omitempty"`

	// The Cloud Storage URI of a KMS
	// encrypted file containing the shared password between the on-cluster Kerberos realm
	// and the remote trusted realm, in a cross realm trust relationship.
	CrossRealmTrustSharedPasswordURI *string `json:"crossRealmTrustSharedPasswordUri,omitempty" tf:"cross_realm_trust_shared_password_uri,omitempty"`

	// Flag to indicate whether to Kerberize the cluster.
	EnableKerberos *bool `json:"enableKerberos,omitempty" tf:"enable_kerberos,omitempty"`

	// The URI of the KMS key used to encrypt various sensitive files.
	KMSKeyURI *string `json:"kmsKeyUri,omitempty" tf:"kms_key_uri,omitempty"`

	// The Cloud Storage URI of a KMS encrypted file containing
	// the master key of the KDC database.
	KdcDBKeyURI *string `json:"kdcDbKeyUri,omitempty" tf:"kdc_db_key_uri,omitempty"`

	// The Cloud Storage URI of a KMS encrypted file containing
	// the password to the user provided key. For the self-signed certificate, this password
	// is generated by Dataproc.
	KeyPasswordURI *string `json:"keyPasswordUri,omitempty" tf:"key_password_uri,omitempty"`

	// The Cloud Storage URI of a KMS encrypted file containing
	// the password to the user provided keystore. For the self-signed certificated, the password
	// is generated by Dataproc.
	KeystorePasswordURI *string `json:"keystorePasswordUri,omitempty" tf:"keystore_password_uri,omitempty"`

	// The Cloud Storage URI of the keystore file used for SSL encryption.
	// If not provided, Dataproc will provide a self-signed certificate.
	KeystoreURI *string `json:"keystoreUri,omitempty" tf:"keystore_uri,omitempty"`

	// The name of the on-cluster Kerberos realm. If not specified, the
	// uppercased domain of hostnames will be the realm.
	Realm *string `json:"realm,omitempty" tf:"realm,omitempty"`

	// The Cloud Storage URI of a KMS encrypted file
	// containing the root principal password.
	RootPrincipalPasswordURI *string `json:"rootPrincipalPasswordUri,omitempty" tf:"root_principal_password_uri,omitempty"`

	// The lifetime of the ticket granting ticket, in hours.
	TgtLifetimeHours *float64 `json:"tgtLifetimeHours,omitempty" tf:"tgt_lifetime_hours,omitempty"`

	// The Cloud Storage URI of a KMS encrypted file
	// containing the password to the user provided truststore. For the self-signed
	// certificate, this password is generated by Dataproc.
	TruststorePasswordURI *string `json:"truststorePasswordUri,omitempty" tf:"truststore_password_uri,omitempty"`

	// The Cloud Storage URI of the truststore file used for
	// SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
	TruststoreURI *string `json:"truststoreUri,omitempty" tf:"truststore_uri,omitempty"`
}

type KerberosConfigParameters struct {

	// The admin server (IP or hostname) for the
	// remote trusted realm in a cross realm trust relationship.
	// +kubebuilder:validation:Optional
	CrossRealmTrustAdminServer *string `json:"crossRealmTrustAdminServer,omitempty" tf:"cross_realm_trust_admin_server,omitempty"`

	// The KDC (IP or hostname) for the
	// remote trusted realm in a cross realm trust relationship.
	// +kubebuilder:validation:Optional
	CrossRealmTrustKdc *string `json:"crossRealmTrustKdc,omitempty" tf:"cross_realm_trust_kdc,omitempty"`

	// The remote realm the Dataproc on-cluster KDC will
	// trust, should the user enable cross realm trust.
	// +kubebuilder:validation:Optional
	CrossRealmTrustRealm *string `json:"crossRealmTrustRealm,omitempty" tf:"cross_realm_trust_realm,omitempty"`

	// The Cloud Storage URI of a KMS
	// encrypted file containing the shared password between the on-cluster Kerberos realm
	// and the remote trusted realm, in a cross realm trust relationship.
	// +kubebuilder:validation:Optional
	CrossRealmTrustSharedPasswordURI *string `json:"crossRealmTrustSharedPasswordUri,omitempty" tf:"cross_realm_trust_shared_password_uri,omitempty"`

	// Flag to indicate whether to Kerberize the cluster.
	// +kubebuilder:validation:Optional
	EnableKerberos *bool `json:"enableKerberos,omitempty" tf:"enable_kerberos,omitempty"`

	// The URI of the KMS key used to encrypt various sensitive files.
	// +kubebuilder:validation:Optional
	KMSKeyURI *string `json:"kmsKeyUri" tf:"kms_key_uri,omitempty"`

	// The Cloud Storage URI of a KMS encrypted file containing
	// the master key of the KDC database.
	// +kubebuilder:validation:Optional
	KdcDBKeyURI *string `json:"kdcDbKeyUri,omitempty" tf:"kdc_db_key_uri,omitempty"`

	// The Cloud Storage URI of a KMS encrypted file containing
	// the password to the user provided key. For the self-signed certificate, this password
	// is generated by Dataproc.
	// +kubebuilder:validation:Optional
	KeyPasswordURI *string `json:"keyPasswordUri,omitempty" tf:"key_password_uri,omitempty"`

	// The Cloud Storage URI of a KMS encrypted file containing
	// the password to the user provided keystore. For the self-signed certificated, the password
	// is generated by Dataproc.
	// +kubebuilder:validation:Optional
	KeystorePasswordURI *string `json:"keystorePasswordUri,omitempty" tf:"keystore_password_uri,omitempty"`

	// The Cloud Storage URI of the keystore file used for SSL encryption.
	// If not provided, Dataproc will provide a self-signed certificate.
	// +kubebuilder:validation:Optional
	KeystoreURI *string `json:"keystoreUri,omitempty" tf:"keystore_uri,omitempty"`

	// The name of the on-cluster Kerberos realm. If not specified, the
	// uppercased domain of hostnames will be the realm.
	// +kubebuilder:validation:Optional
	Realm *string `json:"realm,omitempty" tf:"realm,omitempty"`

	// The Cloud Storage URI of a KMS encrypted file
	// containing the root principal password.
	// +kubebuilder:validation:Optional
	RootPrincipalPasswordURI *string `json:"rootPrincipalPasswordUri" tf:"root_principal_password_uri,omitempty"`

	// The lifetime of the ticket granting ticket, in hours.
	// +kubebuilder:validation:Optional
	TgtLifetimeHours *float64 `json:"tgtLifetimeHours,omitempty" tf:"tgt_lifetime_hours,omitempty"`

	// The Cloud Storage URI of a KMS encrypted file
	// containing the password to the user provided truststore. For the self-signed
	// certificate, this password is generated by Dataproc.
	// +kubebuilder:validation:Optional
	TruststorePasswordURI *string `json:"truststorePasswordUri,omitempty" tf:"truststore_password_uri,omitempty"`

	// The Cloud Storage URI of the truststore file used for
	// SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
	// +kubebuilder:validation:Optional
	TruststoreURI *string `json:"truststoreUri,omitempty" tf:"truststore_uri,omitempty"`
}

type KubernetesClusterConfigInitParameters struct {

	// The configuration for running the Dataproc cluster on GKE.
	GkeClusterConfig []GkeClusterConfigInitParameters `json:"gkeClusterConfig,omitempty" tf:"gke_cluster_config,omitempty"`

	// A namespace within the Kubernetes cluster to deploy into.
	// If this namespace does not exist, it is created.
	// If it  exists, Dataproc verifies that another Dataproc VirtualCluster is not installed into it.
	// If not specified, the name of the Dataproc Cluster is used.
	KubernetesNamespace *string `json:"kubernetesNamespace,omitempty" tf:"kubernetes_namespace,omitempty"`

	// The software configuration for this Dataproc cluster running on Kubernetes.
	KubernetesSoftwareConfig []KubernetesSoftwareConfigInitParameters `json:"kubernetesSoftwareConfig,omitempty" tf:"kubernetes_software_config,omitempty"`
}

type KubernetesClusterConfigObservation struct {

	// The configuration for running the Dataproc cluster on GKE.
	GkeClusterConfig []GkeClusterConfigObservation `json:"gkeClusterConfig,omitempty" tf:"gke_cluster_config,omitempty"`

	// A namespace within the Kubernetes cluster to deploy into.
	// If this namespace does not exist, it is created.
	// If it  exists, Dataproc verifies that another Dataproc VirtualCluster is not installed into it.
	// If not specified, the name of the Dataproc Cluster is used.
	KubernetesNamespace *string `json:"kubernetesNamespace,omitempty" tf:"kubernetes_namespace,omitempty"`

	// The software configuration for this Dataproc cluster running on Kubernetes.
	KubernetesSoftwareConfig []KubernetesSoftwareConfigObservation `json:"kubernetesSoftwareConfig,omitempty" tf:"kubernetes_software_config,omitempty"`
}

type KubernetesClusterConfigParameters struct {

	// The configuration for running the Dataproc cluster on GKE.
	// +kubebuilder:validation:Optional
	GkeClusterConfig []GkeClusterConfigParameters `json:"gkeClusterConfig" tf:"gke_cluster_config,omitempty"`

	// A namespace within the Kubernetes cluster to deploy into.
	// If this namespace does not exist, it is created.
	// If it  exists, Dataproc verifies that another Dataproc VirtualCluster is not installed into it.
	// If not specified, the name of the Dataproc Cluster is used.
	// +kubebuilder:validation:Optional
	KubernetesNamespace *string `json:"kubernetesNamespace,omitempty" tf:"kubernetes_namespace,omitempty"`

	// The software configuration for this Dataproc cluster running on Kubernetes.
	// +kubebuilder:validation:Optional
	KubernetesSoftwareConfig []KubernetesSoftwareConfigParameters `json:"kubernetesSoftwareConfig" tf:"kubernetes_software_config,omitempty"`
}

type KubernetesSoftwareConfigInitParameters struct {

	// The components that should be installed in this Dataproc cluster. The key must be a string from the
	// KubernetesComponent enumeration. The value is the version of the software to be installed. At least one entry must be specified.
	// +mapType=granular
	ComponentVersion map[string]*string `json:"componentVersion,omitempty" tf:"component_version,omitempty"`

	// The properties to set on daemon config files. Property keys are specified in prefix:property format,
	// for example spark:spark.kubernetes.container.image.
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`
}

type KubernetesSoftwareConfigObservation struct {

	// The components that should be installed in this Dataproc cluster. The key must be a string from the
	// KubernetesComponent enumeration. The value is the version of the software to be installed. At least one entry must be specified.
	// +mapType=granular
	ComponentVersion map[string]*string `json:"componentVersion,omitempty" tf:"component_version,omitempty"`

	// The properties to set on daemon config files. Property keys are specified in prefix:property format,
	// for example spark:spark.kubernetes.container.image.
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`
}

type KubernetesSoftwareConfigParameters struct {

	// The components that should be installed in this Dataproc cluster. The key must be a string from the
	// KubernetesComponent enumeration. The value is the version of the software to be installed. At least one entry must be specified.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	ComponentVersion map[string]*string `json:"componentVersion" tf:"component_version,omitempty"`

	// The properties to set on daemon config files. Property keys are specified in prefix:property format,
	// for example spark:spark.kubernetes.container.image.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`
}

type LifecycleConfigInitParameters struct {

	// The time when cluster will be auto-deleted.
	// A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds.
	// Example: "2014-10-02T15:01:23.045123456Z".
	AutoDeleteTime *string `json:"autoDeleteTime,omitempty" tf:"auto_delete_time,omitempty"`

	// The duration to keep the cluster alive while idling
	// (no jobs running). After this TTL, the cluster will be deleted. Valid range: [10m, 14d].
	IdleDeleteTTL *string `json:"idleDeleteTtl,omitempty" tf:"idle_delete_ttl,omitempty"`
}

type LifecycleConfigObservation struct {

	// The time when cluster will be auto-deleted.
	// A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds.
	// Example: "2014-10-02T15:01:23.045123456Z".
	AutoDeleteTime *string `json:"autoDeleteTime,omitempty" tf:"auto_delete_time,omitempty"`

	// The duration to keep the cluster alive while idling
	// (no jobs running). After this TTL, the cluster will be deleted. Valid range: [10m, 14d].
	IdleDeleteTTL *string `json:"idleDeleteTtl,omitempty" tf:"idle_delete_ttl,omitempty"`

	// Time when the cluster became idle
	// (most recent job finished) and became eligible for deletion due to idleness.
	IdleStartTime *string `json:"idleStartTime,omitempty" tf:"idle_start_time,omitempty"`
}

type LifecycleConfigParameters struct {

	// The time when cluster will be auto-deleted.
	// A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds.
	// Example: "2014-10-02T15:01:23.045123456Z".
	// +kubebuilder:validation:Optional
	AutoDeleteTime *string `json:"autoDeleteTime,omitempty" tf:"auto_delete_time,omitempty"`

	// The duration to keep the cluster alive while idling
	// (no jobs running). After this TTL, the cluster will be deleted. Valid range: [10m, 14d].
	// +kubebuilder:validation:Optional
	IdleDeleteTTL *string `json:"idleDeleteTtl,omitempty" tf:"idle_delete_ttl,omitempty"`
}

type MasterConfigAcceleratorsInitParameters struct {

	// The number of the accelerator cards of this type exposed to this instance. Often restricted to one of 1, 2, 4, or 8.
	AcceleratorCount *float64 `json:"acceleratorCount,omitempty" tf:"accelerator_count,omitempty"`

	// The short name of the accelerator type to expose to this instance. For example, nvidia-tesla-k80.
	AcceleratorType *string `json:"acceleratorType,omitempty" tf:"accelerator_type,omitempty"`
}

type MasterConfigAcceleratorsObservation struct {

	// The number of the accelerator cards of this type exposed to this instance. Often restricted to one of 1, 2, 4, or 8.
	AcceleratorCount *float64 `json:"acceleratorCount,omitempty" tf:"accelerator_count,omitempty"`

	// The short name of the accelerator type to expose to this instance. For example, nvidia-tesla-k80.
	AcceleratorType *string `json:"acceleratorType,omitempty" tf:"accelerator_type,omitempty"`
}

type MasterConfigAcceleratorsParameters struct {

	// The number of the accelerator cards of this type exposed to this instance. Often restricted to one of 1, 2, 4, or 8.
	// +kubebuilder:validation:Optional
	AcceleratorCount *float64 `json:"acceleratorCount" tf:"accelerator_count,omitempty"`

	// The short name of the accelerator type to expose to this instance. For example, nvidia-tesla-k80.
	// +kubebuilder:validation:Optional
	AcceleratorType *string `json:"acceleratorType" tf:"accelerator_type,omitempty"`
}

type MasterConfigDiskConfigInitParameters struct {

	// Size of the primary disk attached to each node, specified
	// in GB. The primary disk contains the boot volume and system libraries, and the
	// smallest allowed disk size is 10GB. GCP will default to a predetermined
	// computed value if not set (currently 500GB). Note: If SSDs are not
	// attached, it also contains the HDFS data blocks and Hadoop working directories.
	BootDiskSizeGb *float64 `json:"bootDiskSizeGb,omitempty" tf:"boot_disk_size_gb,omitempty"`

	// The disk type of the primary disk attached to each node.
	// One of "pd-ssd" or "pd-standard". Defaults to "pd-standard".
	BootDiskType *string `json:"bootDiskType,omitempty" tf:"boot_disk_type,omitempty"`

	// The amount of local SSD disks that will be
	// attached to each master cluster node. Defaults to 0.
	NumLocalSsds *float64 `json:"numLocalSsds,omitempty" tf:"num_local_ssds,omitempty"`
}

type MasterConfigDiskConfigObservation struct {

	// Size of the primary disk attached to each node, specified
	// in GB. The primary disk contains the boot volume and system libraries, and the
	// smallest allowed disk size is 10GB. GCP will default to a predetermined
	// computed value if not set (currently 500GB). Note: If SSDs are not
	// attached, it also contains the HDFS data blocks and Hadoop working directories.
	BootDiskSizeGb *float64 `json:"bootDiskSizeGb,omitempty" tf:"boot_disk_size_gb,omitempty"`

	// The disk type of the primary disk attached to each node.
	// One of "pd-ssd" or "pd-standard". Defaults to "pd-standard".
	BootDiskType *string `json:"bootDiskType,omitempty" tf:"boot_disk_type,omitempty"`

	// The amount of local SSD disks that will be
	// attached to each master cluster node. Defaults to 0.
	NumLocalSsds *float64 `json:"numLocalSsds,omitempty" tf:"num_local_ssds,omitempty"`
}

type MasterConfigDiskConfigParameters struct {

	// Size of the primary disk attached to each node, specified
	// in GB. The primary disk contains the boot volume and system libraries, and the
	// smallest allowed disk size is 10GB. GCP will default to a predetermined
	// computed value if not set (currently 500GB). Note: If SSDs are not
	// attached, it also contains the HDFS data blocks and Hadoop working directories.
	// +kubebuilder:validation:Optional
	BootDiskSizeGb *float64 `json:"bootDiskSizeGb,omitempty" tf:"boot_disk_size_gb,omitempty"`

	// The disk type of the primary disk attached to each node.
	// One of "pd-ssd" or "pd-standard". Defaults to "pd-standard".
	// +kubebuilder:validation:Optional
	BootDiskType *string `json:"bootDiskType,omitempty" tf:"boot_disk_type,omitempty"`

	// The amount of local SSD disks that will be
	// attached to each master cluster node. Defaults to 0.
	// +kubebuilder:validation:Optional
	NumLocalSsds *float64 `json:"numLocalSsds,omitempty" tf:"num_local_ssds,omitempty"`
}

type MasterConfigInitParameters struct {

	// The Compute Engine accelerator (GPU) configuration for these instances. Can be specified multiple times.
	Accelerators []MasterConfigAcceleratorsInitParameters `json:"accelerators,omitempty" tf:"accelerators,omitempty"`

	// Disk Config
	DiskConfig []MasterConfigDiskConfigInitParameters `json:"diskConfig,omitempty" tf:"disk_config,omitempty"`

	// The URI for the image to use for this worker.  See the guide
	// for more information.
	ImageURI *string `json:"imageUri,omitempty" tf:"image_uri,omitempty"`

	// The name of a Google Compute Engine machine type
	// to create for the master. If not specified, GCP will default to a predetermined
	// computed value (currently n1-standard-4).
	MachineType *string `json:"machineType,omitempty" tf:"machine_type,omitempty"`

	// The name of a minimum generation of CPU family
	// for the master. If not specified, GCP will default to a predetermined computed value
	// for each zone. See the guide
	// for details about which CPU families are available (and defaulted) for each zone.
	MinCPUPlatform *string `json:"minCpuPlatform,omitempty" tf:"min_cpu_platform,omitempty"`

	// Specifies the number of master nodes to create.
	// If not specified, GCP will default to a predetermined computed value (currently 1).
	NumInstances *float64 `json:"numInstances,omitempty" tf:"num_instances,omitempty"`
}

type MasterConfigObservation struct {

	// The Compute Engine accelerator (GPU) configuration for these instances. Can be specified multiple times.
	Accelerators []MasterConfigAcceleratorsObservation `json:"accelerators,omitempty" tf:"accelerators,omitempty"`

	// Disk Config
	DiskConfig []MasterConfigDiskConfigObservation `json:"diskConfig,omitempty" tf:"disk_config,omitempty"`

	// The URI for the image to use for this worker.  See the guide
	// for more information.
	ImageURI *string `json:"imageUri,omitempty" tf:"image_uri,omitempty"`

	// List of worker instance names which have been assigned
	// to the cluster.
	InstanceNames []*string `json:"instanceNames,omitempty" tf:"instance_names,omitempty"`

	// The name of a Google Compute Engine machine type
	// to create for the master. If not specified, GCP will default to a predetermined
	// computed value (currently n1-standard-4).
	MachineType *string `json:"machineType,omitempty" tf:"machine_type,omitempty"`

	// The name of a minimum generation of CPU family
	// for the master. If not specified, GCP will default to a predetermined computed value
	// for each zone. See the guide
	// for details about which CPU families are available (and defaulted) for each zone.
	MinCPUPlatform *string `json:"minCpuPlatform,omitempty" tf:"min_cpu_platform,omitempty"`

	// Specifies the number of master nodes to create.
	// If not specified, GCP will default to a predetermined computed value (currently 1).
	NumInstances *float64 `json:"numInstances,omitempty" tf:"num_instances,omitempty"`
}

type MasterConfigParameters struct {

	// The Compute Engine accelerator (GPU) configuration for these instances. Can be specified multiple times.
	// +kubebuilder:validation:Optional
	Accelerators []MasterConfigAcceleratorsParameters `json:"accelerators,omitempty" tf:"accelerators,omitempty"`

	// Disk Config
	// +kubebuilder:validation:Optional
	DiskConfig []MasterConfigDiskConfigParameters `json:"diskConfig,omitempty" tf:"disk_config,omitempty"`

	// The URI for the image to use for this worker.  See the guide
	// for more information.
	// +kubebuilder:validation:Optional
	ImageURI *string `json:"imageUri,omitempty" tf:"image_uri,omitempty"`

	// The name of a Google Compute Engine machine type
	// to create for the master. If not specified, GCP will default to a predetermined
	// computed value (currently n1-standard-4).
	// +kubebuilder:validation:Optional
	MachineType *string `json:"machineType,omitempty" tf:"machine_type,omitempty"`

	// The name of a minimum generation of CPU family
	// for the master. If not specified, GCP will default to a predetermined computed value
	// for each zone. See the guide
	// for details about which CPU families are available (and defaulted) for each zone.
	// +kubebuilder:validation:Optional
	MinCPUPlatform *string `json:"minCpuPlatform,omitempty" tf:"min_cpu_platform,omitempty"`

	// Specifies the number of master nodes to create.
	// If not specified, GCP will default to a predetermined computed value (currently 1).
	// +kubebuilder:validation:Optional
	NumInstances *float64 `json:"numInstances,omitempty" tf:"num_instances,omitempty"`
}

type MetastoreConfigInitParameters struct {

	// Resource name of an existing Dataproc Metastore service.
	DataprocMetastoreService *string `json:"dataprocMetastoreService,omitempty" tf:"dataproc_metastore_service,omitempty"`
}

type MetastoreConfigObservation struct {

	// Resource name of an existing Dataproc Metastore service.
	DataprocMetastoreService *string `json:"dataprocMetastoreService,omitempty" tf:"dataproc_metastore_service,omitempty"`
}

type MetastoreConfigParameters struct {

	// Resource name of an existing Dataproc Metastore service.
	// +kubebuilder:validation:Optional
	DataprocMetastoreService *string `json:"dataprocMetastoreService" tf:"dataproc_metastore_service,omitempty"`
}

type MetricsInitParameters struct {

	// One or more [available OSS metrics] (https://cloud.google.com/dataproc/docs/guides/monitoring#available_oss_metrics) to collect for the metric course.
	// +listType=set
	MetricOverrides []*string `json:"metricOverrides,omitempty" tf:"metric_overrides,omitempty"`

	// A source for the collection of Dataproc OSS metrics (see available OSS metrics).
	MetricSource *string `json:"metricSource,omitempty" tf:"metric_source,omitempty"`
}

type MetricsObservation struct {

	// One or more [available OSS metrics] (https://cloud.google.com/dataproc/docs/guides/monitoring#available_oss_metrics) to collect for the metric course.
	// +listType=set
	MetricOverrides []*string `json:"metricOverrides,omitempty" tf:"metric_overrides,omitempty"`

	// A source for the collection of Dataproc OSS metrics (see available OSS metrics).
	MetricSource *string `json:"metricSource,omitempty" tf:"metric_source,omitempty"`
}

type MetricsParameters struct {

	// One or more [available OSS metrics] (https://cloud.google.com/dataproc/docs/guides/monitoring#available_oss_metrics) to collect for the metric course.
	// +kubebuilder:validation:Optional
	// +listType=set
	MetricOverrides []*string `json:"metricOverrides,omitempty" tf:"metric_overrides,omitempty"`

	// A source for the collection of Dataproc OSS metrics (see available OSS metrics).
	// +kubebuilder:validation:Optional
	MetricSource *string `json:"metricSource" tf:"metric_source,omitempty"`
}

type NodeGroupAffinityInitParameters struct {

	// The URI of a sole-tenant node group resource that the cluster will be created on.
	NodeGroupURI *string `json:"nodeGroupUri,omitempty" tf:"node_group_uri,omitempty"`
}

type NodeGroupAffinityObservation struct {

	// The URI of a sole-tenant node group resource that the cluster will be created on.
	NodeGroupURI *string `json:"nodeGroupUri,omitempty" tf:"node_group_uri,omitempty"`
}

type NodeGroupAffinityParameters struct {

	// The URI of a sole-tenant node group resource that the cluster will be created on.
	// +kubebuilder:validation:Optional
	NodeGroupURI *string `json:"nodeGroupUri" tf:"node_group_uri,omitempty"`
}

type NodeGroupConfigInitParameters struct {

	// The Compute Engine accelerator configuration for these instances. Can be specified multiple times.
	Accelerators []AcceleratorsInitParameters `json:"accelerators,omitempty" tf:"accelerators,omitempty"`

	// Disk Config
	DiskConfig []DiskConfigInitParameters `json:"diskConfig,omitempty" tf:"disk_config,omitempty"`

	// The name of a Compute Engine machine type.
	MachineType *string `json:"machineType,omitempty" tf:"machine_type,omitempty"`

	// Minimum CPU platform to be used by this instance.
	// The instance may be scheduled on the specified or a newer CPU platform.
	// Specify the friendly names of CPU platforms, such as "Intel Haswell" or "Intel Sandy Bridge".
	MinCPUPlatform *string `json:"minCpuPlatform,omitempty" tf:"min_cpu_platform,omitempty"`

	// Specifies the number of master nodes to create.
	// Please set a number greater than 0. Node Group must have at least 1 instance.
	NumInstances *float64 `json:"numInstances,omitempty" tf:"num_instances,omitempty"`
}

type NodeGroupConfigObservation struct {

	// The Compute Engine accelerator configuration for these instances. Can be specified multiple times.
	Accelerators []AcceleratorsObservation `json:"accelerators,omitempty" tf:"accelerators,omitempty"`

	// Disk Config
	DiskConfig []DiskConfigObservation `json:"diskConfig,omitempty" tf:"disk_config,omitempty"`

	// List of worker instance names which have been assigned
	// to the cluster.
	InstanceNames []*string `json:"instanceNames,omitempty" tf:"instance_names,omitempty"`

	// The name of a Compute Engine machine type.
	MachineType *string `json:"machineType,omitempty" tf:"machine_type,omitempty"`

	// Minimum CPU platform to be used by this instance.
	// The instance may be scheduled on the specified or a newer CPU platform.
	// Specify the friendly names of CPU platforms, such as "Intel Haswell" or "Intel Sandy Bridge".
	MinCPUPlatform *string `json:"minCpuPlatform,omitempty" tf:"min_cpu_platform,omitempty"`

	// Specifies the number of master nodes to create.
	// Please set a number greater than 0. Node Group must have at least 1 instance.
	NumInstances *float64 `json:"numInstances,omitempty" tf:"num_instances,omitempty"`
}

type NodeGroupConfigParameters struct {

	// The Compute Engine accelerator configuration for these instances. Can be specified multiple times.
	// +kubebuilder:validation:Optional
	Accelerators []AcceleratorsParameters `json:"accelerators,omitempty" tf:"accelerators,omitempty"`

	// Disk Config
	// +kubebuilder:validation:Optional
	DiskConfig []DiskConfigParameters `json:"diskConfig,omitempty" tf:"disk_config,omitempty"`

	// The name of a Compute Engine machine type.
	// +kubebuilder:validation:Optional
	MachineType *string `json:"machineType,omitempty" tf:"machine_type,omitempty"`

	// Minimum CPU platform to be used by this instance.
	// The instance may be scheduled on the specified or a newer CPU platform.
	// Specify the friendly names of CPU platforms, such as "Intel Haswell" or "Intel Sandy Bridge".
	// +kubebuilder:validation:Optional
	MinCPUPlatform *string `json:"minCpuPlatform,omitempty" tf:"min_cpu_platform,omitempty"`

	// Specifies the number of master nodes to create.
	// Please set a number greater than 0. Node Group must have at least 1 instance.
	// +kubebuilder:validation:Optional
	NumInstances *float64 `json:"numInstances,omitempty" tf:"num_instances,omitempty"`
}

type NodeGroupInitParameters struct {

	// The node group instance group configuration.
	NodeGroupConfig []NodeGroupConfigInitParameters `json:"nodeGroupConfig,omitempty" tf:"node_group_config,omitempty"`

	// The roles associated with the GKE node pool.
	// One of "DEFAULT", "CONTROLLER", "SPARK_DRIVER" or "SPARK_EXECUTOR".
	Roles []*string `json:"roles,omitempty" tf:"roles,omitempty"`
}

type NodeGroupObservation struct {

	// The name of the cluster, unique within the project and
	// zone.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The node group instance group configuration.
	NodeGroupConfig []NodeGroupConfigObservation `json:"nodeGroupConfig,omitempty" tf:"node_group_config,omitempty"`

	// The roles associated with the GKE node pool.
	// One of "DEFAULT", "CONTROLLER", "SPARK_DRIVER" or "SPARK_EXECUTOR".
	Roles []*string `json:"roles,omitempty" tf:"roles,omitempty"`
}

type NodeGroupParameters struct {

	// The node group instance group configuration.
	// +kubebuilder:validation:Optional
	NodeGroupConfig []NodeGroupConfigParameters `json:"nodeGroupConfig,omitempty" tf:"node_group_config,omitempty"`

	// The roles associated with the GKE node pool.
	// One of "DEFAULT", "CONTROLLER", "SPARK_DRIVER" or "SPARK_EXECUTOR".
	// +kubebuilder:validation:Optional
	Roles []*string `json:"roles" tf:"roles,omitempty"`
}

type NodePoolConfigInitParameters struct {

	// The autoscaler configuration for this node pool.
	// The autoscaler is enabled only when a valid configuration is present.
	Autoscaling []AutoscalingInitParameters `json:"autoscaling,omitempty" tf:"autoscaling,omitempty"`

	// The node pool configuration.
	Config []ConfigInitParameters `json:"config,omitempty" tf:"config,omitempty"`

	// The list of Compute Engine zones where node pool nodes associated
	// with a Dataproc on GKE virtual cluster will be located.
	// +listType=set
	Locations []*string `json:"locations,omitempty" tf:"locations,omitempty"`
}

type NodePoolConfigObservation struct {

	// The autoscaler configuration for this node pool.
	// The autoscaler is enabled only when a valid configuration is present.
	Autoscaling []AutoscalingObservation `json:"autoscaling,omitempty" tf:"autoscaling,omitempty"`

	// The node pool configuration.
	Config []ConfigObservation `json:"config,omitempty" tf:"config,omitempty"`

	// The list of Compute Engine zones where node pool nodes associated
	// with a Dataproc on GKE virtual cluster will be located.
	// +listType=set
	Locations []*string `json:"locations,omitempty" tf:"locations,omitempty"`
}

type NodePoolConfigParameters struct {

	// The autoscaler configuration for this node pool.
	// The autoscaler is enabled only when a valid configuration is present.
	// +kubebuilder:validation:Optional
	Autoscaling []AutoscalingParameters `json:"autoscaling,omitempty" tf:"autoscaling,omitempty"`

	// The node pool configuration.
	// +kubebuilder:validation:Optional
	Config []ConfigParameters `json:"config,omitempty" tf:"config,omitempty"`

	// The list of Compute Engine zones where node pool nodes associated
	// with a Dataproc on GKE virtual cluster will be located.
	// +kubebuilder:validation:Optional
	// +listType=set
	Locations []*string `json:"locations" tf:"locations,omitempty"`
}

type NodePoolTargetInitParameters struct {

	// The target GKE node pool.
	NodePool *string `json:"nodePool,omitempty" tf:"node_pool,omitempty"`

	// (Input only) The configuration for the GKE node pool.
	// If specified, Dataproc attempts to create a node pool with the specified shape.
	// If one with the same name already exists, it is verified against all specified fields.
	// If a field differs, the virtual cluster creation will fail.
	NodePoolConfig []NodePoolConfigInitParameters `json:"nodePoolConfig,omitempty" tf:"node_pool_config,omitempty"`

	// The roles associated with the GKE node pool.
	// One of "DEFAULT", "CONTROLLER", "SPARK_DRIVER" or "SPARK_EXECUTOR".
	// +listType=set
	Roles []*string `json:"roles,omitempty" tf:"roles,omitempty"`
}

type NodePoolTargetObservation struct {

	// The target GKE node pool.
	NodePool *string `json:"nodePool,omitempty" tf:"node_pool,omitempty"`

	// (Input only) The configuration for the GKE node pool.
	// If specified, Dataproc attempts to create a node pool with the specified shape.
	// If one with the same name already exists, it is verified against all specified fields.
	// If a field differs, the virtual cluster creation will fail.
	NodePoolConfig []NodePoolConfigObservation `json:"nodePoolConfig,omitempty" tf:"node_pool_config,omitempty"`

	// The roles associated with the GKE node pool.
	// One of "DEFAULT", "CONTROLLER", "SPARK_DRIVER" or "SPARK_EXECUTOR".
	// +listType=set
	Roles []*string `json:"roles,omitempty" tf:"roles,omitempty"`
}

type NodePoolTargetParameters struct {

	// The target GKE node pool.
	// +kubebuilder:validation:Optional
	NodePool *string `json:"nodePool" tf:"node_pool,omitempty"`

	// (Input only) The configuration for the GKE node pool.
	// If specified, Dataproc attempts to create a node pool with the specified shape.
	// If one with the same name already exists, it is verified against all specified fields.
	// If a field differs, the virtual cluster creation will fail.
	// +kubebuilder:validation:Optional
	NodePoolConfig []NodePoolConfigParameters `json:"nodePoolConfig,omitempty" tf:"node_pool_config,omitempty"`

	// The roles associated with the GKE node pool.
	// One of "DEFAULT", "CONTROLLER", "SPARK_DRIVER" or "SPARK_EXECUTOR".
	// +kubebuilder:validation:Optional
	// +listType=set
	Roles []*string `json:"roles" tf:"roles,omitempty"`
}

type PreemptibleWorkerConfigDiskConfigInitParameters struct {

	// Size of the primary disk attached to each node, specified
	// in GB. The primary disk contains the boot volume and system libraries, and the
	// smallest allowed disk size is 10GB. GCP will default to a predetermined
	// computed value if not set (currently 500GB). Note: If SSDs are not
	// attached, it also contains the HDFS data blocks and Hadoop working directories.
	BootDiskSizeGb *float64 `json:"bootDiskSizeGb,omitempty" tf:"boot_disk_size_gb,omitempty"`

	// The disk type of the primary disk attached to each node.
	// One of "pd-ssd" or "pd-standard". Defaults to "pd-standard".
	BootDiskType *string `json:"bootDiskType,omitempty" tf:"boot_disk_type,omitempty"`

	// The amount of local SSD disks that will be
	// attached to each master cluster node. Defaults to 0.
	NumLocalSsds *float64 `json:"numLocalSsds,omitempty" tf:"num_local_ssds,omitempty"`
}

type PreemptibleWorkerConfigDiskConfigObservation struct {

	// Size of the primary disk attached to each node, specified
	// in GB. The primary disk contains the boot volume and system libraries, and the
	// smallest allowed disk size is 10GB. GCP will default to a predetermined
	// computed value if not set (currently 500GB). Note: If SSDs are not
	// attached, it also contains the HDFS data blocks and Hadoop working directories.
	BootDiskSizeGb *float64 `json:"bootDiskSizeGb,omitempty" tf:"boot_disk_size_gb,omitempty"`

	// The disk type of the primary disk attached to each node.
	// One of "pd-ssd" or "pd-standard". Defaults to "pd-standard".
	BootDiskType *string `json:"bootDiskType,omitempty" tf:"boot_disk_type,omitempty"`

	// The amount of local SSD disks that will be
	// attached to each master cluster node. Defaults to 0.
	NumLocalSsds *float64 `json:"numLocalSsds,omitempty" tf:"num_local_ssds,omitempty"`
}

type PreemptibleWorkerConfigDiskConfigParameters struct {

	// Size of the primary disk attached to each node, specified
	// in GB. The primary disk contains the boot volume and system libraries, and the
	// smallest allowed disk size is 10GB. GCP will default to a predetermined
	// computed value if not set (currently 500GB). Note: If SSDs are not
	// attached, it also contains the HDFS data blocks and Hadoop working directories.
	// +kubebuilder:validation:Optional
	BootDiskSizeGb *float64 `json:"bootDiskSizeGb,omitempty" tf:"boot_disk_size_gb,omitempty"`

	// The disk type of the primary disk attached to each node.
	// One of "pd-ssd" or "pd-standard". Defaults to "pd-standard".
	// +kubebuilder:validation:Optional
	BootDiskType *string `json:"bootDiskType,omitempty" tf:"boot_disk_type,omitempty"`

	// The amount of local SSD disks that will be
	// attached to each master cluster node. Defaults to 0.
	// +kubebuilder:validation:Optional
	NumLocalSsds *float64 `json:"numLocalSsds,omitempty" tf:"num_local_ssds,omitempty"`
}

type PreemptibleWorkerConfigInitParameters struct {

	// Disk Config
	DiskConfig []PreemptibleWorkerConfigDiskConfigInitParameters `json:"diskConfig,omitempty" tf:"disk_config,omitempty"`

	// Instance flexibility Policy allowing a mixture of VM shapes and provisioning models.
	InstanceFlexibilityPolicy []InstanceFlexibilityPolicyInitParameters `json:"instanceFlexibilityPolicy,omitempty" tf:"instance_flexibility_policy,omitempty"`

	// Specifies the number of preemptible nodes to create.
	// Defaults to 0.
	NumInstances *float64 `json:"numInstances,omitempty" tf:"num_instances,omitempty"`

	// Specifies the preemptibility of the secondary workers. The default value is PREEMPTIBLE
	// Accepted values are:
	Preemptibility *string `json:"preemptibility,omitempty" tf:"preemptibility,omitempty"`
}

type PreemptibleWorkerConfigObservation struct {

	// Disk Config
	DiskConfig []PreemptibleWorkerConfigDiskConfigObservation `json:"diskConfig,omitempty" tf:"disk_config,omitempty"`

	// Instance flexibility Policy allowing a mixture of VM shapes and provisioning models.
	InstanceFlexibilityPolicy []InstanceFlexibilityPolicyObservation `json:"instanceFlexibilityPolicy,omitempty" tf:"instance_flexibility_policy,omitempty"`

	// List of worker instance names which have been assigned
	// to the cluster.
	InstanceNames []*string `json:"instanceNames,omitempty" tf:"instance_names,omitempty"`

	// Specifies the number of preemptible nodes to create.
	// Defaults to 0.
	NumInstances *float64 `json:"numInstances,omitempty" tf:"num_instances,omitempty"`

	// Specifies the preemptibility of the secondary workers. The default value is PREEMPTIBLE
	// Accepted values are:
	Preemptibility *string `json:"preemptibility,omitempty" tf:"preemptibility,omitempty"`
}

type PreemptibleWorkerConfigParameters struct {

	// Disk Config
	// +kubebuilder:validation:Optional
	DiskConfig []PreemptibleWorkerConfigDiskConfigParameters `json:"diskConfig,omitempty" tf:"disk_config,omitempty"`

	// Instance flexibility Policy allowing a mixture of VM shapes and provisioning models.
	// +kubebuilder:validation:Optional
	InstanceFlexibilityPolicy []InstanceFlexibilityPolicyParameters `json:"instanceFlexibilityPolicy,omitempty" tf:"instance_flexibility_policy,omitempty"`

	// Specifies the number of preemptible nodes to create.
	// Defaults to 0.
	// +kubebuilder:validation:Optional
	NumInstances *float64 `json:"numInstances,omitempty" tf:"num_instances,omitempty"`

	// Specifies the preemptibility of the secondary workers. The default value is PREEMPTIBLE
	// Accepted values are:
	// +kubebuilder:validation:Optional
	Preemptibility *string `json:"preemptibility,omitempty" tf:"preemptibility,omitempty"`
}

type ReservationAffinityInitParameters struct {

	// Corresponds to the type of reservation consumption.
	ConsumeReservationType *string `json:"consumeReservationType,omitempty" tf:"consume_reservation_type,omitempty"`

	// Corresponds to the label key of reservation resource.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Corresponds to the label values of reservation resource.
	// +listType=set
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type ReservationAffinityObservation struct {

	// Corresponds to the type of reservation consumption.
	ConsumeReservationType *string `json:"consumeReservationType,omitempty" tf:"consume_reservation_type,omitempty"`

	// Corresponds to the label key of reservation resource.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Corresponds to the label values of reservation resource.
	// +listType=set
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type ReservationAffinityParameters struct {

	// Corresponds to the type of reservation consumption.
	// +kubebuilder:validation:Optional
	ConsumeReservationType *string `json:"consumeReservationType,omitempty" tf:"consume_reservation_type,omitempty"`

	// Corresponds to the label key of reservation resource.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Corresponds to the label values of reservation resource.
	// +kubebuilder:validation:Optional
	// +listType=set
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type SecurityConfigInitParameters struct {

	// Kerberos Configuration
	KerberosConfig []KerberosConfigInitParameters `json:"kerberosConfig,omitempty" tf:"kerberos_config,omitempty"`
}

type SecurityConfigObservation struct {

	// Kerberos Configuration
	KerberosConfig []KerberosConfigObservation `json:"kerberosConfig,omitempty" tf:"kerberos_config,omitempty"`
}

type SecurityConfigParameters struct {

	// Kerberos Configuration
	// +kubebuilder:validation:Optional
	KerberosConfig []KerberosConfigParameters `json:"kerberosConfig" tf:"kerberos_config,omitempty"`
}

type ShieldedInstanceConfigInitParameters struct {

	// Defines whether instances have integrity monitoring enabled.
	EnableIntegrityMonitoring *bool `json:"enableIntegrityMonitoring,omitempty" tf:"enable_integrity_monitoring,omitempty"`

	// Defines whether instances have Secure Boot enabled.
	EnableSecureBoot *bool `json:"enableSecureBoot,omitempty" tf:"enable_secure_boot,omitempty"`

	// Defines whether instances have the vTPM enabled.
	EnableVtpm *bool `json:"enableVtpm,omitempty" tf:"enable_vtpm,omitempty"`
}

type ShieldedInstanceConfigObservation struct {

	// Defines whether instances have integrity monitoring enabled.
	EnableIntegrityMonitoring *bool `json:"enableIntegrityMonitoring,omitempty" tf:"enable_integrity_monitoring,omitempty"`

	// Defines whether instances have Secure Boot enabled.
	EnableSecureBoot *bool `json:"enableSecureBoot,omitempty" tf:"enable_secure_boot,omitempty"`

	// Defines whether instances have the vTPM enabled.
	EnableVtpm *bool `json:"enableVtpm,omitempty" tf:"enable_vtpm,omitempty"`
}

type ShieldedInstanceConfigParameters struct {

	// Defines whether instances have integrity monitoring enabled.
	// +kubebuilder:validation:Optional
	EnableIntegrityMonitoring *bool `json:"enableIntegrityMonitoring,omitempty" tf:"enable_integrity_monitoring,omitempty"`

	// Defines whether instances have Secure Boot enabled.
	// +kubebuilder:validation:Optional
	EnableSecureBoot *bool `json:"enableSecureBoot,omitempty" tf:"enable_secure_boot,omitempty"`

	// Defines whether instances have the vTPM enabled.
	// +kubebuilder:validation:Optional
	EnableVtpm *bool `json:"enableVtpm,omitempty" tf:"enable_vtpm,omitempty"`
}

type SoftwareConfigInitParameters struct {

	// The Cloud Dataproc image version to use
	// for the cluster - this controls the sets of software versions
	// installed onto the nodes when you create clusters. If not specified, defaults to the
	// latest version. For a list of valid versions see
	// Cloud Dataproc versions
	ImageVersion *string `json:"imageVersion,omitempty" tf:"image_version,omitempty"`

	// The set of optional components to activate on the cluster. See Available Optional Components.
	// +listType=set
	OptionalComponents []*string `json:"optionalComponents,omitempty" tf:"optional_components,omitempty"`

	// A list of override and additional properties (key/value pairs)
	// used to modify various aspects of the common configuration files used when creating
	// a cluster. For a list of valid properties please see
	// Cluster properties
	// +mapType=granular
	OverrideProperties map[string]*string `json:"overrideProperties,omitempty" tf:"override_properties,omitempty"`
}

type SoftwareConfigObservation struct {

	// The Cloud Dataproc image version to use
	// for the cluster - this controls the sets of software versions
	// installed onto the nodes when you create clusters. If not specified, defaults to the
	// latest version. For a list of valid versions see
	// Cloud Dataproc versions
	ImageVersion *string `json:"imageVersion,omitempty" tf:"image_version,omitempty"`

	// The set of optional components to activate on the cluster. See Available Optional Components.
	// +listType=set
	OptionalComponents []*string `json:"optionalComponents,omitempty" tf:"optional_components,omitempty"`

	// A list of override and additional properties (key/value pairs)
	// used to modify various aspects of the common configuration files used when creating
	// a cluster. For a list of valid properties please see
	// Cluster properties
	// +mapType=granular
	OverrideProperties map[string]*string `json:"overrideProperties,omitempty" tf:"override_properties,omitempty"`

	// The properties to set on daemon config files. Property keys are specified in prefix:property format,
	// for example spark:spark.kubernetes.container.image.
	Properties map[string]string `json:"properties,omitempty" tf:"properties,omitempty"`
}

type SoftwareConfigParameters struct {

	// The Cloud Dataproc image version to use
	// for the cluster - this controls the sets of software versions
	// installed onto the nodes when you create clusters. If not specified, defaults to the
	// latest version. For a list of valid versions see
	// Cloud Dataproc versions
	// +kubebuilder:validation:Optional
	ImageVersion *string `json:"imageVersion,omitempty" tf:"image_version,omitempty"`

	// The set of optional components to activate on the cluster. See Available Optional Components.
	// +kubebuilder:validation:Optional
	// +listType=set
	OptionalComponents []*string `json:"optionalComponents,omitempty" tf:"optional_components,omitempty"`

	// A list of override and additional properties (key/value pairs)
	// used to modify various aspects of the common configuration files used when creating
	// a cluster. For a list of valid properties please see
	// Cluster properties
	// +kubebuilder:validation:Optional
	// +mapType=granular
	OverrideProperties map[string]*string `json:"overrideProperties,omitempty" tf:"override_properties,omitempty"`
}

type SparkHistoryServerConfigInitParameters struct {

	// Resource name of an existing Dataproc Cluster to act as a Spark History Server for the workload.
	DataprocCluster *string `json:"dataprocCluster,omitempty" tf:"dataproc_cluster,omitempty"`
}

type SparkHistoryServerConfigObservation struct {

	// Resource name of an existing Dataproc Cluster to act as a Spark History Server for the workload.
	DataprocCluster *string `json:"dataprocCluster,omitempty" tf:"dataproc_cluster,omitempty"`
}

type SparkHistoryServerConfigParameters struct {

	// Resource name of an existing Dataproc Cluster to act as a Spark History Server for the workload.
	// +kubebuilder:validation:Optional
	DataprocCluster *string `json:"dataprocCluster,omitempty" tf:"dataproc_cluster,omitempty"`
}

type VirtualClusterConfigInitParameters struct {

	// Configuration of auxiliary services used by this cluster.
	// Structure defined below.
	AuxiliaryServicesConfig []AuxiliaryServicesConfigInitParameters `json:"auxiliaryServicesConfig,omitempty" tf:"auxiliary_services_config,omitempty"`

	// The configuration for running the Dataproc cluster on Kubernetes.
	// Structure defined below.
	KubernetesClusterConfig []KubernetesClusterConfigInitParameters `json:"kubernetesClusterConfig,omitempty" tf:"kubernetes_cluster_config,omitempty"`

	// The Cloud Storage staging bucket used to stage files,
	// such as Hadoop jars, between client machines and the cluster.
	// Note: If you don't explicitly specify a staging_bucket
	// then GCP will auto create / assign one for you. However, you are not guaranteed
	// an auto generated bucket which is solely dedicated to your cluster; it may be shared
	// with other clusters in the same region/zone also choosing to use the auto generation
	// option.
	StagingBucket *string `json:"stagingBucket,omitempty" tf:"staging_bucket,omitempty"`
}

type VirtualClusterConfigObservation struct {

	// Configuration of auxiliary services used by this cluster.
	// Structure defined below.
	AuxiliaryServicesConfig []AuxiliaryServicesConfigObservation `json:"auxiliaryServicesConfig,omitempty" tf:"auxiliary_services_config,omitempty"`

	// The configuration for running the Dataproc cluster on Kubernetes.
	// Structure defined below.
	KubernetesClusterConfig []KubernetesClusterConfigObservation `json:"kubernetesClusterConfig,omitempty" tf:"kubernetes_cluster_config,omitempty"`

	// The Cloud Storage staging bucket used to stage files,
	// such as Hadoop jars, between client machines and the cluster.
	// Note: If you don't explicitly specify a staging_bucket
	// then GCP will auto create / assign one for you. However, you are not guaranteed
	// an auto generated bucket which is solely dedicated to your cluster; it may be shared
	// with other clusters in the same region/zone also choosing to use the auto generation
	// option.
	StagingBucket *string `json:"stagingBucket,omitempty" tf:"staging_bucket,omitempty"`
}

type VirtualClusterConfigParameters struct {

	// Configuration of auxiliary services used by this cluster.
	// Structure defined below.
	// +kubebuilder:validation:Optional
	AuxiliaryServicesConfig []AuxiliaryServicesConfigParameters `json:"auxiliaryServicesConfig,omitempty" tf:"auxiliary_services_config,omitempty"`

	// The configuration for running the Dataproc cluster on Kubernetes.
	// Structure defined below.
	// +kubebuilder:validation:Optional
	KubernetesClusterConfig []KubernetesClusterConfigParameters `json:"kubernetesClusterConfig,omitempty" tf:"kubernetes_cluster_config,omitempty"`

	// The Cloud Storage staging bucket used to stage files,
	// such as Hadoop jars, between client machines and the cluster.
	// Note: If you don't explicitly specify a staging_bucket
	// then GCP will auto create / assign one for you. However, you are not guaranteed
	// an auto generated bucket which is solely dedicated to your cluster; it may be shared
	// with other clusters in the same region/zone also choosing to use the auto generation
	// option.
	// +kubebuilder:validation:Optional
	StagingBucket *string `json:"stagingBucket,omitempty" tf:"staging_bucket,omitempty"`
}

type WorkerConfigAcceleratorsInitParameters struct {

	// The number of the accelerator cards of this type exposed to this instance. Often restricted to one of 1, 2, 4, or 8.
	AcceleratorCount *float64 `json:"acceleratorCount,omitempty" tf:"accelerator_count,omitempty"`

	// The short name of the accelerator type to expose to this instance. For example, nvidia-tesla-k80.
	AcceleratorType *string `json:"acceleratorType,omitempty" tf:"accelerator_type,omitempty"`
}

type WorkerConfigAcceleratorsObservation struct {

	// The number of the accelerator cards of this type exposed to this instance. Often restricted to one of 1, 2, 4, or 8.
	AcceleratorCount *float64 `json:"acceleratorCount,omitempty" tf:"accelerator_count,omitempty"`

	// The short name of the accelerator type to expose to this instance. For example, nvidia-tesla-k80.
	AcceleratorType *string `json:"acceleratorType,omitempty" tf:"accelerator_type,omitempty"`
}

type WorkerConfigAcceleratorsParameters struct {

	// The number of the accelerator cards of this type exposed to this instance. Often restricted to one of 1, 2, 4, or 8.
	// +kubebuilder:validation:Optional
	AcceleratorCount *float64 `json:"acceleratorCount" tf:"accelerator_count,omitempty"`

	// The short name of the accelerator type to expose to this instance. For example, nvidia-tesla-k80.
	// +kubebuilder:validation:Optional
	AcceleratorType *string `json:"acceleratorType" tf:"accelerator_type,omitempty"`
}

type WorkerConfigDiskConfigInitParameters struct {

	// Size of the primary disk attached to each node, specified
	// in GB. The primary disk contains the boot volume and system libraries, and the
	// smallest allowed disk size is 10GB. GCP will default to a predetermined
	// computed value if not set (currently 500GB). Note: If SSDs are not
	// attached, it also contains the HDFS data blocks and Hadoop working directories.
	BootDiskSizeGb *float64 `json:"bootDiskSizeGb,omitempty" tf:"boot_disk_size_gb,omitempty"`

	// The disk type of the primary disk attached to each node.
	// One of "pd-ssd" or "pd-standard". Defaults to "pd-standard".
	BootDiskType *string `json:"bootDiskType,omitempty" tf:"boot_disk_type,omitempty"`

	// The amount of local SSD disks that will be
	// attached to each master cluster node. Defaults to 0.
	NumLocalSsds *float64 `json:"numLocalSsds,omitempty" tf:"num_local_ssds,omitempty"`
}

type WorkerConfigDiskConfigObservation struct {

	// Size of the primary disk attached to each node, specified
	// in GB. The primary disk contains the boot volume and system libraries, and the
	// smallest allowed disk size is 10GB. GCP will default to a predetermined
	// computed value if not set (currently 500GB). Note: If SSDs are not
	// attached, it also contains the HDFS data blocks and Hadoop working directories.
	BootDiskSizeGb *float64 `json:"bootDiskSizeGb,omitempty" tf:"boot_disk_size_gb,omitempty"`

	// The disk type of the primary disk attached to each node.
	// One of "pd-ssd" or "pd-standard". Defaults to "pd-standard".
	BootDiskType *string `json:"bootDiskType,omitempty" tf:"boot_disk_type,omitempty"`

	// The amount of local SSD disks that will be
	// attached to each master cluster node. Defaults to 0.
	NumLocalSsds *float64 `json:"numLocalSsds,omitempty" tf:"num_local_ssds,omitempty"`
}

type WorkerConfigDiskConfigParameters struct {

	// Size of the primary disk attached to each node, specified
	// in GB. The primary disk contains the boot volume and system libraries, and the
	// smallest allowed disk size is 10GB. GCP will default to a predetermined
	// computed value if not set (currently 500GB). Note: If SSDs are not
	// attached, it also contains the HDFS data blocks and Hadoop working directories.
	// +kubebuilder:validation:Optional
	BootDiskSizeGb *float64 `json:"bootDiskSizeGb,omitempty" tf:"boot_disk_size_gb,omitempty"`

	// The disk type of the primary disk attached to each node.
	// One of "pd-ssd" or "pd-standard". Defaults to "pd-standard".
	// +kubebuilder:validation:Optional
	BootDiskType *string `json:"bootDiskType,omitempty" tf:"boot_disk_type,omitempty"`

	// The amount of local SSD disks that will be
	// attached to each master cluster node. Defaults to 0.
	// +kubebuilder:validation:Optional
	NumLocalSsds *float64 `json:"numLocalSsds,omitempty" tf:"num_local_ssds,omitempty"`
}

// ClusterSpec defines the desired state of Cluster
type ClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClusterParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ClusterInitParameters `json:"initProvider,omitempty"`
}

// ClusterStatus defines the observed state of Cluster.
type ClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Cluster is the Schema for the Clusters API. Manages a Cloud Dataproc cluster resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type Cluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   ClusterSpec   `json:"spec"`
	Status ClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterList contains a list of Clusters
type ClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Cluster `json:"items"`
}

// Repository type metadata.
var (
	Cluster_Kind             = "Cluster"
	Cluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Cluster_Kind}.String()
	Cluster_KindAPIVersion   = Cluster_Kind + "." + CRDGroupVersion.String()
	Cluster_GroupVersionKind = CRDGroupVersion.WithKind(Cluster_Kind)
)

func init() {
	SchemeBuilder.Register(&Cluster{}, &ClusterList{})
}
