// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type AllocationOptionsInitParameters struct {

	// Optional. Sets the strategy used to automatically find a free range of a size given by prefixLength. Can be set only when trying to create a reservation that automatically finds the free range to reserve.
	// Possible values are: RANDOM, FIRST_AVAILABLE, RANDOM_FIRST_N_AVAILABLE, FIRST_SMALLEST_FITTING.
	AllocationStrategy *string `json:"allocationStrategy,omitempty" tf:"allocation_strategy,omitempty"`

	// Must be set when allocation_strategy is RANDOM_FIRST_N_AVAILABLE, otherwise must remain unset. Defines the size of the set of free ranges from which RANDOM_FIRST_N_AVAILABLE strategy randomy selects one,
	// in other words it sets the N in the RANDOM_FIRST_N_AVAILABLE.
	FirstAvailableRangesLookupSize *float64 `json:"firstAvailableRangesLookupSize,omitempty" tf:"first_available_ranges_lookup_size,omitempty"`
}

type AllocationOptionsObservation struct {

	// Optional. Sets the strategy used to automatically find a free range of a size given by prefixLength. Can be set only when trying to create a reservation that automatically finds the free range to reserve.
	// Possible values are: RANDOM, FIRST_AVAILABLE, RANDOM_FIRST_N_AVAILABLE, FIRST_SMALLEST_FITTING.
	AllocationStrategy *string `json:"allocationStrategy,omitempty" tf:"allocation_strategy,omitempty"`

	// Must be set when allocation_strategy is RANDOM_FIRST_N_AVAILABLE, otherwise must remain unset. Defines the size of the set of free ranges from which RANDOM_FIRST_N_AVAILABLE strategy randomy selects one,
	// in other words it sets the N in the RANDOM_FIRST_N_AVAILABLE.
	FirstAvailableRangesLookupSize *float64 `json:"firstAvailableRangesLookupSize,omitempty" tf:"first_available_ranges_lookup_size,omitempty"`
}

type AllocationOptionsParameters struct {

	// Optional. Sets the strategy used to automatically find a free range of a size given by prefixLength. Can be set only when trying to create a reservation that automatically finds the free range to reserve.
	// Possible values are: RANDOM, FIRST_AVAILABLE, RANDOM_FIRST_N_AVAILABLE, FIRST_SMALLEST_FITTING.
	// +kubebuilder:validation:Optional
	AllocationStrategy *string `json:"allocationStrategy,omitempty" tf:"allocation_strategy,omitempty"`

	// Must be set when allocation_strategy is RANDOM_FIRST_N_AVAILABLE, otherwise must remain unset. Defines the size of the set of free ranges from which RANDOM_FIRST_N_AVAILABLE strategy randomy selects one,
	// in other words it sets the N in the RANDOM_FIRST_N_AVAILABLE.
	// +kubebuilder:validation:Optional
	FirstAvailableRangesLookupSize *float64 `json:"firstAvailableRangesLookupSize,omitempty" tf:"first_available_ranges_lookup_size,omitempty"`
}

type InternalRangeInitParameters struct {

	// Options for automatically allocating a free range with a size given by prefixLength.
	// Structure is documented below.
	AllocationOptions *AllocationOptionsInitParameters `json:"allocationOptions,omitempty" tf:"allocation_options,omitempty"`

	// An optional description of this resource.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Optional. List of IP CIDR ranges to be excluded. Resulting reserved Internal Range will not overlap with any CIDR blocks mentioned in this list.
	// Only IPv4 CIDR ranges are supported.
	ExcludeCidrRanges []*string `json:"excludeCidrRanges,omitempty" tf:"exclude_cidr_ranges,omitempty"`

	// The IP range that this internal range defines.
	// NOTE: IPv6 ranges are limited to usage=EXTERNAL_TO_VPC and peering=FOR_SELF
	// NOTE: For IPv6 Ranges this field is compulsory, i.e. the address range must be specified explicitly.
	IPCidrRange *string `json:"ipCidrRange,omitempty" tf:"ip_cidr_range,omitempty"`

	// Immutable ranges cannot have their fields modified, except for labels and description.
	Immutable *bool `json:"immutable,omitempty" tf:"immutable,omitempty"`

	// User-defined labels.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Specification for migration with source and target resource names.
	// Structure is documented below.
	Migration *MigrationInitParameters `json:"migration,omitempty" tf:"migration,omitempty"`

	// Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/namespaced/compute/v1beta1.Network
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("self_link",true)
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// Reference to a Network in compute to populate network.
	// +kubebuilder:validation:Optional
	NetworkRef *v1.NamespacedReference `json:"networkRef,omitempty" tf:"-"`

	// Selector for a Network in compute to populate network.
	// +kubebuilder:validation:Optional
	NetworkSelector *v1.NamespacedSelector `json:"networkSelector,omitempty" tf:"-"`

	// Optional. Types of resources that are allowed to overlap with the current internal range.
	// Each value may be one of: OVERLAP_ROUTE_RANGE, OVERLAP_EXISTING_SUBNET_RANGE.
	Overlaps []*string `json:"overlaps,omitempty" tf:"overlaps,omitempty"`

	// The type of peering set for this internal range.
	// Possible values are: FOR_SELF, FOR_PEER, NOT_SHARED.
	Peering *string `json:"peering,omitempty" tf:"peering,omitempty"`

	// An alternate to ipCidrRange. Can be set when trying to create a reservation that automatically finds a free range of the given size.
	// If both ipCidrRange and prefixLength are set, there is an error if the range sizes do not match. Can also be used during updates to change the range size.
	// NOTE: For IPv6 this field only works if ip_cidr_range is set as well, and both fields must match. In other words, with IPv6 this field only works as
	// a redundant parameter.
	PrefixLength *float64 `json:"prefixLength,omitempty" tf:"prefix_length,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Optional. Can be set to narrow down or pick a different address space while searching for a free range.
	// If not set, defaults to the "10.0.0.0/8" address space. This can be used to search in other rfc-1918 address spaces like "172.16.0.0/12" and "192.168.0.0/16" or non-rfc-1918 address spaces used in the VPC.
	TargetCidrRange []*string `json:"targetCidrRange,omitempty" tf:"target_cidr_range,omitempty"`

	// The type of usage set for this InternalRange.
	// Possible values are: FOR_VPC, EXTERNAL_TO_VPC, FOR_MIGRATION.
	Usage *string `json:"usage,omitempty" tf:"usage,omitempty"`
}

type InternalRangeObservation struct {

	// Options for automatically allocating a free range with a size given by prefixLength.
	// Structure is documented below.
	AllocationOptions *AllocationOptionsObservation `json:"allocationOptions,omitempty" tf:"allocation_options,omitempty"`

	// An optional description of this resource.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// for all of the labels present on the resource.
	// +mapType=granular
	EffectiveLabels map[string]*string `json:"effectiveLabels,omitempty" tf:"effective_labels,omitempty"`

	// Optional. List of IP CIDR ranges to be excluded. Resulting reserved Internal Range will not overlap with any CIDR blocks mentioned in this list.
	// Only IPv4 CIDR ranges are supported.
	ExcludeCidrRanges []*string `json:"excludeCidrRanges,omitempty" tf:"exclude_cidr_ranges,omitempty"`

	// an identifier for the resource with format projects/{{project}}/locations/global/internalRanges/{{name}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The IP range that this internal range defines.
	// NOTE: IPv6 ranges are limited to usage=EXTERNAL_TO_VPC and peering=FOR_SELF
	// NOTE: For IPv6 Ranges this field is compulsory, i.e. the address range must be specified explicitly.
	IPCidrRange *string `json:"ipCidrRange,omitempty" tf:"ip_cidr_range,omitempty"`

	// Immutable ranges cannot have their fields modified, except for labels and description.
	Immutable *bool `json:"immutable,omitempty" tf:"immutable,omitempty"`

	// User-defined labels.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Specification for migration with source and target resource names.
	// Structure is documented below.
	Migration *MigrationObservation `json:"migration,omitempty" tf:"migration,omitempty"`

	// Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// Optional. Types of resources that are allowed to overlap with the current internal range.
	// Each value may be one of: OVERLAP_ROUTE_RANGE, OVERLAP_EXISTING_SUBNET_RANGE.
	Overlaps []*string `json:"overlaps,omitempty" tf:"overlaps,omitempty"`

	// The type of peering set for this internal range.
	// Possible values are: FOR_SELF, FOR_PEER, NOT_SHARED.
	Peering *string `json:"peering,omitempty" tf:"peering,omitempty"`

	// An alternate to ipCidrRange. Can be set when trying to create a reservation that automatically finds a free range of the given size.
	// If both ipCidrRange and prefixLength are set, there is an error if the range sizes do not match. Can also be used during updates to change the range size.
	// NOTE: For IPv6 this field only works if ip_cidr_range is set as well, and both fields must match. In other words, with IPv6 this field only works as
	// a redundant parameter.
	PrefixLength *float64 `json:"prefixLength,omitempty" tf:"prefix_length,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Optional. Can be set to narrow down or pick a different address space while searching for a free range.
	// If not set, defaults to the "10.0.0.0/8" address space. This can be used to search in other rfc-1918 address spaces like "172.16.0.0/12" and "192.168.0.0/16" or non-rfc-1918 address spaces used in the VPC.
	TargetCidrRange []*string `json:"targetCidrRange,omitempty" tf:"target_cidr_range,omitempty"`

	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	// +mapType=granular
	TerraformLabels map[string]*string `json:"terraformLabels,omitempty" tf:"terraform_labels,omitempty"`

	// The type of usage set for this InternalRange.
	// Possible values are: FOR_VPC, EXTERNAL_TO_VPC, FOR_MIGRATION.
	Usage *string `json:"usage,omitempty" tf:"usage,omitempty"`

	// Output only. The list of resources that refer to this internal range.
	// Resources that use the internal range for their range allocation are referred to as users of the range.
	// Other resources mark themselves as users while doing so by creating a reference to this internal range. Having a user, based on this reference, prevents deletion of the internal range referred to. Can be empty.
	Users []*string `json:"users,omitempty" tf:"users,omitempty"`
}

type InternalRangeParameters struct {

	// Options for automatically allocating a free range with a size given by prefixLength.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	AllocationOptions *AllocationOptionsParameters `json:"allocationOptions,omitempty" tf:"allocation_options,omitempty"`

	// An optional description of this resource.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Optional. List of IP CIDR ranges to be excluded. Resulting reserved Internal Range will not overlap with any CIDR blocks mentioned in this list.
	// Only IPv4 CIDR ranges are supported.
	// +kubebuilder:validation:Optional
	ExcludeCidrRanges []*string `json:"excludeCidrRanges,omitempty" tf:"exclude_cidr_ranges,omitempty"`

	// The IP range that this internal range defines.
	// NOTE: IPv6 ranges are limited to usage=EXTERNAL_TO_VPC and peering=FOR_SELF
	// NOTE: For IPv6 Ranges this field is compulsory, i.e. the address range must be specified explicitly.
	// +kubebuilder:validation:Optional
	IPCidrRange *string `json:"ipCidrRange,omitempty" tf:"ip_cidr_range,omitempty"`

	// Immutable ranges cannot have their fields modified, except for labels and description.
	// +kubebuilder:validation:Optional
	Immutable *bool `json:"immutable,omitempty" tf:"immutable,omitempty"`

	// User-defined labels.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Specification for migration with source and target resource names.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Migration *MigrationParameters `json:"migration,omitempty" tf:"migration,omitempty"`

	// Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/namespaced/compute/v1beta1.Network
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("self_link",true)
	// +kubebuilder:validation:Optional
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// Reference to a Network in compute to populate network.
	// +kubebuilder:validation:Optional
	NetworkRef *v1.NamespacedReference `json:"networkRef,omitempty" tf:"-"`

	// Selector for a Network in compute to populate network.
	// +kubebuilder:validation:Optional
	NetworkSelector *v1.NamespacedSelector `json:"networkSelector,omitempty" tf:"-"`

	// Optional. Types of resources that are allowed to overlap with the current internal range.
	// Each value may be one of: OVERLAP_ROUTE_RANGE, OVERLAP_EXISTING_SUBNET_RANGE.
	// +kubebuilder:validation:Optional
	Overlaps []*string `json:"overlaps,omitempty" tf:"overlaps,omitempty"`

	// The type of peering set for this internal range.
	// Possible values are: FOR_SELF, FOR_PEER, NOT_SHARED.
	// +kubebuilder:validation:Optional
	Peering *string `json:"peering,omitempty" tf:"peering,omitempty"`

	// An alternate to ipCidrRange. Can be set when trying to create a reservation that automatically finds a free range of the given size.
	// If both ipCidrRange and prefixLength are set, there is an error if the range sizes do not match. Can also be used during updates to change the range size.
	// NOTE: For IPv6 this field only works if ip_cidr_range is set as well, and both fields must match. In other words, with IPv6 this field only works as
	// a redundant parameter.
	// +kubebuilder:validation:Optional
	PrefixLength *float64 `json:"prefixLength,omitempty" tf:"prefix_length,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Optional. Can be set to narrow down or pick a different address space while searching for a free range.
	// If not set, defaults to the "10.0.0.0/8" address space. This can be used to search in other rfc-1918 address spaces like "172.16.0.0/12" and "192.168.0.0/16" or non-rfc-1918 address spaces used in the VPC.
	// +kubebuilder:validation:Optional
	TargetCidrRange []*string `json:"targetCidrRange,omitempty" tf:"target_cidr_range,omitempty"`

	// The type of usage set for this InternalRange.
	// Possible values are: FOR_VPC, EXTERNAL_TO_VPC, FOR_MIGRATION.
	// +kubebuilder:validation:Optional
	Usage *string `json:"usage,omitempty" tf:"usage,omitempty"`
}

type MigrationInitParameters struct {

	// Resource path as an URI of the source resource, for example a subnet.
	// The project for the source resource should match the project for the
	// InternalRange.
	// An example /projects/{project}/regions/{region}/subnetworks/{subnet}
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/namespaced/compute/v1beta1.Subnetwork
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("self_link",true)
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// Reference to a Subnetwork in compute to populate source.
	// +kubebuilder:validation:Optional
	SourceRef *v1.NamespacedReference `json:"sourceRef,omitempty" tf:"-"`

	// Selector for a Subnetwork in compute to populate source.
	// +kubebuilder:validation:Optional
	SourceSelector *v1.NamespacedSelector `json:"sourceSelector,omitempty" tf:"-"`

	// Resource path of the target resource. The target project can be
	// different, as in the cases when migrating to peer networks. The resource
	// may not exist yet.
	// For example /projects/{project}/regions/{region}/subnetworks/{subnet}
	Target *string `json:"target,omitempty" tf:"target,omitempty"`
}

type MigrationObservation struct {

	// Resource path as an URI of the source resource, for example a subnet.
	// The project for the source resource should match the project for the
	// InternalRange.
	// An example /projects/{project}/regions/{region}/subnetworks/{subnet}
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// Resource path of the target resource. The target project can be
	// different, as in the cases when migrating to peer networks. The resource
	// may not exist yet.
	// For example /projects/{project}/regions/{region}/subnetworks/{subnet}
	Target *string `json:"target,omitempty" tf:"target,omitempty"`
}

type MigrationParameters struct {

	// Resource path as an URI of the source resource, for example a subnet.
	// The project for the source resource should match the project for the
	// InternalRange.
	// An example /projects/{project}/regions/{region}/subnetworks/{subnet}
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/namespaced/compute/v1beta1.Subnetwork
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("self_link",true)
	// +kubebuilder:validation:Optional
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// Reference to a Subnetwork in compute to populate source.
	// +kubebuilder:validation:Optional
	SourceRef *v1.NamespacedReference `json:"sourceRef,omitempty" tf:"-"`

	// Selector for a Subnetwork in compute to populate source.
	// +kubebuilder:validation:Optional
	SourceSelector *v1.NamespacedSelector `json:"sourceSelector,omitempty" tf:"-"`

	// Resource path of the target resource. The target project can be
	// different, as in the cases when migrating to peer networks. The resource
	// may not exist yet.
	// For example /projects/{project}/regions/{region}/subnetworks/{subnet}
	// +kubebuilder:validation:Optional
	Target *string `json:"target" tf:"target,omitempty"`
}

// InternalRangeSpec defines the desired state of InternalRange
type InternalRangeSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            InternalRangeParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider InternalRangeInitParameters `json:"initProvider,omitempty"`
}

// InternalRangeStatus defines the observed state of InternalRange.
type InternalRangeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InternalRangeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// InternalRange is the Schema for the InternalRanges API. The internal range resource for IPAM operations within a VPC network.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,gcp}
type InternalRange struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.peering) || (has(self.initProvider) && has(self.initProvider.peering))",message="spec.forProvider.peering is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.usage) || (has(self.initProvider) && has(self.initProvider.usage))",message="spec.forProvider.usage is a required parameter"
	Spec   InternalRangeSpec   `json:"spec"`
	Status InternalRangeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InternalRangeList contains a list of InternalRanges
type InternalRangeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []InternalRange `json:"items"`
}

// Repository type metadata.
var (
	InternalRange_Kind             = "InternalRange"
	InternalRange_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: InternalRange_Kind}.String()
	InternalRange_KindAPIVersion   = InternalRange_Kind + "." + CRDGroupVersion.String()
	InternalRange_GroupVersionKind = CRDGroupVersion.WithKind(InternalRange_Kind)
)

func init() {
	SchemeBuilder.Register(&InternalRange{}, &InternalRangeList{})
}
