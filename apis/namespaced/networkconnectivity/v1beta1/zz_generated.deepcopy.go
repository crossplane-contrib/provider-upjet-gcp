//go:build !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ErrorInfoInitParameters) DeepCopyInto(out *ErrorInfoInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ErrorInfoInitParameters.
func (in *ErrorInfoInitParameters) DeepCopy() *ErrorInfoInitParameters {
	if in == nil {
		return nil
	}
	out := new(ErrorInfoInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ErrorInfoObservation) DeepCopyInto(out *ErrorInfoObservation) {
	*out = *in
	if in.Domain != nil {
		in, out := &in.Domain, &out.Domain
		*out = new(string)
		**out = **in
	}
	if in.Metadata != nil {
		in, out := &in.Metadata, &out.Metadata
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Reason != nil {
		in, out := &in.Reason, &out.Reason
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ErrorInfoObservation.
func (in *ErrorInfoObservation) DeepCopy() *ErrorInfoObservation {
	if in == nil {
		return nil
	}
	out := new(ErrorInfoObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ErrorInfoParameters) DeepCopyInto(out *ErrorInfoParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ErrorInfoParameters.
func (in *ErrorInfoParameters) DeepCopy() *ErrorInfoParameters {
	if in == nil {
		return nil
	}
	out := new(ErrorInfoParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ErrorInitParameters) DeepCopyInto(out *ErrorInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ErrorInitParameters.
func (in *ErrorInitParameters) DeepCopy() *ErrorInitParameters {
	if in == nil {
		return nil
	}
	out := new(ErrorInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ErrorObservation) DeepCopyInto(out *ErrorObservation) {
	*out = *in
	if in.Code != nil {
		in, out := &in.Code, &out.Code
		*out = new(float64)
		**out = **in
	}
	if in.Details != nil {
		in, out := &in.Details, &out.Details
		*out = make([]map[string]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = make(map[string]*string, len(*in))
				for key, val := range *in {
					var outVal *string
					if val == nil {
						(*out)[key] = nil
					} else {
						inVal := (*in)[key]
						in, out := &inVal, &outVal
						*out = new(string)
						**out = **in
					}
					(*out)[key] = outVal
				}
			}
		}
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ErrorObservation.
func (in *ErrorObservation) DeepCopy() *ErrorObservation {
	if in == nil {
		return nil
	}
	out := new(ErrorObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ErrorParameters) DeepCopyInto(out *ErrorParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ErrorParameters.
func (in *ErrorParameters) DeepCopy() *ErrorParameters {
	if in == nil {
		return nil
	}
	out := new(ErrorParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Hub) DeepCopyInto(out *Hub) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Hub.
func (in *Hub) DeepCopy() *Hub {
	if in == nil {
		return nil
	}
	out := new(Hub)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Hub) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HubInitParameters) DeepCopyInto(out *HubInitParameters) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.ExportPsc != nil {
		in, out := &in.ExportPsc, &out.ExportPsc
		*out = new(bool)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PolicyMode != nil {
		in, out := &in.PolicyMode, &out.PolicyMode
		*out = new(string)
		**out = **in
	}
	if in.PresetTopology != nil {
		in, out := &in.PresetTopology, &out.PresetTopology
		*out = new(string)
		**out = **in
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HubInitParameters.
func (in *HubInitParameters) DeepCopy() *HubInitParameters {
	if in == nil {
		return nil
	}
	out := new(HubInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HubList) DeepCopyInto(out *HubList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Hub, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HubList.
func (in *HubList) DeepCopy() *HubList {
	if in == nil {
		return nil
	}
	out := new(HubList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *HubList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HubObservation) DeepCopyInto(out *HubObservation) {
	*out = *in
	if in.CreateTime != nil {
		in, out := &in.CreateTime, &out.CreateTime
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.EffectiveLabels != nil {
		in, out := &in.EffectiveLabels, &out.EffectiveLabels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ExportPsc != nil {
		in, out := &in.ExportPsc, &out.ExportPsc
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PolicyMode != nil {
		in, out := &in.PolicyMode, &out.PolicyMode
		*out = new(string)
		**out = **in
	}
	if in.PresetTopology != nil {
		in, out := &in.PresetTopology, &out.PresetTopology
		*out = new(string)
		**out = **in
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.RoutingVpcs != nil {
		in, out := &in.RoutingVpcs, &out.RoutingVpcs
		*out = make([]RoutingVpcsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
	if in.TerraformLabels != nil {
		in, out := &in.TerraformLabels, &out.TerraformLabels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.UniqueID != nil {
		in, out := &in.UniqueID, &out.UniqueID
		*out = new(string)
		**out = **in
	}
	if in.UpdateTime != nil {
		in, out := &in.UpdateTime, &out.UpdateTime
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HubObservation.
func (in *HubObservation) DeepCopy() *HubObservation {
	if in == nil {
		return nil
	}
	out := new(HubObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HubParameters) DeepCopyInto(out *HubParameters) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.ExportPsc != nil {
		in, out := &in.ExportPsc, &out.ExportPsc
		*out = new(bool)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PolicyMode != nil {
		in, out := &in.PolicyMode, &out.PolicyMode
		*out = new(string)
		**out = **in
	}
	if in.PresetTopology != nil {
		in, out := &in.PresetTopology, &out.PresetTopology
		*out = new(string)
		**out = **in
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HubParameters.
func (in *HubParameters) DeepCopy() *HubParameters {
	if in == nil {
		return nil
	}
	out := new(HubParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HubSpec) DeepCopyInto(out *HubSpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HubSpec.
func (in *HubSpec) DeepCopy() *HubSpec {
	if in == nil {
		return nil
	}
	out := new(HubSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HubStatus) DeepCopyInto(out *HubStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HubStatus.
func (in *HubStatus) DeepCopy() *HubStatus {
	if in == nil {
		return nil
	}
	out := new(HubStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstancesInitParameters) DeepCopyInto(out *InstancesInitParameters) {
	*out = *in
	if in.IPAddress != nil {
		in, out := &in.IPAddress, &out.IPAddress
		*out = new(string)
		**out = **in
	}
	if in.VirtualMachine != nil {
		in, out := &in.VirtualMachine, &out.VirtualMachine
		*out = new(string)
		**out = **in
	}
	if in.VirtualMachineRef != nil {
		in, out := &in.VirtualMachineRef, &out.VirtualMachineRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.VirtualMachineSelector != nil {
		in, out := &in.VirtualMachineSelector, &out.VirtualMachineSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstancesInitParameters.
func (in *InstancesInitParameters) DeepCopy() *InstancesInitParameters {
	if in == nil {
		return nil
	}
	out := new(InstancesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstancesObservation) DeepCopyInto(out *InstancesObservation) {
	*out = *in
	if in.IPAddress != nil {
		in, out := &in.IPAddress, &out.IPAddress
		*out = new(string)
		**out = **in
	}
	if in.VirtualMachine != nil {
		in, out := &in.VirtualMachine, &out.VirtualMachine
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstancesObservation.
func (in *InstancesObservation) DeepCopy() *InstancesObservation {
	if in == nil {
		return nil
	}
	out := new(InstancesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstancesParameters) DeepCopyInto(out *InstancesParameters) {
	*out = *in
	if in.IPAddress != nil {
		in, out := &in.IPAddress, &out.IPAddress
		*out = new(string)
		**out = **in
	}
	if in.VirtualMachine != nil {
		in, out := &in.VirtualMachine, &out.VirtualMachine
		*out = new(string)
		**out = **in
	}
	if in.VirtualMachineRef != nil {
		in, out := &in.VirtualMachineRef, &out.VirtualMachineRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.VirtualMachineSelector != nil {
		in, out := &in.VirtualMachineSelector, &out.VirtualMachineSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstancesParameters.
func (in *InstancesParameters) DeepCopy() *InstancesParameters {
	if in == nil {
		return nil
	}
	out := new(InstancesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InternalRange) DeepCopyInto(out *InternalRange) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InternalRange.
func (in *InternalRange) DeepCopy() *InternalRange {
	if in == nil {
		return nil
	}
	out := new(InternalRange)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *InternalRange) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InternalRangeInitParameters) DeepCopyInto(out *InternalRangeInitParameters) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.ExcludeCidrRanges != nil {
		in, out := &in.ExcludeCidrRanges, &out.ExcludeCidrRanges
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IPCidrRange != nil {
		in, out := &in.IPCidrRange, &out.IPCidrRange
		*out = new(string)
		**out = **in
	}
	if in.Immutable != nil {
		in, out := &in.Immutable, &out.Immutable
		*out = new(bool)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Migration != nil {
		in, out := &in.Migration, &out.Migration
		*out = new(MigrationInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Network != nil {
		in, out := &in.Network, &out.Network
		*out = new(string)
		**out = **in
	}
	if in.NetworkRef != nil {
		in, out := &in.NetworkRef, &out.NetworkRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.NetworkSelector != nil {
		in, out := &in.NetworkSelector, &out.NetworkSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.Overlaps != nil {
		in, out := &in.Overlaps, &out.Overlaps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Peering != nil {
		in, out := &in.Peering, &out.Peering
		*out = new(string)
		**out = **in
	}
	if in.PrefixLength != nil {
		in, out := &in.PrefixLength, &out.PrefixLength
		*out = new(float64)
		**out = **in
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.TargetCidrRange != nil {
		in, out := &in.TargetCidrRange, &out.TargetCidrRange
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Usage != nil {
		in, out := &in.Usage, &out.Usage
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InternalRangeInitParameters.
func (in *InternalRangeInitParameters) DeepCopy() *InternalRangeInitParameters {
	if in == nil {
		return nil
	}
	out := new(InternalRangeInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InternalRangeList) DeepCopyInto(out *InternalRangeList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]InternalRange, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InternalRangeList.
func (in *InternalRangeList) DeepCopy() *InternalRangeList {
	if in == nil {
		return nil
	}
	out := new(InternalRangeList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *InternalRangeList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InternalRangeObservation) DeepCopyInto(out *InternalRangeObservation) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.EffectiveLabels != nil {
		in, out := &in.EffectiveLabels, &out.EffectiveLabels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ExcludeCidrRanges != nil {
		in, out := &in.ExcludeCidrRanges, &out.ExcludeCidrRanges
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IPCidrRange != nil {
		in, out := &in.IPCidrRange, &out.IPCidrRange
		*out = new(string)
		**out = **in
	}
	if in.Immutable != nil {
		in, out := &in.Immutable, &out.Immutable
		*out = new(bool)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Migration != nil {
		in, out := &in.Migration, &out.Migration
		*out = new(MigrationObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.Network != nil {
		in, out := &in.Network, &out.Network
		*out = new(string)
		**out = **in
	}
	if in.Overlaps != nil {
		in, out := &in.Overlaps, &out.Overlaps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Peering != nil {
		in, out := &in.Peering, &out.Peering
		*out = new(string)
		**out = **in
	}
	if in.PrefixLength != nil {
		in, out := &in.PrefixLength, &out.PrefixLength
		*out = new(float64)
		**out = **in
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.TargetCidrRange != nil {
		in, out := &in.TargetCidrRange, &out.TargetCidrRange
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TerraformLabels != nil {
		in, out := &in.TerraformLabels, &out.TerraformLabels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Usage != nil {
		in, out := &in.Usage, &out.Usage
		*out = new(string)
		**out = **in
	}
	if in.Users != nil {
		in, out := &in.Users, &out.Users
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InternalRangeObservation.
func (in *InternalRangeObservation) DeepCopy() *InternalRangeObservation {
	if in == nil {
		return nil
	}
	out := new(InternalRangeObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InternalRangeParameters) DeepCopyInto(out *InternalRangeParameters) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.ExcludeCidrRanges != nil {
		in, out := &in.ExcludeCidrRanges, &out.ExcludeCidrRanges
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IPCidrRange != nil {
		in, out := &in.IPCidrRange, &out.IPCidrRange
		*out = new(string)
		**out = **in
	}
	if in.Immutable != nil {
		in, out := &in.Immutable, &out.Immutable
		*out = new(bool)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Migration != nil {
		in, out := &in.Migration, &out.Migration
		*out = new(MigrationParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Network != nil {
		in, out := &in.Network, &out.Network
		*out = new(string)
		**out = **in
	}
	if in.NetworkRef != nil {
		in, out := &in.NetworkRef, &out.NetworkRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.NetworkSelector != nil {
		in, out := &in.NetworkSelector, &out.NetworkSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.Overlaps != nil {
		in, out := &in.Overlaps, &out.Overlaps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Peering != nil {
		in, out := &in.Peering, &out.Peering
		*out = new(string)
		**out = **in
	}
	if in.PrefixLength != nil {
		in, out := &in.PrefixLength, &out.PrefixLength
		*out = new(float64)
		**out = **in
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.TargetCidrRange != nil {
		in, out := &in.TargetCidrRange, &out.TargetCidrRange
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Usage != nil {
		in, out := &in.Usage, &out.Usage
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InternalRangeParameters.
func (in *InternalRangeParameters) DeepCopy() *InternalRangeParameters {
	if in == nil {
		return nil
	}
	out := new(InternalRangeParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InternalRangeSpec) DeepCopyInto(out *InternalRangeSpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InternalRangeSpec.
func (in *InternalRangeSpec) DeepCopy() *InternalRangeSpec {
	if in == nil {
		return nil
	}
	out := new(InternalRangeSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InternalRangeStatus) DeepCopyInto(out *InternalRangeStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InternalRangeStatus.
func (in *InternalRangeStatus) DeepCopy() *InternalRangeStatus {
	if in == nil {
		return nil
	}
	out := new(InternalRangeStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LinkedInterconnectAttachmentsInitParameters) DeepCopyInto(out *LinkedInterconnectAttachmentsInitParameters) {
	*out = *in
	if in.IncludeImportRanges != nil {
		in, out := &in.IncludeImportRanges, &out.IncludeImportRanges
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SiteToSiteDataTransfer != nil {
		in, out := &in.SiteToSiteDataTransfer, &out.SiteToSiteDataTransfer
		*out = new(bool)
		**out = **in
	}
	if in.Uris != nil {
		in, out := &in.Uris, &out.Uris
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.UrisRefs != nil {
		in, out := &in.UrisRefs, &out.UrisRefs
		*out = make([]v1.NamespacedReference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.UrisSelector != nil {
		in, out := &in.UrisSelector, &out.UrisSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinkedInterconnectAttachmentsInitParameters.
func (in *LinkedInterconnectAttachmentsInitParameters) DeepCopy() *LinkedInterconnectAttachmentsInitParameters {
	if in == nil {
		return nil
	}
	out := new(LinkedInterconnectAttachmentsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LinkedInterconnectAttachmentsObservation) DeepCopyInto(out *LinkedInterconnectAttachmentsObservation) {
	*out = *in
	if in.IncludeImportRanges != nil {
		in, out := &in.IncludeImportRanges, &out.IncludeImportRanges
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SiteToSiteDataTransfer != nil {
		in, out := &in.SiteToSiteDataTransfer, &out.SiteToSiteDataTransfer
		*out = new(bool)
		**out = **in
	}
	if in.Uris != nil {
		in, out := &in.Uris, &out.Uris
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinkedInterconnectAttachmentsObservation.
func (in *LinkedInterconnectAttachmentsObservation) DeepCopy() *LinkedInterconnectAttachmentsObservation {
	if in == nil {
		return nil
	}
	out := new(LinkedInterconnectAttachmentsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LinkedInterconnectAttachmentsParameters) DeepCopyInto(out *LinkedInterconnectAttachmentsParameters) {
	*out = *in
	if in.IncludeImportRanges != nil {
		in, out := &in.IncludeImportRanges, &out.IncludeImportRanges
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SiteToSiteDataTransfer != nil {
		in, out := &in.SiteToSiteDataTransfer, &out.SiteToSiteDataTransfer
		*out = new(bool)
		**out = **in
	}
	if in.Uris != nil {
		in, out := &in.Uris, &out.Uris
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.UrisRefs != nil {
		in, out := &in.UrisRefs, &out.UrisRefs
		*out = make([]v1.NamespacedReference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.UrisSelector != nil {
		in, out := &in.UrisSelector, &out.UrisSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinkedInterconnectAttachmentsParameters.
func (in *LinkedInterconnectAttachmentsParameters) DeepCopy() *LinkedInterconnectAttachmentsParameters {
	if in == nil {
		return nil
	}
	out := new(LinkedInterconnectAttachmentsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LinkedProducerVPCNetworkInitParameters) DeepCopyInto(out *LinkedProducerVPCNetworkInitParameters) {
	*out = *in
	if in.ExcludeExportRanges != nil {
		in, out := &in.ExcludeExportRanges, &out.ExcludeExportRanges
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IncludeExportRanges != nil {
		in, out := &in.IncludeExportRanges, &out.IncludeExportRanges
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Network != nil {
		in, out := &in.Network, &out.Network
		*out = new(string)
		**out = **in
	}
	if in.NetworkRef != nil {
		in, out := &in.NetworkRef, &out.NetworkRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.NetworkSelector != nil {
		in, out := &in.NetworkSelector, &out.NetworkSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.Peering != nil {
		in, out := &in.Peering, &out.Peering
		*out = new(string)
		**out = **in
	}
	if in.PeeringRef != nil {
		in, out := &in.PeeringRef, &out.PeeringRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.PeeringSelector != nil {
		in, out := &in.PeeringSelector, &out.PeeringSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinkedProducerVPCNetworkInitParameters.
func (in *LinkedProducerVPCNetworkInitParameters) DeepCopy() *LinkedProducerVPCNetworkInitParameters {
	if in == nil {
		return nil
	}
	out := new(LinkedProducerVPCNetworkInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LinkedProducerVPCNetworkObservation) DeepCopyInto(out *LinkedProducerVPCNetworkObservation) {
	*out = *in
	if in.ExcludeExportRanges != nil {
		in, out := &in.ExcludeExportRanges, &out.ExcludeExportRanges
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IncludeExportRanges != nil {
		in, out := &in.IncludeExportRanges, &out.IncludeExportRanges
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Network != nil {
		in, out := &in.Network, &out.Network
		*out = new(string)
		**out = **in
	}
	if in.Peering != nil {
		in, out := &in.Peering, &out.Peering
		*out = new(string)
		**out = **in
	}
	if in.ProducerNetwork != nil {
		in, out := &in.ProducerNetwork, &out.ProducerNetwork
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinkedProducerVPCNetworkObservation.
func (in *LinkedProducerVPCNetworkObservation) DeepCopy() *LinkedProducerVPCNetworkObservation {
	if in == nil {
		return nil
	}
	out := new(LinkedProducerVPCNetworkObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LinkedProducerVPCNetworkParameters) DeepCopyInto(out *LinkedProducerVPCNetworkParameters) {
	*out = *in
	if in.ExcludeExportRanges != nil {
		in, out := &in.ExcludeExportRanges, &out.ExcludeExportRanges
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IncludeExportRanges != nil {
		in, out := &in.IncludeExportRanges, &out.IncludeExportRanges
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Network != nil {
		in, out := &in.Network, &out.Network
		*out = new(string)
		**out = **in
	}
	if in.NetworkRef != nil {
		in, out := &in.NetworkRef, &out.NetworkRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.NetworkSelector != nil {
		in, out := &in.NetworkSelector, &out.NetworkSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.Peering != nil {
		in, out := &in.Peering, &out.Peering
		*out = new(string)
		**out = **in
	}
	if in.PeeringRef != nil {
		in, out := &in.PeeringRef, &out.PeeringRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.PeeringSelector != nil {
		in, out := &in.PeeringSelector, &out.PeeringSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinkedProducerVPCNetworkParameters.
func (in *LinkedProducerVPCNetworkParameters) DeepCopy() *LinkedProducerVPCNetworkParameters {
	if in == nil {
		return nil
	}
	out := new(LinkedProducerVPCNetworkParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LinkedRouterApplianceInstancesInitParameters) DeepCopyInto(out *LinkedRouterApplianceInstancesInitParameters) {
	*out = *in
	if in.IncludeImportRanges != nil {
		in, out := &in.IncludeImportRanges, &out.IncludeImportRanges
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Instances != nil {
		in, out := &in.Instances, &out.Instances
		*out = make([]InstancesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SiteToSiteDataTransfer != nil {
		in, out := &in.SiteToSiteDataTransfer, &out.SiteToSiteDataTransfer
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinkedRouterApplianceInstancesInitParameters.
func (in *LinkedRouterApplianceInstancesInitParameters) DeepCopy() *LinkedRouterApplianceInstancesInitParameters {
	if in == nil {
		return nil
	}
	out := new(LinkedRouterApplianceInstancesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LinkedRouterApplianceInstancesObservation) DeepCopyInto(out *LinkedRouterApplianceInstancesObservation) {
	*out = *in
	if in.IncludeImportRanges != nil {
		in, out := &in.IncludeImportRanges, &out.IncludeImportRanges
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Instances != nil {
		in, out := &in.Instances, &out.Instances
		*out = make([]InstancesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SiteToSiteDataTransfer != nil {
		in, out := &in.SiteToSiteDataTransfer, &out.SiteToSiteDataTransfer
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinkedRouterApplianceInstancesObservation.
func (in *LinkedRouterApplianceInstancesObservation) DeepCopy() *LinkedRouterApplianceInstancesObservation {
	if in == nil {
		return nil
	}
	out := new(LinkedRouterApplianceInstancesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LinkedRouterApplianceInstancesParameters) DeepCopyInto(out *LinkedRouterApplianceInstancesParameters) {
	*out = *in
	if in.IncludeImportRanges != nil {
		in, out := &in.IncludeImportRanges, &out.IncludeImportRanges
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Instances != nil {
		in, out := &in.Instances, &out.Instances
		*out = make([]InstancesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SiteToSiteDataTransfer != nil {
		in, out := &in.SiteToSiteDataTransfer, &out.SiteToSiteDataTransfer
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinkedRouterApplianceInstancesParameters.
func (in *LinkedRouterApplianceInstancesParameters) DeepCopy() *LinkedRouterApplianceInstancesParameters {
	if in == nil {
		return nil
	}
	out := new(LinkedRouterApplianceInstancesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LinkedVPCNetworkInitParameters) DeepCopyInto(out *LinkedVPCNetworkInitParameters) {
	*out = *in
	if in.ExcludeExportRanges != nil {
		in, out := &in.ExcludeExportRanges, &out.ExcludeExportRanges
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IncludeExportRanges != nil {
		in, out := &in.IncludeExportRanges, &out.IncludeExportRanges
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.URI != nil {
		in, out := &in.URI, &out.URI
		*out = new(string)
		**out = **in
	}
	if in.URIRef != nil {
		in, out := &in.URIRef, &out.URIRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.URISelector != nil {
		in, out := &in.URISelector, &out.URISelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinkedVPCNetworkInitParameters.
func (in *LinkedVPCNetworkInitParameters) DeepCopy() *LinkedVPCNetworkInitParameters {
	if in == nil {
		return nil
	}
	out := new(LinkedVPCNetworkInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LinkedVPCNetworkObservation) DeepCopyInto(out *LinkedVPCNetworkObservation) {
	*out = *in
	if in.ExcludeExportRanges != nil {
		in, out := &in.ExcludeExportRanges, &out.ExcludeExportRanges
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IncludeExportRanges != nil {
		in, out := &in.IncludeExportRanges, &out.IncludeExportRanges
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.URI != nil {
		in, out := &in.URI, &out.URI
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinkedVPCNetworkObservation.
func (in *LinkedVPCNetworkObservation) DeepCopy() *LinkedVPCNetworkObservation {
	if in == nil {
		return nil
	}
	out := new(LinkedVPCNetworkObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LinkedVPCNetworkParameters) DeepCopyInto(out *LinkedVPCNetworkParameters) {
	*out = *in
	if in.ExcludeExportRanges != nil {
		in, out := &in.ExcludeExportRanges, &out.ExcludeExportRanges
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IncludeExportRanges != nil {
		in, out := &in.IncludeExportRanges, &out.IncludeExportRanges
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.URI != nil {
		in, out := &in.URI, &out.URI
		*out = new(string)
		**out = **in
	}
	if in.URIRef != nil {
		in, out := &in.URIRef, &out.URIRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.URISelector != nil {
		in, out := &in.URISelector, &out.URISelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinkedVPCNetworkParameters.
func (in *LinkedVPCNetworkParameters) DeepCopy() *LinkedVPCNetworkParameters {
	if in == nil {
		return nil
	}
	out := new(LinkedVPCNetworkParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LinkedVPNTunnelsInitParameters) DeepCopyInto(out *LinkedVPNTunnelsInitParameters) {
	*out = *in
	if in.IncludeImportRanges != nil {
		in, out := &in.IncludeImportRanges, &out.IncludeImportRanges
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SiteToSiteDataTransfer != nil {
		in, out := &in.SiteToSiteDataTransfer, &out.SiteToSiteDataTransfer
		*out = new(bool)
		**out = **in
	}
	if in.Uris != nil {
		in, out := &in.Uris, &out.Uris
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.UrisRefs != nil {
		in, out := &in.UrisRefs, &out.UrisRefs
		*out = make([]v1.NamespacedReference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.UrisSelector != nil {
		in, out := &in.UrisSelector, &out.UrisSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinkedVPNTunnelsInitParameters.
func (in *LinkedVPNTunnelsInitParameters) DeepCopy() *LinkedVPNTunnelsInitParameters {
	if in == nil {
		return nil
	}
	out := new(LinkedVPNTunnelsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LinkedVPNTunnelsObservation) DeepCopyInto(out *LinkedVPNTunnelsObservation) {
	*out = *in
	if in.IncludeImportRanges != nil {
		in, out := &in.IncludeImportRanges, &out.IncludeImportRanges
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SiteToSiteDataTransfer != nil {
		in, out := &in.SiteToSiteDataTransfer, &out.SiteToSiteDataTransfer
		*out = new(bool)
		**out = **in
	}
	if in.Uris != nil {
		in, out := &in.Uris, &out.Uris
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinkedVPNTunnelsObservation.
func (in *LinkedVPNTunnelsObservation) DeepCopy() *LinkedVPNTunnelsObservation {
	if in == nil {
		return nil
	}
	out := new(LinkedVPNTunnelsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LinkedVPNTunnelsParameters) DeepCopyInto(out *LinkedVPNTunnelsParameters) {
	*out = *in
	if in.IncludeImportRanges != nil {
		in, out := &in.IncludeImportRanges, &out.IncludeImportRanges
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SiteToSiteDataTransfer != nil {
		in, out := &in.SiteToSiteDataTransfer, &out.SiteToSiteDataTransfer
		*out = new(bool)
		**out = **in
	}
	if in.Uris != nil {
		in, out := &in.Uris, &out.Uris
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.UrisRefs != nil {
		in, out := &in.UrisRefs, &out.UrisRefs
		*out = make([]v1.NamespacedReference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.UrisSelector != nil {
		in, out := &in.UrisSelector, &out.UrisSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinkedVPNTunnelsParameters.
func (in *LinkedVPNTunnelsParameters) DeepCopy() *LinkedVPNTunnelsParameters {
	if in == nil {
		return nil
	}
	out := new(LinkedVPNTunnelsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MigrationInitParameters) DeepCopyInto(out *MigrationInitParameters) {
	*out = *in
	if in.Source != nil {
		in, out := &in.Source, &out.Source
		*out = new(string)
		**out = **in
	}
	if in.SourceRef != nil {
		in, out := &in.SourceRef, &out.SourceRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.SourceSelector != nil {
		in, out := &in.SourceSelector, &out.SourceSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.Target != nil {
		in, out := &in.Target, &out.Target
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MigrationInitParameters.
func (in *MigrationInitParameters) DeepCopy() *MigrationInitParameters {
	if in == nil {
		return nil
	}
	out := new(MigrationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MigrationObservation) DeepCopyInto(out *MigrationObservation) {
	*out = *in
	if in.Source != nil {
		in, out := &in.Source, &out.Source
		*out = new(string)
		**out = **in
	}
	if in.Target != nil {
		in, out := &in.Target, &out.Target
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MigrationObservation.
func (in *MigrationObservation) DeepCopy() *MigrationObservation {
	if in == nil {
		return nil
	}
	out := new(MigrationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MigrationParameters) DeepCopyInto(out *MigrationParameters) {
	*out = *in
	if in.Source != nil {
		in, out := &in.Source, &out.Source
		*out = new(string)
		**out = **in
	}
	if in.SourceRef != nil {
		in, out := &in.SourceRef, &out.SourceRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.SourceSelector != nil {
		in, out := &in.SourceSelector, &out.SourceSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.Target != nil {
		in, out := &in.Target, &out.Target
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MigrationParameters.
func (in *MigrationParameters) DeepCopy() *MigrationParameters {
	if in == nil {
		return nil
	}
	out := new(MigrationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PscConfigInitParameters) DeepCopyInto(out *PscConfigInitParameters) {
	*out = *in
	if in.AllowedGoogleProducersResourceHierarchyLevel != nil {
		in, out := &in.AllowedGoogleProducersResourceHierarchyLevel, &out.AllowedGoogleProducersResourceHierarchyLevel
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Limit != nil {
		in, out := &in.Limit, &out.Limit
		*out = new(string)
		**out = **in
	}
	if in.ProducerInstanceLocation != nil {
		in, out := &in.ProducerInstanceLocation, &out.ProducerInstanceLocation
		*out = new(string)
		**out = **in
	}
	if in.Subnetworks != nil {
		in, out := &in.Subnetworks, &out.Subnetworks
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SubnetworksRefs != nil {
		in, out := &in.SubnetworksRefs, &out.SubnetworksRefs
		*out = make([]v1.NamespacedReference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SubnetworksSelector != nil {
		in, out := &in.SubnetworksSelector, &out.SubnetworksSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PscConfigInitParameters.
func (in *PscConfigInitParameters) DeepCopy() *PscConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(PscConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PscConfigObservation) DeepCopyInto(out *PscConfigObservation) {
	*out = *in
	if in.AllowedGoogleProducersResourceHierarchyLevel != nil {
		in, out := &in.AllowedGoogleProducersResourceHierarchyLevel, &out.AllowedGoogleProducersResourceHierarchyLevel
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Limit != nil {
		in, out := &in.Limit, &out.Limit
		*out = new(string)
		**out = **in
	}
	if in.ProducerInstanceLocation != nil {
		in, out := &in.ProducerInstanceLocation, &out.ProducerInstanceLocation
		*out = new(string)
		**out = **in
	}
	if in.Subnetworks != nil {
		in, out := &in.Subnetworks, &out.Subnetworks
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PscConfigObservation.
func (in *PscConfigObservation) DeepCopy() *PscConfigObservation {
	if in == nil {
		return nil
	}
	out := new(PscConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PscConfigParameters) DeepCopyInto(out *PscConfigParameters) {
	*out = *in
	if in.AllowedGoogleProducersResourceHierarchyLevel != nil {
		in, out := &in.AllowedGoogleProducersResourceHierarchyLevel, &out.AllowedGoogleProducersResourceHierarchyLevel
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Limit != nil {
		in, out := &in.Limit, &out.Limit
		*out = new(string)
		**out = **in
	}
	if in.ProducerInstanceLocation != nil {
		in, out := &in.ProducerInstanceLocation, &out.ProducerInstanceLocation
		*out = new(string)
		**out = **in
	}
	if in.Subnetworks != nil {
		in, out := &in.Subnetworks, &out.Subnetworks
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SubnetworksRefs != nil {
		in, out := &in.SubnetworksRefs, &out.SubnetworksRefs
		*out = make([]v1.NamespacedReference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SubnetworksSelector != nil {
		in, out := &in.SubnetworksSelector, &out.SubnetworksSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PscConfigParameters.
func (in *PscConfigParameters) DeepCopy() *PscConfigParameters {
	if in == nil {
		return nil
	}
	out := new(PscConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PscConnectionsInitParameters) DeepCopyInto(out *PscConnectionsInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PscConnectionsInitParameters.
func (in *PscConnectionsInitParameters) DeepCopy() *PscConnectionsInitParameters {
	if in == nil {
		return nil
	}
	out := new(PscConnectionsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PscConnectionsObservation) DeepCopyInto(out *PscConnectionsObservation) {
	*out = *in
	if in.ConsumerAddress != nil {
		in, out := &in.ConsumerAddress, &out.ConsumerAddress
		*out = new(string)
		**out = **in
	}
	if in.ConsumerForwardingRule != nil {
		in, out := &in.ConsumerForwardingRule, &out.ConsumerForwardingRule
		*out = new(string)
		**out = **in
	}
	if in.ConsumerTargetProject != nil {
		in, out := &in.ConsumerTargetProject, &out.ConsumerTargetProject
		*out = new(string)
		**out = **in
	}
	if in.Error != nil {
		in, out := &in.Error, &out.Error
		*out = new(ErrorObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.ErrorInfo != nil {
		in, out := &in.ErrorInfo, &out.ErrorInfo
		*out = new(ErrorInfoObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.ErrorType != nil {
		in, out := &in.ErrorType, &out.ErrorType
		*out = new(string)
		**out = **in
	}
	if in.GceOperation != nil {
		in, out := &in.GceOperation, &out.GceOperation
		*out = new(string)
		**out = **in
	}
	if in.PscConnectionID != nil {
		in, out := &in.PscConnectionID, &out.PscConnectionID
		*out = new(string)
		**out = **in
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PscConnectionsObservation.
func (in *PscConnectionsObservation) DeepCopy() *PscConnectionsObservation {
	if in == nil {
		return nil
	}
	out := new(PscConnectionsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PscConnectionsParameters) DeepCopyInto(out *PscConnectionsParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PscConnectionsParameters.
func (in *PscConnectionsParameters) DeepCopy() *PscConnectionsParameters {
	if in == nil {
		return nil
	}
	out := new(PscConnectionsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReasonsInitParameters) DeepCopyInto(out *ReasonsInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReasonsInitParameters.
func (in *ReasonsInitParameters) DeepCopy() *ReasonsInitParameters {
	if in == nil {
		return nil
	}
	out := new(ReasonsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReasonsObservation) DeepCopyInto(out *ReasonsObservation) {
	*out = *in
	if in.Code != nil {
		in, out := &in.Code, &out.Code
		*out = new(string)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.UserDetails != nil {
		in, out := &in.UserDetails, &out.UserDetails
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReasonsObservation.
func (in *ReasonsObservation) DeepCopy() *ReasonsObservation {
	if in == nil {
		return nil
	}
	out := new(ReasonsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReasonsParameters) DeepCopyInto(out *ReasonsParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReasonsParameters.
func (in *ReasonsParameters) DeepCopy() *ReasonsParameters {
	if in == nil {
		return nil
	}
	out := new(ReasonsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RoutingVpcsInitParameters) DeepCopyInto(out *RoutingVpcsInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RoutingVpcsInitParameters.
func (in *RoutingVpcsInitParameters) DeepCopy() *RoutingVpcsInitParameters {
	if in == nil {
		return nil
	}
	out := new(RoutingVpcsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RoutingVpcsObservation) DeepCopyInto(out *RoutingVpcsObservation) {
	*out = *in
	if in.URI != nil {
		in, out := &in.URI, &out.URI
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RoutingVpcsObservation.
func (in *RoutingVpcsObservation) DeepCopy() *RoutingVpcsObservation {
	if in == nil {
		return nil
	}
	out := new(RoutingVpcsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RoutingVpcsParameters) DeepCopyInto(out *RoutingVpcsParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RoutingVpcsParameters.
func (in *RoutingVpcsParameters) DeepCopy() *RoutingVpcsParameters {
	if in == nil {
		return nil
	}
	out := new(RoutingVpcsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServiceConnectionPolicy) DeepCopyInto(out *ServiceConnectionPolicy) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceConnectionPolicy.
func (in *ServiceConnectionPolicy) DeepCopy() *ServiceConnectionPolicy {
	if in == nil {
		return nil
	}
	out := new(ServiceConnectionPolicy)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ServiceConnectionPolicy) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServiceConnectionPolicyInitParameters) DeepCopyInto(out *ServiceConnectionPolicyInitParameters) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Network != nil {
		in, out := &in.Network, &out.Network
		*out = new(string)
		**out = **in
	}
	if in.NetworkRef != nil {
		in, out := &in.NetworkRef, &out.NetworkRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.NetworkSelector != nil {
		in, out := &in.NetworkSelector, &out.NetworkSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.PscConfig != nil {
		in, out := &in.PscConfig, &out.PscConfig
		*out = new(PscConfigInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.ServiceClass != nil {
		in, out := &in.ServiceClass, &out.ServiceClass
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceConnectionPolicyInitParameters.
func (in *ServiceConnectionPolicyInitParameters) DeepCopy() *ServiceConnectionPolicyInitParameters {
	if in == nil {
		return nil
	}
	out := new(ServiceConnectionPolicyInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServiceConnectionPolicyList) DeepCopyInto(out *ServiceConnectionPolicyList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ServiceConnectionPolicy, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceConnectionPolicyList.
func (in *ServiceConnectionPolicyList) DeepCopy() *ServiceConnectionPolicyList {
	if in == nil {
		return nil
	}
	out := new(ServiceConnectionPolicyList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ServiceConnectionPolicyList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServiceConnectionPolicyObservation) DeepCopyInto(out *ServiceConnectionPolicyObservation) {
	*out = *in
	if in.CreateTime != nil {
		in, out := &in.CreateTime, &out.CreateTime
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.EffectiveLabels != nil {
		in, out := &in.EffectiveLabels, &out.EffectiveLabels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Etag != nil {
		in, out := &in.Etag, &out.Etag
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Infrastructure != nil {
		in, out := &in.Infrastructure, &out.Infrastructure
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.Network != nil {
		in, out := &in.Network, &out.Network
		*out = new(string)
		**out = **in
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.PscConfig != nil {
		in, out := &in.PscConfig, &out.PscConfig
		*out = new(PscConfigObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.PscConnections != nil {
		in, out := &in.PscConnections, &out.PscConnections
		*out = make([]PscConnectionsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ServiceClass != nil {
		in, out := &in.ServiceClass, &out.ServiceClass
		*out = new(string)
		**out = **in
	}
	if in.TerraformLabels != nil {
		in, out := &in.TerraformLabels, &out.TerraformLabels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.UpdateTime != nil {
		in, out := &in.UpdateTime, &out.UpdateTime
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceConnectionPolicyObservation.
func (in *ServiceConnectionPolicyObservation) DeepCopy() *ServiceConnectionPolicyObservation {
	if in == nil {
		return nil
	}
	out := new(ServiceConnectionPolicyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServiceConnectionPolicyParameters) DeepCopyInto(out *ServiceConnectionPolicyParameters) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.Network != nil {
		in, out := &in.Network, &out.Network
		*out = new(string)
		**out = **in
	}
	if in.NetworkRef != nil {
		in, out := &in.NetworkRef, &out.NetworkRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.NetworkSelector != nil {
		in, out := &in.NetworkSelector, &out.NetworkSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.PscConfig != nil {
		in, out := &in.PscConfig, &out.PscConfig
		*out = new(PscConfigParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.ServiceClass != nil {
		in, out := &in.ServiceClass, &out.ServiceClass
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceConnectionPolicyParameters.
func (in *ServiceConnectionPolicyParameters) DeepCopy() *ServiceConnectionPolicyParameters {
	if in == nil {
		return nil
	}
	out := new(ServiceConnectionPolicyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServiceConnectionPolicySpec) DeepCopyInto(out *ServiceConnectionPolicySpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceConnectionPolicySpec.
func (in *ServiceConnectionPolicySpec) DeepCopy() *ServiceConnectionPolicySpec {
	if in == nil {
		return nil
	}
	out := new(ServiceConnectionPolicySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServiceConnectionPolicyStatus) DeepCopyInto(out *ServiceConnectionPolicyStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceConnectionPolicyStatus.
func (in *ServiceConnectionPolicyStatus) DeepCopy() *ServiceConnectionPolicyStatus {
	if in == nil {
		return nil
	}
	out := new(ServiceConnectionPolicyStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Spoke) DeepCopyInto(out *Spoke) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Spoke.
func (in *Spoke) DeepCopy() *Spoke {
	if in == nil {
		return nil
	}
	out := new(Spoke)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Spoke) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SpokeInitParameters) DeepCopyInto(out *SpokeInitParameters) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Group != nil {
		in, out := &in.Group, &out.Group
		*out = new(string)
		**out = **in
	}
	if in.Hub != nil {
		in, out := &in.Hub, &out.Hub
		*out = new(string)
		**out = **in
	}
	if in.HubRef != nil {
		in, out := &in.HubRef, &out.HubRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.HubSelector != nil {
		in, out := &in.HubSelector, &out.HubSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.LinkedInterconnectAttachments != nil {
		in, out := &in.LinkedInterconnectAttachments, &out.LinkedInterconnectAttachments
		*out = new(LinkedInterconnectAttachmentsInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.LinkedProducerVPCNetwork != nil {
		in, out := &in.LinkedProducerVPCNetwork, &out.LinkedProducerVPCNetwork
		*out = new(LinkedProducerVPCNetworkInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.LinkedRouterApplianceInstances != nil {
		in, out := &in.LinkedRouterApplianceInstances, &out.LinkedRouterApplianceInstances
		*out = new(LinkedRouterApplianceInstancesInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.LinkedVPCNetwork != nil {
		in, out := &in.LinkedVPCNetwork, &out.LinkedVPCNetwork
		*out = new(LinkedVPCNetworkInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.LinkedVPNTunnels != nil {
		in, out := &in.LinkedVPNTunnels, &out.LinkedVPNTunnels
		*out = new(LinkedVPNTunnelsInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SpokeInitParameters.
func (in *SpokeInitParameters) DeepCopy() *SpokeInitParameters {
	if in == nil {
		return nil
	}
	out := new(SpokeInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SpokeList) DeepCopyInto(out *SpokeList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Spoke, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SpokeList.
func (in *SpokeList) DeepCopy() *SpokeList {
	if in == nil {
		return nil
	}
	out := new(SpokeList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SpokeList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SpokeObservation) DeepCopyInto(out *SpokeObservation) {
	*out = *in
	if in.CreateTime != nil {
		in, out := &in.CreateTime, &out.CreateTime
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.EffectiveLabels != nil {
		in, out := &in.EffectiveLabels, &out.EffectiveLabels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Group != nil {
		in, out := &in.Group, &out.Group
		*out = new(string)
		**out = **in
	}
	if in.Hub != nil {
		in, out := &in.Hub, &out.Hub
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.LinkedInterconnectAttachments != nil {
		in, out := &in.LinkedInterconnectAttachments, &out.LinkedInterconnectAttachments
		*out = new(LinkedInterconnectAttachmentsObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.LinkedProducerVPCNetwork != nil {
		in, out := &in.LinkedProducerVPCNetwork, &out.LinkedProducerVPCNetwork
		*out = new(LinkedProducerVPCNetworkObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.LinkedRouterApplianceInstances != nil {
		in, out := &in.LinkedRouterApplianceInstances, &out.LinkedRouterApplianceInstances
		*out = new(LinkedRouterApplianceInstancesObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.LinkedVPCNetwork != nil {
		in, out := &in.LinkedVPCNetwork, &out.LinkedVPCNetwork
		*out = new(LinkedVPCNetworkObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.LinkedVPNTunnels != nil {
		in, out := &in.LinkedVPNTunnels, &out.LinkedVPNTunnels
		*out = new(LinkedVPNTunnelsObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.Reasons != nil {
		in, out := &in.Reasons, &out.Reasons
		*out = make([]ReasonsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
	if in.TerraformLabels != nil {
		in, out := &in.TerraformLabels, &out.TerraformLabels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.UniqueID != nil {
		in, out := &in.UniqueID, &out.UniqueID
		*out = new(string)
		**out = **in
	}
	if in.UpdateTime != nil {
		in, out := &in.UpdateTime, &out.UpdateTime
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SpokeObservation.
func (in *SpokeObservation) DeepCopy() *SpokeObservation {
	if in == nil {
		return nil
	}
	out := new(SpokeObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SpokeParameters) DeepCopyInto(out *SpokeParameters) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Group != nil {
		in, out := &in.Group, &out.Group
		*out = new(string)
		**out = **in
	}
	if in.Hub != nil {
		in, out := &in.Hub, &out.Hub
		*out = new(string)
		**out = **in
	}
	if in.HubRef != nil {
		in, out := &in.HubRef, &out.HubRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.HubSelector != nil {
		in, out := &in.HubSelector, &out.HubSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.LinkedInterconnectAttachments != nil {
		in, out := &in.LinkedInterconnectAttachments, &out.LinkedInterconnectAttachments
		*out = new(LinkedInterconnectAttachmentsParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.LinkedProducerVPCNetwork != nil {
		in, out := &in.LinkedProducerVPCNetwork, &out.LinkedProducerVPCNetwork
		*out = new(LinkedProducerVPCNetworkParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.LinkedRouterApplianceInstances != nil {
		in, out := &in.LinkedRouterApplianceInstances, &out.LinkedRouterApplianceInstances
		*out = new(LinkedRouterApplianceInstancesParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.LinkedVPCNetwork != nil {
		in, out := &in.LinkedVPCNetwork, &out.LinkedVPCNetwork
		*out = new(LinkedVPCNetworkParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.LinkedVPNTunnels != nil {
		in, out := &in.LinkedVPNTunnels, &out.LinkedVPNTunnels
		*out = new(LinkedVPNTunnelsParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SpokeParameters.
func (in *SpokeParameters) DeepCopy() *SpokeParameters {
	if in == nil {
		return nil
	}
	out := new(SpokeParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SpokeSpec) DeepCopyInto(out *SpokeSpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SpokeSpec.
func (in *SpokeSpec) DeepCopy() *SpokeSpec {
	if in == nil {
		return nil
	}
	out := new(SpokeSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SpokeStatus) DeepCopyInto(out *SpokeStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SpokeStatus.
func (in *SpokeStatus) DeepCopy() *SpokeStatus {
	if in == nil {
		return nil
	}
	out := new(SpokeStatus)
	in.DeepCopyInto(out)
	return out
}
