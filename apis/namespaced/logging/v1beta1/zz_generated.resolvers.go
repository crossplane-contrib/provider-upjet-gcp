// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	xpresource "github.com/crossplane/crossplane-runtime/v2/pkg/resource"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"
	common "github.com/upbound/provider-gcp/config/namespaced/common"
	apisresolver "github.com/upbound/provider-gcp/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *FolderBucketConfig) ResolveReferences( // ResolveReferences of this FolderBucketConfig.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.m.upbound.io", "v1beta1", "Folder", "FolderList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Folder),
			Extract:      common.ExtractFolderID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.FolderRef,
			Selector:     mg.Spec.ForProvider.FolderSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Folder")
	}
	mg.Spec.ForProvider.Folder = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.FolderRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this FolderExclusion.
func (mg *FolderExclusion) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.m.upbound.io", "v1beta1", "Folder", "FolderList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Folder),
			Extract:      resource.ExtractParamPath("name", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.FolderRef,
			Selector:     mg.Spec.ForProvider.FolderSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Folder")
	}
	mg.Spec.ForProvider.Folder = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.FolderRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this FolderSink.
func (mg *FolderSink) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.m.upbound.io", "v1beta1", "Folder", "FolderList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Folder),
			Extract:      resource.ExtractParamPath("name", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.FolderRef,
			Selector:     mg.Spec.ForProvider.FolderSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Folder")
	}
	mg.Spec.ForProvider.Folder = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.FolderRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LogView.
func (mg *LogView) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("logging.gcp.m.upbound.io", "v1beta1", "ProjectBucketConfig", "ProjectBucketConfigList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Bucket),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.BucketRef,
			Selector:     mg.Spec.ForProvider.BucketSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Bucket")
	}
	mg.Spec.ForProvider.Bucket = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.BucketRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Metric.
func (mg *Metric) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("logging.gcp.m.upbound.io", "v1beta1", "ProjectBucketConfig", "ProjectBucketConfigList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BucketName),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.BucketNameRef,
			Selector:     mg.Spec.ForProvider.BucketNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.BucketName")
	}
	mg.Spec.ForProvider.BucketName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.BucketNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("logging.gcp.m.upbound.io", "v1beta1", "ProjectBucketConfig", "ProjectBucketConfigList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BucketName),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.BucketNameRef,
			Selector:     mg.Spec.InitProvider.BucketNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.BucketName")
	}
	mg.Spec.InitProvider.BucketName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.BucketNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ProjectBucketConfig.
func (mg *ProjectBucketConfig) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error

	if mg.Spec.ForProvider.CmekSettings != nil {
		{
			m, l, err = apisresolver.GetManagedResource("kms.gcp.m.upbound.io", "v1beta1", "CryptoKey", "CryptoKeyList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CmekSettings.KMSKeyName),
				Extract:      resource.ExtractResourceID(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.CmekSettings.KMSKeyNameRef,
				Selector:     mg.Spec.ForProvider.CmekSettings.KMSKeyNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.CmekSettings.KMSKeyName")
		}
		mg.Spec.ForProvider.CmekSettings.KMSKeyName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.CmekSettings.KMSKeyNameRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.m.upbound.io", "v1beta1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Project),
			Extract:      resource.ExtractParamPath("project_id", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ProjectRef,
			Selector:     mg.Spec.ForProvider.ProjectSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Project")
	}
	mg.Spec.ForProvider.Project = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.CmekSettings != nil {
		{
			m, l, err = apisresolver.GetManagedResource("kms.gcp.m.upbound.io", "v1beta1", "CryptoKey", "CryptoKeyList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CmekSettings.KMSKeyName),
				Extract:      resource.ExtractResourceID(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.CmekSettings.KMSKeyNameRef,
				Selector:     mg.Spec.InitProvider.CmekSettings.KMSKeyNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.CmekSettings.KMSKeyName")
		}
		mg.Spec.InitProvider.CmekSettings.KMSKeyName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.CmekSettings.KMSKeyNameRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this ProjectSink.
func (mg *ProjectSink) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.m.upbound.io", "v1beta1", "ServiceAccount", "ServiceAccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CustomWriterIdentity),
			Extract:      resource.ExtractParamPath("email", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.CustomWriterIdentityRef,
			Selector:     mg.Spec.ForProvider.CustomWriterIdentitySelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CustomWriterIdentity")
	}
	mg.Spec.ForProvider.CustomWriterIdentity = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CustomWriterIdentityRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.m.upbound.io", "v1beta1", "ServiceAccount", "ServiceAccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CustomWriterIdentity),
			Extract:      resource.ExtractParamPath("email", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.CustomWriterIdentityRef,
			Selector:     mg.Spec.InitProvider.CustomWriterIdentitySelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CustomWriterIdentity")
	}
	mg.Spec.InitProvider.CustomWriterIdentity = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CustomWriterIdentityRef = rsp.ResolvedReference

	return nil
}
