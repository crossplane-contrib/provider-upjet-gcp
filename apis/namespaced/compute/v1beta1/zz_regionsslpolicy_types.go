// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type RegionSSLPolicyInitParameters struct {

	// +listType=set
	CustomFeatures []*string `json:"customFeatures,omitempty" tf:"custom_features,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	MinTLSVersion *string `json:"minTlsVersion,omitempty" tf:"min_tls_version,omitempty"`

	Profile *string `json:"profile,omitempty" tf:"profile,omitempty"`

	Project *string `json:"project,omitempty" tf:"project,omitempty"`
}

type RegionSSLPolicyObservation struct {
	CreationTimestamp *string `json:"creationTimestamp,omitempty" tf:"creation_timestamp,omitempty"`

	// +listType=set
	CustomFeatures []*string `json:"customFeatures,omitempty" tf:"custom_features,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +listType=set
	EnabledFeatures []*string `json:"enabledFeatures,omitempty" tf:"enabled_features,omitempty"`

	Fingerprint *string `json:"fingerprint,omitempty" tf:"fingerprint,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	MinTLSVersion *string `json:"minTlsVersion,omitempty" tf:"min_tls_version,omitempty"`

	Profile *string `json:"profile,omitempty" tf:"profile,omitempty"`

	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	SelfLink *string `json:"selfLink,omitempty" tf:"self_link,omitempty"`
}

type RegionSSLPolicyParameters struct {

	// +kubebuilder:validation:Optional
	// +listType=set
	CustomFeatures []*string `json:"customFeatures,omitempty" tf:"custom_features,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	MinTLSVersion *string `json:"minTlsVersion,omitempty" tf:"min_tls_version,omitempty"`

	// +kubebuilder:validation:Optional
	Profile *string `json:"profile,omitempty" tf:"profile,omitempty"`

	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`
}

// RegionSSLPolicySpec defines the desired state of RegionSSLPolicy
type RegionSSLPolicySpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            RegionSSLPolicyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RegionSSLPolicyInitParameters `json:"initProvider,omitempty"`
}

// RegionSSLPolicyStatus defines the observed state of RegionSSLPolicy.
type RegionSSLPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RegionSSLPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// RegionSSLPolicy is the Schema for the RegionSSLPolicys API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,gcp}
type RegionSSLPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RegionSSLPolicySpec   `json:"spec"`
	Status            RegionSSLPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RegionSSLPolicyList contains a list of RegionSSLPolicys
type RegionSSLPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RegionSSLPolicy `json:"items"`
}

// Repository type metadata.
var (
	RegionSSLPolicy_Kind             = "RegionSSLPolicy"
	RegionSSLPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RegionSSLPolicy_Kind}.String()
	RegionSSLPolicy_KindAPIVersion   = RegionSSLPolicy_Kind + "." + CRDGroupVersion.String()
	RegionSSLPolicy_GroupVersionKind = CRDGroupVersion.WithKind(RegionSSLPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&RegionSSLPolicy{}, &RegionSSLPolicyList{})
}
