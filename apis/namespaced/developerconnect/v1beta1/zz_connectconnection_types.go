// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type AuthorizerCredentialInitParameters struct {

	// Required. A SecretManager resource containing the user token that authorizes
	// the Developer Connect connection. Format:
	// projects/*/secrets/*/versions/*.
	UserTokenSecretVersion *string `json:"userTokenSecretVersion,omitempty" tf:"user_token_secret_version,omitempty"`
}

type AuthorizerCredentialObservation struct {

	// Required. A SecretManager resource containing the user token that authorizes
	// the Developer Connect connection. Format:
	// projects/*/secrets/*/versions/*.
	UserTokenSecretVersion *string `json:"userTokenSecretVersion,omitempty" tf:"user_token_secret_version,omitempty"`

	// (Output)
	// Output only. The username associated with this token.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type AuthorizerCredentialParameters struct {

	// Required. A SecretManager resource containing the user token that authorizes
	// the Developer Connect connection. Format:
	// projects/*/secrets/*/versions/*.
	// +kubebuilder:validation:Optional
	UserTokenSecretVersion *string `json:"userTokenSecretVersion" tf:"user_token_secret_version,omitempty"`
}

type BitbucketCloudConfigInitParameters struct {

	// Represents a personal access token that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	AuthorizerCredential *AuthorizerCredentialInitParameters `json:"authorizerCredential,omitempty" tf:"authorizer_credential,omitempty"`

	// Represents a personal access token that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	ReadAuthorizerCredential *ReadAuthorizerCredentialInitParameters `json:"readAuthorizerCredential,omitempty" tf:"read_authorizer_credential,omitempty"`

	// Required. Immutable. SecretManager resource containing the webhook secret used to verify webhook
	// events, formatted as projects/*/secrets/*/versions/*. This is used to
	// validate and create webhooks.
	WebhookSecretSecretVersion *string `json:"webhookSecretSecretVersion,omitempty" tf:"webhook_secret_secret_version,omitempty"`

	// Required. The Bitbucket Cloud Workspace ID to be connected to Google Cloud Platform.
	Workspace *string `json:"workspace,omitempty" tf:"workspace,omitempty"`
}

type BitbucketCloudConfigObservation struct {

	// Represents a personal access token that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	AuthorizerCredential *AuthorizerCredentialObservation `json:"authorizerCredential,omitempty" tf:"authorizer_credential,omitempty"`

	// Represents a personal access token that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	ReadAuthorizerCredential *ReadAuthorizerCredentialObservation `json:"readAuthorizerCredential,omitempty" tf:"read_authorizer_credential,omitempty"`

	// Required. Immutable. SecretManager resource containing the webhook secret used to verify webhook
	// events, formatted as projects/*/secrets/*/versions/*. This is used to
	// validate and create webhooks.
	WebhookSecretSecretVersion *string `json:"webhookSecretSecretVersion,omitempty" tf:"webhook_secret_secret_version,omitempty"`

	// Required. The Bitbucket Cloud Workspace ID to be connected to Google Cloud Platform.
	Workspace *string `json:"workspace,omitempty" tf:"workspace,omitempty"`
}

type BitbucketCloudConfigParameters struct {

	// Represents a personal access token that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	AuthorizerCredential *AuthorizerCredentialParameters `json:"authorizerCredential" tf:"authorizer_credential,omitempty"`

	// Represents a personal access token that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	ReadAuthorizerCredential *ReadAuthorizerCredentialParameters `json:"readAuthorizerCredential" tf:"read_authorizer_credential,omitempty"`

	// Required. Immutable. SecretManager resource containing the webhook secret used to verify webhook
	// events, formatted as projects/*/secrets/*/versions/*. This is used to
	// validate and create webhooks.
	// +kubebuilder:validation:Optional
	WebhookSecretSecretVersion *string `json:"webhookSecretSecretVersion" tf:"webhook_secret_secret_version,omitempty"`

	// Required. The Bitbucket Cloud Workspace ID to be connected to Google Cloud Platform.
	// +kubebuilder:validation:Optional
	Workspace *string `json:"workspace" tf:"workspace,omitempty"`
}

type BitbucketDataCenterConfigAuthorizerCredentialInitParameters struct {

	// Required. A SecretManager resource containing the user token that authorizes
	// the Developer Connect connection. Format:
	// projects/*/secrets/*/versions/*.
	UserTokenSecretVersion *string `json:"userTokenSecretVersion,omitempty" tf:"user_token_secret_version,omitempty"`
}

type BitbucketDataCenterConfigAuthorizerCredentialObservation struct {

	// Required. A SecretManager resource containing the user token that authorizes
	// the Developer Connect connection. Format:
	// projects/*/secrets/*/versions/*.
	UserTokenSecretVersion *string `json:"userTokenSecretVersion,omitempty" tf:"user_token_secret_version,omitempty"`

	// (Output)
	// Output only. The username associated with this token.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type BitbucketDataCenterConfigAuthorizerCredentialParameters struct {

	// Required. A SecretManager resource containing the user token that authorizes
	// the Developer Connect connection. Format:
	// projects/*/secrets/*/versions/*.
	// +kubebuilder:validation:Optional
	UserTokenSecretVersion *string `json:"userTokenSecretVersion" tf:"user_token_secret_version,omitempty"`
}

type BitbucketDataCenterConfigInitParameters struct {

	// Represents a personal access token that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	AuthorizerCredential *BitbucketDataCenterConfigAuthorizerCredentialInitParameters `json:"authorizerCredential,omitempty" tf:"authorizer_credential,omitempty"`

	// Required. The URI of the Bitbucket Data Center host this connection is for.
	HostURI *string `json:"hostUri,omitempty" tf:"host_uri,omitempty"`

	// Represents a personal access token that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	ReadAuthorizerCredential *BitbucketDataCenterConfigReadAuthorizerCredentialInitParameters `json:"readAuthorizerCredential,omitempty" tf:"read_authorizer_credential,omitempty"`

	// Optional. SSL certificate authority to trust when making requests to Bitbucket Data
	// Center.
	SSLCACertificate *string `json:"sslCaCertificate,omitempty" tf:"ssl_ca_certificate,omitempty"`

	// ServiceDirectoryConfig represents Service Directory configuration for a
	// connection.
	// Structure is documented below.
	ServiceDirectoryConfig *ServiceDirectoryConfigInitParameters `json:"serviceDirectoryConfig,omitempty" tf:"service_directory_config,omitempty"`

	// Required. Immutable. SecretManager resource containing the webhook secret used to verify webhook
	// events, formatted as projects/*/secrets/*/versions/*. This is used to
	// validate webhooks.
	WebhookSecretSecretVersion *string `json:"webhookSecretSecretVersion,omitempty" tf:"webhook_secret_secret_version,omitempty"`
}

type BitbucketDataCenterConfigObservation struct {

	// Represents a personal access token that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	AuthorizerCredential *BitbucketDataCenterConfigAuthorizerCredentialObservation `json:"authorizerCredential,omitempty" tf:"authorizer_credential,omitempty"`

	// Required. The URI of the Bitbucket Data Center host this connection is for.
	HostURI *string `json:"hostUri,omitempty" tf:"host_uri,omitempty"`

	// Represents a personal access token that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	ReadAuthorizerCredential *BitbucketDataCenterConfigReadAuthorizerCredentialObservation `json:"readAuthorizerCredential,omitempty" tf:"read_authorizer_credential,omitempty"`

	// Optional. SSL certificate authority to trust when making requests to Bitbucket Data
	// Center.
	SSLCACertificate *string `json:"sslCaCertificate,omitempty" tf:"ssl_ca_certificate,omitempty"`

	// (Output)
	// Output only. Version of the Bitbucket Data Center server running on the host_uri.
	ServerVersion *string `json:"serverVersion,omitempty" tf:"server_version,omitempty"`

	// ServiceDirectoryConfig represents Service Directory configuration for a
	// connection.
	// Structure is documented below.
	ServiceDirectoryConfig *ServiceDirectoryConfigObservation `json:"serviceDirectoryConfig,omitempty" tf:"service_directory_config,omitempty"`

	// Required. Immutable. SecretManager resource containing the webhook secret used to verify webhook
	// events, formatted as projects/*/secrets/*/versions/*. This is used to
	// validate webhooks.
	WebhookSecretSecretVersion *string `json:"webhookSecretSecretVersion,omitempty" tf:"webhook_secret_secret_version,omitempty"`
}

type BitbucketDataCenterConfigParameters struct {

	// Represents a personal access token that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	AuthorizerCredential *BitbucketDataCenterConfigAuthorizerCredentialParameters `json:"authorizerCredential" tf:"authorizer_credential,omitempty"`

	// Required. The URI of the Bitbucket Data Center host this connection is for.
	// +kubebuilder:validation:Optional
	HostURI *string `json:"hostUri" tf:"host_uri,omitempty"`

	// Represents a personal access token that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	ReadAuthorizerCredential *BitbucketDataCenterConfigReadAuthorizerCredentialParameters `json:"readAuthorizerCredential" tf:"read_authorizer_credential,omitempty"`

	// Optional. SSL certificate authority to trust when making requests to Bitbucket Data
	// Center.
	// +kubebuilder:validation:Optional
	SSLCACertificate *string `json:"sslCaCertificate,omitempty" tf:"ssl_ca_certificate,omitempty"`

	// ServiceDirectoryConfig represents Service Directory configuration for a
	// connection.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	ServiceDirectoryConfig *ServiceDirectoryConfigParameters `json:"serviceDirectoryConfig,omitempty" tf:"service_directory_config,omitempty"`

	// Required. Immutable. SecretManager resource containing the webhook secret used to verify webhook
	// events, formatted as projects/*/secrets/*/versions/*. This is used to
	// validate webhooks.
	// +kubebuilder:validation:Optional
	WebhookSecretSecretVersion *string `json:"webhookSecretSecretVersion" tf:"webhook_secret_secret_version,omitempty"`
}

type BitbucketDataCenterConfigReadAuthorizerCredentialInitParameters struct {

	// Required. A SecretManager resource containing the user token that authorizes
	// the Developer Connect connection. Format:
	// projects/*/secrets/*/versions/*.
	UserTokenSecretVersion *string `json:"userTokenSecretVersion,omitempty" tf:"user_token_secret_version,omitempty"`
}

type BitbucketDataCenterConfigReadAuthorizerCredentialObservation struct {

	// Required. A SecretManager resource containing the user token that authorizes
	// the Developer Connect connection. Format:
	// projects/*/secrets/*/versions/*.
	UserTokenSecretVersion *string `json:"userTokenSecretVersion,omitempty" tf:"user_token_secret_version,omitempty"`

	// (Output)
	// Output only. The username associated with this token.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type BitbucketDataCenterConfigReadAuthorizerCredentialParameters struct {

	// Required. A SecretManager resource containing the user token that authorizes
	// the Developer Connect connection. Format:
	// projects/*/secrets/*/versions/*.
	// +kubebuilder:validation:Optional
	UserTokenSecretVersion *string `json:"userTokenSecretVersion" tf:"user_token_secret_version,omitempty"`
}

type ConnectConnectionInitParameters struct {

	// Optional. Allows clients to store small amounts of arbitrary data.
	// Note: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field effective_annotations for all of the annotations present on the resource.
	// +mapType=granular
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Configuration for connections to an instance of Bitbucket Cloud.
	// Structure is documented below.
	BitbucketCloudConfig *BitbucketCloudConfigInitParameters `json:"bitbucketCloudConfig,omitempty" tf:"bitbucket_cloud_config,omitempty"`

	// Configuration for connections to an instance of Bitbucket Data Center.
	// Structure is documented below.
	BitbucketDataCenterConfig *BitbucketDataCenterConfigInitParameters `json:"bitbucketDataCenterConfig,omitempty" tf:"bitbucket_data_center_config,omitempty"`

	// The crypto key configuration. This field is used by the Customer-managed
	// encryption keys (CMEK) feature.
	// Structure is documented below.
	CryptoKeyConfig *CryptoKeyConfigInitParameters `json:"cryptoKeyConfig,omitempty" tf:"crypto_key_config,omitempty"`

	// Optional. If disabled is set to true, functionality is disabled for this connection.
	// Repository based API methods and webhooks processing for repositories in
	// this connection will be disabled.
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// Optional. This checksum is computed by the server based on the value of other
	// fields, and may be sent on update and delete requests to ensure the
	// client has an up-to-date value before proceeding.
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	// Configuration for connections to github.com.
	// Structure is documented below.
	GithubConfig *GithubConfigInitParameters `json:"githubConfig,omitempty" tf:"github_config,omitempty"`

	// Configuration for connections to an instance of GitHub Enterprise.
	// Structure is documented below.
	GithubEnterpriseConfig *GithubEnterpriseConfigInitParameters `json:"githubEnterpriseConfig,omitempty" tf:"github_enterprise_config,omitempty"`

	// Configuration for connections to gitlab.com.
	// Structure is documented below.
	GitlabConfig *GitlabConfigInitParameters `json:"gitlabConfig,omitempty" tf:"gitlab_config,omitempty"`

	// Configuration for connections to an instance of GitLab Enterprise.
	// Structure is documented below.
	GitlabEnterpriseConfig *GitlabEnterpriseConfigInitParameters `json:"gitlabEnterpriseConfig,omitempty" tf:"gitlab_enterprise_config,omitempty"`

	// Optional. Labels as key value pairs
	// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field effective_labels for all of the labels present on the resource.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`
}

type ConnectConnectionObservation struct {

	// Optional. Allows clients to store small amounts of arbitrary data.
	// Note: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field effective_annotations for all of the annotations present on the resource.
	// +mapType=granular
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Configuration for connections to an instance of Bitbucket Cloud.
	// Structure is documented below.
	BitbucketCloudConfig *BitbucketCloudConfigObservation `json:"bitbucketCloudConfig,omitempty" tf:"bitbucket_cloud_config,omitempty"`

	// Configuration for connections to an instance of Bitbucket Data Center.
	// Structure is documented below.
	BitbucketDataCenterConfig *BitbucketDataCenterConfigObservation `json:"bitbucketDataCenterConfig,omitempty" tf:"bitbucket_data_center_config,omitempty"`

	// Output only. [Output only] Create timestamp
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// The crypto key configuration. This field is used by the Customer-managed
	// encryption keys (CMEK) feature.
	// Structure is documented below.
	CryptoKeyConfig *CryptoKeyConfigObservation `json:"cryptoKeyConfig,omitempty" tf:"crypto_key_config,omitempty"`

	// Output only. [Output only] Delete timestamp
	DeleteTime *string `json:"deleteTime,omitempty" tf:"delete_time,omitempty"`

	// Optional. If disabled is set to true, functionality is disabled for this connection.
	// Repository based API methods and webhooks processing for repositories in
	// this connection will be disabled.
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// +mapType=granular
	EffectiveAnnotations map[string]*string `json:"effectiveAnnotations,omitempty" tf:"effective_annotations,omitempty"`

	// +mapType=granular
	EffectiveLabels map[string]*string `json:"effectiveLabels,omitempty" tf:"effective_labels,omitempty"`

	// Optional. This checksum is computed by the server based on the value of other
	// fields, and may be sent on update and delete requests to ensure the
	// client has an up-to-date value before proceeding.
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	// Configuration for connections to github.com.
	// Structure is documented below.
	GithubConfig *GithubConfigObservation `json:"githubConfig,omitempty" tf:"github_config,omitempty"`

	// Configuration for connections to an instance of GitHub Enterprise.
	// Structure is documented below.
	GithubEnterpriseConfig *GithubEnterpriseConfigObservation `json:"githubEnterpriseConfig,omitempty" tf:"github_enterprise_config,omitempty"`

	// Configuration for connections to gitlab.com.
	// Structure is documented below.
	GitlabConfig *GitlabConfigObservation `json:"gitlabConfig,omitempty" tf:"gitlab_config,omitempty"`

	// Configuration for connections to an instance of GitLab Enterprise.
	// Structure is documented below.
	GitlabEnterpriseConfig *GitlabEnterpriseConfigObservation `json:"gitlabEnterpriseConfig,omitempty" tf:"gitlab_enterprise_config,omitempty"`

	// an identifier for the resource with format projects/{{project}}/locations/{{location}}/connections/{{connection_id}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Describes stage and necessary actions to be taken by the
	// user to complete the installation. Used for GitHub and GitHub Enterprise
	// based connections.
	// Structure is documented below.
	InstallationState []InstallationStateObservation `json:"installationState,omitempty" tf:"installation_state,omitempty"`

	// Optional. Labels as key value pairs
	// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field effective_labels for all of the labels present on the resource.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Resource ID segment making up resource name. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// Identifier. The resource name of the connection, in the format
	// projects/{project}/locations/{location}/connections/{connection_id}.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Output only. Set to true when the connection is being set up or updated in the
	// background.
	Reconciling *bool `json:"reconciling,omitempty" tf:"reconciling,omitempty"`

	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	// +mapType=granular
	TerraformLabels map[string]*string `json:"terraformLabels,omitempty" tf:"terraform_labels,omitempty"`

	// Output only. A system-assigned unique identifier for a the GitRepositoryLink.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`

	// Output only. [Output only] Update timestamp
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type ConnectConnectionParameters struct {

	// Optional. Allows clients to store small amounts of arbitrary data.
	// Note: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field effective_annotations for all of the annotations present on the resource.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Configuration for connections to an instance of Bitbucket Cloud.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	BitbucketCloudConfig *BitbucketCloudConfigParameters `json:"bitbucketCloudConfig,omitempty" tf:"bitbucket_cloud_config,omitempty"`

	// Configuration for connections to an instance of Bitbucket Data Center.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	BitbucketDataCenterConfig *BitbucketDataCenterConfigParameters `json:"bitbucketDataCenterConfig,omitempty" tf:"bitbucket_data_center_config,omitempty"`

	// The crypto key configuration. This field is used by the Customer-managed
	// encryption keys (CMEK) feature.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	CryptoKeyConfig *CryptoKeyConfigParameters `json:"cryptoKeyConfig,omitempty" tf:"crypto_key_config,omitempty"`

	// Optional. If disabled is set to true, functionality is disabled for this connection.
	// Repository based API methods and webhooks processing for repositories in
	// this connection will be disabled.
	// +kubebuilder:validation:Optional
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// Optional. This checksum is computed by the server based on the value of other
	// fields, and may be sent on update and delete requests to ensure the
	// client has an up-to-date value before proceeding.
	// +kubebuilder:validation:Optional
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	// Configuration for connections to github.com.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	GithubConfig *GithubConfigParameters `json:"githubConfig,omitempty" tf:"github_config,omitempty"`

	// Configuration for connections to an instance of GitHub Enterprise.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	GithubEnterpriseConfig *GithubEnterpriseConfigParameters `json:"githubEnterpriseConfig,omitempty" tf:"github_enterprise_config,omitempty"`

	// Configuration for connections to gitlab.com.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	GitlabConfig *GitlabConfigParameters `json:"gitlabConfig,omitempty" tf:"gitlab_config,omitempty"`

	// Configuration for connections to an instance of GitLab Enterprise.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	GitlabEnterpriseConfig *GitlabEnterpriseConfigParameters `json:"gitlabEnterpriseConfig,omitempty" tf:"gitlab_enterprise_config,omitempty"`

	// Optional. Labels as key value pairs
	// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field effective_labels for all of the labels present on the resource.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Resource ID segment making up resource name. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`
}

type CryptoKeyConfigInitParameters struct {

	// Required. The name of the key which is used to encrypt/decrypt customer data. For key
	// in Cloud KMS, the key should be in the format of
	// projects/*/locations/*/keyRings/*/cryptoKeys/*.
	KeyReference *string `json:"keyReference,omitempty" tf:"key_reference,omitempty"`
}

type CryptoKeyConfigObservation struct {

	// Required. The name of the key which is used to encrypt/decrypt customer data. For key
	// in Cloud KMS, the key should be in the format of
	// projects/*/locations/*/keyRings/*/cryptoKeys/*.
	KeyReference *string `json:"keyReference,omitempty" tf:"key_reference,omitempty"`
}

type CryptoKeyConfigParameters struct {

	// Required. The name of the key which is used to encrypt/decrypt customer data. For key
	// in Cloud KMS, the key should be in the format of
	// projects/*/locations/*/keyRings/*/cryptoKeys/*.
	// +kubebuilder:validation:Optional
	KeyReference *string `json:"keyReference" tf:"key_reference,omitempty"`
}

type GithubConfigAuthorizerCredentialInitParameters struct {

	// Required. A SecretManager resource containing the OAuth token that authorizes
	// the connection. Format: projects/*/secrets/*/versions/*.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/namespaced/secretmanager/v1beta1.SecretVersion
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	OAuthTokenSecretVersion *string `json:"oauthTokenSecretVersion,omitempty" tf:"oauth_token_secret_version,omitempty"`

	// Reference to a SecretVersion in secretmanager to populate oauthTokenSecretVersion.
	// +kubebuilder:validation:Optional
	OAuthTokenSecretVersionRef *v1.NamespacedReference `json:"oauthTokenSecretVersionRef,omitempty" tf:"-"`

	// Selector for a SecretVersion in secretmanager to populate oauthTokenSecretVersion.
	// +kubebuilder:validation:Optional
	OAuthTokenSecretVersionSelector *v1.NamespacedSelector `json:"oauthTokenSecretVersionSelector,omitempty" tf:"-"`
}

type GithubConfigAuthorizerCredentialObservation struct {

	// Required. A SecretManager resource containing the OAuth token that authorizes
	// the connection. Format: projects/*/secrets/*/versions/*.
	OAuthTokenSecretVersion *string `json:"oauthTokenSecretVersion,omitempty" tf:"oauth_token_secret_version,omitempty"`

	// (Output)
	// Output only. The username associated with this token.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type GithubConfigAuthorizerCredentialParameters struct {

	// Required. A SecretManager resource containing the OAuth token that authorizes
	// the connection. Format: projects/*/secrets/*/versions/*.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/namespaced/secretmanager/v1beta1.SecretVersion
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	OAuthTokenSecretVersion *string `json:"oauthTokenSecretVersion,omitempty" tf:"oauth_token_secret_version,omitempty"`

	// Reference to a SecretVersion in secretmanager to populate oauthTokenSecretVersion.
	// +kubebuilder:validation:Optional
	OAuthTokenSecretVersionRef *v1.NamespacedReference `json:"oauthTokenSecretVersionRef,omitempty" tf:"-"`

	// Selector for a SecretVersion in secretmanager to populate oauthTokenSecretVersion.
	// +kubebuilder:validation:Optional
	OAuthTokenSecretVersionSelector *v1.NamespacedSelector `json:"oauthTokenSecretVersionSelector,omitempty" tf:"-"`
}

type GithubConfigInitParameters struct {

	// Optional. GitHub App installation id.
	AppInstallationID *string `json:"appInstallationId,omitempty" tf:"app_installation_id,omitempty"`

	// Represents an OAuth token of the account that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	AuthorizerCredential *GithubConfigAuthorizerCredentialInitParameters `json:"authorizerCredential,omitempty" tf:"authorizer_credential,omitempty"`

	// Required. Immutable. The GitHub Application that was installed to the GitHub user or
	// organization.
	// Possible values:
	// GIT_HUB_APP_UNSPECIFIED
	// DEVELOPER_CONNECT
	// FIREBASE
	GithubApp *string `json:"githubApp,omitempty" tf:"github_app,omitempty"`
}

type GithubConfigObservation struct {

	// Optional. GitHub App installation id.
	AppInstallationID *string `json:"appInstallationId,omitempty" tf:"app_installation_id,omitempty"`

	// Represents an OAuth token of the account that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	AuthorizerCredential *GithubConfigAuthorizerCredentialObservation `json:"authorizerCredential,omitempty" tf:"authorizer_credential,omitempty"`

	// Required. Immutable. The GitHub Application that was installed to the GitHub user or
	// organization.
	// Possible values:
	// GIT_HUB_APP_UNSPECIFIED
	// DEVELOPER_CONNECT
	// FIREBASE
	GithubApp *string `json:"githubApp,omitempty" tf:"github_app,omitempty"`

	// (Output)
	// Output only. The URI to navigate to in order to manage the installation associated
	// with this GitHubConfig.
	InstallationURI *string `json:"installationUri,omitempty" tf:"installation_uri,omitempty"`
}

type GithubConfigParameters struct {

	// Optional. GitHub App installation id.
	// +kubebuilder:validation:Optional
	AppInstallationID *string `json:"appInstallationId,omitempty" tf:"app_installation_id,omitempty"`

	// Represents an OAuth token of the account that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	AuthorizerCredential *GithubConfigAuthorizerCredentialParameters `json:"authorizerCredential,omitempty" tf:"authorizer_credential,omitempty"`

	// Required. Immutable. The GitHub Application that was installed to the GitHub user or
	// organization.
	// Possible values:
	// GIT_HUB_APP_UNSPECIFIED
	// DEVELOPER_CONNECT
	// FIREBASE
	// +kubebuilder:validation:Optional
	GithubApp *string `json:"githubApp" tf:"github_app,omitempty"`
}

type GithubEnterpriseConfigInitParameters struct {

	// Optional. ID of the GitHub App created from the manifest.
	AppID *string `json:"appId,omitempty" tf:"app_id,omitempty"`

	// Optional. ID of the installation of the GitHub App.
	AppInstallationID *string `json:"appInstallationId,omitempty" tf:"app_installation_id,omitempty"`

	// Required. The URI of the GitHub Enterprise host this connection is for.
	HostURI *string `json:"hostUri,omitempty" tf:"host_uri,omitempty"`

	// Optional. SecretManager resource containing the private key of the GitHub App,
	// formatted as projects/*/secrets/*/versions/*.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/namespaced/secretmanager/v1beta1.SecretVersion
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	PrivateKeySecretVersion *string `json:"privateKeySecretVersion,omitempty" tf:"private_key_secret_version,omitempty"`

	// Reference to a SecretVersion in secretmanager to populate privateKeySecretVersion.
	// +kubebuilder:validation:Optional
	PrivateKeySecretVersionRef *v1.NamespacedReference `json:"privateKeySecretVersionRef,omitempty" tf:"-"`

	// Selector for a SecretVersion in secretmanager to populate privateKeySecretVersion.
	// +kubebuilder:validation:Optional
	PrivateKeySecretVersionSelector *v1.NamespacedSelector `json:"privateKeySecretVersionSelector,omitempty" tf:"-"`

	// Optional. SSL certificate to use for requests to GitHub Enterprise.
	SSLCACertificate *string `json:"sslCaCertificate,omitempty" tf:"ssl_ca_certificate,omitempty"`

	// ServiceDirectoryConfig represents Service Directory configuration for a
	// connection.
	// Structure is documented below.
	ServiceDirectoryConfig *GithubEnterpriseConfigServiceDirectoryConfigInitParameters `json:"serviceDirectoryConfig,omitempty" tf:"service_directory_config,omitempty"`

	// Optional. SecretManager resource containing the webhook secret of the GitHub App,
	// formatted as projects/*/secrets/*/versions/*.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/namespaced/secretmanager/v1beta1.SecretVersion
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	WebhookSecretSecretVersion *string `json:"webhookSecretSecretVersion,omitempty" tf:"webhook_secret_secret_version,omitempty"`

	// Reference to a SecretVersion in secretmanager to populate webhookSecretSecretVersion.
	// +kubebuilder:validation:Optional
	WebhookSecretSecretVersionRef *v1.NamespacedReference `json:"webhookSecretSecretVersionRef,omitempty" tf:"-"`

	// Selector for a SecretVersion in secretmanager to populate webhookSecretSecretVersion.
	// +kubebuilder:validation:Optional
	WebhookSecretSecretVersionSelector *v1.NamespacedSelector `json:"webhookSecretSecretVersionSelector,omitempty" tf:"-"`
}

type GithubEnterpriseConfigObservation struct {

	// Optional. ID of the GitHub App created from the manifest.
	AppID *string `json:"appId,omitempty" tf:"app_id,omitempty"`

	// Optional. ID of the installation of the GitHub App.
	AppInstallationID *string `json:"appInstallationId,omitempty" tf:"app_installation_id,omitempty"`

	// (Output)
	// Output only. The URL-friendly name of the GitHub App.
	AppSlug *string `json:"appSlug,omitempty" tf:"app_slug,omitempty"`

	// Required. The URI of the GitHub Enterprise host this connection is for.
	HostURI *string `json:"hostUri,omitempty" tf:"host_uri,omitempty"`

	// (Output)
	// Output only. The URI to navigate to in order to manage the installation associated
	// with this GitHubEnterpriseConfig.
	InstallationURI *string `json:"installationUri,omitempty" tf:"installation_uri,omitempty"`

	// Optional. SecretManager resource containing the private key of the GitHub App,
	// formatted as projects/*/secrets/*/versions/*.
	PrivateKeySecretVersion *string `json:"privateKeySecretVersion,omitempty" tf:"private_key_secret_version,omitempty"`

	// Optional. SSL certificate to use for requests to GitHub Enterprise.
	SSLCACertificate *string `json:"sslCaCertificate,omitempty" tf:"ssl_ca_certificate,omitempty"`

	// (Output)
	// Output only. GitHub Enterprise version installed at the host_uri.
	ServerVersion *string `json:"serverVersion,omitempty" tf:"server_version,omitempty"`

	// ServiceDirectoryConfig represents Service Directory configuration for a
	// connection.
	// Structure is documented below.
	ServiceDirectoryConfig *GithubEnterpriseConfigServiceDirectoryConfigObservation `json:"serviceDirectoryConfig,omitempty" tf:"service_directory_config,omitempty"`

	// Optional. SecretManager resource containing the webhook secret of the GitHub App,
	// formatted as projects/*/secrets/*/versions/*.
	WebhookSecretSecretVersion *string `json:"webhookSecretSecretVersion,omitempty" tf:"webhook_secret_secret_version,omitempty"`
}

type GithubEnterpriseConfigParameters struct {

	// Optional. ID of the GitHub App created from the manifest.
	// +kubebuilder:validation:Optional
	AppID *string `json:"appId,omitempty" tf:"app_id,omitempty"`

	// Optional. ID of the installation of the GitHub App.
	// +kubebuilder:validation:Optional
	AppInstallationID *string `json:"appInstallationId,omitempty" tf:"app_installation_id,omitempty"`

	// Required. The URI of the GitHub Enterprise host this connection is for.
	// +kubebuilder:validation:Optional
	HostURI *string `json:"hostUri" tf:"host_uri,omitempty"`

	// Optional. SecretManager resource containing the private key of the GitHub App,
	// formatted as projects/*/secrets/*/versions/*.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/namespaced/secretmanager/v1beta1.SecretVersion
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	PrivateKeySecretVersion *string `json:"privateKeySecretVersion,omitempty" tf:"private_key_secret_version,omitempty"`

	// Reference to a SecretVersion in secretmanager to populate privateKeySecretVersion.
	// +kubebuilder:validation:Optional
	PrivateKeySecretVersionRef *v1.NamespacedReference `json:"privateKeySecretVersionRef,omitempty" tf:"-"`

	// Selector for a SecretVersion in secretmanager to populate privateKeySecretVersion.
	// +kubebuilder:validation:Optional
	PrivateKeySecretVersionSelector *v1.NamespacedSelector `json:"privateKeySecretVersionSelector,omitempty" tf:"-"`

	// Optional. SSL certificate to use for requests to GitHub Enterprise.
	// +kubebuilder:validation:Optional
	SSLCACertificate *string `json:"sslCaCertificate,omitempty" tf:"ssl_ca_certificate,omitempty"`

	// ServiceDirectoryConfig represents Service Directory configuration for a
	// connection.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	ServiceDirectoryConfig *GithubEnterpriseConfigServiceDirectoryConfigParameters `json:"serviceDirectoryConfig,omitempty" tf:"service_directory_config,omitempty"`

	// Optional. SecretManager resource containing the webhook secret of the GitHub App,
	// formatted as projects/*/secrets/*/versions/*.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/namespaced/secretmanager/v1beta1.SecretVersion
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	WebhookSecretSecretVersion *string `json:"webhookSecretSecretVersion,omitempty" tf:"webhook_secret_secret_version,omitempty"`

	// Reference to a SecretVersion in secretmanager to populate webhookSecretSecretVersion.
	// +kubebuilder:validation:Optional
	WebhookSecretSecretVersionRef *v1.NamespacedReference `json:"webhookSecretSecretVersionRef,omitempty" tf:"-"`

	// Selector for a SecretVersion in secretmanager to populate webhookSecretSecretVersion.
	// +kubebuilder:validation:Optional
	WebhookSecretSecretVersionSelector *v1.NamespacedSelector `json:"webhookSecretSecretVersionSelector,omitempty" tf:"-"`
}

type GithubEnterpriseConfigServiceDirectoryConfigInitParameters struct {

	// Required. The Service Directory service name.
	// Format:
	// projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`
}

type GithubEnterpriseConfigServiceDirectoryConfigObservation struct {

	// Required. The Service Directory service name.
	// Format:
	// projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`
}

type GithubEnterpriseConfigServiceDirectoryConfigParameters struct {

	// Required. The Service Directory service name.
	// Format:
	// projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
	// +kubebuilder:validation:Optional
	Service *string `json:"service" tf:"service,omitempty"`
}

type GitlabConfigAuthorizerCredentialInitParameters struct {

	// Required. A SecretManager resource containing the user token that authorizes
	// the Developer Connect connection. Format:
	// projects/*/secrets/*/versions/*.
	UserTokenSecretVersion *string `json:"userTokenSecretVersion,omitempty" tf:"user_token_secret_version,omitempty"`
}

type GitlabConfigAuthorizerCredentialObservation struct {

	// Required. A SecretManager resource containing the user token that authorizes
	// the Developer Connect connection. Format:
	// projects/*/secrets/*/versions/*.
	UserTokenSecretVersion *string `json:"userTokenSecretVersion,omitempty" tf:"user_token_secret_version,omitempty"`

	// (Output)
	// Output only. The username associated with this token.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type GitlabConfigAuthorizerCredentialParameters struct {

	// Required. A SecretManager resource containing the user token that authorizes
	// the Developer Connect connection. Format:
	// projects/*/secrets/*/versions/*.
	// +kubebuilder:validation:Optional
	UserTokenSecretVersion *string `json:"userTokenSecretVersion" tf:"user_token_secret_version,omitempty"`
}

type GitlabConfigInitParameters struct {

	// Represents a personal access token that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	AuthorizerCredential *GitlabConfigAuthorizerCredentialInitParameters `json:"authorizerCredential,omitempty" tf:"authorizer_credential,omitempty"`

	// Represents a personal access token that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	ReadAuthorizerCredential *GitlabConfigReadAuthorizerCredentialInitParameters `json:"readAuthorizerCredential,omitempty" tf:"read_authorizer_credential,omitempty"`

	// Required. Immutable. SecretManager resource containing the webhook secret of a GitLab project,
	// formatted as projects/*/secrets/*/versions/*. This is used to validate
	// webhooks.
	WebhookSecretSecretVersion *string `json:"webhookSecretSecretVersion,omitempty" tf:"webhook_secret_secret_version,omitempty"`
}

type GitlabConfigObservation struct {

	// Represents a personal access token that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	AuthorizerCredential *GitlabConfigAuthorizerCredentialObservation `json:"authorizerCredential,omitempty" tf:"authorizer_credential,omitempty"`

	// Represents a personal access token that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	ReadAuthorizerCredential *GitlabConfigReadAuthorizerCredentialObservation `json:"readAuthorizerCredential,omitempty" tf:"read_authorizer_credential,omitempty"`

	// Required. Immutable. SecretManager resource containing the webhook secret of a GitLab project,
	// formatted as projects/*/secrets/*/versions/*. This is used to validate
	// webhooks.
	WebhookSecretSecretVersion *string `json:"webhookSecretSecretVersion,omitempty" tf:"webhook_secret_secret_version,omitempty"`
}

type GitlabConfigParameters struct {

	// Represents a personal access token that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	AuthorizerCredential *GitlabConfigAuthorizerCredentialParameters `json:"authorizerCredential" tf:"authorizer_credential,omitempty"`

	// Represents a personal access token that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	ReadAuthorizerCredential *GitlabConfigReadAuthorizerCredentialParameters `json:"readAuthorizerCredential" tf:"read_authorizer_credential,omitempty"`

	// Required. Immutable. SecretManager resource containing the webhook secret of a GitLab project,
	// formatted as projects/*/secrets/*/versions/*. This is used to validate
	// webhooks.
	// +kubebuilder:validation:Optional
	WebhookSecretSecretVersion *string `json:"webhookSecretSecretVersion" tf:"webhook_secret_secret_version,omitempty"`
}

type GitlabConfigReadAuthorizerCredentialInitParameters struct {

	// Required. A SecretManager resource containing the user token that authorizes
	// the Developer Connect connection. Format:
	// projects/*/secrets/*/versions/*.
	UserTokenSecretVersion *string `json:"userTokenSecretVersion,omitempty" tf:"user_token_secret_version,omitempty"`
}

type GitlabConfigReadAuthorizerCredentialObservation struct {

	// Required. A SecretManager resource containing the user token that authorizes
	// the Developer Connect connection. Format:
	// projects/*/secrets/*/versions/*.
	UserTokenSecretVersion *string `json:"userTokenSecretVersion,omitempty" tf:"user_token_secret_version,omitempty"`

	// (Output)
	// Output only. The username associated with this token.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type GitlabConfigReadAuthorizerCredentialParameters struct {

	// Required. A SecretManager resource containing the user token that authorizes
	// the Developer Connect connection. Format:
	// projects/*/secrets/*/versions/*.
	// +kubebuilder:validation:Optional
	UserTokenSecretVersion *string `json:"userTokenSecretVersion" tf:"user_token_secret_version,omitempty"`
}

type GitlabEnterpriseConfigAuthorizerCredentialInitParameters struct {

	// Required. A SecretManager resource containing the user token that authorizes
	// the Developer Connect connection. Format:
	// projects/*/secrets/*/versions/*.
	UserTokenSecretVersion *string `json:"userTokenSecretVersion,omitempty" tf:"user_token_secret_version,omitempty"`
}

type GitlabEnterpriseConfigAuthorizerCredentialObservation struct {

	// Required. A SecretManager resource containing the user token that authorizes
	// the Developer Connect connection. Format:
	// projects/*/secrets/*/versions/*.
	UserTokenSecretVersion *string `json:"userTokenSecretVersion,omitempty" tf:"user_token_secret_version,omitempty"`

	// (Output)
	// Output only. The username associated with this token.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type GitlabEnterpriseConfigAuthorizerCredentialParameters struct {

	// Required. A SecretManager resource containing the user token that authorizes
	// the Developer Connect connection. Format:
	// projects/*/secrets/*/versions/*.
	// +kubebuilder:validation:Optional
	UserTokenSecretVersion *string `json:"userTokenSecretVersion" tf:"user_token_secret_version,omitempty"`
}

type GitlabEnterpriseConfigInitParameters struct {

	// Represents a personal access token that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	AuthorizerCredential *GitlabEnterpriseConfigAuthorizerCredentialInitParameters `json:"authorizerCredential,omitempty" tf:"authorizer_credential,omitempty"`

	// Required. The URI of the GitLab Enterprise host this connection is for.
	HostURI *string `json:"hostUri,omitempty" tf:"host_uri,omitempty"`

	// Represents a personal access token that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	ReadAuthorizerCredential *GitlabEnterpriseConfigReadAuthorizerCredentialInitParameters `json:"readAuthorizerCredential,omitempty" tf:"read_authorizer_credential,omitempty"`

	// Optional. SSL Certificate Authority certificate to use for requests to GitLab
	// Enterprise instance.
	SSLCACertificate *string `json:"sslCaCertificate,omitempty" tf:"ssl_ca_certificate,omitempty"`

	// ServiceDirectoryConfig represents Service Directory configuration for a
	// connection.
	// Structure is documented below.
	ServiceDirectoryConfig *GitlabEnterpriseConfigServiceDirectoryConfigInitParameters `json:"serviceDirectoryConfig,omitempty" tf:"service_directory_config,omitempty"`

	// Required. Immutable. SecretManager resource containing the webhook secret of a GitLab project,
	// formatted as projects/*/secrets/*/versions/*. This is used to validate
	// webhooks.
	WebhookSecretSecretVersion *string `json:"webhookSecretSecretVersion,omitempty" tf:"webhook_secret_secret_version,omitempty"`
}

type GitlabEnterpriseConfigObservation struct {

	// Represents a personal access token that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	AuthorizerCredential *GitlabEnterpriseConfigAuthorizerCredentialObservation `json:"authorizerCredential,omitempty" tf:"authorizer_credential,omitempty"`

	// Required. The URI of the GitLab Enterprise host this connection is for.
	HostURI *string `json:"hostUri,omitempty" tf:"host_uri,omitempty"`

	// Represents a personal access token that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	ReadAuthorizerCredential *GitlabEnterpriseConfigReadAuthorizerCredentialObservation `json:"readAuthorizerCredential,omitempty" tf:"read_authorizer_credential,omitempty"`

	// Optional. SSL Certificate Authority certificate to use for requests to GitLab
	// Enterprise instance.
	SSLCACertificate *string `json:"sslCaCertificate,omitempty" tf:"ssl_ca_certificate,omitempty"`

	// (Output)
	// Output only. Version of the GitLab Enterprise server running on the host_uri.
	ServerVersion *string `json:"serverVersion,omitempty" tf:"server_version,omitempty"`

	// ServiceDirectoryConfig represents Service Directory configuration for a
	// connection.
	// Structure is documented below.
	ServiceDirectoryConfig *GitlabEnterpriseConfigServiceDirectoryConfigObservation `json:"serviceDirectoryConfig,omitempty" tf:"service_directory_config,omitempty"`

	// Required. Immutable. SecretManager resource containing the webhook secret of a GitLab project,
	// formatted as projects/*/secrets/*/versions/*. This is used to validate
	// webhooks.
	WebhookSecretSecretVersion *string `json:"webhookSecretSecretVersion,omitempty" tf:"webhook_secret_secret_version,omitempty"`
}

type GitlabEnterpriseConfigParameters struct {

	// Represents a personal access token that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	AuthorizerCredential *GitlabEnterpriseConfigAuthorizerCredentialParameters `json:"authorizerCredential" tf:"authorizer_credential,omitempty"`

	// Required. The URI of the GitLab Enterprise host this connection is for.
	// +kubebuilder:validation:Optional
	HostURI *string `json:"hostUri" tf:"host_uri,omitempty"`

	// Represents a personal access token that authorized the Connection,
	// and associated metadata.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	ReadAuthorizerCredential *GitlabEnterpriseConfigReadAuthorizerCredentialParameters `json:"readAuthorizerCredential" tf:"read_authorizer_credential,omitempty"`

	// Optional. SSL Certificate Authority certificate to use for requests to GitLab
	// Enterprise instance.
	// +kubebuilder:validation:Optional
	SSLCACertificate *string `json:"sslCaCertificate,omitempty" tf:"ssl_ca_certificate,omitempty"`

	// ServiceDirectoryConfig represents Service Directory configuration for a
	// connection.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	ServiceDirectoryConfig *GitlabEnterpriseConfigServiceDirectoryConfigParameters `json:"serviceDirectoryConfig,omitempty" tf:"service_directory_config,omitempty"`

	// Required. Immutable. SecretManager resource containing the webhook secret of a GitLab project,
	// formatted as projects/*/secrets/*/versions/*. This is used to validate
	// webhooks.
	// +kubebuilder:validation:Optional
	WebhookSecretSecretVersion *string `json:"webhookSecretSecretVersion" tf:"webhook_secret_secret_version,omitempty"`
}

type GitlabEnterpriseConfigReadAuthorizerCredentialInitParameters struct {

	// Required. A SecretManager resource containing the user token that authorizes
	// the Developer Connect connection. Format:
	// projects/*/secrets/*/versions/*.
	UserTokenSecretVersion *string `json:"userTokenSecretVersion,omitempty" tf:"user_token_secret_version,omitempty"`
}

type GitlabEnterpriseConfigReadAuthorizerCredentialObservation struct {

	// Required. A SecretManager resource containing the user token that authorizes
	// the Developer Connect connection. Format:
	// projects/*/secrets/*/versions/*.
	UserTokenSecretVersion *string `json:"userTokenSecretVersion,omitempty" tf:"user_token_secret_version,omitempty"`

	// (Output)
	// Output only. The username associated with this token.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type GitlabEnterpriseConfigReadAuthorizerCredentialParameters struct {

	// Required. A SecretManager resource containing the user token that authorizes
	// the Developer Connect connection. Format:
	// projects/*/secrets/*/versions/*.
	// +kubebuilder:validation:Optional
	UserTokenSecretVersion *string `json:"userTokenSecretVersion" tf:"user_token_secret_version,omitempty"`
}

type GitlabEnterpriseConfigServiceDirectoryConfigInitParameters struct {

	// Required. The Service Directory service name.
	// Format:
	// projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`
}

type GitlabEnterpriseConfigServiceDirectoryConfigObservation struct {

	// Required. The Service Directory service name.
	// Format:
	// projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`
}

type GitlabEnterpriseConfigServiceDirectoryConfigParameters struct {

	// Required. The Service Directory service name.
	// Format:
	// projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
	// +kubebuilder:validation:Optional
	Service *string `json:"service" tf:"service,omitempty"`
}

type InstallationStateInitParameters struct {
}

type InstallationStateObservation struct {

	// Output only. Link to follow for next action. Empty string if the installation is already
	// complete.
	ActionURI *string `json:"actionUri,omitempty" tf:"action_uri,omitempty"`

	// Output only. Message of what the user should do next to continue the installation.
	// Empty string if the installation is already complete.
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// (Output)
	// Output only. Current step of the installation process.
	// Possible values:
	// STAGE_UNSPECIFIED
	// PENDING_CREATE_APP
	// PENDING_USER_OAUTH
	// PENDING_INSTALL_APP
	// COMPLETE
	Stage *string `json:"stage,omitempty" tf:"stage,omitempty"`
}

type InstallationStateParameters struct {
}

type ReadAuthorizerCredentialInitParameters struct {

	// Required. A SecretManager resource containing the user token that authorizes
	// the Developer Connect connection. Format:
	// projects/*/secrets/*/versions/*.
	UserTokenSecretVersion *string `json:"userTokenSecretVersion,omitempty" tf:"user_token_secret_version,omitempty"`
}

type ReadAuthorizerCredentialObservation struct {

	// Required. A SecretManager resource containing the user token that authorizes
	// the Developer Connect connection. Format:
	// projects/*/secrets/*/versions/*.
	UserTokenSecretVersion *string `json:"userTokenSecretVersion,omitempty" tf:"user_token_secret_version,omitempty"`

	// (Output)
	// Output only. The username associated with this token.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type ReadAuthorizerCredentialParameters struct {

	// Required. A SecretManager resource containing the user token that authorizes
	// the Developer Connect connection. Format:
	// projects/*/secrets/*/versions/*.
	// +kubebuilder:validation:Optional
	UserTokenSecretVersion *string `json:"userTokenSecretVersion" tf:"user_token_secret_version,omitempty"`
}

type ServiceDirectoryConfigInitParameters struct {

	// Required. The Service Directory service name.
	// Format:
	// projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`
}

type ServiceDirectoryConfigObservation struct {

	// Required. The Service Directory service name.
	// Format:
	// projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`
}

type ServiceDirectoryConfigParameters struct {

	// Required. The Service Directory service name.
	// Format:
	// projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
	// +kubebuilder:validation:Optional
	Service *string `json:"service" tf:"service,omitempty"`
}

// ConnectConnectionSpec defines the desired state of ConnectConnection
type ConnectConnectionSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            ConnectConnectionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ConnectConnectionInitParameters `json:"initProvider,omitempty"`
}

// ConnectConnectionStatus defines the observed state of ConnectConnection.
type ConnectConnectionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConnectConnectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ConnectConnection is the Schema for the ConnectConnections API. A connection for GitHub, GitHub Enterprise, GitLab, and GitLab Enterprise.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,gcp}
type ConnectConnection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConnectConnectionSpec   `json:"spec"`
	Status            ConnectConnectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConnectConnectionList contains a list of ConnectConnections
type ConnectConnectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConnectConnection `json:"items"`
}

// Repository type metadata.
var (
	ConnectConnection_Kind             = "ConnectConnection"
	ConnectConnection_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ConnectConnection_Kind}.String()
	ConnectConnection_KindAPIVersion   = ConnectConnection_Kind + "." + CRDGroupVersion.String()
	ConnectConnection_GroupVersionKind = CRDGroupVersion.WithKind(ConnectConnection_Kind)
)

func init() {
	SchemeBuilder.Register(&ConnectConnection{}, &ConnectConnectionList{})
}
