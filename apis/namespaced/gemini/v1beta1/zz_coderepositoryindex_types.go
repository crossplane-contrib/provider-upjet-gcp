// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type CodeRepositoryIndexInitParameters struct {

	// If set to true, will allow deletion of the CodeRepositoryIndex even if there are existing RepositoryGroups for the resource. These RepositoryGroups will also be deleted.
	ForceDestroy *bool `json:"forceDestroy,omitempty" tf:"force_destroy,omitempty"`

	// Optional. Immutable. Customer-managed encryption key name, in the format
	// projects/*/locations/*/keyRings/*/cryptoKeys/*.
	KMSKey *string `json:"kmsKey,omitempty" tf:"kms_key,omitempty"`

	// Optional. Labels as key value pairs.
	// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field effective_labels for all of the labels present on the resource.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`
}

type CodeRepositoryIndexObservation struct {

	// Output only. Create time stamp.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// +mapType=granular
	EffectiveLabels map[string]*string `json:"effectiveLabels,omitempty" tf:"effective_labels,omitempty"`

	// If set to true, will allow deletion of the CodeRepositoryIndex even if there are existing RepositoryGroups for the resource. These RepositoryGroups will also be deleted.
	ForceDestroy *bool `json:"forceDestroy,omitempty" tf:"force_destroy,omitempty"`

	// an identifier for the resource with format projects/{{project}}/locations/{{location}}/codeRepositoryIndexes/{{code_repository_index_id}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Optional. Immutable. Customer-managed encryption key name, in the format
	// projects/*/locations/*/keyRings/*/cryptoKeys/*.
	KMSKey *string `json:"kmsKey,omitempty" tf:"kms_key,omitempty"`

	// Optional. Labels as key value pairs.
	// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field effective_labels for all of the labels present on the resource.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The location of the Code Repository Index, for example us-central1.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// Immutable. Identifier. Name of Code Repository Index.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Output only. Code Repository Index instance State.
	// Possible values are: STATE_UNSPECIFIED, CREATING, ACTIVE, DELETING, SUSPENDED.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	// +mapType=granular
	TerraformLabels map[string]*string `json:"terraformLabels,omitempty" tf:"terraform_labels,omitempty"`

	// Output only. Update time stamp.
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type CodeRepositoryIndexParameters struct {

	// If set to true, will allow deletion of the CodeRepositoryIndex even if there are existing RepositoryGroups for the resource. These RepositoryGroups will also be deleted.
	// +kubebuilder:validation:Optional
	ForceDestroy *bool `json:"forceDestroy,omitempty" tf:"force_destroy,omitempty"`

	// Optional. Immutable. Customer-managed encryption key name, in the format
	// projects/*/locations/*/keyRings/*/cryptoKeys/*.
	// +kubebuilder:validation:Optional
	KMSKey *string `json:"kmsKey,omitempty" tf:"kms_key,omitempty"`

	// Optional. Labels as key value pairs.
	// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field effective_labels for all of the labels present on the resource.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The location of the Code Repository Index, for example us-central1.
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`
}

// CodeRepositoryIndexSpec defines the desired state of CodeRepositoryIndex
type CodeRepositoryIndexSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            CodeRepositoryIndexParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CodeRepositoryIndexInitParameters `json:"initProvider,omitempty"`
}

// CodeRepositoryIndexStatus defines the observed state of CodeRepositoryIndex.
type CodeRepositoryIndexStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CodeRepositoryIndexObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// CodeRepositoryIndex is the Schema for the CodeRepositoryIndexs API. The resource for managing Code Repository Index for Gemini Code Assist.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,gcp}
type CodeRepositoryIndex struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CodeRepositoryIndexSpec   `json:"spec"`
	Status            CodeRepositoryIndexStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CodeRepositoryIndexList contains a list of CodeRepositoryIndexs
type CodeRepositoryIndexList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CodeRepositoryIndex `json:"items"`
}

// Repository type metadata.
var (
	CodeRepositoryIndex_Kind             = "CodeRepositoryIndex"
	CodeRepositoryIndex_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CodeRepositoryIndex_Kind}.String()
	CodeRepositoryIndex_KindAPIVersion   = CodeRepositoryIndex_Kind + "." + CRDGroupVersion.String()
	CodeRepositoryIndex_GroupVersionKind = CRDGroupVersion.WithKind(CodeRepositoryIndex_Kind)
)

func init() {
	SchemeBuilder.Register(&CodeRepositoryIndex{}, &CodeRepositoryIndexList{})
}
