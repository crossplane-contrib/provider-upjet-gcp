// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type ReleaseChannelSettingInitParameters struct {

	// Labels as key value pairs.
	// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field effective_labels for all of the labels present on the resource.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Release channel to be used.
	// Possible values:
	// STABLE
	// EXPERIMENTAL
	ReleaseChannel *string `json:"releaseChannel,omitempty" tf:"release_channel,omitempty"`
}

type ReleaseChannelSettingObservation struct {

	// Create time stamp.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// +mapType=granular
	EffectiveLabels map[string]*string `json:"effectiveLabels,omitempty" tf:"effective_labels,omitempty"`

	// an identifier for the resource with format projects/{{project}}/locations/{{location}}/releaseChannelSettings/{{release_channel_setting_id}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Labels as key value pairs.
	// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field effective_labels for all of the labels present on the resource.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Resource ID segment making up resource name. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// Identifier. Name of the resource.
	// Format:projects/{project}/locations/{location}/releaseChannelSettings/{releaseChannelSetting}
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Release channel to be used.
	// Possible values:
	// STABLE
	// EXPERIMENTAL
	ReleaseChannel *string `json:"releaseChannel,omitempty" tf:"release_channel,omitempty"`

	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	// +mapType=granular
	TerraformLabels map[string]*string `json:"terraformLabels,omitempty" tf:"terraform_labels,omitempty"`

	// Update time stamp.
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type ReleaseChannelSettingParameters struct {

	// Labels as key value pairs.
	// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field effective_labels for all of the labels present on the resource.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Resource ID segment making up resource name. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Release channel to be used.
	// Possible values:
	// STABLE
	// EXPERIMENTAL
	// +kubebuilder:validation:Optional
	ReleaseChannel *string `json:"releaseChannel,omitempty" tf:"release_channel,omitempty"`
}

// ReleaseChannelSettingSpec defines the desired state of ReleaseChannelSetting
type ReleaseChannelSettingSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            ReleaseChannelSettingParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ReleaseChannelSettingInitParameters `json:"initProvider,omitempty"`
}

// ReleaseChannelSettingStatus defines the observed state of ReleaseChannelSetting.
type ReleaseChannelSettingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ReleaseChannelSettingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ReleaseChannelSetting is the Schema for the ReleaseChannelSettings API. The resource for managing ReleaseChannel settings for Admin Control.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,gcp}
type ReleaseChannelSetting struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ReleaseChannelSettingSpec   `json:"spec"`
	Status            ReleaseChannelSettingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ReleaseChannelSettingList contains a list of ReleaseChannelSettings
type ReleaseChannelSettingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ReleaseChannelSetting `json:"items"`
}

// Repository type metadata.
var (
	ReleaseChannelSetting_Kind             = "ReleaseChannelSetting"
	ReleaseChannelSetting_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ReleaseChannelSetting_Kind}.String()
	ReleaseChannelSetting_KindAPIVersion   = ReleaseChannelSetting_Kind + "." + CRDGroupVersion.String()
	ReleaseChannelSetting_GroupVersionKind = CRDGroupVersion.WithKind(ReleaseChannelSetting_Kind)
)

func init() {
	SchemeBuilder.Register(&ReleaseChannelSetting{}, &ReleaseChannelSettingList{})
}
