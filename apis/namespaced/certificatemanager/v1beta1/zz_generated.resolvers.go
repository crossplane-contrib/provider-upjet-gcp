// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	xpresource "github.com/crossplane/crossplane-runtime/v2/pkg/resource"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"
	apisresolver "github.com/upbound/provider-gcp/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *Certificate) ResolveReferences( // ResolveReferences of this Certificate.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var mrsp reference.MultiNamespacedResolutionResponse
	var err error

	if mg.Spec.ForProvider.Managed != nil {
		{
			m, l, err = apisresolver.GetManagedResource("certificatemanager.gcp.m.upbound.io", "v1beta1", "DNSAuthorization", "DNSAuthorizationList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.Managed.DNSAuthorizations),
				Extract:       resource.ExtractResourceID(),
				Namespace:     mg.GetNamespace(),
				References:    mg.Spec.ForProvider.Managed.DNSAuthorizationsRefs,
				Selector:      mg.Spec.ForProvider.Managed.DNSAuthorizationsSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Managed.DNSAuthorizations")
		}
		mg.Spec.ForProvider.Managed.DNSAuthorizations = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.Managed.DNSAuthorizationsRefs = mrsp.ResolvedReferences

	}
	if mg.Spec.ForProvider.Managed != nil {
		{
			m, l, err = apisresolver.GetManagedResource("certificatemanager.gcp.m.upbound.io", "v1beta1", "DNSAuthorization", "DNSAuthorizationList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.Managed.Domains),
				Extract:       resource.ExtractParamPath("domain", false),
				Namespace:     mg.GetNamespace(),
				References:    mg.Spec.ForProvider.Managed.DomainsRefs,
				Selector:      mg.Spec.ForProvider.Managed.DomainsSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Managed.Domains")
		}
		mg.Spec.ForProvider.Managed.Domains = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.Managed.DomainsRefs = mrsp.ResolvedReferences

	}
	if mg.Spec.InitProvider.Managed != nil {
		{
			m, l, err = apisresolver.GetManagedResource("certificatemanager.gcp.m.upbound.io", "v1beta1", "DNSAuthorization", "DNSAuthorizationList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.Managed.DNSAuthorizations),
				Extract:       resource.ExtractResourceID(),
				Namespace:     mg.GetNamespace(),
				References:    mg.Spec.InitProvider.Managed.DNSAuthorizationsRefs,
				Selector:      mg.Spec.InitProvider.Managed.DNSAuthorizationsSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Managed.DNSAuthorizations")
		}
		mg.Spec.InitProvider.Managed.DNSAuthorizations = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.InitProvider.Managed.DNSAuthorizationsRefs = mrsp.ResolvedReferences

	}
	if mg.Spec.InitProvider.Managed != nil {
		{
			m, l, err = apisresolver.GetManagedResource("certificatemanager.gcp.m.upbound.io", "v1beta1", "DNSAuthorization", "DNSAuthorizationList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.Managed.Domains),
				Extract:       resource.ExtractParamPath("domain", false),
				Namespace:     mg.GetNamespace(),
				References:    mg.Spec.InitProvider.Managed.DomainsRefs,
				Selector:      mg.Spec.InitProvider.Managed.DomainsSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Managed.Domains")
		}
		mg.Spec.InitProvider.Managed.Domains = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.InitProvider.Managed.DomainsRefs = mrsp.ResolvedReferences

	}

	return nil
}

// ResolveReferences of this CertificateMapEntry.
func (mg *CertificateMapEntry) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var mrsp reference.MultiNamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("certificatemanager.gcp.m.upbound.io", "v1beta1", "Certificate", "CertificateList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.Certificates),
			Extract:       resource.ExtractResourceID(),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.ForProvider.CertificatesRefs,
			Selector:      mg.Spec.ForProvider.CertificatesSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Certificates")
	}
	mg.Spec.ForProvider.Certificates = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.CertificatesRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("certificatemanager.gcp.m.upbound.io", "v1beta1", "CertificateMap", "CertificateMapList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Map),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.MapRef,
			Selector:     mg.Spec.ForProvider.MapSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Map")
	}
	mg.Spec.ForProvider.Map = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.MapRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("certificatemanager.gcp.m.upbound.io", "v1beta1", "Certificate", "CertificateList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.Certificates),
			Extract:       resource.ExtractResourceID(),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.InitProvider.CertificatesRefs,
			Selector:      mg.Spec.InitProvider.CertificatesSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Certificates")
	}
	mg.Spec.InitProvider.Certificates = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.CertificatesRefs = mrsp.ResolvedReferences

	return nil
}
