// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type EnvgroupAttachmentInitParameters struct {

	// The Apigee environment group associated with the Apigee environment,
	// in the format organizations/{{org_name}}/envgroups/{{envgroup_name}}.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/namespaced/apigee/v1beta1.Envgroup
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	EnvgroupID *string `json:"envgroupId,omitempty" tf:"envgroup_id,omitempty"`

	// Reference to a Envgroup in apigee to populate envgroupId.
	// +kubebuilder:validation:Optional
	EnvgroupIDRef *v1.NamespacedReference `json:"envgroupIdRef,omitempty" tf:"-"`

	// Selector for a Envgroup in apigee to populate envgroupId.
	// +kubebuilder:validation:Optional
	EnvgroupIDSelector *v1.NamespacedSelector `json:"envgroupIdSelector,omitempty" tf:"-"`

	// The resource ID of the environment.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/namespaced/apigee/v1beta1.Environment
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// Reference to a Environment in apigee to populate environment.
	// +kubebuilder:validation:Optional
	EnvironmentRef *v1.NamespacedReference `json:"environmentRef,omitempty" tf:"-"`

	// Selector for a Environment in apigee to populate environment.
	// +kubebuilder:validation:Optional
	EnvironmentSelector *v1.NamespacedSelector `json:"environmentSelector,omitempty" tf:"-"`
}

type EnvgroupAttachmentObservation struct {

	// The Apigee environment group associated with the Apigee environment,
	// in the format organizations/{{org_name}}/envgroups/{{envgroup_name}}.
	EnvgroupID *string `json:"envgroupId,omitempty" tf:"envgroup_id,omitempty"`

	// The resource ID of the environment.
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// an identifier for the resource with format {{envgroup_id}}/attachments/{{name}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the newly created  attachment (output parameter).
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type EnvgroupAttachmentParameters struct {

	// The Apigee environment group associated with the Apigee environment,
	// in the format organizations/{{org_name}}/envgroups/{{envgroup_name}}.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/namespaced/apigee/v1beta1.Envgroup
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	EnvgroupID *string `json:"envgroupId,omitempty" tf:"envgroup_id,omitempty"`

	// Reference to a Envgroup in apigee to populate envgroupId.
	// +kubebuilder:validation:Optional
	EnvgroupIDRef *v1.NamespacedReference `json:"envgroupIdRef,omitempty" tf:"-"`

	// Selector for a Envgroup in apigee to populate envgroupId.
	// +kubebuilder:validation:Optional
	EnvgroupIDSelector *v1.NamespacedSelector `json:"envgroupIdSelector,omitempty" tf:"-"`

	// The resource ID of the environment.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/namespaced/apigee/v1beta1.Environment
	// +kubebuilder:validation:Optional
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// Reference to a Environment in apigee to populate environment.
	// +kubebuilder:validation:Optional
	EnvironmentRef *v1.NamespacedReference `json:"environmentRef,omitempty" tf:"-"`

	// Selector for a Environment in apigee to populate environment.
	// +kubebuilder:validation:Optional
	EnvironmentSelector *v1.NamespacedSelector `json:"environmentSelector,omitempty" tf:"-"`
}

// EnvgroupAttachmentSpec defines the desired state of EnvgroupAttachment
type EnvgroupAttachmentSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            EnvgroupAttachmentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EnvgroupAttachmentInitParameters `json:"initProvider,omitempty"`
}

// EnvgroupAttachmentStatus defines the observed state of EnvgroupAttachment.
type EnvgroupAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EnvgroupAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// EnvgroupAttachment is the Schema for the EnvgroupAttachments API. An
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,gcp}
type EnvgroupAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EnvgroupAttachmentSpec   `json:"spec"`
	Status            EnvgroupAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EnvgroupAttachmentList contains a list of EnvgroupAttachments
type EnvgroupAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EnvgroupAttachment `json:"items"`
}

// Repository type metadata.
var (
	EnvgroupAttachment_Kind             = "EnvgroupAttachment"
	EnvgroupAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EnvgroupAttachment_Kind}.String()
	EnvgroupAttachment_KindAPIVersion   = EnvgroupAttachment_Kind + "." + CRDGroupVersion.String()
	EnvgroupAttachment_GroupVersionKind = CRDGroupVersion.WithKind(EnvgroupAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&EnvgroupAttachment{}, &EnvgroupAttachmentList{})
}
