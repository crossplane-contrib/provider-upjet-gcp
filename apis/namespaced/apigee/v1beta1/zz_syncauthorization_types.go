// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/apis/common/v2"
)

type SyncAuthorizationInitParameters struct {

	// Array of service accounts to grant access to control plane resources, each specified using the following format: serviceAccount:service-account-name.
	// The service-account-name is formatted like an email address. For example: my-synchronizer-manager-serviceAccount@my_project_id.iam.gserviceaccount.com
	// You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
	// The service accounts must have Apigee Synchronizer Manager role. See also Create service accounts.
	Identities []*string `json:"identities,omitempty" tf:"identities,omitempty"`
}

type SyncAuthorizationObservation struct {

	// Entity tag (ETag) used for optimistic concurrency control as a way to help prevent simultaneous updates from overwriting each other.
	// Used internally during updates.
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	// an identifier for the resource with format organizations/{{name}}/syncAuthorization
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Array of service accounts to grant access to control plane resources, each specified using the following format: serviceAccount:service-account-name.
	// The service-account-name is formatted like an email address. For example: my-synchronizer-manager-serviceAccount@my_project_id.iam.gserviceaccount.com
	// You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
	// The service accounts must have Apigee Synchronizer Manager role. See also Create service accounts.
	Identities []*string `json:"identities,omitempty" tf:"identities,omitempty"`

	// Name of the Apigee organization.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type SyncAuthorizationParameters struct {

	// Array of service accounts to grant access to control plane resources, each specified using the following format: serviceAccount:service-account-name.
	// The service-account-name is formatted like an email address. For example: my-synchronizer-manager-serviceAccount@my_project_id.iam.gserviceaccount.com
	// You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
	// The service accounts must have Apigee Synchronizer Manager role. See also Create service accounts.
	// +kubebuilder:validation:Optional
	Identities []*string `json:"identities,omitempty" tf:"identities,omitempty"`

	// Name of the Apigee organization.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/namespaced/apigee/v1beta1.Organization
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("name",true)
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Reference to a Organization in apigee to populate name.
	// +kubebuilder:validation:Optional
	NameRef *v1.NamespacedReference `json:"nameRef,omitempty" tf:"-"`

	// Selector for a Organization in apigee to populate name.
	// +kubebuilder:validation:Optional
	NameSelector *v1.NamespacedSelector `json:"nameSelector,omitempty" tf:"-"`
}

// SyncAuthorizationSpec defines the desired state of SyncAuthorization
type SyncAuthorizationSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            SyncAuthorizationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SyncAuthorizationInitParameters `json:"initProvider,omitempty"`
}

// SyncAuthorizationStatus defines the observed state of SyncAuthorization.
type SyncAuthorizationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SyncAuthorizationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SyncAuthorization is the Schema for the SyncAuthorizations API. Authorize the Synchronizer to download environment data from the control plane.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,gcp}
type SyncAuthorization struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.identities) || (has(self.initProvider) && has(self.initProvider.identities))",message="spec.forProvider.identities is a required parameter"
	Spec   SyncAuthorizationSpec   `json:"spec"`
	Status SyncAuthorizationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SyncAuthorizationList contains a list of SyncAuthorizations
type SyncAuthorizationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SyncAuthorization `json:"items"`
}

// Repository type metadata.
var (
	SyncAuthorization_Kind             = "SyncAuthorization"
	SyncAuthorization_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SyncAuthorization_Kind}.String()
	SyncAuthorization_KindAPIVersion   = SyncAuthorization_Kind + "." + CRDGroupVersion.String()
	SyncAuthorization_GroupVersionKind = CRDGroupVersion.WithKind(SyncAuthorization_Kind)
)

func init() {
	SchemeBuilder.Register(&SyncAuthorization{}, &SyncAuthorizationList{})
}
