// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	xpresource "github.com/crossplane/crossplane-runtime/v2/pkg/resource"
	resource "github.com/crossplane/upjet/v2/pkg/resource"
	errors "github.com/pkg/errors"
	apisresolver "github.com/upbound/provider-gcp/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *GatewaySecurityPolicy) ResolveReferences( // ResolveReferences of this GatewaySecurityPolicy.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("networksecurity.gcp.m.upbound.io", "v1beta1", "TLSInspectionPolicy", "TLSInspectionPolicyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TLSInspectionPolicy),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.TLSInspectionPolicyRef,
			Selector:     mg.Spec.ForProvider.TLSInspectionPolicySelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TLSInspectionPolicy")
	}
	mg.Spec.ForProvider.TLSInspectionPolicy = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TLSInspectionPolicyRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networksecurity.gcp.m.upbound.io", "v1beta1", "TLSInspectionPolicy", "TLSInspectionPolicyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.TLSInspectionPolicy),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.TLSInspectionPolicyRef,
			Selector:     mg.Spec.InitProvider.TLSInspectionPolicySelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.TLSInspectionPolicy")
	}
	mg.Spec.InitProvider.TLSInspectionPolicy = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TLSInspectionPolicyRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this GatewaySecurityPolicyRule.
func (mg *GatewaySecurityPolicyRule) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("networksecurity.gcp.m.upbound.io", "v1beta1", "GatewaySecurityPolicy", "GatewaySecurityPolicyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GatewaySecurityPolicy),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.GatewaySecurityPolicyRef,
			Selector:     mg.Spec.ForProvider.GatewaySecurityPolicySelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.GatewaySecurityPolicy")
	}
	mg.Spec.ForProvider.GatewaySecurityPolicy = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.GatewaySecurityPolicyRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TLSInspectionPolicy.
func (mg *TLSInspectionPolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("privateca.gcp.m.upbound.io", "v1beta1", "CAPool", "CAPoolList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CAPool),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.CAPoolRef,
			Selector:     mg.Spec.ForProvider.CAPoolSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CAPool")
	}
	mg.Spec.ForProvider.CAPool = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CAPoolRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("certificatemanager.gcp.m.upbound.io", "v1beta1", "TrustConfig", "TrustConfigList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TrustConfig),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.TrustConfigRef,
			Selector:     mg.Spec.ForProvider.TrustConfigSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TrustConfig")
	}
	mg.Spec.ForProvider.TrustConfig = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TrustConfigRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("privateca.gcp.m.upbound.io", "v1beta1", "CAPool", "CAPoolList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CAPool),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.CAPoolRef,
			Selector:     mg.Spec.InitProvider.CAPoolSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CAPool")
	}
	mg.Spec.InitProvider.CAPool = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CAPoolRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("certificatemanager.gcp.m.upbound.io", "v1beta1", "TrustConfig", "TrustConfigList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.TrustConfig),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.TrustConfigRef,
			Selector:     mg.Spec.InitProvider.TrustConfigSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.TrustConfig")
	}
	mg.Spec.InitProvider.TrustConfig = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TrustConfigRef = rsp.ResolvedReference

	return nil
}
