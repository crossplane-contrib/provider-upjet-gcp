// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/apis/common/v2"
)

type BucketIAMPolicyInitParameters struct {

	// Used to find the parent resource to bind the IAM policy to
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/namespaced/storage/v1beta1.Bucket
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Reference to a Bucket in storage to populate bucket.
	// +kubebuilder:validation:Optional
	BucketRef *v1.NamespacedReference `json:"bucketRef,omitempty" tf:"-"`

	// Selector for a Bucket in storage to populate bucket.
	// +kubebuilder:validation:Optional
	BucketSelector *v1.NamespacedSelector `json:"bucketSelector,omitempty" tf:"-"`

	// The policy data generated by
	// a google_iam_policy data source.
	PolicyData *string `json:"policyData,omitempty" tf:"policy_data,omitempty"`
}

type BucketIAMPolicyObservation struct {

	// Used to find the parent resource to bind the IAM policy to
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// (Computed) The etag of the IAM policy.
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The policy data generated by
	// a google_iam_policy data source.
	PolicyData *string `json:"policyData,omitempty" tf:"policy_data,omitempty"`
}

type BucketIAMPolicyParameters struct {

	// Used to find the parent resource to bind the IAM policy to
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/namespaced/storage/v1beta1.Bucket
	// +kubebuilder:validation:Optional
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Reference to a Bucket in storage to populate bucket.
	// +kubebuilder:validation:Optional
	BucketRef *v1.NamespacedReference `json:"bucketRef,omitempty" tf:"-"`

	// Selector for a Bucket in storage to populate bucket.
	// +kubebuilder:validation:Optional
	BucketSelector *v1.NamespacedSelector `json:"bucketSelector,omitempty" tf:"-"`

	// The policy data generated by
	// a google_iam_policy data source.
	// +kubebuilder:validation:Optional
	PolicyData *string `json:"policyData,omitempty" tf:"policy_data,omitempty"`
}

// BucketIAMPolicySpec defines the desired state of BucketIAMPolicy
type BucketIAMPolicySpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            BucketIAMPolicyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BucketIAMPolicyInitParameters `json:"initProvider,omitempty"`
}

// BucketIAMPolicyStatus defines the observed state of BucketIAMPolicy.
type BucketIAMPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BucketIAMPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// BucketIAMPolicy is the Schema for the BucketIAMPolicys API. Collection of resources to manage IAM policy for Cloud Storage Bucket
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,gcp}
type BucketIAMPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.policyData) || (has(self.initProvider) && has(self.initProvider.policyData))",message="spec.forProvider.policyData is a required parameter"
	Spec   BucketIAMPolicySpec   `json:"spec"`
	Status BucketIAMPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BucketIAMPolicyList contains a list of BucketIAMPolicys
type BucketIAMPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BucketIAMPolicy `json:"items"`
}

// Repository type metadata.
var (
	BucketIAMPolicy_Kind             = "BucketIAMPolicy"
	BucketIAMPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BucketIAMPolicy_Kind}.String()
	BucketIAMPolicy_KindAPIVersion   = BucketIAMPolicy_Kind + "." + CRDGroupVersion.String()
	BucketIAMPolicy_GroupVersionKind = CRDGroupVersion.WithKind(BucketIAMPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&BucketIAMPolicy{}, &BucketIAMPolicyList{})
}
