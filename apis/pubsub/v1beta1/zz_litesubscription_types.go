// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DeliveryConfigInitParameters struct {

	// When this subscription should send messages to subscribers relative to messages persistence in storage.
	// Possible values are: DELIVER_IMMEDIATELY, DELIVER_AFTER_STORED, DELIVERY_REQUIREMENT_UNSPECIFIED.
	DeliveryRequirement *string `json:"deliveryRequirement,omitempty" tf:"delivery_requirement,omitempty"`
}

type DeliveryConfigObservation struct {

	// When this subscription should send messages to subscribers relative to messages persistence in storage.
	// Possible values are: DELIVER_IMMEDIATELY, DELIVER_AFTER_STORED, DELIVERY_REQUIREMENT_UNSPECIFIED.
	DeliveryRequirement *string `json:"deliveryRequirement,omitempty" tf:"delivery_requirement,omitempty"`
}

type DeliveryConfigParameters struct {

	// When this subscription should send messages to subscribers relative to messages persistence in storage.
	// Possible values are: DELIVER_IMMEDIATELY, DELIVER_AFTER_STORED, DELIVERY_REQUIREMENT_UNSPECIFIED.
	// +kubebuilder:validation:Optional
	DeliveryRequirement *string `json:"deliveryRequirement" tf:"delivery_requirement,omitempty"`
}

type LiteSubscriptionInitParameters struct {

	// The settings for this subscription's message delivery.
	// Structure is documented below.
	DeliveryConfig []DeliveryConfigInitParameters `json:"deliveryConfig,omitempty" tf:"delivery_config,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The region of the pubsub lite topic.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// A reference to a Topic resource.
	// +crossplane:generate:reference:type=LiteTopic
	Topic *string `json:"topic,omitempty" tf:"topic,omitempty"`

	// Reference to a LiteTopic to populate topic.
	// +kubebuilder:validation:Optional
	TopicRef *v1.Reference `json:"topicRef,omitempty" tf:"-"`

	// Selector for a LiteTopic to populate topic.
	// +kubebuilder:validation:Optional
	TopicSelector *v1.Selector `json:"topicSelector,omitempty" tf:"-"`
}

type LiteSubscriptionObservation struct {

	// The settings for this subscription's message delivery.
	// Structure is documented below.
	DeliveryConfig []DeliveryConfigObservation `json:"deliveryConfig,omitempty" tf:"delivery_config,omitempty"`

	// an identifier for the resource with format projects/{{project}}/locations/{{zone}}/subscriptions/{{name}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The region of the pubsub lite topic.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// A reference to a Topic resource.
	Topic *string `json:"topic,omitempty" tf:"topic,omitempty"`

	// The zone of the pubsub lite topic.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type LiteSubscriptionParameters struct {

	// The settings for this subscription's message delivery.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	DeliveryConfig []DeliveryConfigParameters `json:"deliveryConfig,omitempty" tf:"delivery_config,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The region of the pubsub lite topic.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// A reference to a Topic resource.
	// +crossplane:generate:reference:type=LiteTopic
	// +kubebuilder:validation:Optional
	Topic *string `json:"topic,omitempty" tf:"topic,omitempty"`

	// Reference to a LiteTopic to populate topic.
	// +kubebuilder:validation:Optional
	TopicRef *v1.Reference `json:"topicRef,omitempty" tf:"-"`

	// Selector for a LiteTopic to populate topic.
	// +kubebuilder:validation:Optional
	TopicSelector *v1.Selector `json:"topicSelector,omitempty" tf:"-"`

	// The zone of the pubsub lite topic.
	// +kubebuilder:validation:Required
	Zone *string `json:"zone" tf:"zone,omitempty"`
}

// LiteSubscriptionSpec defines the desired state of LiteSubscription
type LiteSubscriptionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LiteSubscriptionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider LiteSubscriptionInitParameters `json:"initProvider,omitempty"`
}

// LiteSubscriptionStatus defines the observed state of LiteSubscription.
type LiteSubscriptionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LiteSubscriptionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// LiteSubscription is the Schema for the LiteSubscriptions API. A named resource representing the stream of messages from a single, specific topic, to be delivered to the subscribing application.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type LiteSubscription struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LiteSubscriptionSpec   `json:"spec"`
	Status            LiteSubscriptionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LiteSubscriptionList contains a list of LiteSubscriptions
type LiteSubscriptionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LiteSubscription `json:"items"`
}

// Repository type metadata.
var (
	LiteSubscription_Kind             = "LiteSubscription"
	LiteSubscription_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LiteSubscription_Kind}.String()
	LiteSubscription_KindAPIVersion   = LiteSubscription_Kind + "." + CRDGroupVersion.String()
	LiteSubscription_GroupVersionKind = CRDGroupVersion.WithKind(LiteSubscription_Kind)
)

func init() {
	SchemeBuilder.Register(&LiteSubscription{}, &LiteSubscriptionList{})
}
