// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	apisresolver "github.com/upbound/provider-gcp/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *Environment) ResolveReferences( // ResolveReferences of this Environment.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Config); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Config[i3].NodeConfig); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Config[i3].NodeConfig[i4].Network),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.ForProvider.Config[i3].NodeConfig[i4].NetworkRef,
					Selector:     mg.Spec.ForProvider.Config[i3].NodeConfig[i4].NetworkSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Config[i3].NodeConfig[i4].Network")
			}
			mg.Spec.ForProvider.Config[i3].NodeConfig[i4].Network = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Config[i3].NodeConfig[i4].NetworkRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Config); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Config[i3].NodeConfig); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "ServiceAccount", "ServiceAccountList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Config[i3].NodeConfig[i4].ServiceAccount),
					Extract:      resource.ExtractParamPath("name", true),
					Reference:    mg.Spec.ForProvider.Config[i3].NodeConfig[i4].ServiceAccountRef,
					Selector:     mg.Spec.ForProvider.Config[i3].NodeConfig[i4].ServiceAccountSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Config[i3].NodeConfig[i4].ServiceAccount")
			}
			mg.Spec.ForProvider.Config[i3].NodeConfig[i4].ServiceAccount = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Config[i3].NodeConfig[i4].ServiceAccountRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Config); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Config[i3].NodeConfig); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Subnetwork", "SubnetworkList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Config[i3].NodeConfig[i4].Subnetwork),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.ForProvider.Config[i3].NodeConfig[i4].SubnetworkRef,
					Selector:     mg.Spec.ForProvider.Config[i3].NodeConfig[i4].SubnetworkSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Config[i3].NodeConfig[i4].Subnetwork")
			}
			mg.Spec.ForProvider.Config[i3].NodeConfig[i4].Subnetwork = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Config[i3].NodeConfig[i4].SubnetworkRef = rsp.ResolvedReference

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Project),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ProjectRef,
			Selector:     mg.Spec.ForProvider.ProjectSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Project")
	}
	mg.Spec.ForProvider.Project = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.Config); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Config[i3].NodeConfig); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Config[i3].NodeConfig[i4].Network),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.InitProvider.Config[i3].NodeConfig[i4].NetworkRef,
					Selector:     mg.Spec.InitProvider.Config[i3].NodeConfig[i4].NetworkSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Config[i3].NodeConfig[i4].Network")
			}
			mg.Spec.InitProvider.Config[i3].NodeConfig[i4].Network = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Config[i3].NodeConfig[i4].NetworkRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Config); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Config[i3].NodeConfig); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "ServiceAccount", "ServiceAccountList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Config[i3].NodeConfig[i4].ServiceAccount),
					Extract:      resource.ExtractParamPath("name", true),
					Reference:    mg.Spec.InitProvider.Config[i3].NodeConfig[i4].ServiceAccountRef,
					Selector:     mg.Spec.InitProvider.Config[i3].NodeConfig[i4].ServiceAccountSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Config[i3].NodeConfig[i4].ServiceAccount")
			}
			mg.Spec.InitProvider.Config[i3].NodeConfig[i4].ServiceAccount = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Config[i3].NodeConfig[i4].ServiceAccountRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Config); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Config[i3].NodeConfig); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Subnetwork", "SubnetworkList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Config[i3].NodeConfig[i4].Subnetwork),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.InitProvider.Config[i3].NodeConfig[i4].SubnetworkRef,
					Selector:     mg.Spec.InitProvider.Config[i3].NodeConfig[i4].SubnetworkSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Config[i3].NodeConfig[i4].Subnetwork")
			}
			mg.Spec.InitProvider.Config[i3].NodeConfig[i4].Subnetwork = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Config[i3].NodeConfig[i4].SubnetworkRef = rsp.ResolvedReference

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Project),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ProjectRef,
			Selector:     mg.Spec.InitProvider.ProjectSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Project")
	}
	mg.Spec.InitProvider.Project = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectRef = rsp.ResolvedReference

	return nil
}
