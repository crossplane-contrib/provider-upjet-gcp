// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AppProfileInitParameters struct {

	// Long form description of the use case for this app profile.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// If true, ignore safety checks when deleting/updating the app profile.
	IgnoreWarnings *bool `json:"ignoreWarnings,omitempty" tf:"ignore_warnings,omitempty"`

	MultiClusterRoutingClusterIds []*string `json:"multiClusterRoutingClusterIds,omitempty" tf:"multi_cluster_routing_cluster_ids,omitempty"`

	// If true, read/write requests are routed to the nearest cluster in the instance, and will fail over to the nearest cluster that is available
	// in the event of transient errors or delays. Clusters in a region are considered equidistant. Choosing this option sacrifices read-your-writes
	// consistency to improve availability.
	MultiClusterRoutingUseAny *bool `json:"multiClusterRoutingUseAny,omitempty" tf:"multi_cluster_routing_use_any,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Use a single-cluster routing policy.
	// Structure is documented below.
	SingleClusterRouting []SingleClusterRoutingInitParameters `json:"singleClusterRouting,omitempty" tf:"single_cluster_routing,omitempty"`

	// The standard options used for isolating this app profile's traffic from other use cases.
	// Structure is documented below.
	StandardIsolation []StandardIsolationInitParameters `json:"standardIsolation,omitempty" tf:"standard_isolation,omitempty"`
}

type AppProfileObservation struct {

	// Long form description of the use case for this app profile.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// an identifier for the resource with format projects/{{project}}/instances/{{instance}}/appProfiles/{{app_profile_id}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// If true, ignore safety checks when deleting/updating the app profile.
	IgnoreWarnings *bool `json:"ignoreWarnings,omitempty" tf:"ignore_warnings,omitempty"`

	// The name of the instance to create the app profile within.
	Instance *string `json:"instance,omitempty" tf:"instance,omitempty"`

	MultiClusterRoutingClusterIds []*string `json:"multiClusterRoutingClusterIds,omitempty" tf:"multi_cluster_routing_cluster_ids,omitempty"`

	// If true, read/write requests are routed to the nearest cluster in the instance, and will fail over to the nearest cluster that is available
	// in the event of transient errors or delays. Clusters in a region are considered equidistant. Choosing this option sacrifices read-your-writes
	// consistency to improve availability.
	MultiClusterRoutingUseAny *bool `json:"multiClusterRoutingUseAny,omitempty" tf:"multi_cluster_routing_use_any,omitempty"`

	// The unique name of the requested app profile. Values are of the form projects/<project>/instances/<instance>/appProfiles/<appProfileId>.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Use a single-cluster routing policy.
	// Structure is documented below.
	SingleClusterRouting []SingleClusterRoutingObservation `json:"singleClusterRouting,omitempty" tf:"single_cluster_routing,omitempty"`

	// The standard options used for isolating this app profile's traffic from other use cases.
	// Structure is documented below.
	StandardIsolation []StandardIsolationObservation `json:"standardIsolation,omitempty" tf:"standard_isolation,omitempty"`
}

type AppProfileParameters struct {

	// Long form description of the use case for this app profile.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// If true, ignore safety checks when deleting/updating the app profile.
	// +kubebuilder:validation:Optional
	IgnoreWarnings *bool `json:"ignoreWarnings,omitempty" tf:"ignore_warnings,omitempty"`

	// The name of the instance to create the app profile within.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/bigtable/v1beta1.Instance
	// +kubebuilder:validation:Optional
	Instance *string `json:"instance,omitempty" tf:"instance,omitempty"`

	// Reference to a Instance in bigtable to populate instance.
	// +kubebuilder:validation:Optional
	InstanceRef *v1.Reference `json:"instanceRef,omitempty" tf:"-"`

	// Selector for a Instance in bigtable to populate instance.
	// +kubebuilder:validation:Optional
	InstanceSelector *v1.Selector `json:"instanceSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	MultiClusterRoutingClusterIds []*string `json:"multiClusterRoutingClusterIds,omitempty" tf:"multi_cluster_routing_cluster_ids,omitempty"`

	// If true, read/write requests are routed to the nearest cluster in the instance, and will fail over to the nearest cluster that is available
	// in the event of transient errors or delays. Clusters in a region are considered equidistant. Choosing this option sacrifices read-your-writes
	// consistency to improve availability.
	// +kubebuilder:validation:Optional
	MultiClusterRoutingUseAny *bool `json:"multiClusterRoutingUseAny,omitempty" tf:"multi_cluster_routing_use_any,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Use a single-cluster routing policy.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	SingleClusterRouting []SingleClusterRoutingParameters `json:"singleClusterRouting,omitempty" tf:"single_cluster_routing,omitempty"`

	// The standard options used for isolating this app profile's traffic from other use cases.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	StandardIsolation []StandardIsolationParameters `json:"standardIsolation,omitempty" tf:"standard_isolation,omitempty"`
}

type SingleClusterRoutingInitParameters struct {

	// If true, CheckAndMutateRow and ReadModifyWriteRow requests are allowed by this app profile.
	// It is unsafe to send these requests to the same table/row/column in multiple clusters.
	AllowTransactionalWrites *bool `json:"allowTransactionalWrites,omitempty" tf:"allow_transactional_writes,omitempty"`

	// The cluster to which read/write requests should be routed.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`
}

type SingleClusterRoutingObservation struct {

	// If true, CheckAndMutateRow and ReadModifyWriteRow requests are allowed by this app profile.
	// It is unsafe to send these requests to the same table/row/column in multiple clusters.
	AllowTransactionalWrites *bool `json:"allowTransactionalWrites,omitempty" tf:"allow_transactional_writes,omitempty"`

	// The cluster to which read/write requests should be routed.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`
}

type SingleClusterRoutingParameters struct {

	// If true, CheckAndMutateRow and ReadModifyWriteRow requests are allowed by this app profile.
	// It is unsafe to send these requests to the same table/row/column in multiple clusters.
	// +kubebuilder:validation:Optional
	AllowTransactionalWrites *bool `json:"allowTransactionalWrites,omitempty" tf:"allow_transactional_writes,omitempty"`

	// The cluster to which read/write requests should be routed.
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId" tf:"cluster_id,omitempty"`
}

type StandardIsolationInitParameters struct {

	// The priority of requests sent using this app profile.
	// Possible values are: PRIORITY_LOW, PRIORITY_MEDIUM, PRIORITY_HIGH.
	Priority *string `json:"priority,omitempty" tf:"priority,omitempty"`
}

type StandardIsolationObservation struct {

	// The priority of requests sent using this app profile.
	// Possible values are: PRIORITY_LOW, PRIORITY_MEDIUM, PRIORITY_HIGH.
	Priority *string `json:"priority,omitempty" tf:"priority,omitempty"`
}

type StandardIsolationParameters struct {

	// The priority of requests sent using this app profile.
	// Possible values are: PRIORITY_LOW, PRIORITY_MEDIUM, PRIORITY_HIGH.
	// +kubebuilder:validation:Optional
	Priority *string `json:"priority" tf:"priority,omitempty"`
}

// AppProfileSpec defines the desired state of AppProfile
type AppProfileSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AppProfileParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AppProfileInitParameters `json:"initProvider,omitempty"`
}

// AppProfileStatus defines the observed state of AppProfile.
type AppProfileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AppProfileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AppProfile is the Schema for the AppProfiles API. App profile is a configuration object describing how Cloud Bigtable should treat traffic from a particular end user application.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type AppProfile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AppProfileSpec   `json:"spec"`
	Status            AppProfileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AppProfileList contains a list of AppProfiles
type AppProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AppProfile `json:"items"`
}

// Repository type metadata.
var (
	AppProfile_Kind             = "AppProfile"
	AppProfile_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AppProfile_Kind}.String()
	AppProfile_KindAPIVersion   = AppProfile_Kind + "." + CRDGroupVersion.String()
	AppProfile_GroupVersionKind = CRDGroupVersion.WithKind(AppProfile_Kind)
)

func init() {
	SchemeBuilder.Register(&AppProfile{}, &AppProfileList{})
}
