// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CategoricalThresholdConfigInitParameters struct {

	// Specify a threshold value that can trigger the alert. For numerical feature, the distribution distance is calculated by Jensen–Shannon divergence. Each feature must have a non-zero threshold if they need to be monitored. Otherwise no alert will be triggered for that feature. The default value is 0.3.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type CategoricalThresholdConfigObservation struct {

	// Specify a threshold value that can trigger the alert. For numerical feature, the distribution distance is calculated by Jensen–Shannon divergence. Each feature must have a non-zero threshold if they need to be monitored. Otherwise no alert will be triggered for that feature. The default value is 0.3.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type CategoricalThresholdConfigParameters struct {

	// Specify a threshold value that can trigger the alert. For numerical feature, the distribution distance is calculated by Jensen–Shannon divergence. Each feature must have a non-zero threshold if they need to be monitored. Otherwise no alert will be triggered for that feature. The default value is 0.3.
	// +kubebuilder:validation:Optional
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type FeaturestoreEntitytypeInitParameters struct {

	// Optional. Description of the EntityType.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/vertexai/v1beta1.Featurestore
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	Featurestore *string `json:"featurestore,omitempty" tf:"featurestore,omitempty"`

	// Reference to a Featurestore in vertexai to populate featurestore.
	// +kubebuilder:validation:Optional
	FeaturestoreRef *v1.Reference `json:"featurestoreRef,omitempty" tf:"-"`

	// Selector for a Featurestore in vertexai to populate featurestore.
	// +kubebuilder:validation:Optional
	FeaturestoreSelector *v1.Selector `json:"featurestoreSelector,omitempty" tf:"-"`

	// A set of key/value label pairs to assign to this EntityType.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The default monitoring configuration for all Features under this EntityType.
	// If this is populated with [FeaturestoreMonitoringConfig.monitoring_interval] specified, snapshot analysis monitoring is enabled. Otherwise, snapshot analysis monitoring is disabled.
	// Structure is documented below.
	MonitoringConfig []MonitoringConfigInitParameters `json:"monitoringConfig,omitempty" tf:"monitoring_config,omitempty"`

	// The name of the EntityType. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type FeaturestoreEntitytypeObservation struct {

	// The timestamp of when the featurestore was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Optional. Description of the EntityType.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// for all of the labels present on the resource.
	// +mapType=granular
	EffectiveLabels map[string]*string `json:"effectiveLabels,omitempty" tf:"effective_labels,omitempty"`

	// Used to perform consistent read-modify-write updates.
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	// The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}.
	Featurestore *string `json:"featurestore,omitempty" tf:"featurestore,omitempty"`

	// an identifier for the resource with format {{featurestore}}/entityTypes/{{name}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A set of key/value label pairs to assign to this EntityType.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The default monitoring configuration for all Features under this EntityType.
	// If this is populated with [FeaturestoreMonitoringConfig.monitoring_interval] specified, snapshot analysis monitoring is enabled. Otherwise, snapshot analysis monitoring is disabled.
	// Structure is documented below.
	MonitoringConfig []MonitoringConfigObservation `json:"monitoringConfig,omitempty" tf:"monitoring_config,omitempty"`

	// The name of the EntityType. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	// +mapType=granular
	TerraformLabels map[string]*string `json:"terraformLabels,omitempty" tf:"terraform_labels,omitempty"`

	// The timestamp of when the featurestore was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type FeaturestoreEntitytypeParameters struct {

	// Optional. Description of the EntityType.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/vertexai/v1beta1.Featurestore
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	Featurestore *string `json:"featurestore,omitempty" tf:"featurestore,omitempty"`

	// Reference to a Featurestore in vertexai to populate featurestore.
	// +kubebuilder:validation:Optional
	FeaturestoreRef *v1.Reference `json:"featurestoreRef,omitempty" tf:"-"`

	// Selector for a Featurestore in vertexai to populate featurestore.
	// +kubebuilder:validation:Optional
	FeaturestoreSelector *v1.Selector `json:"featurestoreSelector,omitempty" tf:"-"`

	// A set of key/value label pairs to assign to this EntityType.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The default monitoring configuration for all Features under this EntityType.
	// If this is populated with [FeaturestoreMonitoringConfig.monitoring_interval] specified, snapshot analysis monitoring is enabled. Otherwise, snapshot analysis monitoring is disabled.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	MonitoringConfig []MonitoringConfigParameters `json:"monitoringConfig,omitempty" tf:"monitoring_config,omitempty"`

	// The name of the EntityType. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ImportFeaturesAnalysisInitParameters struct {

	// Defines the baseline to do anomaly detection for feature values imported by each [entityTypes.importFeatureValues][] operation. The value must be one of the values below:
	AnomalyDetectionBaseline *string `json:"anomalyDetectionBaseline,omitempty" tf:"anomaly_detection_baseline,omitempty"`

	// Whether to enable / disable / inherite default hebavior for import features analysis. The value must be one of the values below:
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type ImportFeaturesAnalysisObservation struct {

	// Defines the baseline to do anomaly detection for feature values imported by each [entityTypes.importFeatureValues][] operation. The value must be one of the values below:
	AnomalyDetectionBaseline *string `json:"anomalyDetectionBaseline,omitempty" tf:"anomaly_detection_baseline,omitempty"`

	// Whether to enable / disable / inherite default hebavior for import features analysis. The value must be one of the values below:
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type ImportFeaturesAnalysisParameters struct {

	// Defines the baseline to do anomaly detection for feature values imported by each [entityTypes.importFeatureValues][] operation. The value must be one of the values below:
	// +kubebuilder:validation:Optional
	AnomalyDetectionBaseline *string `json:"anomalyDetectionBaseline,omitempty" tf:"anomaly_detection_baseline,omitempty"`

	// Whether to enable / disable / inherite default hebavior for import features analysis. The value must be one of the values below:
	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type MonitoringConfigInitParameters struct {

	// Threshold for categorical features of anomaly detection. This is shared by all types of Featurestore Monitoring for categorical features (i.e. Features with type (Feature.ValueType) BOOL or STRING).
	// Structure is documented below.
	CategoricalThresholdConfig []CategoricalThresholdConfigInitParameters `json:"categoricalThresholdConfig,omitempty" tf:"categorical_threshold_config,omitempty"`

	// The config for ImportFeatures Analysis Based Feature Monitoring.
	// Structure is documented below.
	ImportFeaturesAnalysis []ImportFeaturesAnalysisInitParameters `json:"importFeaturesAnalysis,omitempty" tf:"import_features_analysis,omitempty"`

	// Threshold for numerical features of anomaly detection. This is shared by all objectives of Featurestore Monitoring for numerical features (i.e. Features with type (Feature.ValueType) DOUBLE or INT64).
	// Structure is documented below.
	NumericalThresholdConfig []NumericalThresholdConfigInitParameters `json:"numericalThresholdConfig,omitempty" tf:"numerical_threshold_config,omitempty"`

	// The config for Snapshot Analysis Based Feature Monitoring.
	// Structure is documented below.
	SnapshotAnalysis []SnapshotAnalysisInitParameters `json:"snapshotAnalysis,omitempty" tf:"snapshot_analysis,omitempty"`
}

type MonitoringConfigObservation struct {

	// Threshold for categorical features of anomaly detection. This is shared by all types of Featurestore Monitoring for categorical features (i.e. Features with type (Feature.ValueType) BOOL or STRING).
	// Structure is documented below.
	CategoricalThresholdConfig []CategoricalThresholdConfigObservation `json:"categoricalThresholdConfig,omitempty" tf:"categorical_threshold_config,omitempty"`

	// The config for ImportFeatures Analysis Based Feature Monitoring.
	// Structure is documented below.
	ImportFeaturesAnalysis []ImportFeaturesAnalysisObservation `json:"importFeaturesAnalysis,omitempty" tf:"import_features_analysis,omitempty"`

	// Threshold for numerical features of anomaly detection. This is shared by all objectives of Featurestore Monitoring for numerical features (i.e. Features with type (Feature.ValueType) DOUBLE or INT64).
	// Structure is documented below.
	NumericalThresholdConfig []NumericalThresholdConfigObservation `json:"numericalThresholdConfig,omitempty" tf:"numerical_threshold_config,omitempty"`

	// The config for Snapshot Analysis Based Feature Monitoring.
	// Structure is documented below.
	SnapshotAnalysis []SnapshotAnalysisObservation `json:"snapshotAnalysis,omitempty" tf:"snapshot_analysis,omitempty"`
}

type MonitoringConfigParameters struct {

	// Threshold for categorical features of anomaly detection. This is shared by all types of Featurestore Monitoring for categorical features (i.e. Features with type (Feature.ValueType) BOOL or STRING).
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	CategoricalThresholdConfig []CategoricalThresholdConfigParameters `json:"categoricalThresholdConfig,omitempty" tf:"categorical_threshold_config,omitempty"`

	// The config for ImportFeatures Analysis Based Feature Monitoring.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	ImportFeaturesAnalysis []ImportFeaturesAnalysisParameters `json:"importFeaturesAnalysis,omitempty" tf:"import_features_analysis,omitempty"`

	// Threshold for numerical features of anomaly detection. This is shared by all objectives of Featurestore Monitoring for numerical features (i.e. Features with type (Feature.ValueType) DOUBLE or INT64).
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	NumericalThresholdConfig []NumericalThresholdConfigParameters `json:"numericalThresholdConfig,omitempty" tf:"numerical_threshold_config,omitempty"`

	// The config for Snapshot Analysis Based Feature Monitoring.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	SnapshotAnalysis []SnapshotAnalysisParameters `json:"snapshotAnalysis,omitempty" tf:"snapshot_analysis,omitempty"`
}

type NumericalThresholdConfigInitParameters struct {

	// Specify a threshold value that can trigger the alert. For numerical feature, the distribution distance is calculated by Jensen–Shannon divergence. Each feature must have a non-zero threshold if they need to be monitored. Otherwise no alert will be triggered for that feature. The default value is 0.3.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type NumericalThresholdConfigObservation struct {

	// Specify a threshold value that can trigger the alert. For numerical feature, the distribution distance is calculated by Jensen–Shannon divergence. Each feature must have a non-zero threshold if they need to be monitored. Otherwise no alert will be triggered for that feature. The default value is 0.3.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type NumericalThresholdConfigParameters struct {

	// Specify a threshold value that can trigger the alert. For numerical feature, the distribution distance is calculated by Jensen–Shannon divergence. Each feature must have a non-zero threshold if they need to be monitored. Otherwise no alert will be triggered for that feature. The default value is 0.3.
	// +kubebuilder:validation:Optional
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type SnapshotAnalysisInitParameters struct {

	// The monitoring schedule for snapshot analysis. For EntityType-level config: unset / disabled = true indicates disabled by default for Features under it; otherwise by default enable snapshot analysis monitoring with monitoringInterval for Features under it.
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// Configuration of the snapshot analysis based monitoring pipeline running interval. The value indicates number of days. The default value is 1.
	// If both FeaturestoreMonitoringConfig.SnapshotAnalysis.monitoring_interval_days and [FeaturestoreMonitoringConfig.SnapshotAnalysis.monitoring_interval][] are set when creating/updating EntityTypes/Features, FeaturestoreMonitoringConfig.SnapshotAnalysis.monitoring_interval_days will be used.
	MonitoringIntervalDays *float64 `json:"monitoringIntervalDays,omitempty" tf:"monitoring_interval_days,omitempty"`

	// Customized export features time window for snapshot analysis. Unit is one day. The default value is 21 days. Minimum value is 1 day. Maximum value is 4000 days.
	StalenessDays *float64 `json:"stalenessDays,omitempty" tf:"staleness_days,omitempty"`
}

type SnapshotAnalysisObservation struct {

	// The monitoring schedule for snapshot analysis. For EntityType-level config: unset / disabled = true indicates disabled by default for Features under it; otherwise by default enable snapshot analysis monitoring with monitoringInterval for Features under it.
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// Configuration of the snapshot analysis based monitoring pipeline running interval. The value indicates number of days. The default value is 1.
	// If both FeaturestoreMonitoringConfig.SnapshotAnalysis.monitoring_interval_days and [FeaturestoreMonitoringConfig.SnapshotAnalysis.monitoring_interval][] are set when creating/updating EntityTypes/Features, FeaturestoreMonitoringConfig.SnapshotAnalysis.monitoring_interval_days will be used.
	MonitoringIntervalDays *float64 `json:"monitoringIntervalDays,omitempty" tf:"monitoring_interval_days,omitempty"`

	// Customized export features time window for snapshot analysis. Unit is one day. The default value is 21 days. Minimum value is 1 day. Maximum value is 4000 days.
	StalenessDays *float64 `json:"stalenessDays,omitempty" tf:"staleness_days,omitempty"`
}

type SnapshotAnalysisParameters struct {

	// The monitoring schedule for snapshot analysis. For EntityType-level config: unset / disabled = true indicates disabled by default for Features under it; otherwise by default enable snapshot analysis monitoring with monitoringInterval for Features under it.
	// +kubebuilder:validation:Optional
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// Configuration of the snapshot analysis based monitoring pipeline running interval. The value indicates number of days. The default value is 1.
	// If both FeaturestoreMonitoringConfig.SnapshotAnalysis.monitoring_interval_days and [FeaturestoreMonitoringConfig.SnapshotAnalysis.monitoring_interval][] are set when creating/updating EntityTypes/Features, FeaturestoreMonitoringConfig.SnapshotAnalysis.monitoring_interval_days will be used.
	// +kubebuilder:validation:Optional
	MonitoringIntervalDays *float64 `json:"monitoringIntervalDays,omitempty" tf:"monitoring_interval_days,omitempty"`

	// Customized export features time window for snapshot analysis. Unit is one day. The default value is 21 days. Minimum value is 1 day. Maximum value is 4000 days.
	// +kubebuilder:validation:Optional
	StalenessDays *float64 `json:"stalenessDays,omitempty" tf:"staleness_days,omitempty"`
}

// FeaturestoreEntitytypeSpec defines the desired state of FeaturestoreEntitytype
type FeaturestoreEntitytypeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FeaturestoreEntitytypeParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider FeaturestoreEntitytypeInitParameters `json:"initProvider,omitempty"`
}

// FeaturestoreEntitytypeStatus defines the observed state of FeaturestoreEntitytype.
type FeaturestoreEntitytypeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FeaturestoreEntitytypeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// FeaturestoreEntitytype is the Schema for the FeaturestoreEntitytypes API. An entity type is a type of object in a system that needs to be modeled and have stored information about.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type FeaturestoreEntitytype struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FeaturestoreEntitytypeSpec   `json:"spec"`
	Status            FeaturestoreEntitytypeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FeaturestoreEntitytypeList contains a list of FeaturestoreEntitytypes
type FeaturestoreEntitytypeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FeaturestoreEntitytype `json:"items"`
}

// Repository type metadata.
var (
	FeaturestoreEntitytype_Kind             = "FeaturestoreEntitytype"
	FeaturestoreEntitytype_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FeaturestoreEntitytype_Kind}.String()
	FeaturestoreEntitytype_KindAPIVersion   = FeaturestoreEntitytype_Kind + "." + CRDGroupVersion.String()
	FeaturestoreEntitytype_GroupVersionKind = CRDGroupVersion.WithKind(FeaturestoreEntitytype_Kind)
)

func init() {
	SchemeBuilder.Register(&FeaturestoreEntitytype{}, &FeaturestoreEntitytypeList{})
}
