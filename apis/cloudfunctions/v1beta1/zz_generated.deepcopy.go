//go:build !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConditionInitParameters) DeepCopyInto(out *ConditionInitParameters) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Expression != nil {
		in, out := &in.Expression, &out.Expression
		*out = new(string)
		**out = **in
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConditionInitParameters.
func (in *ConditionInitParameters) DeepCopy() *ConditionInitParameters {
	if in == nil {
		return nil
	}
	out := new(ConditionInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConditionObservation) DeepCopyInto(out *ConditionObservation) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Expression != nil {
		in, out := &in.Expression, &out.Expression
		*out = new(string)
		**out = **in
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConditionObservation.
func (in *ConditionObservation) DeepCopy() *ConditionObservation {
	if in == nil {
		return nil
	}
	out := new(ConditionObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConditionParameters) DeepCopyInto(out *ConditionParameters) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Expression != nil {
		in, out := &in.Expression, &out.Expression
		*out = new(string)
		**out = **in
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConditionParameters.
func (in *ConditionParameters) DeepCopy() *ConditionParameters {
	if in == nil {
		return nil
	}
	out := new(ConditionParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EventTriggerInitParameters) DeepCopyInto(out *EventTriggerInitParameters) {
	*out = *in
	if in.EventType != nil {
		in, out := &in.EventType, &out.EventType
		*out = new(string)
		**out = **in
	}
	if in.FailurePolicy != nil {
		in, out := &in.FailurePolicy, &out.FailurePolicy
		*out = make([]FailurePolicyInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Resource != nil {
		in, out := &in.Resource, &out.Resource
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EventTriggerInitParameters.
func (in *EventTriggerInitParameters) DeepCopy() *EventTriggerInitParameters {
	if in == nil {
		return nil
	}
	out := new(EventTriggerInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EventTriggerObservation) DeepCopyInto(out *EventTriggerObservation) {
	*out = *in
	if in.EventType != nil {
		in, out := &in.EventType, &out.EventType
		*out = new(string)
		**out = **in
	}
	if in.FailurePolicy != nil {
		in, out := &in.FailurePolicy, &out.FailurePolicy
		*out = make([]FailurePolicyObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Resource != nil {
		in, out := &in.Resource, &out.Resource
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EventTriggerObservation.
func (in *EventTriggerObservation) DeepCopy() *EventTriggerObservation {
	if in == nil {
		return nil
	}
	out := new(EventTriggerObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EventTriggerParameters) DeepCopyInto(out *EventTriggerParameters) {
	*out = *in
	if in.EventType != nil {
		in, out := &in.EventType, &out.EventType
		*out = new(string)
		**out = **in
	}
	if in.FailurePolicy != nil {
		in, out := &in.FailurePolicy, &out.FailurePolicy
		*out = make([]FailurePolicyParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Resource != nil {
		in, out := &in.Resource, &out.Resource
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EventTriggerParameters.
func (in *EventTriggerParameters) DeepCopy() *EventTriggerParameters {
	if in == nil {
		return nil
	}
	out := new(EventTriggerParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FailurePolicyInitParameters) DeepCopyInto(out *FailurePolicyInitParameters) {
	*out = *in
	if in.Retry != nil {
		in, out := &in.Retry, &out.Retry
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FailurePolicyInitParameters.
func (in *FailurePolicyInitParameters) DeepCopy() *FailurePolicyInitParameters {
	if in == nil {
		return nil
	}
	out := new(FailurePolicyInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FailurePolicyObservation) DeepCopyInto(out *FailurePolicyObservation) {
	*out = *in
	if in.Retry != nil {
		in, out := &in.Retry, &out.Retry
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FailurePolicyObservation.
func (in *FailurePolicyObservation) DeepCopy() *FailurePolicyObservation {
	if in == nil {
		return nil
	}
	out := new(FailurePolicyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FailurePolicyParameters) DeepCopyInto(out *FailurePolicyParameters) {
	*out = *in
	if in.Retry != nil {
		in, out := &in.Retry, &out.Retry
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FailurePolicyParameters.
func (in *FailurePolicyParameters) DeepCopy() *FailurePolicyParameters {
	if in == nil {
		return nil
	}
	out := new(FailurePolicyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Function) DeepCopyInto(out *Function) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Function.
func (in *Function) DeepCopy() *Function {
	if in == nil {
		return nil
	}
	out := new(Function)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Function) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FunctionIAMMember) DeepCopyInto(out *FunctionIAMMember) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FunctionIAMMember.
func (in *FunctionIAMMember) DeepCopy() *FunctionIAMMember {
	if in == nil {
		return nil
	}
	out := new(FunctionIAMMember)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *FunctionIAMMember) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FunctionIAMMemberInitParameters) DeepCopyInto(out *FunctionIAMMemberInitParameters) {
	*out = *in
	if in.CloudFunction != nil {
		in, out := &in.CloudFunction, &out.CloudFunction
		*out = new(string)
		**out = **in
	}
	if in.CloudFunctionRef != nil {
		in, out := &in.CloudFunctionRef, &out.CloudFunctionRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.CloudFunctionSelector != nil {
		in, out := &in.CloudFunctionSelector, &out.CloudFunctionSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Condition != nil {
		in, out := &in.Condition, &out.Condition
		*out = make([]ConditionInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Member != nil {
		in, out := &in.Member, &out.Member
		*out = new(string)
		**out = **in
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FunctionIAMMemberInitParameters.
func (in *FunctionIAMMemberInitParameters) DeepCopy() *FunctionIAMMemberInitParameters {
	if in == nil {
		return nil
	}
	out := new(FunctionIAMMemberInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FunctionIAMMemberList) DeepCopyInto(out *FunctionIAMMemberList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]FunctionIAMMember, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FunctionIAMMemberList.
func (in *FunctionIAMMemberList) DeepCopy() *FunctionIAMMemberList {
	if in == nil {
		return nil
	}
	out := new(FunctionIAMMemberList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *FunctionIAMMemberList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FunctionIAMMemberObservation) DeepCopyInto(out *FunctionIAMMemberObservation) {
	*out = *in
	if in.CloudFunction != nil {
		in, out := &in.CloudFunction, &out.CloudFunction
		*out = new(string)
		**out = **in
	}
	if in.Condition != nil {
		in, out := &in.Condition, &out.Condition
		*out = make([]ConditionObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Etag != nil {
		in, out := &in.Etag, &out.Etag
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Member != nil {
		in, out := &in.Member, &out.Member
		*out = new(string)
		**out = **in
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FunctionIAMMemberObservation.
func (in *FunctionIAMMemberObservation) DeepCopy() *FunctionIAMMemberObservation {
	if in == nil {
		return nil
	}
	out := new(FunctionIAMMemberObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FunctionIAMMemberParameters) DeepCopyInto(out *FunctionIAMMemberParameters) {
	*out = *in
	if in.CloudFunction != nil {
		in, out := &in.CloudFunction, &out.CloudFunction
		*out = new(string)
		**out = **in
	}
	if in.CloudFunctionRef != nil {
		in, out := &in.CloudFunctionRef, &out.CloudFunctionRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.CloudFunctionSelector != nil {
		in, out := &in.CloudFunctionSelector, &out.CloudFunctionSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Condition != nil {
		in, out := &in.Condition, &out.Condition
		*out = make([]ConditionParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Member != nil {
		in, out := &in.Member, &out.Member
		*out = new(string)
		**out = **in
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FunctionIAMMemberParameters.
func (in *FunctionIAMMemberParameters) DeepCopy() *FunctionIAMMemberParameters {
	if in == nil {
		return nil
	}
	out := new(FunctionIAMMemberParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FunctionIAMMemberSpec) DeepCopyInto(out *FunctionIAMMemberSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FunctionIAMMemberSpec.
func (in *FunctionIAMMemberSpec) DeepCopy() *FunctionIAMMemberSpec {
	if in == nil {
		return nil
	}
	out := new(FunctionIAMMemberSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FunctionIAMMemberStatus) DeepCopyInto(out *FunctionIAMMemberStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FunctionIAMMemberStatus.
func (in *FunctionIAMMemberStatus) DeepCopy() *FunctionIAMMemberStatus {
	if in == nil {
		return nil
	}
	out := new(FunctionIAMMemberStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FunctionInitParameters) DeepCopyInto(out *FunctionInitParameters) {
	*out = *in
	if in.AvailableMemoryMb != nil {
		in, out := &in.AvailableMemoryMb, &out.AvailableMemoryMb
		*out = new(float64)
		**out = **in
	}
	if in.BuildEnvironmentVariables != nil {
		in, out := &in.BuildEnvironmentVariables, &out.BuildEnvironmentVariables
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.BuildWorkerPool != nil {
		in, out := &in.BuildWorkerPool, &out.BuildWorkerPool
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DockerRegistry != nil {
		in, out := &in.DockerRegistry, &out.DockerRegistry
		*out = new(string)
		**out = **in
	}
	if in.DockerRepository != nil {
		in, out := &in.DockerRepository, &out.DockerRepository
		*out = new(string)
		**out = **in
	}
	if in.EntryPoint != nil {
		in, out := &in.EntryPoint, &out.EntryPoint
		*out = new(string)
		**out = **in
	}
	if in.EnvironmentVariables != nil {
		in, out := &in.EnvironmentVariables, &out.EnvironmentVariables
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.EventTrigger != nil {
		in, out := &in.EventTrigger, &out.EventTrigger
		*out = make([]EventTriggerInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.HTTPSTriggerSecurityLevel != nil {
		in, out := &in.HTTPSTriggerSecurityLevel, &out.HTTPSTriggerSecurityLevel
		*out = new(string)
		**out = **in
	}
	if in.HTTPSTriggerURL != nil {
		in, out := &in.HTTPSTriggerURL, &out.HTTPSTriggerURL
		*out = new(string)
		**out = **in
	}
	if in.IngressSettings != nil {
		in, out := &in.IngressSettings, &out.IngressSettings
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyName != nil {
		in, out := &in.KMSKeyName, &out.KMSKeyName
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.MaxInstances != nil {
		in, out := &in.MaxInstances, &out.MaxInstances
		*out = new(float64)
		**out = **in
	}
	if in.MinInstances != nil {
		in, out := &in.MinInstances, &out.MinInstances
		*out = new(float64)
		**out = **in
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.Runtime != nil {
		in, out := &in.Runtime, &out.Runtime
		*out = new(string)
		**out = **in
	}
	if in.SecretEnvironmentVariables != nil {
		in, out := &in.SecretEnvironmentVariables, &out.SecretEnvironmentVariables
		*out = make([]SecretEnvironmentVariablesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecretVolumes != nil {
		in, out := &in.SecretVolumes, &out.SecretVolumes
		*out = make([]SecretVolumesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ServiceAccountEmail != nil {
		in, out := &in.ServiceAccountEmail, &out.ServiceAccountEmail
		*out = new(string)
		**out = **in
	}
	if in.SourceArchiveBucket != nil {
		in, out := &in.SourceArchiveBucket, &out.SourceArchiveBucket
		*out = new(string)
		**out = **in
	}
	if in.SourceArchiveBucketRef != nil {
		in, out := &in.SourceArchiveBucketRef, &out.SourceArchiveBucketRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SourceArchiveBucketSelector != nil {
		in, out := &in.SourceArchiveBucketSelector, &out.SourceArchiveBucketSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SourceArchiveObject != nil {
		in, out := &in.SourceArchiveObject, &out.SourceArchiveObject
		*out = new(string)
		**out = **in
	}
	if in.SourceArchiveObjectRef != nil {
		in, out := &in.SourceArchiveObjectRef, &out.SourceArchiveObjectRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SourceArchiveObjectSelector != nil {
		in, out := &in.SourceArchiveObjectSelector, &out.SourceArchiveObjectSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SourceRepository != nil {
		in, out := &in.SourceRepository, &out.SourceRepository
		*out = make([]SourceRepositoryInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(float64)
		**out = **in
	}
	if in.TriggerHTTP != nil {
		in, out := &in.TriggerHTTP, &out.TriggerHTTP
		*out = new(bool)
		**out = **in
	}
	if in.VPCConnector != nil {
		in, out := &in.VPCConnector, &out.VPCConnector
		*out = new(string)
		**out = **in
	}
	if in.VPCConnectorEgressSettings != nil {
		in, out := &in.VPCConnectorEgressSettings, &out.VPCConnectorEgressSettings
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FunctionInitParameters.
func (in *FunctionInitParameters) DeepCopy() *FunctionInitParameters {
	if in == nil {
		return nil
	}
	out := new(FunctionInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FunctionList) DeepCopyInto(out *FunctionList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Function, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FunctionList.
func (in *FunctionList) DeepCopy() *FunctionList {
	if in == nil {
		return nil
	}
	out := new(FunctionList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *FunctionList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FunctionObservation) DeepCopyInto(out *FunctionObservation) {
	*out = *in
	if in.AvailableMemoryMb != nil {
		in, out := &in.AvailableMemoryMb, &out.AvailableMemoryMb
		*out = new(float64)
		**out = **in
	}
	if in.BuildEnvironmentVariables != nil {
		in, out := &in.BuildEnvironmentVariables, &out.BuildEnvironmentVariables
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.BuildWorkerPool != nil {
		in, out := &in.BuildWorkerPool, &out.BuildWorkerPool
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DockerRegistry != nil {
		in, out := &in.DockerRegistry, &out.DockerRegistry
		*out = new(string)
		**out = **in
	}
	if in.DockerRepository != nil {
		in, out := &in.DockerRepository, &out.DockerRepository
		*out = new(string)
		**out = **in
	}
	if in.EffectiveLabels != nil {
		in, out := &in.EffectiveLabels, &out.EffectiveLabels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.EntryPoint != nil {
		in, out := &in.EntryPoint, &out.EntryPoint
		*out = new(string)
		**out = **in
	}
	if in.EnvironmentVariables != nil {
		in, out := &in.EnvironmentVariables, &out.EnvironmentVariables
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.EventTrigger != nil {
		in, out := &in.EventTrigger, &out.EventTrigger
		*out = make([]EventTriggerObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.HTTPSTriggerSecurityLevel != nil {
		in, out := &in.HTTPSTriggerSecurityLevel, &out.HTTPSTriggerSecurityLevel
		*out = new(string)
		**out = **in
	}
	if in.HTTPSTriggerURL != nil {
		in, out := &in.HTTPSTriggerURL, &out.HTTPSTriggerURL
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IngressSettings != nil {
		in, out := &in.IngressSettings, &out.IngressSettings
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyName != nil {
		in, out := &in.KMSKeyName, &out.KMSKeyName
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.MaxInstances != nil {
		in, out := &in.MaxInstances, &out.MaxInstances
		*out = new(float64)
		**out = **in
	}
	if in.MinInstances != nil {
		in, out := &in.MinInstances, &out.MinInstances
		*out = new(float64)
		**out = **in
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Runtime != nil {
		in, out := &in.Runtime, &out.Runtime
		*out = new(string)
		**out = **in
	}
	if in.SecretEnvironmentVariables != nil {
		in, out := &in.SecretEnvironmentVariables, &out.SecretEnvironmentVariables
		*out = make([]SecretEnvironmentVariablesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecretVolumes != nil {
		in, out := &in.SecretVolumes, &out.SecretVolumes
		*out = make([]SecretVolumesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ServiceAccountEmail != nil {
		in, out := &in.ServiceAccountEmail, &out.ServiceAccountEmail
		*out = new(string)
		**out = **in
	}
	if in.SourceArchiveBucket != nil {
		in, out := &in.SourceArchiveBucket, &out.SourceArchiveBucket
		*out = new(string)
		**out = **in
	}
	if in.SourceArchiveObject != nil {
		in, out := &in.SourceArchiveObject, &out.SourceArchiveObject
		*out = new(string)
		**out = **in
	}
	if in.SourceRepository != nil {
		in, out := &in.SourceRepository, &out.SourceRepository
		*out = make([]SourceRepositoryObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.TerraformLabels != nil {
		in, out := &in.TerraformLabels, &out.TerraformLabels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(float64)
		**out = **in
	}
	if in.TriggerHTTP != nil {
		in, out := &in.TriggerHTTP, &out.TriggerHTTP
		*out = new(bool)
		**out = **in
	}
	if in.VPCConnector != nil {
		in, out := &in.VPCConnector, &out.VPCConnector
		*out = new(string)
		**out = **in
	}
	if in.VPCConnectorEgressSettings != nil {
		in, out := &in.VPCConnectorEgressSettings, &out.VPCConnectorEgressSettings
		*out = new(string)
		**out = **in
	}
	if in.VersionID != nil {
		in, out := &in.VersionID, &out.VersionID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FunctionObservation.
func (in *FunctionObservation) DeepCopy() *FunctionObservation {
	if in == nil {
		return nil
	}
	out := new(FunctionObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FunctionParameters) DeepCopyInto(out *FunctionParameters) {
	*out = *in
	if in.AvailableMemoryMb != nil {
		in, out := &in.AvailableMemoryMb, &out.AvailableMemoryMb
		*out = new(float64)
		**out = **in
	}
	if in.BuildEnvironmentVariables != nil {
		in, out := &in.BuildEnvironmentVariables, &out.BuildEnvironmentVariables
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.BuildWorkerPool != nil {
		in, out := &in.BuildWorkerPool, &out.BuildWorkerPool
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DockerRegistry != nil {
		in, out := &in.DockerRegistry, &out.DockerRegistry
		*out = new(string)
		**out = **in
	}
	if in.DockerRepository != nil {
		in, out := &in.DockerRepository, &out.DockerRepository
		*out = new(string)
		**out = **in
	}
	if in.EntryPoint != nil {
		in, out := &in.EntryPoint, &out.EntryPoint
		*out = new(string)
		**out = **in
	}
	if in.EnvironmentVariables != nil {
		in, out := &in.EnvironmentVariables, &out.EnvironmentVariables
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.EventTrigger != nil {
		in, out := &in.EventTrigger, &out.EventTrigger
		*out = make([]EventTriggerParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.HTTPSTriggerSecurityLevel != nil {
		in, out := &in.HTTPSTriggerSecurityLevel, &out.HTTPSTriggerSecurityLevel
		*out = new(string)
		**out = **in
	}
	if in.HTTPSTriggerURL != nil {
		in, out := &in.HTTPSTriggerURL, &out.HTTPSTriggerURL
		*out = new(string)
		**out = **in
	}
	if in.IngressSettings != nil {
		in, out := &in.IngressSettings, &out.IngressSettings
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyName != nil {
		in, out := &in.KMSKeyName, &out.KMSKeyName
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.MaxInstances != nil {
		in, out := &in.MaxInstances, &out.MaxInstances
		*out = new(float64)
		**out = **in
	}
	if in.MinInstances != nil {
		in, out := &in.MinInstances, &out.MinInstances
		*out = new(float64)
		**out = **in
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Runtime != nil {
		in, out := &in.Runtime, &out.Runtime
		*out = new(string)
		**out = **in
	}
	if in.SecretEnvironmentVariables != nil {
		in, out := &in.SecretEnvironmentVariables, &out.SecretEnvironmentVariables
		*out = make([]SecretEnvironmentVariablesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecretVolumes != nil {
		in, out := &in.SecretVolumes, &out.SecretVolumes
		*out = make([]SecretVolumesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ServiceAccountEmail != nil {
		in, out := &in.ServiceAccountEmail, &out.ServiceAccountEmail
		*out = new(string)
		**out = **in
	}
	if in.SourceArchiveBucket != nil {
		in, out := &in.SourceArchiveBucket, &out.SourceArchiveBucket
		*out = new(string)
		**out = **in
	}
	if in.SourceArchiveBucketRef != nil {
		in, out := &in.SourceArchiveBucketRef, &out.SourceArchiveBucketRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SourceArchiveBucketSelector != nil {
		in, out := &in.SourceArchiveBucketSelector, &out.SourceArchiveBucketSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SourceArchiveObject != nil {
		in, out := &in.SourceArchiveObject, &out.SourceArchiveObject
		*out = new(string)
		**out = **in
	}
	if in.SourceArchiveObjectRef != nil {
		in, out := &in.SourceArchiveObjectRef, &out.SourceArchiveObjectRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SourceArchiveObjectSelector != nil {
		in, out := &in.SourceArchiveObjectSelector, &out.SourceArchiveObjectSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SourceRepository != nil {
		in, out := &in.SourceRepository, &out.SourceRepository
		*out = make([]SourceRepositoryParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(float64)
		**out = **in
	}
	if in.TriggerHTTP != nil {
		in, out := &in.TriggerHTTP, &out.TriggerHTTP
		*out = new(bool)
		**out = **in
	}
	if in.VPCConnector != nil {
		in, out := &in.VPCConnector, &out.VPCConnector
		*out = new(string)
		**out = **in
	}
	if in.VPCConnectorEgressSettings != nil {
		in, out := &in.VPCConnectorEgressSettings, &out.VPCConnectorEgressSettings
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FunctionParameters.
func (in *FunctionParameters) DeepCopy() *FunctionParameters {
	if in == nil {
		return nil
	}
	out := new(FunctionParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FunctionSpec) DeepCopyInto(out *FunctionSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FunctionSpec.
func (in *FunctionSpec) DeepCopy() *FunctionSpec {
	if in == nil {
		return nil
	}
	out := new(FunctionSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FunctionStatus) DeepCopyInto(out *FunctionStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FunctionStatus.
func (in *FunctionStatus) DeepCopy() *FunctionStatus {
	if in == nil {
		return nil
	}
	out := new(FunctionStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretEnvironmentVariablesInitParameters) DeepCopyInto(out *SecretEnvironmentVariablesInitParameters) {
	*out = *in
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.Secret != nil {
		in, out := &in.Secret, &out.Secret
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretEnvironmentVariablesInitParameters.
func (in *SecretEnvironmentVariablesInitParameters) DeepCopy() *SecretEnvironmentVariablesInitParameters {
	if in == nil {
		return nil
	}
	out := new(SecretEnvironmentVariablesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretEnvironmentVariablesObservation) DeepCopyInto(out *SecretEnvironmentVariablesObservation) {
	*out = *in
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.Secret != nil {
		in, out := &in.Secret, &out.Secret
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretEnvironmentVariablesObservation.
func (in *SecretEnvironmentVariablesObservation) DeepCopy() *SecretEnvironmentVariablesObservation {
	if in == nil {
		return nil
	}
	out := new(SecretEnvironmentVariablesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretEnvironmentVariablesParameters) DeepCopyInto(out *SecretEnvironmentVariablesParameters) {
	*out = *in
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.Secret != nil {
		in, out := &in.Secret, &out.Secret
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretEnvironmentVariablesParameters.
func (in *SecretEnvironmentVariablesParameters) DeepCopy() *SecretEnvironmentVariablesParameters {
	if in == nil {
		return nil
	}
	out := new(SecretEnvironmentVariablesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretVolumesInitParameters) DeepCopyInto(out *SecretVolumesInitParameters) {
	*out = *in
	if in.MountPath != nil {
		in, out := &in.MountPath, &out.MountPath
		*out = new(string)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.Secret != nil {
		in, out := &in.Secret, &out.Secret
		*out = new(string)
		**out = **in
	}
	if in.Versions != nil {
		in, out := &in.Versions, &out.Versions
		*out = make([]VersionsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretVolumesInitParameters.
func (in *SecretVolumesInitParameters) DeepCopy() *SecretVolumesInitParameters {
	if in == nil {
		return nil
	}
	out := new(SecretVolumesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretVolumesObservation) DeepCopyInto(out *SecretVolumesObservation) {
	*out = *in
	if in.MountPath != nil {
		in, out := &in.MountPath, &out.MountPath
		*out = new(string)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.Secret != nil {
		in, out := &in.Secret, &out.Secret
		*out = new(string)
		**out = **in
	}
	if in.Versions != nil {
		in, out := &in.Versions, &out.Versions
		*out = make([]VersionsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretVolumesObservation.
func (in *SecretVolumesObservation) DeepCopy() *SecretVolumesObservation {
	if in == nil {
		return nil
	}
	out := new(SecretVolumesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretVolumesParameters) DeepCopyInto(out *SecretVolumesParameters) {
	*out = *in
	if in.MountPath != nil {
		in, out := &in.MountPath, &out.MountPath
		*out = new(string)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.Secret != nil {
		in, out := &in.Secret, &out.Secret
		*out = new(string)
		**out = **in
	}
	if in.Versions != nil {
		in, out := &in.Versions, &out.Versions
		*out = make([]VersionsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretVolumesParameters.
func (in *SecretVolumesParameters) DeepCopy() *SecretVolumesParameters {
	if in == nil {
		return nil
	}
	out := new(SecretVolumesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SourceRepositoryInitParameters) DeepCopyInto(out *SourceRepositoryInitParameters) {
	*out = *in
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SourceRepositoryInitParameters.
func (in *SourceRepositoryInitParameters) DeepCopy() *SourceRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(SourceRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SourceRepositoryObservation) DeepCopyInto(out *SourceRepositoryObservation) {
	*out = *in
	if in.DeployedURL != nil {
		in, out := &in.DeployedURL, &out.DeployedURL
		*out = new(string)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SourceRepositoryObservation.
func (in *SourceRepositoryObservation) DeepCopy() *SourceRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(SourceRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SourceRepositoryParameters) DeepCopyInto(out *SourceRepositoryParameters) {
	*out = *in
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SourceRepositoryParameters.
func (in *SourceRepositoryParameters) DeepCopy() *SourceRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(SourceRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VersionsInitParameters) DeepCopyInto(out *VersionsInitParameters) {
	*out = *in
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VersionsInitParameters.
func (in *VersionsInitParameters) DeepCopy() *VersionsInitParameters {
	if in == nil {
		return nil
	}
	out := new(VersionsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VersionsObservation) DeepCopyInto(out *VersionsObservation) {
	*out = *in
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VersionsObservation.
func (in *VersionsObservation) DeepCopy() *VersionsObservation {
	if in == nil {
		return nil
	}
	out := new(VersionsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VersionsParameters) DeepCopyInto(out *VersionsParameters) {
	*out = *in
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VersionsParameters.
func (in *VersionsParameters) DeepCopy() *VersionsParameters {
	if in == nil {
		return nil
	}
	out := new(VersionsParameters)
	in.DeepCopyInto(out)
	return out
}
