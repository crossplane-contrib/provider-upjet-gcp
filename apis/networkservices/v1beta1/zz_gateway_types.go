// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GatewayInitParameters struct {

	// Zero or one IPv4 or IPv6 address on which the Gateway will receive the traffic.
	// When no address is provided, an IP from the subnetwork is allocated.
	// This field only applies to gateways of type 'SECURE_WEB_GATEWAY'.
	// Gateways of type 'OPEN_MESH' listen on 0.0.0.0 for IPv4 and :: for IPv6.
	Addresses []*string `json:"addresses,omitempty" tf:"addresses,omitempty"`

	// A fully-qualified Certificates URL reference. The proxy presents a Certificate (selected based on SNI) when establishing a TLS connection.
	// This feature only applies to gateways of type 'SECURE_WEB_GATEWAY'.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/certificatemanager/v1beta2.Certificate
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	CertificateUrls []*string `json:"certificateUrls,omitempty" tf:"certificate_urls,omitempty"`

	// References to Certificate in certificatemanager to populate certificateUrls.
	// +kubebuilder:validation:Optional
	CertificateUrlsRefs []v1.Reference `json:"certificateUrlsRefs,omitempty" tf:"-"`

	// Selector for a list of Certificate in certificatemanager to populate certificateUrls.
	// +kubebuilder:validation:Optional
	CertificateUrlsSelector *v1.Selector `json:"certificateUrlsSelector,omitempty" tf:"-"`

	// When deleting a gateway of type 'SECURE_WEB_GATEWAY', this boolean option will also delete auto generated router by the gateway creation.
	// If there is no other gateway of type 'SECURE_WEB_GATEWAY' remaining for that region and network it will be deleted.
	DeleteSwgAutogenRouterOnDestroy *bool `json:"deleteSwgAutogenRouterOnDestroy,omitempty" tf:"delete_swg_autogen_router_on_destroy,omitempty"`

	// A free-text description of the resource. Max length 1024 characters.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Determines if envoy will insert internal debug headers into upstream requests.
	// Other Envoy headers may still be injected.
	// By default, envoy will not insert any debug headers.
	// Possible values are: NONE, DEBUG_HEADERS.
	EnvoyHeaders *string `json:"envoyHeaders,omitempty" tf:"envoy_headers,omitempty"`

	// A fully-qualified GatewaySecurityPolicy URL reference. Defines how a server should apply security policy to inbound (VM to Proxy) initiated connections.
	// For example: 'projects//locations//gatewaySecurityPolicies/swg-policy'.
	// This policy is specific to gateways of type 'SECURE_WEB_GATEWAY'.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/networksecurity/v1beta1.GatewaySecurityPolicy
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	GatewaySecurityPolicy *string `json:"gatewaySecurityPolicy,omitempty" tf:"gateway_security_policy,omitempty"`

	// Reference to a GatewaySecurityPolicy in networksecurity to populate gatewaySecurityPolicy.
	// +kubebuilder:validation:Optional
	GatewaySecurityPolicyRef *v1.Reference `json:"gatewaySecurityPolicyRef,omitempty" tf:"-"`

	// Selector for a GatewaySecurityPolicy in networksecurity to populate gatewaySecurityPolicy.
	// +kubebuilder:validation:Optional
	GatewaySecurityPolicySelector *v1.Selector `json:"gatewaySecurityPolicySelector,omitempty" tf:"-"`

	// The IP Version that will be used by this gateway.
	// Possible values are: IPV4, IPV6.
	IPVersion *string `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// Set of label tags associated with the Gateway resource.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The relative resource name identifying the VPC network that is using this configuration.
	// For example: 'projects/*/global/networks/network-1'.
	// Currently, this field is specific to gateways of type 'SECURE_WEB_GATEWAY'.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.Network
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// Reference to a Network in compute to populate network.
	// +kubebuilder:validation:Optional
	NetworkRef *v1.Reference `json:"networkRef,omitempty" tf:"-"`

	// Selector for a Network in compute to populate network.
	// +kubebuilder:validation:Optional
	NetworkSelector *v1.Selector `json:"networkSelector,omitempty" tf:"-"`

	// One or more port numbers (1-65535), on which the Gateway will receive traffic.
	// The proxy binds to the specified ports. Gateways of type 'SECURE_WEB_GATEWAY' are limited to 1 port.
	// Gateways of type 'OPEN_MESH' listen on 0.0.0.0 for IPv4 and :: for IPv6 and support multiple ports.
	Ports []*float64 `json:"ports,omitempty" tf:"ports,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The routing mode of the Gateway. This field is configurable only for gateways of type SECURE_WEB_GATEWAY. This field is required for gateways of type SECURE_WEB_GATEWAY.
	// Possible values are: NEXT_HOP_ROUTING_MODE.
	RoutingMode *string `json:"routingMode,omitempty" tf:"routing_mode,omitempty"`

	// Immutable. Scope determines how configuration across multiple Gateway instances are merged.
	// The configuration for multiple Gateway instances with the same scope will be merged as presented as a single coniguration to the proxy/load balancer.
	// Max length 64 characters. Scope should start with a letter and can only have letters, numbers, hyphens.
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// A fully-qualified ServerTLSPolicy URL reference. Specifies how TLS traffic is terminated. If empty, TLS termination is disabled.
	ServerTLSPolicy *string `json:"serverTlsPolicy,omitempty" tf:"server_tls_policy,omitempty"`

	// The relative resource name identifying the subnetwork in which this SWG is allocated.
	// For example: projects/*/regions/us-central1/subnetworks/network-1.
	// Currently, this field is specific to gateways of type 'SECURE_WEB_GATEWAY'.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta2.Subnetwork
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	Subnetwork *string `json:"subnetwork,omitempty" tf:"subnetwork,omitempty"`

	// Reference to a Subnetwork in compute to populate subnetwork.
	// +kubebuilder:validation:Optional
	SubnetworkRef *v1.Reference `json:"subnetworkRef,omitempty" tf:"-"`

	// Selector for a Subnetwork in compute to populate subnetwork.
	// +kubebuilder:validation:Optional
	SubnetworkSelector *v1.Selector `json:"subnetworkSelector,omitempty" tf:"-"`

	// Immutable. The type of the customer managed gateway.
	// Possible values are: OPEN_MESH, SECURE_WEB_GATEWAY.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type GatewayObservation struct {

	// Zero or one IPv4 or IPv6 address on which the Gateway will receive the traffic.
	// When no address is provided, an IP from the subnetwork is allocated.
	// This field only applies to gateways of type 'SECURE_WEB_GATEWAY'.
	// Gateways of type 'OPEN_MESH' listen on 0.0.0.0 for IPv4 and :: for IPv6.
	Addresses []*string `json:"addresses,omitempty" tf:"addresses,omitempty"`

	// A fully-qualified Certificates URL reference. The proxy presents a Certificate (selected based on SNI) when establishing a TLS connection.
	// This feature only applies to gateways of type 'SECURE_WEB_GATEWAY'.
	CertificateUrls []*string `json:"certificateUrls,omitempty" tf:"certificate_urls,omitempty"`

	// The timestamp when the resource was created.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// When deleting a gateway of type 'SECURE_WEB_GATEWAY', this boolean option will also delete auto generated router by the gateway creation.
	// If there is no other gateway of type 'SECURE_WEB_GATEWAY' remaining for that region and network it will be deleted.
	DeleteSwgAutogenRouterOnDestroy *bool `json:"deleteSwgAutogenRouterOnDestroy,omitempty" tf:"delete_swg_autogen_router_on_destroy,omitempty"`

	// A free-text description of the resource. Max length 1024 characters.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// for all of the labels present on the resource.
	// +mapType=granular
	EffectiveLabels map[string]*string `json:"effectiveLabels,omitempty" tf:"effective_labels,omitempty"`

	// Determines if envoy will insert internal debug headers into upstream requests.
	// Other Envoy headers may still be injected.
	// By default, envoy will not insert any debug headers.
	// Possible values are: NONE, DEBUG_HEADERS.
	EnvoyHeaders *string `json:"envoyHeaders,omitempty" tf:"envoy_headers,omitempty"`

	// A fully-qualified GatewaySecurityPolicy URL reference. Defines how a server should apply security policy to inbound (VM to Proxy) initiated connections.
	// For example: 'projects//locations//gatewaySecurityPolicies/swg-policy'.
	// This policy is specific to gateways of type 'SECURE_WEB_GATEWAY'.
	GatewaySecurityPolicy *string `json:"gatewaySecurityPolicy,omitempty" tf:"gateway_security_policy,omitempty"`

	// an identifier for the resource with format projects/{{project}}/locations/{{location}}/gateways/{{name}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The IP Version that will be used by this gateway.
	// Possible values are: IPV4, IPV6.
	IPVersion *string `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// Set of label tags associated with the Gateway resource.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The location of the gateway.
	// The default value is global.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// The relative resource name identifying the VPC network that is using this configuration.
	// For example: 'projects/*/global/networks/network-1'.
	// Currently, this field is specific to gateways of type 'SECURE_WEB_GATEWAY'.
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// One or more port numbers (1-65535), on which the Gateway will receive traffic.
	// The proxy binds to the specified ports. Gateways of type 'SECURE_WEB_GATEWAY' are limited to 1 port.
	// Gateways of type 'OPEN_MESH' listen on 0.0.0.0 for IPv4 and :: for IPv6 and support multiple ports.
	Ports []*float64 `json:"ports,omitempty" tf:"ports,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The routing mode of the Gateway. This field is configurable only for gateways of type SECURE_WEB_GATEWAY. This field is required for gateways of type SECURE_WEB_GATEWAY.
	// Possible values are: NEXT_HOP_ROUTING_MODE.
	RoutingMode *string `json:"routingMode,omitempty" tf:"routing_mode,omitempty"`

	// Immutable. Scope determines how configuration across multiple Gateway instances are merged.
	// The configuration for multiple Gateway instances with the same scope will be merged as presented as a single coniguration to the proxy/load balancer.
	// Max length 64 characters. Scope should start with a letter and can only have letters, numbers, hyphens.
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// Server-defined URL of this resource.
	SelfLink *string `json:"selfLink,omitempty" tf:"self_link,omitempty"`

	// A fully-qualified ServerTLSPolicy URL reference. Specifies how TLS traffic is terminated. If empty, TLS termination is disabled.
	ServerTLSPolicy *string `json:"serverTlsPolicy,omitempty" tf:"server_tls_policy,omitempty"`

	// The relative resource name identifying the subnetwork in which this SWG is allocated.
	// For example: projects/*/regions/us-central1/subnetworks/network-1.
	// Currently, this field is specific to gateways of type 'SECURE_WEB_GATEWAY'.
	Subnetwork *string `json:"subnetwork,omitempty" tf:"subnetwork,omitempty"`

	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	// +mapType=granular
	TerraformLabels map[string]*string `json:"terraformLabels,omitempty" tf:"terraform_labels,omitempty"`

	// Immutable. The type of the customer managed gateway.
	// Possible values are: OPEN_MESH, SECURE_WEB_GATEWAY.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The timestamp when the resource was updated.
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type GatewayParameters struct {

	// Zero or one IPv4 or IPv6 address on which the Gateway will receive the traffic.
	// When no address is provided, an IP from the subnetwork is allocated.
	// This field only applies to gateways of type 'SECURE_WEB_GATEWAY'.
	// Gateways of type 'OPEN_MESH' listen on 0.0.0.0 for IPv4 and :: for IPv6.
	// +kubebuilder:validation:Optional
	Addresses []*string `json:"addresses,omitempty" tf:"addresses,omitempty"`

	// A fully-qualified Certificates URL reference. The proxy presents a Certificate (selected based on SNI) when establishing a TLS connection.
	// This feature only applies to gateways of type 'SECURE_WEB_GATEWAY'.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/certificatemanager/v1beta2.Certificate
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	CertificateUrls []*string `json:"certificateUrls,omitempty" tf:"certificate_urls,omitempty"`

	// References to Certificate in certificatemanager to populate certificateUrls.
	// +kubebuilder:validation:Optional
	CertificateUrlsRefs []v1.Reference `json:"certificateUrlsRefs,omitempty" tf:"-"`

	// Selector for a list of Certificate in certificatemanager to populate certificateUrls.
	// +kubebuilder:validation:Optional
	CertificateUrlsSelector *v1.Selector `json:"certificateUrlsSelector,omitempty" tf:"-"`

	// When deleting a gateway of type 'SECURE_WEB_GATEWAY', this boolean option will also delete auto generated router by the gateway creation.
	// If there is no other gateway of type 'SECURE_WEB_GATEWAY' remaining for that region and network it will be deleted.
	// +kubebuilder:validation:Optional
	DeleteSwgAutogenRouterOnDestroy *bool `json:"deleteSwgAutogenRouterOnDestroy,omitempty" tf:"delete_swg_autogen_router_on_destroy,omitempty"`

	// A free-text description of the resource. Max length 1024 characters.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Determines if envoy will insert internal debug headers into upstream requests.
	// Other Envoy headers may still be injected.
	// By default, envoy will not insert any debug headers.
	// Possible values are: NONE, DEBUG_HEADERS.
	// +kubebuilder:validation:Optional
	EnvoyHeaders *string `json:"envoyHeaders,omitempty" tf:"envoy_headers,omitempty"`

	// A fully-qualified GatewaySecurityPolicy URL reference. Defines how a server should apply security policy to inbound (VM to Proxy) initiated connections.
	// For example: 'projects//locations//gatewaySecurityPolicies/swg-policy'.
	// This policy is specific to gateways of type 'SECURE_WEB_GATEWAY'.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/networksecurity/v1beta1.GatewaySecurityPolicy
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	GatewaySecurityPolicy *string `json:"gatewaySecurityPolicy,omitempty" tf:"gateway_security_policy,omitempty"`

	// Reference to a GatewaySecurityPolicy in networksecurity to populate gatewaySecurityPolicy.
	// +kubebuilder:validation:Optional
	GatewaySecurityPolicyRef *v1.Reference `json:"gatewaySecurityPolicyRef,omitempty" tf:"-"`

	// Selector for a GatewaySecurityPolicy in networksecurity to populate gatewaySecurityPolicy.
	// +kubebuilder:validation:Optional
	GatewaySecurityPolicySelector *v1.Selector `json:"gatewaySecurityPolicySelector,omitempty" tf:"-"`

	// The IP Version that will be used by this gateway.
	// Possible values are: IPV4, IPV6.
	// +kubebuilder:validation:Optional
	IPVersion *string `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// Set of label tags associated with the Gateway resource.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The location of the gateway.
	// The default value is global.
	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// The relative resource name identifying the VPC network that is using this configuration.
	// For example: 'projects/*/global/networks/network-1'.
	// Currently, this field is specific to gateways of type 'SECURE_WEB_GATEWAY'.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.Network
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// Reference to a Network in compute to populate network.
	// +kubebuilder:validation:Optional
	NetworkRef *v1.Reference `json:"networkRef,omitempty" tf:"-"`

	// Selector for a Network in compute to populate network.
	// +kubebuilder:validation:Optional
	NetworkSelector *v1.Selector `json:"networkSelector,omitempty" tf:"-"`

	// One or more port numbers (1-65535), on which the Gateway will receive traffic.
	// The proxy binds to the specified ports. Gateways of type 'SECURE_WEB_GATEWAY' are limited to 1 port.
	// Gateways of type 'OPEN_MESH' listen on 0.0.0.0 for IPv4 and :: for IPv6 and support multiple ports.
	// +kubebuilder:validation:Optional
	Ports []*float64 `json:"ports,omitempty" tf:"ports,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The routing mode of the Gateway. This field is configurable only for gateways of type SECURE_WEB_GATEWAY. This field is required for gateways of type SECURE_WEB_GATEWAY.
	// Possible values are: NEXT_HOP_ROUTING_MODE.
	// +kubebuilder:validation:Optional
	RoutingMode *string `json:"routingMode,omitempty" tf:"routing_mode,omitempty"`

	// Immutable. Scope determines how configuration across multiple Gateway instances are merged.
	// The configuration for multiple Gateway instances with the same scope will be merged as presented as a single coniguration to the proxy/load balancer.
	// Max length 64 characters. Scope should start with a letter and can only have letters, numbers, hyphens.
	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// A fully-qualified ServerTLSPolicy URL reference. Specifies how TLS traffic is terminated. If empty, TLS termination is disabled.
	// +kubebuilder:validation:Optional
	ServerTLSPolicy *string `json:"serverTlsPolicy,omitempty" tf:"server_tls_policy,omitempty"`

	// The relative resource name identifying the subnetwork in which this SWG is allocated.
	// For example: projects/*/regions/us-central1/subnetworks/network-1.
	// Currently, this field is specific to gateways of type 'SECURE_WEB_GATEWAY'.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta2.Subnetwork
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	Subnetwork *string `json:"subnetwork,omitempty" tf:"subnetwork,omitempty"`

	// Reference to a Subnetwork in compute to populate subnetwork.
	// +kubebuilder:validation:Optional
	SubnetworkRef *v1.Reference `json:"subnetworkRef,omitempty" tf:"-"`

	// Selector for a Subnetwork in compute to populate subnetwork.
	// +kubebuilder:validation:Optional
	SubnetworkSelector *v1.Selector `json:"subnetworkSelector,omitempty" tf:"-"`

	// Immutable. The type of the customer managed gateway.
	// Possible values are: OPEN_MESH, SECURE_WEB_GATEWAY.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// GatewaySpec defines the desired state of Gateway
type GatewaySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GatewayParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GatewayInitParameters `json:"initProvider,omitempty"`
}

// GatewayStatus defines the observed state of Gateway.
type GatewayStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GatewayObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Gateway is the Schema for the Gateways API. Gateway represents the configuration for a proxy, typically a load balancer.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type Gateway struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ports) || (has(self.initProvider) && has(self.initProvider.ports))",message="spec.forProvider.ports is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   GatewaySpec   `json:"spec"`
	Status GatewayStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayList contains a list of Gateways
type GatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Gateway `json:"items"`
}

// Repository type metadata.
var (
	Gateway_Kind             = "Gateway"
	Gateway_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Gateway_Kind}.String()
	Gateway_KindAPIVersion   = Gateway_Kind + "." + CRDGroupVersion.String()
	Gateway_GroupVersionKind = CRDGroupVersion.WithKind(Gateway_Kind)
)

func init() {
	SchemeBuilder.Register(&Gateway{}, &GatewayList{})
}
