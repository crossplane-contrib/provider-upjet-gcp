// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AofConfigInitParameters struct {

	// Optional. Available fsync modes.
	AppendFsync *string `json:"appendFsync,omitempty" tf:"append_fsync,omitempty"`
}

type AofConfigObservation struct {

	// Optional. Available fsync modes.
	AppendFsync *string `json:"appendFsync,omitempty" tf:"append_fsync,omitempty"`
}

type AofConfigParameters struct {

	// Optional. Available fsync modes.
	// +kubebuilder:validation:Optional
	AppendFsync *string `json:"appendFsync,omitempty" tf:"append_fsync,omitempty"`
}

type AutomatedBackupConfigInitParameters struct {

	// Trigger automated backups at a fixed frequency.
	// Structure is documented below.
	FixedFrequencySchedule *FixedFrequencyScheduleInitParameters `json:"fixedFrequencySchedule,omitempty" tf:"fixed_frequency_schedule,omitempty"`

	// How long to keep automated backups before the backups are deleted.
	// The value should be between 1 day and 365 days. If not specified, the default value is 35 days.
	// A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
	Retention *string `json:"retention,omitempty" tf:"retention,omitempty"`
}

type AutomatedBackupConfigObservation struct {

	// Trigger automated backups at a fixed frequency.
	// Structure is documented below.
	FixedFrequencySchedule *FixedFrequencyScheduleObservation `json:"fixedFrequencySchedule,omitempty" tf:"fixed_frequency_schedule,omitempty"`

	// How long to keep automated backups before the backups are deleted.
	// The value should be between 1 day and 365 days. If not specified, the default value is 35 days.
	// A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
	Retention *string `json:"retention,omitempty" tf:"retention,omitempty"`
}

type AutomatedBackupConfigParameters struct {

	// Trigger automated backups at a fixed frequency.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	FixedFrequencySchedule *FixedFrequencyScheduleParameters `json:"fixedFrequencySchedule" tf:"fixed_frequency_schedule,omitempty"`

	// How long to keep automated backups before the backups are deleted.
	// The value should be between 1 day and 365 days. If not specified, the default value is 35 days.
	// A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
	// +kubebuilder:validation:Optional
	Retention *string `json:"retention" tf:"retention,omitempty"`
}

type CACertsInitParameters struct {
}

type CACertsObservation struct {

	// (Output)
	// The certificates that form the CA chain, from leaf to root order
	Certificates []*string `json:"certificates,omitempty" tf:"certificates,omitempty"`
}

type CACertsParameters struct {
}

type ClusterInitParameters struct {

	// Optional. The authorization mode of the Redis cluster. If not provided, auth feature is disabled for the cluster.
	// Default value is AUTH_MODE_DISABLED.
	// Possible values are: AUTH_MODE_UNSPECIFIED, AUTH_MODE_IAM_AUTH, AUTH_MODE_DISABLED.
	AuthorizationMode *string `json:"authorizationMode,omitempty" tf:"authorization_mode,omitempty"`

	// The automated backup config for a instance.
	// Structure is documented below.
	AutomatedBackupConfig *AutomatedBackupConfigInitParameters `json:"automatedBackupConfig,omitempty" tf:"automated_backup_config,omitempty"`

	// field to the configuration file to match the latest value in the state.
	CrossClusterReplicationConfig *CrossClusterReplicationConfigInitParameters `json:"crossClusterReplicationConfig,omitempty" tf:"cross_cluster_replication_config,omitempty"`

	// Optional. Indicates if the cluster is deletion protected or not.
	// If the value if set to true, any delete cluster operation will fail.
	// Default value is true.
	DeletionProtectionEnabled *bool `json:"deletionProtectionEnabled,omitempty" tf:"deletion_protection_enabled,omitempty"`

	// Backups stored in Cloud Storage buckets. The Cloud Storage buckets need to be the same region as the clusters.
	// Structure is documented below.
	GcsSource *GcsSourceInitParameters `json:"gcsSource,omitempty" tf:"gcs_source,omitempty"`

	// The KMS key used to encrypt the at-rest data of the cluster.
	KMSKey *string `json:"kmsKey,omitempty" tf:"kms_key,omitempty"`

	// Maintenance policy for a cluster
	// Structure is documented below.
	MaintenancePolicy *ClusterMaintenancePolicyInitParameters `json:"maintenancePolicy,omitempty" tf:"maintenance_policy,omitempty"`

	// Backups that generated and managed by memorystore.
	// Structure is documented below.
	ManagedBackupSource *ManagedBackupSourceInitParameters `json:"managedBackupSource,omitempty" tf:"managed_backup_source,omitempty"`

	// The nodeType for the Redis cluster.
	// If not provided, REDIS_HIGHMEM_MEDIUM will be used as default
	// Possible values are: REDIS_SHARED_CORE_NANO, REDIS_HIGHMEM_MEDIUM, REDIS_HIGHMEM_XLARGE, REDIS_STANDARD_SMALL.
	NodeType *string `json:"nodeType,omitempty" tf:"node_type,omitempty"`

	// Persistence config (RDB, AOF) for the cluster.
	// Structure is documented below.
	PersistenceConfig *ClusterPersistenceConfigInitParameters `json:"persistenceConfig,omitempty" tf:"persistence_config,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Required. Each PscConfig configures the consumer network where two
	// network addresses will be designated to the cluster for client access.
	// Currently, only one PscConfig is supported.
	// Structure is documented below.
	PscConfigs []PscConfigsInitParameters `json:"pscConfigs,omitempty" tf:"psc_configs,omitempty"`

	// Configure Redis Cluster behavior using a subset of native Redis configuration parameters.
	// Please check Memorystore documentation for the list of supported parameters:
	// https://cloud.google.com/memorystore/docs/cluster/supported-instance-configurations
	// +mapType=granular
	RedisConfigs map[string]*string `json:"redisConfigs,omitempty" tf:"redis_configs,omitempty"`

	// Optional. The number of replica nodes per shard.
	ReplicaCount *float64 `json:"replicaCount,omitempty" tf:"replica_count,omitempty"`

	// Required. Number of shards for the Redis cluster.
	ShardCount *float64 `json:"shardCount,omitempty" tf:"shard_count,omitempty"`

	// Optional. The in-transit encryption for the Redis cluster.
	// If not provided, encryption is disabled for the cluster.
	// Default value is TRANSIT_ENCRYPTION_MODE_DISABLED.
	// Possible values are: TRANSIT_ENCRYPTION_MODE_UNSPECIFIED, TRANSIT_ENCRYPTION_MODE_DISABLED, TRANSIT_ENCRYPTION_MODE_SERVER_AUTHENTICATION.
	TransitEncryptionMode *string `json:"transitEncryptionMode,omitempty" tf:"transit_encryption_mode,omitempty"`

	// Immutable. Zone distribution config for Memorystore Redis cluster.
	// Structure is documented below.
	ZoneDistributionConfig *ZoneDistributionConfigInitParameters `json:"zoneDistributionConfig,omitempty" tf:"zone_distribution_config,omitempty"`
}

type ClusterMaintenancePolicyInitParameters struct {

	// Optional. Maintenance window that is applied to resources covered by this policy.
	// Minimum 1. For the current version, the maximum number
	// of weekly_window is expected to be one.
	// Structure is documented below.
	WeeklyMaintenanceWindow []MaintenancePolicyWeeklyMaintenanceWindowInitParameters `json:"weeklyMaintenanceWindow,omitempty" tf:"weekly_maintenance_window,omitempty"`
}

type ClusterMaintenancePolicyObservation struct {

	// (Output)
	// Output only. The time when the policy was created.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
	// resolution and up to nine fractional digits.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// (Output)
	// Output only. The time when the policy was last updated.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
	// resolution and up to nine fractional digits.
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`

	// Optional. Maintenance window that is applied to resources covered by this policy.
	// Minimum 1. For the current version, the maximum number
	// of weekly_window is expected to be one.
	// Structure is documented below.
	WeeklyMaintenanceWindow []MaintenancePolicyWeeklyMaintenanceWindowObservation `json:"weeklyMaintenanceWindow,omitempty" tf:"weekly_maintenance_window,omitempty"`
}

type ClusterMaintenancePolicyParameters struct {

	// Optional. Maintenance window that is applied to resources covered by this policy.
	// Minimum 1. For the current version, the maximum number
	// of weekly_window is expected to be one.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	WeeklyMaintenanceWindow []MaintenancePolicyWeeklyMaintenanceWindowParameters `json:"weeklyMaintenanceWindow,omitempty" tf:"weekly_maintenance_window,omitempty"`
}

type ClusterMaintenanceScheduleInitParameters struct {
}

type ClusterMaintenanceScheduleObservation struct {

	// (Output)
	// Output only. The end time of any upcoming scheduled maintenance for this cluster.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
	// resolution and up to nine fractional digits.
	EndTime *string `json:"endTime,omitempty" tf:"end_time,omitempty"`

	// (Output)
	// Output only. The deadline that the maintenance schedule start time
	// can not go beyond, including reschedule.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
	// resolution and up to nine fractional digits.
	ScheduleDeadlineTime *string `json:"scheduleDeadlineTime,omitempty" tf:"schedule_deadline_time,omitempty"`

	// (Output)
	// Output only. The start time of any upcoming scheduled maintenance for this cluster.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
	// resolution and up to nine fractional digits.
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`
}

type ClusterMaintenanceScheduleParameters struct {
}

type ClusterObservation struct {

	// Optional. The authorization mode of the Redis cluster. If not provided, auth feature is disabled for the cluster.
	// Default value is AUTH_MODE_DISABLED.
	// Possible values are: AUTH_MODE_UNSPECIFIED, AUTH_MODE_IAM_AUTH, AUTH_MODE_DISABLED.
	AuthorizationMode *string `json:"authorizationMode,omitempty" tf:"authorization_mode,omitempty"`

	// The automated backup config for a instance.
	// Structure is documented below.
	AutomatedBackupConfig *AutomatedBackupConfigObservation `json:"automatedBackupConfig,omitempty" tf:"automated_backup_config,omitempty"`

	// The backup collection full resource name.
	// Example: projects/{project}/locations/{location}/backupCollections/{collection}
	BackupCollection *string `json:"backupCollection,omitempty" tf:"backup_collection,omitempty"`

	// The timestamp associated with the cluster creation request. A timestamp in
	// RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional
	// digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// field to the configuration file to match the latest value in the state.
	CrossClusterReplicationConfig *CrossClusterReplicationConfigObservation `json:"crossClusterReplicationConfig,omitempty" tf:"cross_cluster_replication_config,omitempty"`

	// Optional. Indicates if the cluster is deletion protected or not.
	// If the value if set to true, any delete cluster operation will fail.
	// Default value is true.
	DeletionProtectionEnabled *bool `json:"deletionProtectionEnabled,omitempty" tf:"deletion_protection_enabled,omitempty"`

	// Output only. Endpoints created on each given network,
	// for Redis clients to connect to the cluster.
	// Currently only one endpoint is supported.
	// Structure is documented below.
	DiscoveryEndpoints []DiscoveryEndpointsObservation `json:"discoveryEndpoints,omitempty" tf:"discovery_endpoints,omitempty"`

	// Backups stored in Cloud Storage buckets. The Cloud Storage buckets need to be the same region as the clusters.
	// Structure is documented below.
	GcsSource *GcsSourceObservation `json:"gcsSource,omitempty" tf:"gcs_source,omitempty"`

	// an identifier for the resource with format projects/{{project}}/locations/{{region}}/clusters/{{name}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The KMS key used to encrypt the at-rest data of the cluster.
	KMSKey *string `json:"kmsKey,omitempty" tf:"kms_key,omitempty"`

	// Maintenance policy for a cluster
	// Structure is documented below.
	MaintenancePolicy *ClusterMaintenancePolicyObservation `json:"maintenancePolicy,omitempty" tf:"maintenance_policy,omitempty"`

	// Upcoming maintenance schedule.
	// Structure is documented below.
	MaintenanceSchedule []ClusterMaintenanceScheduleObservation `json:"maintenanceSchedule,omitempty" tf:"maintenance_schedule,omitempty"`

	// Backups that generated and managed by memorystore.
	// Structure is documented below.
	ManagedBackupSource *ManagedBackupSourceObservation `json:"managedBackupSource,omitempty" tf:"managed_backup_source,omitempty"`

	// Cluster's Certificate Authority. This field will only be populated if Redis Cluster's transit_encryption_mode is TRANSIT_ENCRYPTION_MODE_SERVER_AUTHENTICATION
	// Structure is documented below.
	ManagedServerCA []ManagedServerCAObservation `json:"managedServerCa,omitempty" tf:"managed_server_ca,omitempty"`

	// The nodeType for the Redis cluster.
	// If not provided, REDIS_HIGHMEM_MEDIUM will be used as default
	// Possible values are: REDIS_SHARED_CORE_NANO, REDIS_HIGHMEM_MEDIUM, REDIS_HIGHMEM_XLARGE, REDIS_STANDARD_SMALL.
	NodeType *string `json:"nodeType,omitempty" tf:"node_type,omitempty"`

	// Persistence config (RDB, AOF) for the cluster.
	// Structure is documented below.
	PersistenceConfig *ClusterPersistenceConfigObservation `json:"persistenceConfig,omitempty" tf:"persistence_config,omitempty"`

	// Output only. Redis memory precise size in GB for the entire cluster.
	PreciseSizeGb *float64 `json:"preciseSizeGb,omitempty" tf:"precise_size_gb,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Required. Each PscConfig configures the consumer network where two
	// network addresses will be designated to the cluster for client access.
	// Currently, only one PscConfig is supported.
	// Structure is documented below.
	PscConfigs []PscConfigsObservation `json:"pscConfigs,omitempty" tf:"psc_configs,omitempty"`

	// Output only. PSC connections for discovery of the cluster topology and accessing the cluster.
	// Structure is documented below.
	PscConnections []PscConnectionsObservation `json:"pscConnections,omitempty" tf:"psc_connections,omitempty"`

	// Service attachment details to configure Psc connections.
	// Structure is documented below.
	PscServiceAttachments []PscServiceAttachmentsObservation `json:"pscServiceAttachments,omitempty" tf:"psc_service_attachments,omitempty"`

	// Configure Redis Cluster behavior using a subset of native Redis configuration parameters.
	// Please check Memorystore documentation for the list of supported parameters:
	// https://cloud.google.com/memorystore/docs/cluster/supported-instance-configurations
	// +mapType=granular
	RedisConfigs map[string]*string `json:"redisConfigs,omitempty" tf:"redis_configs,omitempty"`

	// The name of the region of the Redis cluster.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Optional. The number of replica nodes per shard.
	ReplicaCount *float64 `json:"replicaCount,omitempty" tf:"replica_count,omitempty"`

	// Required. Number of shards for the Redis cluster.
	ShardCount *float64 `json:"shardCount,omitempty" tf:"shard_count,omitempty"`

	// Output only. Redis memory size in GB for the entire cluster.
	SizeGb *float64 `json:"sizeGb,omitempty" tf:"size_gb,omitempty"`

	// The current state of this cluster. Can be CREATING, READY, UPDATING, DELETING and SUSPENDED
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// Output only. Additional information about the current state of the cluster.
	// Structure is documented below.
	StateInfo []StateInfoObservation `json:"stateInfo,omitempty" tf:"state_info,omitempty"`

	// Optional. The in-transit encryption for the Redis cluster.
	// If not provided, encryption is disabled for the cluster.
	// Default value is TRANSIT_ENCRYPTION_MODE_DISABLED.
	// Possible values are: TRANSIT_ENCRYPTION_MODE_UNSPECIFIED, TRANSIT_ENCRYPTION_MODE_DISABLED, TRANSIT_ENCRYPTION_MODE_SERVER_AUTHENTICATION.
	TransitEncryptionMode *string `json:"transitEncryptionMode,omitempty" tf:"transit_encryption_mode,omitempty"`

	// System assigned, unique identifier for the cluster.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`

	// Immutable. Zone distribution config for Memorystore Redis cluster.
	// Structure is documented below.
	ZoneDistributionConfig *ZoneDistributionConfigObservation `json:"zoneDistributionConfig,omitempty" tf:"zone_distribution_config,omitempty"`
}

type ClusterParameters struct {

	// Optional. The authorization mode of the Redis cluster. If not provided, auth feature is disabled for the cluster.
	// Default value is AUTH_MODE_DISABLED.
	// Possible values are: AUTH_MODE_UNSPECIFIED, AUTH_MODE_IAM_AUTH, AUTH_MODE_DISABLED.
	// +kubebuilder:validation:Optional
	AuthorizationMode *string `json:"authorizationMode,omitempty" tf:"authorization_mode,omitempty"`

	// The automated backup config for a instance.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	AutomatedBackupConfig *AutomatedBackupConfigParameters `json:"automatedBackupConfig,omitempty" tf:"automated_backup_config,omitempty"`

	// field to the configuration file to match the latest value in the state.
	// +kubebuilder:validation:Optional
	CrossClusterReplicationConfig *CrossClusterReplicationConfigParameters `json:"crossClusterReplicationConfig,omitempty" tf:"cross_cluster_replication_config,omitempty"`

	// Optional. Indicates if the cluster is deletion protected or not.
	// If the value if set to true, any delete cluster operation will fail.
	// Default value is true.
	// +kubebuilder:validation:Optional
	DeletionProtectionEnabled *bool `json:"deletionProtectionEnabled,omitempty" tf:"deletion_protection_enabled,omitempty"`

	// Backups stored in Cloud Storage buckets. The Cloud Storage buckets need to be the same region as the clusters.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	GcsSource *GcsSourceParameters `json:"gcsSource,omitempty" tf:"gcs_source,omitempty"`

	// The KMS key used to encrypt the at-rest data of the cluster.
	// +kubebuilder:validation:Optional
	KMSKey *string `json:"kmsKey,omitempty" tf:"kms_key,omitempty"`

	// Maintenance policy for a cluster
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	MaintenancePolicy *ClusterMaintenancePolicyParameters `json:"maintenancePolicy,omitempty" tf:"maintenance_policy,omitempty"`

	// Backups that generated and managed by memorystore.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	ManagedBackupSource *ManagedBackupSourceParameters `json:"managedBackupSource,omitempty" tf:"managed_backup_source,omitempty"`

	// The nodeType for the Redis cluster.
	// If not provided, REDIS_HIGHMEM_MEDIUM will be used as default
	// Possible values are: REDIS_SHARED_CORE_NANO, REDIS_HIGHMEM_MEDIUM, REDIS_HIGHMEM_XLARGE, REDIS_STANDARD_SMALL.
	// +kubebuilder:validation:Optional
	NodeType *string `json:"nodeType,omitempty" tf:"node_type,omitempty"`

	// Persistence config (RDB, AOF) for the cluster.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	PersistenceConfig *ClusterPersistenceConfigParameters `json:"persistenceConfig,omitempty" tf:"persistence_config,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Required. Each PscConfig configures the consumer network where two
	// network addresses will be designated to the cluster for client access.
	// Currently, only one PscConfig is supported.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	PscConfigs []PscConfigsParameters `json:"pscConfigs,omitempty" tf:"psc_configs,omitempty"`

	// Configure Redis Cluster behavior using a subset of native Redis configuration parameters.
	// Please check Memorystore documentation for the list of supported parameters:
	// https://cloud.google.com/memorystore/docs/cluster/supported-instance-configurations
	// +kubebuilder:validation:Optional
	// +mapType=granular
	RedisConfigs map[string]*string `json:"redisConfigs,omitempty" tf:"redis_configs,omitempty"`

	// The name of the region of the Redis cluster.
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`

	// Optional. The number of replica nodes per shard.
	// +kubebuilder:validation:Optional
	ReplicaCount *float64 `json:"replicaCount,omitempty" tf:"replica_count,omitempty"`

	// Required. Number of shards for the Redis cluster.
	// +kubebuilder:validation:Optional
	ShardCount *float64 `json:"shardCount,omitempty" tf:"shard_count,omitempty"`

	// Optional. The in-transit encryption for the Redis cluster.
	// If not provided, encryption is disabled for the cluster.
	// Default value is TRANSIT_ENCRYPTION_MODE_DISABLED.
	// Possible values are: TRANSIT_ENCRYPTION_MODE_UNSPECIFIED, TRANSIT_ENCRYPTION_MODE_DISABLED, TRANSIT_ENCRYPTION_MODE_SERVER_AUTHENTICATION.
	// +kubebuilder:validation:Optional
	TransitEncryptionMode *string `json:"transitEncryptionMode,omitempty" tf:"transit_encryption_mode,omitempty"`

	// Immutable. Zone distribution config for Memorystore Redis cluster.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	ZoneDistributionConfig *ZoneDistributionConfigParameters `json:"zoneDistributionConfig,omitempty" tf:"zone_distribution_config,omitempty"`
}

type ClusterPersistenceConfigInitParameters struct {

	// AOF configuration. This field will be ignored if mode is not AOF.
	// Structure is documented below.
	AofConfig *AofConfigInitParameters `json:"aofConfig,omitempty" tf:"aof_config,omitempty"`

	// Optional. Controls whether Persistence features are enabled. If not provided, the existing value will be used.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// RDB configuration. This field will be ignored if mode is not RDB.
	// Structure is documented below.
	RdbConfig *RdbConfigInitParameters `json:"rdbConfig,omitempty" tf:"rdb_config,omitempty"`
}

type ClusterPersistenceConfigObservation struct {

	// AOF configuration. This field will be ignored if mode is not AOF.
	// Structure is documented below.
	AofConfig *AofConfigObservation `json:"aofConfig,omitempty" tf:"aof_config,omitempty"`

	// Optional. Controls whether Persistence features are enabled. If not provided, the existing value will be used.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// RDB configuration. This field will be ignored if mode is not RDB.
	// Structure is documented below.
	RdbConfig *RdbConfigObservation `json:"rdbConfig,omitempty" tf:"rdb_config,omitempty"`
}

type ClusterPersistenceConfigParameters struct {

	// AOF configuration. This field will be ignored if mode is not AOF.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	AofConfig *AofConfigParameters `json:"aofConfig,omitempty" tf:"aof_config,omitempty"`

	// Optional. Controls whether Persistence features are enabled. If not provided, the existing value will be used.
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// RDB configuration. This field will be ignored if mode is not RDB.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	RdbConfig *RdbConfigParameters `json:"rdbConfig,omitempty" tf:"rdb_config,omitempty"`
}

type CrossClusterReplicationConfigInitParameters struct {

	// from SECONDARY to PRIMARY.
	ClusterRole *string `json:"clusterRole,omitempty" tf:"cluster_role,omitempty"`

	// field.
	PrimaryCluster *CrossClusterReplicationConfigPrimaryClusterInitParameters `json:"primaryCluster,omitempty" tf:"primary_cluster,omitempty"`

	// list with the new secondaries. The new secondaries are the current primary and other secondary clusters(if any).
	SecondaryClusters []CrossClusterReplicationConfigSecondaryClustersInitParameters `json:"secondaryClusters,omitempty" tf:"secondary_clusters,omitempty"`
}

type CrossClusterReplicationConfigObservation struct {

	// from SECONDARY to PRIMARY.
	ClusterRole *string `json:"clusterRole,omitempty" tf:"cluster_role,omitempty"`

	// (Output)
	// An output only view of all the member clusters participating in cross cluster replication. This field is populated for all the member clusters irrespective of their cluster role.
	// Structure is documented below.
	Membership []MembershipObservation `json:"membership,omitempty" tf:"membership,omitempty"`

	// field.
	PrimaryCluster *CrossClusterReplicationConfigPrimaryClusterObservation `json:"primaryCluster,omitempty" tf:"primary_cluster,omitempty"`

	// list with the new secondaries. The new secondaries are the current primary and other secondary clusters(if any).
	SecondaryClusters []CrossClusterReplicationConfigSecondaryClustersObservation `json:"secondaryClusters,omitempty" tf:"secondary_clusters,omitempty"`

	// (Output)
	// The last time cross cluster replication config was updated.
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type CrossClusterReplicationConfigParameters struct {

	// from SECONDARY to PRIMARY.
	// +kubebuilder:validation:Optional
	ClusterRole *string `json:"clusterRole,omitempty" tf:"cluster_role,omitempty"`

	// field.
	// +kubebuilder:validation:Optional
	PrimaryCluster *CrossClusterReplicationConfigPrimaryClusterParameters `json:"primaryCluster,omitempty" tf:"primary_cluster,omitempty"`

	// list with the new secondaries. The new secondaries are the current primary and other secondary clusters(if any).
	// +kubebuilder:validation:Optional
	SecondaryClusters []CrossClusterReplicationConfigSecondaryClustersParameters `json:"secondaryClusters,omitempty" tf:"secondary_clusters,omitempty"`
}

type CrossClusterReplicationConfigPrimaryClusterInitParameters struct {

	// The full resource path of the secondary cluster in the format: projects/{project}/locations/{region}/clusters/{cluster-id}
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/redis/v1beta1.Cluster
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	Cluster *string `json:"cluster,omitempty" tf:"cluster,omitempty"`

	// Reference to a Cluster in redis to populate cluster.
	// +kubebuilder:validation:Optional
	ClusterRef *v1.Reference `json:"clusterRef,omitempty" tf:"-"`

	// Selector for a Cluster in redis to populate cluster.
	// +kubebuilder:validation:Optional
	ClusterSelector *v1.Selector `json:"clusterSelector,omitempty" tf:"-"`
}

type CrossClusterReplicationConfigPrimaryClusterObservation struct {

	// The full resource path of the secondary cluster in the format: projects/{project}/locations/{region}/clusters/{cluster-id}
	Cluster *string `json:"cluster,omitempty" tf:"cluster,omitempty"`

	// System assigned, unique identifier for the cluster.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type CrossClusterReplicationConfigPrimaryClusterParameters struct {

	// The full resource path of the secondary cluster in the format: projects/{project}/locations/{region}/clusters/{cluster-id}
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/redis/v1beta1.Cluster
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	Cluster *string `json:"cluster,omitempty" tf:"cluster,omitempty"`

	// Reference to a Cluster in redis to populate cluster.
	// +kubebuilder:validation:Optional
	ClusterRef *v1.Reference `json:"clusterRef,omitempty" tf:"-"`

	// Selector for a Cluster in redis to populate cluster.
	// +kubebuilder:validation:Optional
	ClusterSelector *v1.Selector `json:"clusterSelector,omitempty" tf:"-"`
}

type CrossClusterReplicationConfigSecondaryClustersInitParameters struct {

	// The full resource path of the secondary cluster in the format: projects/{project}/locations/{region}/clusters/{cluster-id}
	Cluster *string `json:"cluster,omitempty" tf:"cluster,omitempty"`
}

type CrossClusterReplicationConfigSecondaryClustersObservation struct {

	// The full resource path of the secondary cluster in the format: projects/{project}/locations/{region}/clusters/{cluster-id}
	Cluster *string `json:"cluster,omitempty" tf:"cluster,omitempty"`

	// System assigned, unique identifier for the cluster.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type CrossClusterReplicationConfigSecondaryClustersParameters struct {

	// The full resource path of the secondary cluster in the format: projects/{project}/locations/{region}/clusters/{cluster-id}
	// +kubebuilder:validation:Optional
	Cluster *string `json:"cluster,omitempty" tf:"cluster,omitempty"`
}

type DiscoveryEndpointsInitParameters struct {
}

type DiscoveryEndpointsObservation struct {

	// Output only. Network address of the exposed Redis endpoint used by clients to connect to the service.
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// Output only. The port number of the exposed Redis endpoint.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Output only. Customer configuration for where the endpoint
	// is created and accessed from.
	// Structure is documented below.
	PscConfig *PscConfigObservation `json:"pscConfig,omitempty" tf:"psc_config,omitempty"`
}

type DiscoveryEndpointsParameters struct {
}

type FixedFrequencyScheduleInitParameters struct {

	// Required. Start time of the window in UTC time.
	// Structure is documented below.
	StartTime *FixedFrequencyScheduleStartTimeInitParameters `json:"startTime,omitempty" tf:"start_time,omitempty"`
}

type FixedFrequencyScheduleObservation struct {

	// Required. Start time of the window in UTC time.
	// Structure is documented below.
	StartTime *FixedFrequencyScheduleStartTimeObservation `json:"startTime,omitempty" tf:"start_time,omitempty"`
}

type FixedFrequencyScheduleParameters struct {

	// Required. Start time of the window in UTC time.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	StartTime *FixedFrequencyScheduleStartTimeParameters `json:"startTime" tf:"start_time,omitempty"`
}

type FixedFrequencyScheduleStartTimeInitParameters struct {

	// Hours of day in 24 hour format. Should be from 0 to 23.
	// An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	Hours *float64 `json:"hours,omitempty" tf:"hours,omitempty"`
}

type FixedFrequencyScheduleStartTimeObservation struct {

	// Hours of day in 24 hour format. Should be from 0 to 23.
	// An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	Hours *float64 `json:"hours,omitempty" tf:"hours,omitempty"`
}

type FixedFrequencyScheduleStartTimeParameters struct {

	// Hours of day in 24 hour format. Should be from 0 to 23.
	// An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	// +kubebuilder:validation:Optional
	Hours *float64 `json:"hours" tf:"hours,omitempty"`
}

type GcsSourceInitParameters struct {

	// URIs of the GCS objects to import. Example: gs://bucket1/object1, gs://bucket2/folder2/object2
	// +listType=set
	Uris []*string `json:"uris,omitempty" tf:"uris,omitempty"`
}

type GcsSourceObservation struct {

	// URIs of the GCS objects to import. Example: gs://bucket1/object1, gs://bucket2/folder2/object2
	// +listType=set
	Uris []*string `json:"uris,omitempty" tf:"uris,omitempty"`
}

type GcsSourceParameters struct {

	// URIs of the GCS objects to import. Example: gs://bucket1/object1, gs://bucket2/folder2/object2
	// +kubebuilder:validation:Optional
	// +listType=set
	Uris []*string `json:"uris" tf:"uris,omitempty"`
}

type MaintenancePolicyWeeklyMaintenanceWindowInitParameters struct {

	// Required. The day of week that maintenance updates occur.
	Day *string `json:"day,omitempty" tf:"day,omitempty"`

	// Required. Start time of the window in UTC time.
	// Structure is documented below.
	StartTime *WeeklyMaintenanceWindowStartTimeInitParameters `json:"startTime,omitempty" tf:"start_time,omitempty"`
}

type MaintenancePolicyWeeklyMaintenanceWindowObservation struct {

	// Required. The day of week that maintenance updates occur.
	Day *string `json:"day,omitempty" tf:"day,omitempty"`

	// (Output)
	// Output only. Duration of the maintenance window.
	// The current window is fixed at 1 hour.
	// A duration in seconds with up to nine fractional digits,
	// terminated by 's'. Example: "3.5s".
	Duration *string `json:"duration,omitempty" tf:"duration,omitempty"`

	// Required. Start time of the window in UTC time.
	// Structure is documented below.
	StartTime *WeeklyMaintenanceWindowStartTimeObservation `json:"startTime,omitempty" tf:"start_time,omitempty"`
}

type MaintenancePolicyWeeklyMaintenanceWindowParameters struct {

	// Required. The day of week that maintenance updates occur.
	// +kubebuilder:validation:Optional
	Day *string `json:"day" tf:"day,omitempty"`

	// Required. Start time of the window in UTC time.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	StartTime *WeeklyMaintenanceWindowStartTimeParameters `json:"startTime" tf:"start_time,omitempty"`
}

type ManagedBackupSourceInitParameters struct {

	// Example: projects/{project}/locations/{location}/backupCollections/{collection}/backups/{backup}.
	Backup *string `json:"backup,omitempty" tf:"backup,omitempty"`
}

type ManagedBackupSourceObservation struct {

	// Example: projects/{project}/locations/{location}/backupCollections/{collection}/backups/{backup}.
	Backup *string `json:"backup,omitempty" tf:"backup,omitempty"`
}

type ManagedBackupSourceParameters struct {

	// Example: projects/{project}/locations/{location}/backupCollections/{collection}/backups/{backup}.
	// +kubebuilder:validation:Optional
	Backup *string `json:"backup" tf:"backup,omitempty"`
}

type ManagedServerCAInitParameters struct {
}

type ManagedServerCAObservation struct {

	// (Output)
	// The PEM encoded CA certificate chains for redis managed server authentication
	// Structure is documented below.
	CACerts []CACertsObservation `json:"caCerts,omitempty" tf:"ca_certs,omitempty"`
}

type ManagedServerCAParameters struct {
}

type MembershipInitParameters struct {
}

type MembershipObservation struct {

	// (Output)
	// Details of the primary cluster that is used as the replication source for all the secondary clusters.
	// Structure is documented below.
	PrimaryCluster []PrimaryClusterObservation `json:"primaryCluster,omitempty" tf:"primary_cluster,omitempty"`

	// (Output)
	// List of secondary clusters that are replicating from the primary cluster.
	// Structure is documented below.
	SecondaryClusters []SecondaryClustersObservation `json:"secondaryClusters,omitempty" tf:"secondary_clusters,omitempty"`
}

type MembershipParameters struct {
}

type PrimaryClusterInitParameters struct {
}

type PrimaryClusterObservation struct {

	// The full resource path of the secondary cluster in the format: projects/{project}/locations/{region}/clusters/{cluster-id}
	Cluster *string `json:"cluster,omitempty" tf:"cluster,omitempty"`

	// System assigned, unique identifier for the cluster.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type PrimaryClusterParameters struct {
}

type PscConfigInitParameters struct {
}

type PscConfigObservation struct {

	// The consumer network where the IP address resides, in the form of projects/{projectId}/global/networks/{network_id}.
	Network *string `json:"network,omitempty" tf:"network,omitempty"`
}

type PscConfigParameters struct {
}

type PscConfigsInitParameters struct {

	// Required. The consumer network where the network address of
	// the discovery endpoint will be reserved, in the form of
	// projects/{network_project_id_or_number}/global/networks/{network_id}.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.Network
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// Reference to a Network in compute to populate network.
	// +kubebuilder:validation:Optional
	NetworkRef *v1.Reference `json:"networkRef,omitempty" tf:"-"`

	// Selector for a Network in compute to populate network.
	// +kubebuilder:validation:Optional
	NetworkSelector *v1.Selector `json:"networkSelector,omitempty" tf:"-"`
}

type PscConfigsObservation struct {

	// Required. The consumer network where the network address of
	// the discovery endpoint will be reserved, in the form of
	// projects/{network_project_id_or_number}/global/networks/{network_id}.
	Network *string `json:"network,omitempty" tf:"network,omitempty"`
}

type PscConfigsParameters struct {

	// Required. The consumer network where the network address of
	// the discovery endpoint will be reserved, in the form of
	// projects/{network_project_id_or_number}/global/networks/{network_id}.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.Network
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// Reference to a Network in compute to populate network.
	// +kubebuilder:validation:Optional
	NetworkRef *v1.Reference `json:"networkRef,omitempty" tf:"-"`

	// Selector for a Network in compute to populate network.
	// +kubebuilder:validation:Optional
	NetworkSelector *v1.Selector `json:"networkSelector,omitempty" tf:"-"`
}

type PscConnectionsInitParameters struct {
}

type PscConnectionsObservation struct {

	// Output only. The IP allocated on the consumer network for the PSC forwarding rule.
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// Output only. The URI of the consumer side forwarding rule. Example: projects/{projectNumOrId}/regions/us-east1/forwardingRules/{resourceId}.
	ForwardingRule *string `json:"forwardingRule,omitempty" tf:"forwarding_rule,omitempty"`

	// The consumer network where the IP address resides, in the form of projects/{projectId}/global/networks/{network_id}.
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// Output only. The consumer projectId where the forwarding rule is created from.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Output only. The PSC connection id of the forwarding rule connected to the service attachment.
	PscConnectionID *string `json:"pscConnectionId,omitempty" tf:"psc_connection_id,omitempty"`
}

type PscConnectionsParameters struct {
}

type PscServiceAttachmentsInitParameters struct {
}

type PscServiceAttachmentsObservation struct {

	// (Output)
	// Type of a PSC connection targeting this service attachment.
	ConnectionType *string `json:"connectionType,omitempty" tf:"connection_type,omitempty"`

	// (Output)
	// Service attachment URI which your self-created PscConnection should use as
	ServiceAttachment *string `json:"serviceAttachment,omitempty" tf:"service_attachment,omitempty"`
}

type PscServiceAttachmentsParameters struct {
}

type RdbConfigInitParameters struct {

	// Optional. Available snapshot periods for scheduling.
	RdbSnapshotPeriod *string `json:"rdbSnapshotPeriod,omitempty" tf:"rdb_snapshot_period,omitempty"`

	// The time that the first snapshot was/will be attempted, and to which
	// future snapshots will be aligned.
	// If not provided, the current time will be used.
	RdbSnapshotStartTime *string `json:"rdbSnapshotStartTime,omitempty" tf:"rdb_snapshot_start_time,omitempty"`
}

type RdbConfigObservation struct {

	// Optional. Available snapshot periods for scheduling.
	RdbSnapshotPeriod *string `json:"rdbSnapshotPeriod,omitempty" tf:"rdb_snapshot_period,omitempty"`

	// The time that the first snapshot was/will be attempted, and to which
	// future snapshots will be aligned.
	// If not provided, the current time will be used.
	RdbSnapshotStartTime *string `json:"rdbSnapshotStartTime,omitempty" tf:"rdb_snapshot_start_time,omitempty"`
}

type RdbConfigParameters struct {

	// Optional. Available snapshot periods for scheduling.
	// +kubebuilder:validation:Optional
	RdbSnapshotPeriod *string `json:"rdbSnapshotPeriod,omitempty" tf:"rdb_snapshot_period,omitempty"`

	// The time that the first snapshot was/will be attempted, and to which
	// future snapshots will be aligned.
	// If not provided, the current time will be used.
	// +kubebuilder:validation:Optional
	RdbSnapshotStartTime *string `json:"rdbSnapshotStartTime,omitempty" tf:"rdb_snapshot_start_time,omitempty"`
}

type SecondaryClustersInitParameters struct {
}

type SecondaryClustersObservation struct {

	// The full resource path of the secondary cluster in the format: projects/{project}/locations/{region}/clusters/{cluster-id}
	Cluster *string `json:"cluster,omitempty" tf:"cluster,omitempty"`

	// System assigned, unique identifier for the cluster.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type SecondaryClustersParameters struct {
}

type StateInfoInitParameters struct {
}

type StateInfoObservation struct {

	// A nested object resource.
	// Structure is documented below.
	UpdateInfo *UpdateInfoObservation `json:"updateInfo,omitempty" tf:"update_info,omitempty"`
}

type StateInfoParameters struct {
}

type UpdateInfoInitParameters struct {
}

type UpdateInfoObservation struct {

	// Target number of replica nodes per shard.
	TargetReplicaCount *float64 `json:"targetReplicaCount,omitempty" tf:"target_replica_count,omitempty"`

	// Target number of shards for redis cluster.
	TargetShardCount *float64 `json:"targetShardCount,omitempty" tf:"target_shard_count,omitempty"`
}

type UpdateInfoParameters struct {
}

type WeeklyMaintenanceWindowStartTimeInitParameters struct {

	// Hours of day in 24 hour format. Should be from 0 to 23.
	// An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	Hours *float64 `json:"hours,omitempty" tf:"hours,omitempty"`

	// Minutes of hour of day. Must be from 0 to 59.
	Minutes *float64 `json:"minutes,omitempty" tf:"minutes,omitempty"`

	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	Nanos *float64 `json:"nanos,omitempty" tf:"nanos,omitempty"`

	// Seconds of minutes of the time. Must normally be from 0 to 59.
	// An API may allow the value 60 if it allows leap-seconds.
	Seconds *float64 `json:"seconds,omitempty" tf:"seconds,omitempty"`
}

type WeeklyMaintenanceWindowStartTimeObservation struct {

	// Hours of day in 24 hour format. Should be from 0 to 23.
	// An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	Hours *float64 `json:"hours,omitempty" tf:"hours,omitempty"`

	// Minutes of hour of day. Must be from 0 to 59.
	Minutes *float64 `json:"minutes,omitempty" tf:"minutes,omitempty"`

	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	Nanos *float64 `json:"nanos,omitempty" tf:"nanos,omitempty"`

	// Seconds of minutes of the time. Must normally be from 0 to 59.
	// An API may allow the value 60 if it allows leap-seconds.
	Seconds *float64 `json:"seconds,omitempty" tf:"seconds,omitempty"`
}

type WeeklyMaintenanceWindowStartTimeParameters struct {

	// Hours of day in 24 hour format. Should be from 0 to 23.
	// An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	// +kubebuilder:validation:Optional
	Hours *float64 `json:"hours,omitempty" tf:"hours,omitempty"`

	// Minutes of hour of day. Must be from 0 to 59.
	// +kubebuilder:validation:Optional
	Minutes *float64 `json:"minutes,omitempty" tf:"minutes,omitempty"`

	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	// +kubebuilder:validation:Optional
	Nanos *float64 `json:"nanos,omitempty" tf:"nanos,omitempty"`

	// Seconds of minutes of the time. Must normally be from 0 to 59.
	// An API may allow the value 60 if it allows leap-seconds.
	// +kubebuilder:validation:Optional
	Seconds *float64 `json:"seconds,omitempty" tf:"seconds,omitempty"`
}

type ZoneDistributionConfigInitParameters struct {

	// Immutable. The mode for zone distribution for Memorystore Redis cluster.
	// If not provided, MULTI_ZONE will be used as default
	// Possible values are: MULTI_ZONE, SINGLE_ZONE.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// Immutable. The zone for single zone Memorystore Redis cluster.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type ZoneDistributionConfigObservation struct {

	// Immutable. The mode for zone distribution for Memorystore Redis cluster.
	// If not provided, MULTI_ZONE will be used as default
	// Possible values are: MULTI_ZONE, SINGLE_ZONE.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// Immutable. The zone for single zone Memorystore Redis cluster.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type ZoneDistributionConfigParameters struct {

	// Immutable. The mode for zone distribution for Memorystore Redis cluster.
	// If not provided, MULTI_ZONE will be used as default
	// Possible values are: MULTI_ZONE, SINGLE_ZONE.
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// Immutable. The zone for single zone Memorystore Redis cluster.
	// +kubebuilder:validation:Optional
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

// ClusterSpec defines the desired state of Cluster
type ClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClusterParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ClusterInitParameters `json:"initProvider,omitempty"`
}

// ClusterStatus defines the observed state of Cluster.
type ClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Cluster is the Schema for the Clusters API. A Google Cloud Redis Cluster instance.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type Cluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.shardCount) || (has(self.initProvider) && has(self.initProvider.shardCount))",message="spec.forProvider.shardCount is a required parameter"
	Spec   ClusterSpec   `json:"spec"`
	Status ClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterList contains a list of Clusters
type ClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Cluster `json:"items"`
}

// Repository type metadata.
var (
	Cluster_Kind             = "Cluster"
	Cluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Cluster_Kind}.String()
	Cluster_KindAPIVersion   = Cluster_Kind + "." + CRDGroupVersion.String()
	Cluster_GroupVersionKind = CRDGroupVersion.WithKind(Cluster_Kind)
)

func init() {
	SchemeBuilder.Register(&Cluster{}, &ClusterList{})
}
