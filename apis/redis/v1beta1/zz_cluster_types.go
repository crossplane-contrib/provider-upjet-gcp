// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClusterInitParameters struct {

	// Optional. The authorization mode of the Redis cluster. If not provided, auth feature is disabled for the cluster.
	// Default value is AUTH_MODE_DISABLED.
	// Possible values are: AUTH_MODE_UNSPECIFIED, AUTH_MODE_IAM_AUTH, AUTH_MODE_DISABLED.
	AuthorizationMode *string `json:"authorizationMode,omitempty" tf:"authorization_mode,omitempty"`

	// The nodeType for the Redis cluster.
	// If not provided, REDIS_HIGHMEM_MEDIUM will be used as default
	// Possible values are: REDIS_SHARED_CORE_NANO, REDIS_HIGHMEM_MEDIUM, REDIS_HIGHMEM_XLARGE, REDIS_STANDARD_SMALL.
	NodeType *string `json:"nodeType,omitempty" tf:"node_type,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Required. Each PscConfig configures the consumer network where two
	// network addresses will be designated to the cluster for client access.
	// Currently, only one PscConfig is supported.
	// Structure is documented below.
	PscConfigs []PscConfigsInitParameters `json:"pscConfigs,omitempty" tf:"psc_configs,omitempty"`

	// Configure Redis Cluster behavior using a subset of native Redis configuration parameters.
	// Please check Memorystore documentation for the list of supported parameters:
	// https://cloud.google.com/memorystore/docs/cluster/supported-instance-configurations
	// +mapType=granular
	RedisConfigs map[string]*string `json:"redisConfigs,omitempty" tf:"redis_configs,omitempty"`

	// Optional. The number of replica nodes per shard.
	ReplicaCount *float64 `json:"replicaCount,omitempty" tf:"replica_count,omitempty"`

	// Required. Number of shards for the Redis cluster.
	ShardCount *float64 `json:"shardCount,omitempty" tf:"shard_count,omitempty"`

	// Optional. The in-transit encryption for the Redis cluster.
	// If not provided, encryption is disabled for the cluster.
	// Default value is TRANSIT_ENCRYPTION_MODE_DISABLED.
	// Possible values are: TRANSIT_ENCRYPTION_MODE_UNSPECIFIED, TRANSIT_ENCRYPTION_MODE_DISABLED, TRANSIT_ENCRYPTION_MODE_SERVER_AUTHENTICATION.
	TransitEncryptionMode *string `json:"transitEncryptionMode,omitempty" tf:"transit_encryption_mode,omitempty"`

	// Immutable. Zone distribution config for Memorystore Redis cluster.
	// Structure is documented below.
	ZoneDistributionConfig *ZoneDistributionConfigInitParameters `json:"zoneDistributionConfig,omitempty" tf:"zone_distribution_config,omitempty"`
}

type ClusterObservation struct {

	// Optional. The authorization mode of the Redis cluster. If not provided, auth feature is disabled for the cluster.
	// Default value is AUTH_MODE_DISABLED.
	// Possible values are: AUTH_MODE_UNSPECIFIED, AUTH_MODE_IAM_AUTH, AUTH_MODE_DISABLED.
	AuthorizationMode *string `json:"authorizationMode,omitempty" tf:"authorization_mode,omitempty"`

	// The timestamp associated with the cluster creation request. A timestamp in
	// RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional
	// digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Output only. Endpoints created on each given network,
	// for Redis clients to connect to the cluster.
	// Currently only one endpoint is supported.
	// Structure is documented below.
	DiscoveryEndpoints []DiscoveryEndpointsObservation `json:"discoveryEndpoints,omitempty" tf:"discovery_endpoints,omitempty"`

	// an identifier for the resource with format projects/{{project}}/locations/{{region}}/clusters/{{name}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The nodeType for the Redis cluster.
	// If not provided, REDIS_HIGHMEM_MEDIUM will be used as default
	// Possible values are: REDIS_SHARED_CORE_NANO, REDIS_HIGHMEM_MEDIUM, REDIS_HIGHMEM_XLARGE, REDIS_STANDARD_SMALL.
	NodeType *string `json:"nodeType,omitempty" tf:"node_type,omitempty"`

	// Output only. Redis memory precise size in GB for the entire cluster.
	PreciseSizeGb *float64 `json:"preciseSizeGb,omitempty" tf:"precise_size_gb,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Required. Each PscConfig configures the consumer network where two
	// network addresses will be designated to the cluster for client access.
	// Currently, only one PscConfig is supported.
	// Structure is documented below.
	PscConfigs []PscConfigsObservation `json:"pscConfigs,omitempty" tf:"psc_configs,omitempty"`

	// Output only. PSC connections for discovery of the cluster topology and accessing the cluster.
	// Structure is documented below.
	PscConnections []PscConnectionsObservation `json:"pscConnections,omitempty" tf:"psc_connections,omitempty"`

	// Configure Redis Cluster behavior using a subset of native Redis configuration parameters.
	// Please check Memorystore documentation for the list of supported parameters:
	// https://cloud.google.com/memorystore/docs/cluster/supported-instance-configurations
	// +mapType=granular
	RedisConfigs map[string]*string `json:"redisConfigs,omitempty" tf:"redis_configs,omitempty"`

	// The name of the region of the Redis cluster.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Optional. The number of replica nodes per shard.
	ReplicaCount *float64 `json:"replicaCount,omitempty" tf:"replica_count,omitempty"`

	// Required. Number of shards for the Redis cluster.
	ShardCount *float64 `json:"shardCount,omitempty" tf:"shard_count,omitempty"`

	// Output only. Redis memory size in GB for the entire cluster.
	SizeGb *float64 `json:"sizeGb,omitempty" tf:"size_gb,omitempty"`

	// The current state of this cluster. Can be CREATING, READY, UPDATING, DELETING and SUSPENDED
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// Output only. Additional information about the current state of the cluster.
	// Structure is documented below.
	StateInfo []StateInfoObservation `json:"stateInfo,omitempty" tf:"state_info,omitempty"`

	// Optional. The in-transit encryption for the Redis cluster.
	// If not provided, encryption is disabled for the cluster.
	// Default value is TRANSIT_ENCRYPTION_MODE_DISABLED.
	// Possible values are: TRANSIT_ENCRYPTION_MODE_UNSPECIFIED, TRANSIT_ENCRYPTION_MODE_DISABLED, TRANSIT_ENCRYPTION_MODE_SERVER_AUTHENTICATION.
	TransitEncryptionMode *string `json:"transitEncryptionMode,omitempty" tf:"transit_encryption_mode,omitempty"`

	// System assigned, unique identifier for the cluster.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`

	// Immutable. Zone distribution config for Memorystore Redis cluster.
	// Structure is documented below.
	ZoneDistributionConfig *ZoneDistributionConfigObservation `json:"zoneDistributionConfig,omitempty" tf:"zone_distribution_config,omitempty"`
}

type ClusterParameters struct {

	// Optional. The authorization mode of the Redis cluster. If not provided, auth feature is disabled for the cluster.
	// Default value is AUTH_MODE_DISABLED.
	// Possible values are: AUTH_MODE_UNSPECIFIED, AUTH_MODE_IAM_AUTH, AUTH_MODE_DISABLED.
	// +kubebuilder:validation:Optional
	AuthorizationMode *string `json:"authorizationMode,omitempty" tf:"authorization_mode,omitempty"`

	// The nodeType for the Redis cluster.
	// If not provided, REDIS_HIGHMEM_MEDIUM will be used as default
	// Possible values are: REDIS_SHARED_CORE_NANO, REDIS_HIGHMEM_MEDIUM, REDIS_HIGHMEM_XLARGE, REDIS_STANDARD_SMALL.
	// +kubebuilder:validation:Optional
	NodeType *string `json:"nodeType,omitempty" tf:"node_type,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Required. Each PscConfig configures the consumer network where two
	// network addresses will be designated to the cluster for client access.
	// Currently, only one PscConfig is supported.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	PscConfigs []PscConfigsParameters `json:"pscConfigs,omitempty" tf:"psc_configs,omitempty"`

	// Configure Redis Cluster behavior using a subset of native Redis configuration parameters.
	// Please check Memorystore documentation for the list of supported parameters:
	// https://cloud.google.com/memorystore/docs/cluster/supported-instance-configurations
	// +kubebuilder:validation:Optional
	// +mapType=granular
	RedisConfigs map[string]*string `json:"redisConfigs,omitempty" tf:"redis_configs,omitempty"`

	// The name of the region of the Redis cluster.
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`

	// Optional. The number of replica nodes per shard.
	// +kubebuilder:validation:Optional
	ReplicaCount *float64 `json:"replicaCount,omitempty" tf:"replica_count,omitempty"`

	// Required. Number of shards for the Redis cluster.
	// +kubebuilder:validation:Optional
	ShardCount *float64 `json:"shardCount,omitempty" tf:"shard_count,omitempty"`

	// Optional. The in-transit encryption for the Redis cluster.
	// If not provided, encryption is disabled for the cluster.
	// Default value is TRANSIT_ENCRYPTION_MODE_DISABLED.
	// Possible values are: TRANSIT_ENCRYPTION_MODE_UNSPECIFIED, TRANSIT_ENCRYPTION_MODE_DISABLED, TRANSIT_ENCRYPTION_MODE_SERVER_AUTHENTICATION.
	// +kubebuilder:validation:Optional
	TransitEncryptionMode *string `json:"transitEncryptionMode,omitempty" tf:"transit_encryption_mode,omitempty"`

	// Immutable. Zone distribution config for Memorystore Redis cluster.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	ZoneDistributionConfig *ZoneDistributionConfigParameters `json:"zoneDistributionConfig,omitempty" tf:"zone_distribution_config,omitempty"`
}

type DiscoveryEndpointsInitParameters struct {
}

type DiscoveryEndpointsObservation struct {

	// Output only. Network address of the exposed Redis endpoint used by clients to connect to the service.
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// Output only. The port number of the exposed Redis endpoint.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Output only. Customer configuration for where the endpoint
	// is created and accessed from.
	// Structure is documented below.
	PscConfig *PscConfigObservation `json:"pscConfig,omitempty" tf:"psc_config,omitempty"`
}

type DiscoveryEndpointsParameters struct {
}

type PscConfigInitParameters struct {
}

type PscConfigObservation struct {

	// The consumer network where the IP address resides, in the form of projects/{projectId}/global/networks/{network_id}.
	Network *string `json:"network,omitempty" tf:"network,omitempty"`
}

type PscConfigParameters struct {
}

type PscConfigsInitParameters struct {

	// Required. The consumer network where the network address of
	// the discovery endpoint will be reserved, in the form of
	// projects/{network_project_id_or_number}/global/networks/{network_id}.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.Network
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// Reference to a Network in compute to populate network.
	// +kubebuilder:validation:Optional
	NetworkRef *v1.Reference `json:"networkRef,omitempty" tf:"-"`

	// Selector for a Network in compute to populate network.
	// +kubebuilder:validation:Optional
	NetworkSelector *v1.Selector `json:"networkSelector,omitempty" tf:"-"`
}

type PscConfigsObservation struct {

	// Required. The consumer network where the network address of
	// the discovery endpoint will be reserved, in the form of
	// projects/{network_project_id_or_number}/global/networks/{network_id}.
	Network *string `json:"network,omitempty" tf:"network,omitempty"`
}

type PscConfigsParameters struct {

	// Required. The consumer network where the network address of
	// the discovery endpoint will be reserved, in the form of
	// projects/{network_project_id_or_number}/global/networks/{network_id}.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.Network
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// Reference to a Network in compute to populate network.
	// +kubebuilder:validation:Optional
	NetworkRef *v1.Reference `json:"networkRef,omitempty" tf:"-"`

	// Selector for a Network in compute to populate network.
	// +kubebuilder:validation:Optional
	NetworkSelector *v1.Selector `json:"networkSelector,omitempty" tf:"-"`
}

type PscConnectionsInitParameters struct {
}

type PscConnectionsObservation struct {

	// Output only. The IP allocated on the consumer network for the PSC forwarding rule.
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// Output only. The URI of the consumer side forwarding rule. Example: projects/{projectNumOrId}/regions/us-east1/forwardingRules/{resourceId}.
	ForwardingRule *string `json:"forwardingRule,omitempty" tf:"forwarding_rule,omitempty"`

	// The consumer network where the IP address resides, in the form of projects/{projectId}/global/networks/{network_id}.
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// Output only. The consumer projectId where the forwarding rule is created from.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Output only. The PSC connection id of the forwarding rule connected to the service attachment.
	PscConnectionID *string `json:"pscConnectionId,omitempty" tf:"psc_connection_id,omitempty"`
}

type PscConnectionsParameters struct {
}

type StateInfoInitParameters struct {
}

type StateInfoObservation struct {

	// A nested object resource
	// Structure is documented below.
	UpdateInfo *UpdateInfoObservation `json:"updateInfo,omitempty" tf:"update_info,omitempty"`
}

type StateInfoParameters struct {
}

type UpdateInfoInitParameters struct {
}

type UpdateInfoObservation struct {

	// Target number of replica nodes per shard.
	TargetReplicaCount *float64 `json:"targetReplicaCount,omitempty" tf:"target_replica_count,omitempty"`

	// Target number of shards for redis cluster.
	TargetShardCount *float64 `json:"targetShardCount,omitempty" tf:"target_shard_count,omitempty"`
}

type UpdateInfoParameters struct {
}

type ZoneDistributionConfigInitParameters struct {

	// Immutable. The mode for zone distribution for Memorystore Redis cluster.
	// If not provided, MULTI_ZONE will be used as default
	// Possible values are: MULTI_ZONE, SINGLE_ZONE.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// Immutable. The zone for single zone Memorystore Redis cluster.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type ZoneDistributionConfigObservation struct {

	// Immutable. The mode for zone distribution for Memorystore Redis cluster.
	// If not provided, MULTI_ZONE will be used as default
	// Possible values are: MULTI_ZONE, SINGLE_ZONE.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// Immutable. The zone for single zone Memorystore Redis cluster.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type ZoneDistributionConfigParameters struct {

	// Immutable. The mode for zone distribution for Memorystore Redis cluster.
	// If not provided, MULTI_ZONE will be used as default
	// Possible values are: MULTI_ZONE, SINGLE_ZONE.
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// Immutable. The zone for single zone Memorystore Redis cluster.
	// +kubebuilder:validation:Optional
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

// ClusterSpec defines the desired state of Cluster
type ClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClusterParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ClusterInitParameters `json:"initProvider,omitempty"`
}

// ClusterStatus defines the observed state of Cluster.
type ClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Cluster is the Schema for the Clusters API. A Google Cloud Redis Cluster instance.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type Cluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.pscConfigs) || (has(self.initProvider) && has(self.initProvider.pscConfigs))",message="spec.forProvider.pscConfigs is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.shardCount) || (has(self.initProvider) && has(self.initProvider.shardCount))",message="spec.forProvider.shardCount is a required parameter"
	Spec   ClusterSpec   `json:"spec"`
	Status ClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterList contains a list of Clusters
type ClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Cluster `json:"items"`
}

// Repository type metadata.
var (
	Cluster_Kind             = "Cluster"
	Cluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Cluster_Kind}.String()
	Cluster_KindAPIVersion   = Cluster_Kind + "." + CRDGroupVersion.String()
	Cluster_GroupVersionKind = CRDGroupVersion.WithKind(Cluster_Kind)
)

func init() {
	SchemeBuilder.Register(&Cluster{}, &ClusterList{})
}
