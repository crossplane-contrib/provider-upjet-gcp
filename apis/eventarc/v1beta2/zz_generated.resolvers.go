// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta2

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	ptr "k8s.io/utils/ptr"
	client "sigs.k8s.io/controller-runtime/pkg/client"

	// ResolveReferences of this Trigger.
	apisresolver "github.com/upbound/provider-gcp/internal/apis"
)

func (mg *Trigger) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	if mg.Spec.ForProvider.Destination != nil {
		if mg.Spec.ForProvider.Destination.CloudRunService != nil {
			{
				m, l, err = apisresolver.GetManagedResource("cloudrun.gcp.upbound.io", "v1beta2", "Service", "ServiceList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: ptr.Deref(mg.Spec.ForProvider.Destination.CloudRunService.Service, ""),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.ForProvider.Destination.CloudRunService.ServiceRef,
					Selector:     mg.Spec.ForProvider.Destination.CloudRunService.ServiceSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Destination.CloudRunService.Service")
			}
			mg.Spec.ForProvider.Destination.CloudRunService.Service = ptr.To(rsp.ResolvedValue)
			mg.Spec.ForProvider.Destination.CloudRunService.ServiceRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.Destination != nil {
		if mg.Spec.InitProvider.Destination.CloudRunService != nil {
			{
				m, l, err = apisresolver.GetManagedResource("cloudrun.gcp.upbound.io", "v1beta2", "Service", "ServiceList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: ptr.Deref(mg.Spec.InitProvider.Destination.CloudRunService.Service, ""),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.InitProvider.Destination.CloudRunService.ServiceRef,
					Selector:     mg.Spec.InitProvider.Destination.CloudRunService.ServiceSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Destination.CloudRunService.Service")
			}
			mg.Spec.InitProvider.Destination.CloudRunService.Service = ptr.To(rsp.ResolvedValue)
			mg.Spec.InitProvider.Destination.CloudRunService.ServiceRef = rsp.ResolvedReference

		}
	}

	return nil
}
