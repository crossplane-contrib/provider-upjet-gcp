// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"

	// ResolveReferences of this Entry.
	apisresolver "github.com/upbound/provider-gcp/internal/apis"
)

func (mg *Entry) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datacatalog.gcp.upbound.io", "v1beta1", "EntryGroup", "EntryGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EntryGroup),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.EntryGroupRef,
			Selector:     mg.Spec.ForProvider.EntryGroupSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.EntryGroup")
	}
	mg.Spec.ForProvider.EntryGroup = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.EntryGroupRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datacatalog.gcp.upbound.io", "v1beta1", "EntryGroup", "EntryGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.EntryGroup),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.EntryGroupRef,
			Selector:     mg.Spec.InitProvider.EntryGroupSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.EntryGroup")
	}
	mg.Spec.InitProvider.EntryGroup = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.EntryGroupRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Tag.
func (mg *Tag) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("datacatalog.gcp.upbound.io", "v1beta1", "Entry", "EntryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Parent),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.ParentRef,
			Selector:     mg.Spec.ForProvider.ParentSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Parent")
	}
	mg.Spec.ForProvider.Parent = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ParentRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datacatalog.gcp.upbound.io", "v1beta1", "TagTemplate", "TagTemplateList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Template),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.TemplateRef,
			Selector:     mg.Spec.ForProvider.TemplateSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Template")
	}
	mg.Spec.ForProvider.Template = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TemplateRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datacatalog.gcp.upbound.io", "v1beta1", "Entry", "EntryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Parent),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.ParentRef,
			Selector:     mg.Spec.InitProvider.ParentSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Parent")
	}
	mg.Spec.InitProvider.Parent = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ParentRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("datacatalog.gcp.upbound.io", "v1beta1", "TagTemplate", "TagTemplateList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Template),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.TemplateRef,
			Selector:     mg.Spec.InitProvider.TemplateSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Template")
	}
	mg.Spec.InitProvider.Template = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TemplateRef = rsp.ResolvedReference

	return nil
}
