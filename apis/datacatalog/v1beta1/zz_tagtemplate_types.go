/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AllowedValuesObservation struct {
}

type AllowedValuesParameters struct {

	// The display name for this field.
	// +kubebuilder:validation:Required
	DisplayName *string `json:"displayName" tf:"display_name,omitempty"`
}

type EnumTypeObservation struct {
}

type EnumTypeParameters struct {

	// The set of allowed values for this enum. The display names of the
	// values must be case-insensitively unique within this set. Currently,
	// enum values can only be added to the list of allowed values. Deletion
	// and renaming of enum values are not supported.
	// Can have up to 500 allowed values.
	// Structure is documented below.
	// +kubebuilder:validation:Required
	AllowedValues []AllowedValuesParameters `json:"allowedValues" tf:"allowed_values,omitempty"`
}

type TagTemplateFieldsObservation struct {

	// The resource name of the tag template field in URL format. Example: projects/{project_id}/locations/{location}/tagTemplates/{tagTemplateId}/fields/{field}
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type TagTemplateFieldsParameters struct {

	// A description for this field.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The display name for this field.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The identifier for this object. Format specified above.
	// +kubebuilder:validation:Required
	FieldID *string `json:"fieldId" tf:"field_id,omitempty"`

	// Whether this is a required field. Defaults to false.
	// +kubebuilder:validation:Optional
	IsRequired *bool `json:"isRequired,omitempty" tf:"is_required,omitempty"`

	// The order of this field with respect to other fields in this tag template.
	// A higher value indicates a more important field. The value can be negative.
	// Multiple fields can have the same order, and field orders within a tag do not have to be sequential.
	// +kubebuilder:validation:Optional
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`

	// The type of value this tag field can contain.
	// Structure is documented below.
	// +kubebuilder:validation:Required
	Type []TypeParameters `json:"type" tf:"type,omitempty"`
}

type TagTemplateObservation struct {

	// Set of tag template field IDs and the settings for the field. This set is an exhaustive list of the allowed fields. This set must contain at least one field and at most 500 fields.
	// Structure is documented below.
	// +kubebuilder:validation:Required
	Fields []TagTemplateFieldsObservation `json:"fields,omitempty" tf:"fields,omitempty"`

	// an identifier for the resource with format {{name}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The resource name of the tag template in URL format. Example: projects/{project_id}/locations/{location}/tagTemplates/{tagTemplateId}
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type TagTemplateParameters struct {

	// The display name for this field.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Set of tag template field IDs and the settings for the field. This set is an exhaustive list of the allowed fields. This set must contain at least one field and at most 500 fields.
	// Structure is documented below.
	// +kubebuilder:validation:Required
	Fields []TagTemplateFieldsParameters `json:"fields" tf:"fields,omitempty"`

	// This confirms the deletion of any possible tags using this template. Must be set to true in order to delete the tag template.
	// +kubebuilder:validation:Optional
	ForceDelete *bool `json:"forceDelete,omitempty" tf:"force_delete,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Template location region.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type TypeObservation struct {
}

type TypeParameters struct {

	// Represents an enum type.
	// Exactly one of primitive_type or enum_type must be set
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	EnumType []EnumTypeParameters `json:"enumType,omitempty" tf:"enum_type,omitempty"`

	// Represents primitive types - string, bool etc.
	// Exactly one of primitive_type or enum_type must be set
	// Possible values are DOUBLE, STRING, BOOL, and TIMESTAMP.
	// +kubebuilder:validation:Optional
	PrimitiveType *string `json:"primitiveType,omitempty" tf:"primitive_type,omitempty"`
}

// TagTemplateSpec defines the desired state of TagTemplate
type TagTemplateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TagTemplateParameters `json:"forProvider"`
}

// TagTemplateStatus defines the observed state of TagTemplate.
type TagTemplateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TagTemplateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TagTemplate is the Schema for the TagTemplates API. A tag template defines a tag, which can have one or more typed fields.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type TagTemplate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TagTemplateSpec   `json:"spec"`
	Status            TagTemplateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TagTemplateList contains a list of TagTemplates
type TagTemplateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TagTemplate `json:"items"`
}

// Repository type metadata.
var (
	TagTemplate_Kind             = "TagTemplate"
	TagTemplate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TagTemplate_Kind}.String()
	TagTemplate_KindAPIVersion   = TagTemplate_Kind + "." + CRDGroupVersion.String()
	TagTemplate_GroupVersionKind = CRDGroupVersion.WithKind(TagTemplate_Kind)
)

func init() {
	SchemeBuilder.Register(&TagTemplate{}, &TagTemplateList{})
}
