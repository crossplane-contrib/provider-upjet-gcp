/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConditionObservation struct {
}

type ConditionParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Expression *string `json:"expression" tf:"expression,omitempty"`

	// +kubebuilder:validation:Required
	Title *string `json:"title" tf:"title,omitempty"`
}

type EntryGroupIAMBindingObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type EntryGroupIAMBindingParameters struct {

	// +kubebuilder:validation:Optional
	Condition []ConditionParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// +kubebuilder:validation:Required
	EntryGroup *string `json:"entryGroup" tf:"entry_group,omitempty"`

	// +kubebuilder:validation:Required
	Members []*string `json:"members" tf:"members,omitempty"`

	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Required
	Role *string `json:"role" tf:"role,omitempty"`
}

// EntryGroupIAMBindingSpec defines the desired state of EntryGroupIAMBinding
type EntryGroupIAMBindingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EntryGroupIAMBindingParameters `json:"forProvider"`
}

// EntryGroupIAMBindingStatus defines the observed state of EntryGroupIAMBinding.
type EntryGroupIAMBindingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EntryGroupIAMBindingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EntryGroupIAMBinding is the Schema for the EntryGroupIAMBindings API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type EntryGroupIAMBinding struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EntryGroupIAMBindingSpec   `json:"spec"`
	Status            EntryGroupIAMBindingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EntryGroupIAMBindingList contains a list of EntryGroupIAMBindings
type EntryGroupIAMBindingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EntryGroupIAMBinding `json:"items"`
}

// Repository type metadata.
var (
	EntryGroupIAMBinding_Kind             = "EntryGroupIAMBinding"
	EntryGroupIAMBinding_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EntryGroupIAMBinding_Kind}.String()
	EntryGroupIAMBinding_KindAPIVersion   = EntryGroupIAMBinding_Kind + "." + CRDGroupVersion.String()
	EntryGroupIAMBinding_GroupVersionKind = CRDGroupVersion.WithKind(EntryGroupIAMBinding_Kind)
)

func init() {
	SchemeBuilder.Register(&EntryGroupIAMBinding{}, &EntryGroupIAMBindingList{})
}
