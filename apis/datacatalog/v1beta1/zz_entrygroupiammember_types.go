/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EntryGroupIAMMemberConditionObservation struct {
}

type EntryGroupIAMMemberConditionParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Expression *string `json:"expression" tf:"expression,omitempty"`

	// +kubebuilder:validation:Required
	Title *string `json:"title" tf:"title,omitempty"`
}

type EntryGroupIAMMemberObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type EntryGroupIAMMemberParameters struct {

	// +kubebuilder:validation:Optional
	Condition []EntryGroupIAMMemberConditionParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// +kubebuilder:validation:Required
	EntryGroup *string `json:"entryGroup" tf:"entry_group,omitempty"`

	// +kubebuilder:validation:Required
	Member *string `json:"member" tf:"member,omitempty"`

	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Required
	Role *string `json:"role" tf:"role,omitempty"`
}

// EntryGroupIAMMemberSpec defines the desired state of EntryGroupIAMMember
type EntryGroupIAMMemberSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EntryGroupIAMMemberParameters `json:"forProvider"`
}

// EntryGroupIAMMemberStatus defines the observed state of EntryGroupIAMMember.
type EntryGroupIAMMemberStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EntryGroupIAMMemberObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EntryGroupIAMMember is the Schema for the EntryGroupIAMMembers API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type EntryGroupIAMMember struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EntryGroupIAMMemberSpec   `json:"spec"`
	Status            EntryGroupIAMMemberStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EntryGroupIAMMemberList contains a list of EntryGroupIAMMembers
type EntryGroupIAMMemberList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EntryGroupIAMMember `json:"items"`
}

// Repository type metadata.
var (
	EntryGroupIAMMember_Kind             = "EntryGroupIAMMember"
	EntryGroupIAMMember_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EntryGroupIAMMember_Kind}.String()
	EntryGroupIAMMember_KindAPIVersion   = EntryGroupIAMMember_Kind + "." + CRDGroupVersion.String()
	EntryGroupIAMMember_GroupVersionKind = CRDGroupVersion.WithKind(EntryGroupIAMMember_Kind)
)

func init() {
	SchemeBuilder.Register(&EntryGroupIAMMember{}, &EntryGroupIAMMemberList{})
}
