// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CAPoolIAMMemberInitParameters struct {

	// +crossplane:generate:reference:type=CAPool
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-gcp/config/common.ExtractResourceID()
	CAPool *string `json:"caPool,omitempty" tf:"ca_pool,omitempty"`

	// Reference to a CAPool to populate caPool.
	// +kubebuilder:validation:Optional
	CAPoolRef *v1.Reference `json:"caPoolRef,omitempty" tf:"-"`

	// Selector for a CAPool to populate caPool.
	// +kubebuilder:validation:Optional
	CAPoolSelector *v1.Selector `json:"caPoolSelector,omitempty" tf:"-"`

	Condition []ConditionInitParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	Member *string `json:"member,omitempty" tf:"member,omitempty"`

	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	Role *string `json:"role,omitempty" tf:"role,omitempty"`
}

type CAPoolIAMMemberObservation struct {
	CAPool *string `json:"caPool,omitempty" tf:"ca_pool,omitempty"`

	Condition []ConditionObservation `json:"condition,omitempty" tf:"condition,omitempty"`

	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	Member *string `json:"member,omitempty" tf:"member,omitempty"`

	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	Role *string `json:"role,omitempty" tf:"role,omitempty"`
}

type CAPoolIAMMemberParameters struct {

	// +crossplane:generate:reference:type=CAPool
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-gcp/config/common.ExtractResourceID()
	// +kubebuilder:validation:Optional
	CAPool *string `json:"caPool,omitempty" tf:"ca_pool,omitempty"`

	// Reference to a CAPool to populate caPool.
	// +kubebuilder:validation:Optional
	CAPoolRef *v1.Reference `json:"caPoolRef,omitempty" tf:"-"`

	// Selector for a CAPool to populate caPool.
	// +kubebuilder:validation:Optional
	CAPoolSelector *v1.Selector `json:"caPoolSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Condition []ConditionParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// +kubebuilder:validation:Optional
	Member *string `json:"member,omitempty" tf:"member,omitempty"`

	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// +kubebuilder:validation:Optional
	Role *string `json:"role,omitempty" tf:"role,omitempty"`
}

type ConditionInitParameters struct {
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

type ConditionObservation struct {
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

type ConditionParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Expression *string `json:"expression" tf:"expression,omitempty"`

	// +kubebuilder:validation:Optional
	Title *string `json:"title" tf:"title,omitempty"`
}

// CAPoolIAMMemberSpec defines the desired state of CAPoolIAMMember
type CAPoolIAMMemberSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CAPoolIAMMemberParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CAPoolIAMMemberInitParameters `json:"initProvider,omitempty"`
}

// CAPoolIAMMemberStatus defines the observed state of CAPoolIAMMember.
type CAPoolIAMMemberStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CAPoolIAMMemberObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// CAPoolIAMMember is the Schema for the CAPoolIAMMembers API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type CAPoolIAMMember struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.member) || (has(self.initProvider) && has(self.initProvider.member))",message="spec.forProvider.member is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.role) || (has(self.initProvider) && has(self.initProvider.role))",message="spec.forProvider.role is a required parameter"
	Spec   CAPoolIAMMemberSpec   `json:"spec"`
	Status CAPoolIAMMemberStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CAPoolIAMMemberList contains a list of CAPoolIAMMembers
type CAPoolIAMMemberList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CAPoolIAMMember `json:"items"`
}

// Repository type metadata.
var (
	CAPoolIAMMember_Kind             = "CAPoolIAMMember"
	CAPoolIAMMember_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CAPoolIAMMember_Kind}.String()
	CAPoolIAMMember_KindAPIVersion   = CAPoolIAMMember_Kind + "." + CRDGroupVersion.String()
	CAPoolIAMMember_GroupVersionKind = CRDGroupVersion.WithKind(CAPoolIAMMember_Kind)
)

func init() {
	SchemeBuilder.Register(&CAPoolIAMMember{}, &CAPoolIAMMemberList{})
}
