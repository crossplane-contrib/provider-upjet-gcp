/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TagKeyInitParameters struct {

	// User-assigned description of the TagKey. Must not exceed 256 characters.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Input only. The resource name of the new TagKey's parent. Must be of the form organizations/{org_id} or projects/{project_id_or_number}.
	Parent *string `json:"parent,omitempty" tf:"parent,omitempty"`

	// Optional. A purpose cannot be changed once set.
	// A purpose denotes that this Tag is intended for use in policies of a specific policy engine, and will involve that policy engine in management operations involving this Tag.
	// Possible values are: GCE_FIREWALL.
	Purpose *string `json:"purpose,omitempty" tf:"purpose,omitempty"`

	// Optional. Purpose data cannot be changed once set.
	// Purpose data corresponds to the policy system that the tag is intended for. For example, the GCE_FIREWALL purpose expects data in the following format: network = "<project-name>/<vpc-name>".
	PurposeData map[string]*string `json:"purposeData,omitempty" tf:"purpose_data,omitempty"`

	// Input only. The user friendly name for a TagKey. The short name should be unique for TagKeys within the same tag namespace.
	// The short name must be 1-63 characters, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between.
	ShortName *string `json:"shortName,omitempty" tf:"short_name,omitempty"`
}

type TagKeyObservation struct {

	// Output only. Creation time.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// User-assigned description of the TagKey. Must not exceed 256 characters.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// an identifier for the resource with format tagKeys/{{name}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The generated numeric id for the TagKey.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Output only. Namespaced name of the TagKey.
	NamespacedName *string `json:"namespacedName,omitempty" tf:"namespaced_name,omitempty"`

	// Input only. The resource name of the new TagKey's parent. Must be of the form organizations/{org_id} or projects/{project_id_or_number}.
	Parent *string `json:"parent,omitempty" tf:"parent,omitempty"`

	// Optional. A purpose cannot be changed once set.
	// A purpose denotes that this Tag is intended for use in policies of a specific policy engine, and will involve that policy engine in management operations involving this Tag.
	// Possible values are: GCE_FIREWALL.
	Purpose *string `json:"purpose,omitempty" tf:"purpose,omitempty"`

	// Optional. Purpose data cannot be changed once set.
	// Purpose data corresponds to the policy system that the tag is intended for. For example, the GCE_FIREWALL purpose expects data in the following format: network = "<project-name>/<vpc-name>".
	PurposeData map[string]*string `json:"purposeData,omitempty" tf:"purpose_data,omitempty"`

	// Input only. The user friendly name for a TagKey. The short name should be unique for TagKeys within the same tag namespace.
	// The short name must be 1-63 characters, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between.
	ShortName *string `json:"shortName,omitempty" tf:"short_name,omitempty"`

	// Output only. Update time.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type TagKeyParameters struct {

	// User-assigned description of the TagKey. Must not exceed 256 characters.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Input only. The resource name of the new TagKey's parent. Must be of the form organizations/{org_id} or projects/{project_id_or_number}.
	// +kubebuilder:validation:Optional
	Parent *string `json:"parent,omitempty" tf:"parent,omitempty"`

	// Optional. A purpose cannot be changed once set.
	// A purpose denotes that this Tag is intended for use in policies of a specific policy engine, and will involve that policy engine in management operations involving this Tag.
	// Possible values are: GCE_FIREWALL.
	// +kubebuilder:validation:Optional
	Purpose *string `json:"purpose,omitempty" tf:"purpose,omitempty"`

	// Optional. Purpose data cannot be changed once set.
	// Purpose data corresponds to the policy system that the tag is intended for. For example, the GCE_FIREWALL purpose expects data in the following format: network = "<project-name>/<vpc-name>".
	// +kubebuilder:validation:Optional
	PurposeData map[string]*string `json:"purposeData,omitempty" tf:"purpose_data,omitempty"`

	// Input only. The user friendly name for a TagKey. The short name should be unique for TagKeys within the same tag namespace.
	// The short name must be 1-63 characters, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between.
	// +kubebuilder:validation:Optional
	ShortName *string `json:"shortName,omitempty" tf:"short_name,omitempty"`
}

// TagKeySpec defines the desired state of TagKey
type TagKeySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TagKeyParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TagKeyInitParameters `json:"initProvider,omitempty"`
}

// TagKeyStatus defines the observed state of TagKey.
type TagKeyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TagKeyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TagKey is the Schema for the TagKeys API. A TagKey, used to group a set of TagValues.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type TagKey struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.parent) || has(self.initProvider.parent)",message="parent is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.shortName) || has(self.initProvider.shortName)",message="shortName is a required parameter"
	Spec   TagKeySpec   `json:"spec"`
	Status TagKeyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TagKeyList contains a list of TagKeys
type TagKeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TagKey `json:"items"`
}

// Repository type metadata.
var (
	TagKey_Kind             = "TagKey"
	TagKey_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TagKey_Kind}.String()
	TagKey_KindAPIVersion   = TagKey_Kind + "." + CRDGroupVersion.String()
	TagKey_GroupVersionKind = CRDGroupVersion.WithKind(TagKey_Kind)
)

func init() {
	SchemeBuilder.Register(&TagKey{}, &TagKeyList{})
}
