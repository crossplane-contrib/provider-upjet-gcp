// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ApprovalConfigInitParameters struct {

	// Whether or not approval is needed. If this is set on a build, it will become pending when run,
	// and will need to be explicitly approved to start.
	ApprovalRequired *bool `json:"approvalRequired,omitempty" tf:"approval_required,omitempty"`
}

type ApprovalConfigObservation struct {

	// Whether or not approval is needed. If this is set on a build, it will become pending when run,
	// and will need to be explicitly approved to start.
	ApprovalRequired *bool `json:"approvalRequired,omitempty" tf:"approval_required,omitempty"`
}

type ApprovalConfigParameters struct {

	// Whether or not approval is needed. If this is set on a build, it will become pending when run,
	// and will need to be explicitly approved to start.
	// +kubebuilder:validation:Optional
	ApprovalRequired *bool `json:"approvalRequired,omitempty" tf:"approval_required,omitempty"`
}

type ArtifactsInitParameters struct {

	// A list of images to be pushed upon the successful completion of all build steps.
	// The images are pushed using the builder service account's credentials.
	// The digests of the pushed images will be stored in the Build resource's results field.
	// If any of the images fail to be pushed, the build status is marked FAILURE.
	Images []*string `json:"images,omitempty" tf:"images,omitempty"`

	// A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps.
	// Files in the workspace matching specified paths globs will be uploaded to the
	// Cloud Storage location using the builder service account's credentials.
	// The location and generation of the uploaded objects will be stored in the Build resource's results field.
	// If any objects fail to be pushed, the build is marked FAILURE.
	// Structure is documented below.
	Objects []ObjectsInitParameters `json:"objects,omitempty" tf:"objects,omitempty"`
}

type ArtifactsObservation struct {

	// A list of images to be pushed upon the successful completion of all build steps.
	// The images are pushed using the builder service account's credentials.
	// The digests of the pushed images will be stored in the Build resource's results field.
	// If any of the images fail to be pushed, the build status is marked FAILURE.
	Images []*string `json:"images,omitempty" tf:"images,omitempty"`

	// A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps.
	// Files in the workspace matching specified paths globs will be uploaded to the
	// Cloud Storage location using the builder service account's credentials.
	// The location and generation of the uploaded objects will be stored in the Build resource's results field.
	// If any objects fail to be pushed, the build is marked FAILURE.
	// Structure is documented below.
	Objects []ObjectsObservation `json:"objects,omitempty" tf:"objects,omitempty"`
}

type ArtifactsParameters struct {

	// A list of images to be pushed upon the successful completion of all build steps.
	// The images are pushed using the builder service account's credentials.
	// The digests of the pushed images will be stored in the Build resource's results field.
	// If any of the images fail to be pushed, the build status is marked FAILURE.
	// +kubebuilder:validation:Optional
	Images []*string `json:"images,omitempty" tf:"images,omitempty"`

	// A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps.
	// Files in the workspace matching specified paths globs will be uploaded to the
	// Cloud Storage location using the builder service account's credentials.
	// The location and generation of the uploaded objects will be stored in the Build resource's results field.
	// If any objects fail to be pushed, the build is marked FAILURE.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Objects []ObjectsParameters `json:"objects,omitempty" tf:"objects,omitempty"`
}

type AvailableSecretsInitParameters struct {

	// Pairs a secret environment variable with a SecretVersion in Secret Manager.
	// Structure is documented below.
	SecretManager []SecretManagerInitParameters `json:"secretManager,omitempty" tf:"secret_manager,omitempty"`
}

type AvailableSecretsObservation struct {

	// Pairs a secret environment variable with a SecretVersion in Secret Manager.
	// Structure is documented below.
	SecretManager []SecretManagerObservation `json:"secretManager,omitempty" tf:"secret_manager,omitempty"`
}

type AvailableSecretsParameters struct {

	// Pairs a secret environment variable with a SecretVersion in Secret Manager.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	SecretManager []SecretManagerParameters `json:"secretManager" tf:"secret_manager,omitempty"`
}

type BitbucketServerTriggerConfigInitParameters struct {

	// The Bitbucket server config resource that this trigger config maps to.
	BitbucketServerConfigResource *string `json:"bitbucketServerConfigResource,omitempty" tf:"bitbucket_server_config_resource,omitempty"`

	// Key of the project that the repo is in. For example: The key for https://mybitbucket.server/projects/TEST/repos/test-repo is "TEST".
	ProjectKey *string `json:"projectKey,omitempty" tf:"project_key,omitempty"`

	// Filter to match changes in pull requests.
	// Structure is documented below.
	PullRequest []PullRequestInitParameters `json:"pullRequest,omitempty" tf:"pull_request,omitempty"`

	// Filter to match changes in refs like branches, tags.
	// Structure is documented below.
	Push []PushInitParameters `json:"push,omitempty" tf:"push,omitempty"`

	// Slug of the repository. A repository slug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL.
	// For example, if the repository name is 'test repo', in the URL it would become 'test-repo' as in https://mybitbucket.server/projects/TEST/repos/test-repo.
	RepoSlug *string `json:"repoSlug,omitempty" tf:"repo_slug,omitempty"`
}

type BitbucketServerTriggerConfigObservation struct {

	// The Bitbucket server config resource that this trigger config maps to.
	BitbucketServerConfigResource *string `json:"bitbucketServerConfigResource,omitempty" tf:"bitbucket_server_config_resource,omitempty"`

	// Key of the project that the repo is in. For example: The key for https://mybitbucket.server/projects/TEST/repos/test-repo is "TEST".
	ProjectKey *string `json:"projectKey,omitempty" tf:"project_key,omitempty"`

	// Filter to match changes in pull requests.
	// Structure is documented below.
	PullRequest []PullRequestObservation `json:"pullRequest,omitempty" tf:"pull_request,omitempty"`

	// Filter to match changes in refs like branches, tags.
	// Structure is documented below.
	Push []PushObservation `json:"push,omitempty" tf:"push,omitempty"`

	// Slug of the repository. A repository slug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL.
	// For example, if the repository name is 'test repo', in the URL it would become 'test-repo' as in https://mybitbucket.server/projects/TEST/repos/test-repo.
	RepoSlug *string `json:"repoSlug,omitempty" tf:"repo_slug,omitempty"`
}

type BitbucketServerTriggerConfigParameters struct {

	// The Bitbucket server config resource that this trigger config maps to.
	// +kubebuilder:validation:Optional
	BitbucketServerConfigResource *string `json:"bitbucketServerConfigResource" tf:"bitbucket_server_config_resource,omitempty"`

	// Key of the project that the repo is in. For example: The key for https://mybitbucket.server/projects/TEST/repos/test-repo is "TEST".
	// +kubebuilder:validation:Optional
	ProjectKey *string `json:"projectKey" tf:"project_key,omitempty"`

	// Filter to match changes in pull requests.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	PullRequest []PullRequestParameters `json:"pullRequest,omitempty" tf:"pull_request,omitempty"`

	// Filter to match changes in refs like branches, tags.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Push []PushParameters `json:"push,omitempty" tf:"push,omitempty"`

	// Slug of the repository. A repository slug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL.
	// For example, if the repository name is 'test repo', in the URL it would become 'test-repo' as in https://mybitbucket.server/projects/TEST/repos/test-repo.
	// +kubebuilder:validation:Optional
	RepoSlug *string `json:"repoSlug" tf:"repo_slug,omitempty"`
}

type BuildInitParameters struct {

	// Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
	// Structure is documented below.
	Artifacts []ArtifactsInitParameters `json:"artifacts,omitempty" tf:"artifacts,omitempty"`

	// Secrets and secret environment variables.
	// Structure is documented below.
	AvailableSecrets []AvailableSecretsInitParameters `json:"availableSecrets,omitempty" tf:"available_secrets,omitempty"`

	// A list of images to be pushed upon the successful completion of all build steps.
	// The images are pushed using the builder service account's credentials.
	// The digests of the pushed images will be stored in the Build resource's results field.
	// If any of the images fail to be pushed, the build status is marked FAILURE.
	Images []*string `json:"images,omitempty" tf:"images,omitempty"`

	// Google Cloud Storage bucket where logs should be written.
	// Logs file names will be of the format ${logsBucket}/log-${build_id}.txt.
	LogsBucket *string `json:"logsBucket,omitempty" tf:"logs_bucket,omitempty"`

	// Special options for this build.
	// Structure is documented below.
	Options []OptionsInitParameters `json:"options,omitempty" tf:"options,omitempty"`

	// TTL in queue for this build. If provided and the build is enqueued longer than this value,
	// the build will expire and the build status will be EXPIRED.
	// The TTL starts ticking from createTime.
	// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	QueueTTL *string `json:"queueTtl,omitempty" tf:"queue_ttl,omitempty"`

	// Secrets to decrypt using Cloud Key Management Service.
	// Structure is documented below.
	Secret []SecretInitParameters `json:"secret,omitempty" tf:"secret,omitempty"`

	// The location of the source files to build.
	// One of storageSource or repoSource must be provided.
	// Structure is documented below.
	Source []SourceInitParameters `json:"source,omitempty" tf:"source,omitempty"`

	// The operations to be performed on the workspace.
	// Structure is documented below.
	Step []StepInitParameters `json:"step,omitempty" tf:"step,omitempty"`

	// Substitutions data for Build resource.
	// +mapType=granular
	Substitutions map[string]*string `json:"substitutions,omitempty" tf:"substitutions,omitempty"`

	// Tags for annotation of a Build. These are not docker tags.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Amount of time that this build should be allowed to run, to second granularity.
	// If this amount of time elapses, work on the build will cease and the build status will be TIMEOUT.
	// This timeout must be equal to or greater than the sum of the timeouts for build steps within the build.
	// The expected format is the number of seconds followed by s.
	// Default time is ten minutes (600s).
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type BuildObservation struct {

	// Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
	// Structure is documented below.
	Artifacts []ArtifactsObservation `json:"artifacts,omitempty" tf:"artifacts,omitempty"`

	// Secrets and secret environment variables.
	// Structure is documented below.
	AvailableSecrets []AvailableSecretsObservation `json:"availableSecrets,omitempty" tf:"available_secrets,omitempty"`

	// A list of images to be pushed upon the successful completion of all build steps.
	// The images are pushed using the builder service account's credentials.
	// The digests of the pushed images will be stored in the Build resource's results field.
	// If any of the images fail to be pushed, the build status is marked FAILURE.
	Images []*string `json:"images,omitempty" tf:"images,omitempty"`

	// Google Cloud Storage bucket where logs should be written.
	// Logs file names will be of the format ${logsBucket}/log-${build_id}.txt.
	LogsBucket *string `json:"logsBucket,omitempty" tf:"logs_bucket,omitempty"`

	// Special options for this build.
	// Structure is documented below.
	Options []OptionsObservation `json:"options,omitempty" tf:"options,omitempty"`

	// TTL in queue for this build. If provided and the build is enqueued longer than this value,
	// the build will expire and the build status will be EXPIRED.
	// The TTL starts ticking from createTime.
	// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	QueueTTL *string `json:"queueTtl,omitempty" tf:"queue_ttl,omitempty"`

	// Secrets to decrypt using Cloud Key Management Service.
	// Structure is documented below.
	Secret []SecretObservation `json:"secret,omitempty" tf:"secret,omitempty"`

	// The location of the source files to build.
	// One of storageSource or repoSource must be provided.
	// Structure is documented below.
	Source []SourceObservation `json:"source,omitempty" tf:"source,omitempty"`

	// The operations to be performed on the workspace.
	// Structure is documented below.
	Step []StepObservation `json:"step,omitempty" tf:"step,omitempty"`

	// Substitutions data for Build resource.
	// +mapType=granular
	Substitutions map[string]*string `json:"substitutions,omitempty" tf:"substitutions,omitempty"`

	// Tags for annotation of a Build. These are not docker tags.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Amount of time that this build should be allowed to run, to second granularity.
	// If this amount of time elapses, work on the build will cease and the build status will be TIMEOUT.
	// This timeout must be equal to or greater than the sum of the timeouts for build steps within the build.
	// The expected format is the number of seconds followed by s.
	// Default time is ten minutes (600s).
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type BuildParameters struct {

	// Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Artifacts []ArtifactsParameters `json:"artifacts,omitempty" tf:"artifacts,omitempty"`

	// Secrets and secret environment variables.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	AvailableSecrets []AvailableSecretsParameters `json:"availableSecrets,omitempty" tf:"available_secrets,omitempty"`

	// A list of images to be pushed upon the successful completion of all build steps.
	// The images are pushed using the builder service account's credentials.
	// The digests of the pushed images will be stored in the Build resource's results field.
	// If any of the images fail to be pushed, the build status is marked FAILURE.
	// +kubebuilder:validation:Optional
	Images []*string `json:"images,omitempty" tf:"images,omitempty"`

	// Google Cloud Storage bucket where logs should be written.
	// Logs file names will be of the format ${logsBucket}/log-${build_id}.txt.
	// +kubebuilder:validation:Optional
	LogsBucket *string `json:"logsBucket,omitempty" tf:"logs_bucket,omitempty"`

	// Special options for this build.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Options []OptionsParameters `json:"options,omitempty" tf:"options,omitempty"`

	// TTL in queue for this build. If provided and the build is enqueued longer than this value,
	// the build will expire and the build status will be EXPIRED.
	// The TTL starts ticking from createTime.
	// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	// +kubebuilder:validation:Optional
	QueueTTL *string `json:"queueTtl,omitempty" tf:"queue_ttl,omitempty"`

	// Secrets to decrypt using Cloud Key Management Service.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Secret []SecretParameters `json:"secret,omitempty" tf:"secret,omitempty"`

	// The location of the source files to build.
	// One of storageSource or repoSource must be provided.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Source []SourceParameters `json:"source,omitempty" tf:"source,omitempty"`

	// The operations to be performed on the workspace.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Step []StepParameters `json:"step" tf:"step,omitempty"`

	// Substitutions data for Build resource.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Substitutions map[string]*string `json:"substitutions,omitempty" tf:"substitutions,omitempty"`

	// Tags for annotation of a Build. These are not docker tags.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Amount of time that this build should be allowed to run, to second granularity.
	// If this amount of time elapses, work on the build will cease and the build status will be TIMEOUT.
	// This timeout must be equal to or greater than the sum of the timeouts for build steps within the build.
	// The expected format is the number of seconds followed by s.
	// Default time is ten minutes (600s).
	// +kubebuilder:validation:Optional
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type GitFileSourceInitParameters struct {

	// The full resource name of the github enterprise config.
	// Format: projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}. projects/{project}/githubEnterpriseConfigs/{id}.
	GithubEnterpriseConfig *string `json:"githubEnterpriseConfig,omitempty" tf:"github_enterprise_config,omitempty"`

	// The path of the file, with the repo root as the root of the path.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The type of the repo, since it may not be explicit from the repo field (e.g from a URL).
	// Values can be UNKNOWN, CLOUD_SOURCE_REPOSITORIES, GITHUB, BITBUCKET_SERVER
	// Possible values are: UNKNOWN, CLOUD_SOURCE_REPOSITORIES, GITHUB, BITBUCKET_SERVER.
	RepoType *string `json:"repoType,omitempty" tf:"repo_type,omitempty"`

	// The fully qualified resource name of the Repo API repository. The fully qualified resource name of the Repo API repository.
	// If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path.
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`

	// The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the
	// filename . This field respects the same syntax/resolution as described here: https://git-scm.com/docs/gitrevisions
	// If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path.
	Revision *string `json:"revision,omitempty" tf:"revision,omitempty"`

	// The URI of the repo . If unspecified, the repo from which the trigger
	// invocation originated is assumed to be the repo from which to read the specified path.
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`
}

type GitFileSourceObservation struct {

	// The full resource name of the github enterprise config.
	// Format: projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}. projects/{project}/githubEnterpriseConfigs/{id}.
	GithubEnterpriseConfig *string `json:"githubEnterpriseConfig,omitempty" tf:"github_enterprise_config,omitempty"`

	// The path of the file, with the repo root as the root of the path.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The type of the repo, since it may not be explicit from the repo field (e.g from a URL).
	// Values can be UNKNOWN, CLOUD_SOURCE_REPOSITORIES, GITHUB, BITBUCKET_SERVER
	// Possible values are: UNKNOWN, CLOUD_SOURCE_REPOSITORIES, GITHUB, BITBUCKET_SERVER.
	RepoType *string `json:"repoType,omitempty" tf:"repo_type,omitempty"`

	// The fully qualified resource name of the Repo API repository. The fully qualified resource name of the Repo API repository.
	// If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path.
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`

	// The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the
	// filename . This field respects the same syntax/resolution as described here: https://git-scm.com/docs/gitrevisions
	// If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path.
	Revision *string `json:"revision,omitempty" tf:"revision,omitempty"`

	// The URI of the repo . If unspecified, the repo from which the trigger
	// invocation originated is assumed to be the repo from which to read the specified path.
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`
}

type GitFileSourceParameters struct {

	// The full resource name of the github enterprise config.
	// Format: projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}. projects/{project}/githubEnterpriseConfigs/{id}.
	// +kubebuilder:validation:Optional
	GithubEnterpriseConfig *string `json:"githubEnterpriseConfig,omitempty" tf:"github_enterprise_config,omitempty"`

	// The path of the file, with the repo root as the root of the path.
	// +kubebuilder:validation:Optional
	Path *string `json:"path" tf:"path,omitempty"`

	// The type of the repo, since it may not be explicit from the repo field (e.g from a URL).
	// Values can be UNKNOWN, CLOUD_SOURCE_REPOSITORIES, GITHUB, BITBUCKET_SERVER
	// Possible values are: UNKNOWN, CLOUD_SOURCE_REPOSITORIES, GITHUB, BITBUCKET_SERVER.
	// +kubebuilder:validation:Optional
	RepoType *string `json:"repoType" tf:"repo_type,omitempty"`

	// The fully qualified resource name of the Repo API repository. The fully qualified resource name of the Repo API repository.
	// If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path.
	// +kubebuilder:validation:Optional
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`

	// The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the
	// filename . This field respects the same syntax/resolution as described here: https://git-scm.com/docs/gitrevisions
	// If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path.
	// +kubebuilder:validation:Optional
	Revision *string `json:"revision,omitempty" tf:"revision,omitempty"`

	// The URI of the repo . If unspecified, the repo from which the trigger
	// invocation originated is assumed to be the repo from which to read the specified path.
	// +kubebuilder:validation:Optional
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`
}

type GithubInitParameters struct {

	// The resource name of the github enterprise config that should be applied to this installation.
	// For example: "projects/{$projectId}/locations/{$locationId}/githubEnterpriseConfigs/{$configId}"
	EnterpriseConfigResourceName *string `json:"enterpriseConfigResourceName,omitempty" tf:"enterprise_config_resource_name,omitempty"`

	// Name of the repository. For example: The name for
	// https://github.com/googlecloudplatform/cloud-builders is "cloud-builders".
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Owner of the repository. For example: The owner for
	// https://github.com/googlecloudplatform/cloud-builders is "googlecloudplatform".
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// filter to match changes in pull requests. Specify only one of pull_request or push.
	// Structure is documented below.
	PullRequest []GithubPullRequestInitParameters `json:"pullRequest,omitempty" tf:"pull_request,omitempty"`

	// filter to match changes in refs, like branches or tags. Specify only one of pull_request or push.
	// Structure is documented below.
	Push []GithubPushInitParameters `json:"push,omitempty" tf:"push,omitempty"`
}

type GithubObservation struct {

	// The resource name of the github enterprise config that should be applied to this installation.
	// For example: "projects/{$projectId}/locations/{$locationId}/githubEnterpriseConfigs/{$configId}"
	EnterpriseConfigResourceName *string `json:"enterpriseConfigResourceName,omitempty" tf:"enterprise_config_resource_name,omitempty"`

	// Name of the repository. For example: The name for
	// https://github.com/googlecloudplatform/cloud-builders is "cloud-builders".
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Owner of the repository. For example: The owner for
	// https://github.com/googlecloudplatform/cloud-builders is "googlecloudplatform".
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// filter to match changes in pull requests. Specify only one of pull_request or push.
	// Structure is documented below.
	PullRequest []GithubPullRequestObservation `json:"pullRequest,omitempty" tf:"pull_request,omitempty"`

	// filter to match changes in refs, like branches or tags. Specify only one of pull_request or push.
	// Structure is documented below.
	Push []GithubPushObservation `json:"push,omitempty" tf:"push,omitempty"`
}

type GithubParameters struct {

	// The resource name of the github enterprise config that should be applied to this installation.
	// For example: "projects/{$projectId}/locations/{$locationId}/githubEnterpriseConfigs/{$configId}"
	// +kubebuilder:validation:Optional
	EnterpriseConfigResourceName *string `json:"enterpriseConfigResourceName,omitempty" tf:"enterprise_config_resource_name,omitempty"`

	// Name of the repository. For example: The name for
	// https://github.com/googlecloudplatform/cloud-builders is "cloud-builders".
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Owner of the repository. For example: The owner for
	// https://github.com/googlecloudplatform/cloud-builders is "googlecloudplatform".
	// +kubebuilder:validation:Optional
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// filter to match changes in pull requests. Specify only one of pull_request or push.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	PullRequest []GithubPullRequestParameters `json:"pullRequest,omitempty" tf:"pull_request,omitempty"`

	// filter to match changes in refs, like branches or tags. Specify only one of pull_request or push.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Push []GithubPushParameters `json:"push,omitempty" tf:"push,omitempty"`
}

type GithubPullRequestInitParameters struct {

	// Regex of branches to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// Configure builds to run whether a repository owner or collaborator need to comment /gcbrun.
	// Possible values are: COMMENTS_DISABLED, COMMENTS_ENABLED, COMMENTS_ENABLED_FOR_EXTERNAL_CONTRIBUTORS_ONLY.
	CommentControl *string `json:"commentControl,omitempty" tf:"comment_control,omitempty"`

	// Only trigger a build if the revision regex does NOT match the revision regex.
	InvertRegex *bool `json:"invertRegex,omitempty" tf:"invert_regex,omitempty"`
}

type GithubPullRequestObservation struct {

	// Regex of branches to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// Configure builds to run whether a repository owner or collaborator need to comment /gcbrun.
	// Possible values are: COMMENTS_DISABLED, COMMENTS_ENABLED, COMMENTS_ENABLED_FOR_EXTERNAL_CONTRIBUTORS_ONLY.
	CommentControl *string `json:"commentControl,omitempty" tf:"comment_control,omitempty"`

	// Only trigger a build if the revision regex does NOT match the revision regex.
	InvertRegex *bool `json:"invertRegex,omitempty" tf:"invert_regex,omitempty"`
}

type GithubPullRequestParameters struct {

	// Regex of branches to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	// +kubebuilder:validation:Optional
	Branch *string `json:"branch" tf:"branch,omitempty"`

	// Configure builds to run whether a repository owner or collaborator need to comment /gcbrun.
	// Possible values are: COMMENTS_DISABLED, COMMENTS_ENABLED, COMMENTS_ENABLED_FOR_EXTERNAL_CONTRIBUTORS_ONLY.
	// +kubebuilder:validation:Optional
	CommentControl *string `json:"commentControl,omitempty" tf:"comment_control,omitempty"`

	// Only trigger a build if the revision regex does NOT match the revision regex.
	// +kubebuilder:validation:Optional
	InvertRegex *bool `json:"invertRegex,omitempty" tf:"invert_regex,omitempty"`
}

type GithubPushInitParameters struct {

	// Regex of branches to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// Only trigger a build if the revision regex does NOT match the revision regex.
	InvertRegex *bool `json:"invertRegex,omitempty" tf:"invert_regex,omitempty"`

	// Regex of tags to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type GithubPushObservation struct {

	// Regex of branches to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// Only trigger a build if the revision regex does NOT match the revision regex.
	InvertRegex *bool `json:"invertRegex,omitempty" tf:"invert_regex,omitempty"`

	// Regex of tags to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type GithubPushParameters struct {

	// Regex of branches to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	// +kubebuilder:validation:Optional
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// Only trigger a build if the revision regex does NOT match the revision regex.
	// +kubebuilder:validation:Optional
	InvertRegex *bool `json:"invertRegex,omitempty" tf:"invert_regex,omitempty"`

	// Regex of tags to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type ObjectsInitParameters struct {

	// Cloud Storage bucket and optional object path, in the form "gs://bucket/path/to/somewhere/".
	// Files in the workspace matching any path pattern will be uploaded to Cloud Storage with
	// this location as a prefix.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// Path globs used to match files in the build's workspace.
	Paths []*string `json:"paths,omitempty" tf:"paths,omitempty"`
}

type ObjectsObservation struct {

	// Cloud Storage bucket and optional object path, in the form "gs://bucket/path/to/somewhere/".
	// Files in the workspace matching any path pattern will be uploaded to Cloud Storage with
	// this location as a prefix.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// Path globs used to match files in the build's workspace.
	Paths []*string `json:"paths,omitempty" tf:"paths,omitempty"`

	// Output only. Stores timing information for executing this
	// build step.
	Timing []TimingObservation `json:"timing,omitempty" tf:"timing,omitempty"`
}

type ObjectsParameters struct {

	// Cloud Storage bucket and optional object path, in the form "gs://bucket/path/to/somewhere/".
	// Files in the workspace matching any path pattern will be uploaded to Cloud Storage with
	// this location as a prefix.
	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// Path globs used to match files in the build's workspace.
	// +kubebuilder:validation:Optional
	Paths []*string `json:"paths,omitempty" tf:"paths,omitempty"`
}

type OptionsInitParameters struct {

	// Requested disk size for the VM that runs the build. Note that this is NOT "disk free";
	// some of the space will be used by the operating system and build utilities.
	// Also note that this is the minimum disk size that will be allocated for the build --
	// the build may run with a larger disk than requested. At present, the maximum disk size
	// is 1000GB; builds that request more than the maximum are rejected with an error.
	DiskSizeGb *float64 `json:"diskSizeGb,omitempty" tf:"disk_size_gb,omitempty"`

	// Option to specify whether or not to apply bash style string operations to the substitutions.
	// NOTE this is always enabled for triggered builds and cannot be overridden in the build configuration file.
	DynamicSubstitutions *bool `json:"dynamicSubstitutions,omitempty" tf:"dynamic_substitutions,omitempty"`

	// A list of environment variable definitions to be used when
	// running a step.
	// The elements are of the form "KEY=VALUE" for the environment variable
	// "KEY" being given the value "VALUE".
	Env []*string `json:"env,omitempty" tf:"env,omitempty"`

	// Option to define build log streaming behavior to Google Cloud Storage.
	// Possible values are: STREAM_DEFAULT, STREAM_ON, STREAM_OFF.
	LogStreamingOption *string `json:"logStreamingOption,omitempty" tf:"log_streaming_option,omitempty"`

	// Option to specify the logging mode, which determines if and where build logs are stored.
	// Possible values are: LOGGING_UNSPECIFIED, LEGACY, GCS_ONLY, STACKDRIVER_ONLY, CLOUD_LOGGING_ONLY, NONE.
	Logging *string `json:"logging,omitempty" tf:"logging,omitempty"`

	// Compute Engine machine type on which to run the build.
	MachineType *string `json:"machineType,omitempty" tf:"machine_type,omitempty"`

	// Requested verifiability options.
	// Possible values are: NOT_VERIFIED, VERIFIED.
	RequestedVerifyOption *string `json:"requestedVerifyOption,omitempty" tf:"requested_verify_option,omitempty"`

	// A list of environment variables which are encrypted using
	// a Cloud Key
	// Management Service crypto key. These values must be specified in
	// the build's Secret.
	SecretEnv []*string `json:"secretEnv,omitempty" tf:"secret_env,omitempty"`

	// Requested hash for SourceProvenance.
	// Each value may be one of: NONE, SHA256, MD5.
	SourceProvenanceHash []*string `json:"sourceProvenanceHash,omitempty" tf:"source_provenance_hash,omitempty"`

	// Option to specify behavior when there is an error in the substitution checks.
	// NOTE this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden
	// in the build configuration file.
	// Possible values are: MUST_MATCH, ALLOW_LOOSE.
	SubstitutionOption *string `json:"substitutionOption,omitempty" tf:"substitution_option,omitempty"`

	// List of volumes to mount into the build step.
	// Each volume is created as an empty volume prior to execution of the
	// build step. Upon completion of the build, volumes and their contents
	// are discarded.
	// Using a named volume in only one step is not valid as it is
	// indicative of a build request with an incorrect configuration.
	// Structure is documented below.
	Volumes []VolumesInitParameters `json:"volumes,omitempty" tf:"volumes,omitempty"`

	// Option to specify a WorkerPool for the build. Format projects/{project}/workerPools/{workerPool}
	// This field is experimental.
	WorkerPool *string `json:"workerPool,omitempty" tf:"worker_pool,omitempty"`
}

type OptionsObservation struct {

	// Requested disk size for the VM that runs the build. Note that this is NOT "disk free";
	// some of the space will be used by the operating system and build utilities.
	// Also note that this is the minimum disk size that will be allocated for the build --
	// the build may run with a larger disk than requested. At present, the maximum disk size
	// is 1000GB; builds that request more than the maximum are rejected with an error.
	DiskSizeGb *float64 `json:"diskSizeGb,omitempty" tf:"disk_size_gb,omitempty"`

	// Option to specify whether or not to apply bash style string operations to the substitutions.
	// NOTE this is always enabled for triggered builds and cannot be overridden in the build configuration file.
	DynamicSubstitutions *bool `json:"dynamicSubstitutions,omitempty" tf:"dynamic_substitutions,omitempty"`

	// A list of environment variable definitions to be used when
	// running a step.
	// The elements are of the form "KEY=VALUE" for the environment variable
	// "KEY" being given the value "VALUE".
	Env []*string `json:"env,omitempty" tf:"env,omitempty"`

	// Option to define build log streaming behavior to Google Cloud Storage.
	// Possible values are: STREAM_DEFAULT, STREAM_ON, STREAM_OFF.
	LogStreamingOption *string `json:"logStreamingOption,omitempty" tf:"log_streaming_option,omitempty"`

	// Option to specify the logging mode, which determines if and where build logs are stored.
	// Possible values are: LOGGING_UNSPECIFIED, LEGACY, GCS_ONLY, STACKDRIVER_ONLY, CLOUD_LOGGING_ONLY, NONE.
	Logging *string `json:"logging,omitempty" tf:"logging,omitempty"`

	// Compute Engine machine type on which to run the build.
	MachineType *string `json:"machineType,omitempty" tf:"machine_type,omitempty"`

	// Requested verifiability options.
	// Possible values are: NOT_VERIFIED, VERIFIED.
	RequestedVerifyOption *string `json:"requestedVerifyOption,omitempty" tf:"requested_verify_option,omitempty"`

	// A list of environment variables which are encrypted using
	// a Cloud Key
	// Management Service crypto key. These values must be specified in
	// the build's Secret.
	SecretEnv []*string `json:"secretEnv,omitempty" tf:"secret_env,omitempty"`

	// Requested hash for SourceProvenance.
	// Each value may be one of: NONE, SHA256, MD5.
	SourceProvenanceHash []*string `json:"sourceProvenanceHash,omitempty" tf:"source_provenance_hash,omitempty"`

	// Option to specify behavior when there is an error in the substitution checks.
	// NOTE this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden
	// in the build configuration file.
	// Possible values are: MUST_MATCH, ALLOW_LOOSE.
	SubstitutionOption *string `json:"substitutionOption,omitempty" tf:"substitution_option,omitempty"`

	// List of volumes to mount into the build step.
	// Each volume is created as an empty volume prior to execution of the
	// build step. Upon completion of the build, volumes and their contents
	// are discarded.
	// Using a named volume in only one step is not valid as it is
	// indicative of a build request with an incorrect configuration.
	// Structure is documented below.
	Volumes []VolumesObservation `json:"volumes,omitempty" tf:"volumes,omitempty"`

	// Option to specify a WorkerPool for the build. Format projects/{project}/workerPools/{workerPool}
	// This field is experimental.
	WorkerPool *string `json:"workerPool,omitempty" tf:"worker_pool,omitempty"`
}

type OptionsParameters struct {

	// Requested disk size for the VM that runs the build. Note that this is NOT "disk free";
	// some of the space will be used by the operating system and build utilities.
	// Also note that this is the minimum disk size that will be allocated for the build --
	// the build may run with a larger disk than requested. At present, the maximum disk size
	// is 1000GB; builds that request more than the maximum are rejected with an error.
	// +kubebuilder:validation:Optional
	DiskSizeGb *float64 `json:"diskSizeGb,omitempty" tf:"disk_size_gb,omitempty"`

	// Option to specify whether or not to apply bash style string operations to the substitutions.
	// NOTE this is always enabled for triggered builds and cannot be overridden in the build configuration file.
	// +kubebuilder:validation:Optional
	DynamicSubstitutions *bool `json:"dynamicSubstitutions,omitempty" tf:"dynamic_substitutions,omitempty"`

	// A list of environment variable definitions to be used when
	// running a step.
	// The elements are of the form "KEY=VALUE" for the environment variable
	// "KEY" being given the value "VALUE".
	// +kubebuilder:validation:Optional
	Env []*string `json:"env,omitempty" tf:"env,omitempty"`

	// Option to define build log streaming behavior to Google Cloud Storage.
	// Possible values are: STREAM_DEFAULT, STREAM_ON, STREAM_OFF.
	// +kubebuilder:validation:Optional
	LogStreamingOption *string `json:"logStreamingOption,omitempty" tf:"log_streaming_option,omitempty"`

	// Option to specify the logging mode, which determines if and where build logs are stored.
	// Possible values are: LOGGING_UNSPECIFIED, LEGACY, GCS_ONLY, STACKDRIVER_ONLY, CLOUD_LOGGING_ONLY, NONE.
	// +kubebuilder:validation:Optional
	Logging *string `json:"logging,omitempty" tf:"logging,omitempty"`

	// Compute Engine machine type on which to run the build.
	// +kubebuilder:validation:Optional
	MachineType *string `json:"machineType,omitempty" tf:"machine_type,omitempty"`

	// Requested verifiability options.
	// Possible values are: NOT_VERIFIED, VERIFIED.
	// +kubebuilder:validation:Optional
	RequestedVerifyOption *string `json:"requestedVerifyOption,omitempty" tf:"requested_verify_option,omitempty"`

	// A list of environment variables which are encrypted using
	// a Cloud Key
	// Management Service crypto key. These values must be specified in
	// the build's Secret.
	// +kubebuilder:validation:Optional
	SecretEnv []*string `json:"secretEnv,omitempty" tf:"secret_env,omitempty"`

	// Requested hash for SourceProvenance.
	// Each value may be one of: NONE, SHA256, MD5.
	// +kubebuilder:validation:Optional
	SourceProvenanceHash []*string `json:"sourceProvenanceHash,omitempty" tf:"source_provenance_hash,omitempty"`

	// Option to specify behavior when there is an error in the substitution checks.
	// NOTE this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden
	// in the build configuration file.
	// Possible values are: MUST_MATCH, ALLOW_LOOSE.
	// +kubebuilder:validation:Optional
	SubstitutionOption *string `json:"substitutionOption,omitempty" tf:"substitution_option,omitempty"`

	// List of volumes to mount into the build step.
	// Each volume is created as an empty volume prior to execution of the
	// build step. Upon completion of the build, volumes and their contents
	// are discarded.
	// Using a named volume in only one step is not valid as it is
	// indicative of a build request with an incorrect configuration.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Volumes []VolumesParameters `json:"volumes,omitempty" tf:"volumes,omitempty"`

	// Option to specify a WorkerPool for the build. Format projects/{project}/workerPools/{workerPool}
	// This field is experimental.
	// +kubebuilder:validation:Optional
	WorkerPool *string `json:"workerPool,omitempty" tf:"worker_pool,omitempty"`
}

type PubsubConfigInitParameters struct {

	// Service account that will make the push request.
	ServiceAccountEmail *string `json:"serviceAccountEmail,omitempty" tf:"service_account_email,omitempty"`

	// The name of the topic from which this subscription is receiving messages.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/pubsub/v1beta1.Topic
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	Topic *string `json:"topic,omitempty" tf:"topic,omitempty"`

	// Reference to a Topic in pubsub to populate topic.
	// +kubebuilder:validation:Optional
	TopicRef *v1.Reference `json:"topicRef,omitempty" tf:"-"`

	// Selector for a Topic in pubsub to populate topic.
	// +kubebuilder:validation:Optional
	TopicSelector *v1.Selector `json:"topicSelector,omitempty" tf:"-"`
}

type PubsubConfigObservation struct {

	// Service account that will make the push request.
	ServiceAccountEmail *string `json:"serviceAccountEmail,omitempty" tf:"service_account_email,omitempty"`

	// (Output)
	// Potential issues with the underlying Pub/Sub subscription configuration.
	// Only populated on get requests.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// (Output)
	// Output only. Name of the subscription.
	Subscription *string `json:"subscription,omitempty" tf:"subscription,omitempty"`

	// The name of the topic from which this subscription is receiving messages.
	Topic *string `json:"topic,omitempty" tf:"topic,omitempty"`
}

type PubsubConfigParameters struct {

	// Service account that will make the push request.
	// +kubebuilder:validation:Optional
	ServiceAccountEmail *string `json:"serviceAccountEmail,omitempty" tf:"service_account_email,omitempty"`

	// The name of the topic from which this subscription is receiving messages.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/pubsub/v1beta1.Topic
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	Topic *string `json:"topic,omitempty" tf:"topic,omitempty"`

	// Reference to a Topic in pubsub to populate topic.
	// +kubebuilder:validation:Optional
	TopicRef *v1.Reference `json:"topicRef,omitempty" tf:"-"`

	// Selector for a Topic in pubsub to populate topic.
	// +kubebuilder:validation:Optional
	TopicSelector *v1.Selector `json:"topicSelector,omitempty" tf:"-"`
}

type PullRequestInitParameters struct {

	// Regex of branches to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// Configure builds to run whether a repository owner or collaborator need to comment /gcbrun.
	// Possible values are: COMMENTS_DISABLED, COMMENTS_ENABLED, COMMENTS_ENABLED_FOR_EXTERNAL_CONTRIBUTORS_ONLY.
	CommentControl *string `json:"commentControl,omitempty" tf:"comment_control,omitempty"`

	// Only trigger a build if the revision regex does NOT match the revision regex.
	InvertRegex *bool `json:"invertRegex,omitempty" tf:"invert_regex,omitempty"`
}

type PullRequestObservation struct {

	// Regex of branches to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// Configure builds to run whether a repository owner or collaborator need to comment /gcbrun.
	// Possible values are: COMMENTS_DISABLED, COMMENTS_ENABLED, COMMENTS_ENABLED_FOR_EXTERNAL_CONTRIBUTORS_ONLY.
	CommentControl *string `json:"commentControl,omitempty" tf:"comment_control,omitempty"`

	// Only trigger a build if the revision regex does NOT match the revision regex.
	InvertRegex *bool `json:"invertRegex,omitempty" tf:"invert_regex,omitempty"`
}

type PullRequestParameters struct {

	// Regex of branches to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	// +kubebuilder:validation:Optional
	Branch *string `json:"branch" tf:"branch,omitempty"`

	// Configure builds to run whether a repository owner or collaborator need to comment /gcbrun.
	// Possible values are: COMMENTS_DISABLED, COMMENTS_ENABLED, COMMENTS_ENABLED_FOR_EXTERNAL_CONTRIBUTORS_ONLY.
	// +kubebuilder:validation:Optional
	CommentControl *string `json:"commentControl,omitempty" tf:"comment_control,omitempty"`

	// Only trigger a build if the revision regex does NOT match the revision regex.
	// +kubebuilder:validation:Optional
	InvertRegex *bool `json:"invertRegex,omitempty" tf:"invert_regex,omitempty"`
}

type PushInitParameters struct {

	// Regex of branches to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// Only trigger a build if the revision regex does NOT match the revision regex.
	InvertRegex *bool `json:"invertRegex,omitempty" tf:"invert_regex,omitempty"`

	// Regex of tags to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PushObservation struct {

	// Regex of branches to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// Only trigger a build if the revision regex does NOT match the revision regex.
	InvertRegex *bool `json:"invertRegex,omitempty" tf:"invert_regex,omitempty"`

	// Regex of tags to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PushParameters struct {

	// Regex of branches to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	// +kubebuilder:validation:Optional
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// Only trigger a build if the revision regex does NOT match the revision regex.
	// +kubebuilder:validation:Optional
	InvertRegex *bool `json:"invertRegex,omitempty" tf:"invert_regex,omitempty"`

	// Regex of tags to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type RepoSourceInitParameters struct {

	// Name of the branch to build. Exactly one a of branch name, tag, or commit SHA must be provided.
	// This field is a regular expression.
	BranchName *string `json:"branchName,omitempty" tf:"branch_name,omitempty"`

	// Explicit commit SHA to build. Exactly one of a branch name, tag, or commit SHA must be provided.
	CommitSha *string `json:"commitSha,omitempty" tf:"commit_sha,omitempty"`

	// Directory, relative to the source root, in which to run the build.
	// This must be a relative path. If a step's dir is specified and
	// is an absolute path, this value is ignored for that step's
	// execution.
	Dir *string `json:"dir,omitempty" tf:"dir,omitempty"`

	// Only trigger a build if the revision regex does NOT match the revision regex.
	InvertRegex *bool `json:"invertRegex,omitempty" tf:"invert_regex,omitempty"`

	// ID of the project that owns the Cloud Source Repository. If
	// omitted, the project ID requesting the build is assumed.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Name of the Cloud Source Repository. If omitted, the name "default" is assumed.
	RepoName *string `json:"repoName,omitempty" tf:"repo_name,omitempty"`

	// Substitutions data for Build resource.
	// +mapType=granular
	Substitutions map[string]*string `json:"substitutions,omitempty" tf:"substitutions,omitempty"`

	// Name of the tag to build. Exactly one of a branch name, tag, or commit SHA must be provided.
	// This field is a regular expression.
	TagName *string `json:"tagName,omitempty" tf:"tag_name,omitempty"`
}

type RepoSourceObservation struct {

	// Name of the branch to build. Exactly one a of branch name, tag, or commit SHA must be provided.
	// This field is a regular expression.
	BranchName *string `json:"branchName,omitempty" tf:"branch_name,omitempty"`

	// Explicit commit SHA to build. Exactly one of a branch name, tag, or commit SHA must be provided.
	CommitSha *string `json:"commitSha,omitempty" tf:"commit_sha,omitempty"`

	// Directory, relative to the source root, in which to run the build.
	// This must be a relative path. If a step's dir is specified and
	// is an absolute path, this value is ignored for that step's
	// execution.
	Dir *string `json:"dir,omitempty" tf:"dir,omitempty"`

	// Only trigger a build if the revision regex does NOT match the revision regex.
	InvertRegex *bool `json:"invertRegex,omitempty" tf:"invert_regex,omitempty"`

	// ID of the project that owns the Cloud Source Repository. If
	// omitted, the project ID requesting the build is assumed.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Name of the Cloud Source Repository. If omitted, the name "default" is assumed.
	RepoName *string `json:"repoName,omitempty" tf:"repo_name,omitempty"`

	// Substitutions data for Build resource.
	// +mapType=granular
	Substitutions map[string]*string `json:"substitutions,omitempty" tf:"substitutions,omitempty"`

	// Name of the tag to build. Exactly one of a branch name, tag, or commit SHA must be provided.
	// This field is a regular expression.
	TagName *string `json:"tagName,omitempty" tf:"tag_name,omitempty"`
}

type RepoSourceParameters struct {

	// Name of the branch to build. Exactly one a of branch name, tag, or commit SHA must be provided.
	// This field is a regular expression.
	// +kubebuilder:validation:Optional
	BranchName *string `json:"branchName,omitempty" tf:"branch_name,omitempty"`

	// Explicit commit SHA to build. Exactly one of a branch name, tag, or commit SHA must be provided.
	// +kubebuilder:validation:Optional
	CommitSha *string `json:"commitSha,omitempty" tf:"commit_sha,omitempty"`

	// Directory, relative to the source root, in which to run the build.
	// This must be a relative path. If a step's dir is specified and
	// is an absolute path, this value is ignored for that step's
	// execution.
	// +kubebuilder:validation:Optional
	Dir *string `json:"dir,omitempty" tf:"dir,omitempty"`

	// Only trigger a build if the revision regex does NOT match the revision regex.
	// +kubebuilder:validation:Optional
	InvertRegex *bool `json:"invertRegex,omitempty" tf:"invert_regex,omitempty"`

	// ID of the project that owns the Cloud Source Repository. If
	// omitted, the project ID requesting the build is assumed.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Name of the Cloud Source Repository. If omitted, the name "default" is assumed.
	// +kubebuilder:validation:Optional
	RepoName *string `json:"repoName" tf:"repo_name,omitempty"`

	// Substitutions data for Build resource.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Substitutions map[string]*string `json:"substitutions,omitempty" tf:"substitutions,omitempty"`

	// Name of the tag to build. Exactly one of a branch name, tag, or commit SHA must be provided.
	// This field is a regular expression.
	// +kubebuilder:validation:Optional
	TagName *string `json:"tagName,omitempty" tf:"tag_name,omitempty"`
}

type RepositoryEventConfigInitParameters struct {

	// Contains filter properties for matching Pull Requests.
	// Structure is documented below.
	PullRequest []RepositoryEventConfigPullRequestInitParameters `json:"pullRequest,omitempty" tf:"pull_request,omitempty"`

	// Contains filter properties for matching git pushes.
	// Structure is documented below.
	Push []RepositoryEventConfigPushInitParameters `json:"push,omitempty" tf:"push,omitempty"`

	// The resource name of the Repo API resource.
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`
}

type RepositoryEventConfigObservation struct {

	// Contains filter properties for matching Pull Requests.
	// Structure is documented below.
	PullRequest []RepositoryEventConfigPullRequestObservation `json:"pullRequest,omitempty" tf:"pull_request,omitempty"`

	// Contains filter properties for matching git pushes.
	// Structure is documented below.
	Push []RepositoryEventConfigPushObservation `json:"push,omitempty" tf:"push,omitempty"`

	// The resource name of the Repo API resource.
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`
}

type RepositoryEventConfigParameters struct {

	// Contains filter properties for matching Pull Requests.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	PullRequest []RepositoryEventConfigPullRequestParameters `json:"pullRequest,omitempty" tf:"pull_request,omitempty"`

	// Contains filter properties for matching git pushes.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Push []RepositoryEventConfigPushParameters `json:"push,omitempty" tf:"push,omitempty"`

	// The resource name of the Repo API resource.
	// +kubebuilder:validation:Optional
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`
}

type RepositoryEventConfigPullRequestInitParameters struct {

	// Regex of branches to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// Configure builds to run whether a repository owner or collaborator need to comment /gcbrun.
	// Possible values are: COMMENTS_DISABLED, COMMENTS_ENABLED, COMMENTS_ENABLED_FOR_EXTERNAL_CONTRIBUTORS_ONLY.
	CommentControl *string `json:"commentControl,omitempty" tf:"comment_control,omitempty"`

	// Only trigger a build if the revision regex does NOT match the revision regex.
	InvertRegex *bool `json:"invertRegex,omitempty" tf:"invert_regex,omitempty"`
}

type RepositoryEventConfigPullRequestObservation struct {

	// Regex of branches to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// Configure builds to run whether a repository owner or collaborator need to comment /gcbrun.
	// Possible values are: COMMENTS_DISABLED, COMMENTS_ENABLED, COMMENTS_ENABLED_FOR_EXTERNAL_CONTRIBUTORS_ONLY.
	CommentControl *string `json:"commentControl,omitempty" tf:"comment_control,omitempty"`

	// Only trigger a build if the revision regex does NOT match the revision regex.
	InvertRegex *bool `json:"invertRegex,omitempty" tf:"invert_regex,omitempty"`
}

type RepositoryEventConfigPullRequestParameters struct {

	// Regex of branches to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	// +kubebuilder:validation:Optional
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// Configure builds to run whether a repository owner or collaborator need to comment /gcbrun.
	// Possible values are: COMMENTS_DISABLED, COMMENTS_ENABLED, COMMENTS_ENABLED_FOR_EXTERNAL_CONTRIBUTORS_ONLY.
	// +kubebuilder:validation:Optional
	CommentControl *string `json:"commentControl,omitempty" tf:"comment_control,omitempty"`

	// Only trigger a build if the revision regex does NOT match the revision regex.
	// +kubebuilder:validation:Optional
	InvertRegex *bool `json:"invertRegex,omitempty" tf:"invert_regex,omitempty"`
}

type RepositoryEventConfigPushInitParameters struct {

	// Regex of branches to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// Only trigger a build if the revision regex does NOT match the revision regex.
	InvertRegex *bool `json:"invertRegex,omitempty" tf:"invert_regex,omitempty"`

	// Regex of tags to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type RepositoryEventConfigPushObservation struct {

	// Regex of branches to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// Only trigger a build if the revision regex does NOT match the revision regex.
	InvertRegex *bool `json:"invertRegex,omitempty" tf:"invert_regex,omitempty"`

	// Regex of tags to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type RepositoryEventConfigPushParameters struct {

	// Regex of branches to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	// +kubebuilder:validation:Optional
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// Only trigger a build if the revision regex does NOT match the revision regex.
	// +kubebuilder:validation:Optional
	InvertRegex *bool `json:"invertRegex,omitempty" tf:"invert_regex,omitempty"`

	// Regex of tags to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type SecretInitParameters struct {

	// Cloud KMS key name to use to decrypt these envs.
	KMSKeyName *string `json:"kmsKeyName,omitempty" tf:"kms_key_name,omitempty"`

	// A list of environment variables which are encrypted using
	// a Cloud Key
	// Management Service crypto key. These values must be specified in
	// the build's Secret.
	// +mapType=granular
	SecretEnv map[string]*string `json:"secretEnv,omitempty" tf:"secret_env,omitempty"`
}

type SecretManagerInitParameters struct {

	// A list of environment variable definitions to be used when
	// running a step.
	// The elements are of the form "KEY=VALUE" for the environment variable
	// "KEY" being given the value "VALUE".
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// Resource name of the SecretVersion. In format: projects//secrets//versions/*
	VersionName *string `json:"versionName,omitempty" tf:"version_name,omitempty"`
}

type SecretManagerObservation struct {

	// A list of environment variable definitions to be used when
	// running a step.
	// The elements are of the form "KEY=VALUE" for the environment variable
	// "KEY" being given the value "VALUE".
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// Resource name of the SecretVersion. In format: projects//secrets//versions/*
	VersionName *string `json:"versionName,omitempty" tf:"version_name,omitempty"`
}

type SecretManagerParameters struct {

	// A list of environment variable definitions to be used when
	// running a step.
	// The elements are of the form "KEY=VALUE" for the environment variable
	// "KEY" being given the value "VALUE".
	// +kubebuilder:validation:Optional
	Env *string `json:"env" tf:"env,omitempty"`

	// Resource name of the SecretVersion. In format: projects//secrets//versions/*
	// +kubebuilder:validation:Optional
	VersionName *string `json:"versionName" tf:"version_name,omitempty"`
}

type SecretObservation struct {

	// Cloud KMS key name to use to decrypt these envs.
	KMSKeyName *string `json:"kmsKeyName,omitempty" tf:"kms_key_name,omitempty"`

	// A list of environment variables which are encrypted using
	// a Cloud Key
	// Management Service crypto key. These values must be specified in
	// the build's Secret.
	// +mapType=granular
	SecretEnv map[string]*string `json:"secretEnv,omitempty" tf:"secret_env,omitempty"`
}

type SecretParameters struct {

	// Cloud KMS key name to use to decrypt these envs.
	// +kubebuilder:validation:Optional
	KMSKeyName *string `json:"kmsKeyName" tf:"kms_key_name,omitempty"`

	// A list of environment variables which are encrypted using
	// a Cloud Key
	// Management Service crypto key. These values must be specified in
	// the build's Secret.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	SecretEnv map[string]*string `json:"secretEnv,omitempty" tf:"secret_env,omitempty"`
}

type SourceInitParameters struct {

	// Location of the source in a Google Cloud Source Repository.
	// Structure is documented below.
	RepoSource []RepoSourceInitParameters `json:"repoSource,omitempty" tf:"repo_source,omitempty"`

	// Location of the source in an archive file in Google Cloud Storage.
	// Structure is documented below.
	StorageSource []StorageSourceInitParameters `json:"storageSource,omitempty" tf:"storage_source,omitempty"`
}

type SourceObservation struct {

	// Location of the source in a Google Cloud Source Repository.
	// Structure is documented below.
	RepoSource []RepoSourceObservation `json:"repoSource,omitempty" tf:"repo_source,omitempty"`

	// Location of the source in an archive file in Google Cloud Storage.
	// Structure is documented below.
	StorageSource []StorageSourceObservation `json:"storageSource,omitempty" tf:"storage_source,omitempty"`
}

type SourceParameters struct {

	// Location of the source in a Google Cloud Source Repository.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	RepoSource []RepoSourceParameters `json:"repoSource,omitempty" tf:"repo_source,omitempty"`

	// Location of the source in an archive file in Google Cloud Storage.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	StorageSource []StorageSourceParameters `json:"storageSource,omitempty" tf:"storage_source,omitempty"`
}

type SourceToBuildInitParameters struct {

	// The full resource name of the github enterprise config.
	// Format: projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}. projects/{project}/githubEnterpriseConfigs/{id}.
	GithubEnterpriseConfig *string `json:"githubEnterpriseConfig,omitempty" tf:"github_enterprise_config,omitempty"`

	// The branch or tag to use. Must start with "refs/" .
	Ref *string `json:"ref,omitempty" tf:"ref,omitempty"`

	// The type of the repo, since it may not be explicit from the repo field (e.g from a URL).
	// Values can be UNKNOWN, CLOUD_SOURCE_REPOSITORIES, GITHUB, BITBUCKET_SERVER
	// Possible values are: UNKNOWN, CLOUD_SOURCE_REPOSITORIES, GITHUB, BITBUCKET_SERVER.
	RepoType *string `json:"repoType,omitempty" tf:"repo_type,omitempty"`

	// The qualified resource name of the Repo API repository.
	// Either uri or repository can be specified and is required.
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`

	// The URI of the repo.
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`
}

type SourceToBuildObservation struct {

	// The full resource name of the github enterprise config.
	// Format: projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}. projects/{project}/githubEnterpriseConfigs/{id}.
	GithubEnterpriseConfig *string `json:"githubEnterpriseConfig,omitempty" tf:"github_enterprise_config,omitempty"`

	// The branch or tag to use. Must start with "refs/" .
	Ref *string `json:"ref,omitempty" tf:"ref,omitempty"`

	// The type of the repo, since it may not be explicit from the repo field (e.g from a URL).
	// Values can be UNKNOWN, CLOUD_SOURCE_REPOSITORIES, GITHUB, BITBUCKET_SERVER
	// Possible values are: UNKNOWN, CLOUD_SOURCE_REPOSITORIES, GITHUB, BITBUCKET_SERVER.
	RepoType *string `json:"repoType,omitempty" tf:"repo_type,omitempty"`

	// The qualified resource name of the Repo API repository.
	// Either uri or repository can be specified and is required.
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`

	// The URI of the repo.
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`
}

type SourceToBuildParameters struct {

	// The full resource name of the github enterprise config.
	// Format: projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}. projects/{project}/githubEnterpriseConfigs/{id}.
	// +kubebuilder:validation:Optional
	GithubEnterpriseConfig *string `json:"githubEnterpriseConfig,omitempty" tf:"github_enterprise_config,omitempty"`

	// The branch or tag to use. Must start with "refs/" .
	// +kubebuilder:validation:Optional
	Ref *string `json:"ref" tf:"ref,omitempty"`

	// The type of the repo, since it may not be explicit from the repo field (e.g from a URL).
	// Values can be UNKNOWN, CLOUD_SOURCE_REPOSITORIES, GITHUB, BITBUCKET_SERVER
	// Possible values are: UNKNOWN, CLOUD_SOURCE_REPOSITORIES, GITHUB, BITBUCKET_SERVER.
	// +kubebuilder:validation:Optional
	RepoType *string `json:"repoType" tf:"repo_type,omitempty"`

	// The qualified resource name of the Repo API repository.
	// Either uri or repository can be specified and is required.
	// +kubebuilder:validation:Optional
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`

	// The URI of the repo.
	// +kubebuilder:validation:Optional
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`
}

type StepInitParameters struct {

	// Allow this build step to fail without failing the entire build if and
	// only if the exit code is one of the specified codes.
	// If allowFailure is also specified, this field will take precedence.
	AllowExitCodes []*float64 `json:"allowExitCodes,omitempty" tf:"allow_exit_codes,omitempty"`

	// Allow this build step to fail without failing the entire build.
	// If false, the entire build will fail if this step fails. Otherwise, the
	// build will succeed, but this step will still have a failure status.
	// Error information will be reported in the failureDetail field.
	// allowExitCodes takes precedence over this field.
	AllowFailure *bool `json:"allowFailure,omitempty" tf:"allow_failure,omitempty"`

	// A list of arguments that will be presented to the step when it is started.
	// If the image used to run the step's container has an entrypoint, the args
	// are used as arguments to that entrypoint. If the image does not define an
	// entrypoint, the first element in args is used as the entrypoint, and the
	// remainder will be used as arguments.
	Args []*string `json:"args,omitempty" tf:"args,omitempty"`

	// Directory, relative to the source root, in which to run the build.
	// This must be a relative path. If a step's dir is specified and
	// is an absolute path, this value is ignored for that step's
	// execution.
	Dir *string `json:"dir,omitempty" tf:"dir,omitempty"`

	// Entrypoint to be used instead of the build step image's
	// default entrypoint.
	// If unset, the image's default entrypoint is used
	Entrypoint *string `json:"entrypoint,omitempty" tf:"entrypoint,omitempty"`

	// A list of environment variable definitions to be used when
	// running a step.
	// The elements are of the form "KEY=VALUE" for the environment variable
	// "KEY" being given the value "VALUE".
	Env []*string `json:"env,omitempty" tf:"env,omitempty"`

	// Unique identifier for this build step, used in wait_for to
	// reference this build step as a dependency.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Name of the volume to mount.
	// Volume names must be unique per build step and must be valid names for
	// Docker volumes. Each named volume must be used by at least two build steps.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A shell script to be executed in the step.
	// When script is provided, the user cannot specify the entrypoint or args.
	Script *string `json:"script,omitempty" tf:"script,omitempty"`

	// A list of environment variables which are encrypted using
	// a Cloud Key
	// Management Service crypto key. These values must be specified in
	// the build's Secret.
	SecretEnv []*string `json:"secretEnv,omitempty" tf:"secret_env,omitempty"`

	// Time limit for executing this build step. If not defined,
	// the step has no
	// time limit and will be allowed to continue to run until either it
	// completes or the build itself times out.
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// Output only. Stores timing information for executing this
	// build step.
	Timing *string `json:"timing,omitempty" tf:"timing,omitempty"`

	// List of volumes to mount into the build step.
	// Each volume is created as an empty volume prior to execution of the
	// build step. Upon completion of the build, volumes and their contents
	// are discarded.
	// Using a named volume in only one step is not valid as it is
	// indicative of a build request with an incorrect configuration.
	// Structure is documented below.
	Volumes []StepVolumesInitParameters `json:"volumes,omitempty" tf:"volumes,omitempty"`

	// The ID(s) of the step(s) that this build step depends on.
	// This build step will not start until all the build steps in wait_for
	// have completed successfully. If wait_for is empty, this build step
	// will start when all previous build steps in the Build.Steps list
	// have completed successfully.
	WaitFor []*string `json:"waitFor,omitempty" tf:"wait_for,omitempty"`
}

type StepObservation struct {

	// Allow this build step to fail without failing the entire build if and
	// only if the exit code is one of the specified codes.
	// If allowFailure is also specified, this field will take precedence.
	AllowExitCodes []*float64 `json:"allowExitCodes,omitempty" tf:"allow_exit_codes,omitempty"`

	// Allow this build step to fail without failing the entire build.
	// If false, the entire build will fail if this step fails. Otherwise, the
	// build will succeed, but this step will still have a failure status.
	// Error information will be reported in the failureDetail field.
	// allowExitCodes takes precedence over this field.
	AllowFailure *bool `json:"allowFailure,omitempty" tf:"allow_failure,omitempty"`

	// A list of arguments that will be presented to the step when it is started.
	// If the image used to run the step's container has an entrypoint, the args
	// are used as arguments to that entrypoint. If the image does not define an
	// entrypoint, the first element in args is used as the entrypoint, and the
	// remainder will be used as arguments.
	Args []*string `json:"args,omitempty" tf:"args,omitempty"`

	// Directory, relative to the source root, in which to run the build.
	// This must be a relative path. If a step's dir is specified and
	// is an absolute path, this value is ignored for that step's
	// execution.
	Dir *string `json:"dir,omitempty" tf:"dir,omitempty"`

	// Entrypoint to be used instead of the build step image's
	// default entrypoint.
	// If unset, the image's default entrypoint is used
	Entrypoint *string `json:"entrypoint,omitempty" tf:"entrypoint,omitempty"`

	// A list of environment variable definitions to be used when
	// running a step.
	// The elements are of the form "KEY=VALUE" for the environment variable
	// "KEY" being given the value "VALUE".
	Env []*string `json:"env,omitempty" tf:"env,omitempty"`

	// Unique identifier for this build step, used in wait_for to
	// reference this build step as a dependency.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Name of the volume to mount.
	// Volume names must be unique per build step and must be valid names for
	// Docker volumes. Each named volume must be used by at least two build steps.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A shell script to be executed in the step.
	// When script is provided, the user cannot specify the entrypoint or args.
	Script *string `json:"script,omitempty" tf:"script,omitempty"`

	// A list of environment variables which are encrypted using
	// a Cloud Key
	// Management Service crypto key. These values must be specified in
	// the build's Secret.
	SecretEnv []*string `json:"secretEnv,omitempty" tf:"secret_env,omitempty"`

	// Time limit for executing this build step. If not defined,
	// the step has no
	// time limit and will be allowed to continue to run until either it
	// completes or the build itself times out.
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// Output only. Stores timing information for executing this
	// build step.
	Timing *string `json:"timing,omitempty" tf:"timing,omitempty"`

	// List of volumes to mount into the build step.
	// Each volume is created as an empty volume prior to execution of the
	// build step. Upon completion of the build, volumes and their contents
	// are discarded.
	// Using a named volume in only one step is not valid as it is
	// indicative of a build request with an incorrect configuration.
	// Structure is documented below.
	Volumes []StepVolumesObservation `json:"volumes,omitempty" tf:"volumes,omitempty"`

	// The ID(s) of the step(s) that this build step depends on.
	// This build step will not start until all the build steps in wait_for
	// have completed successfully. If wait_for is empty, this build step
	// will start when all previous build steps in the Build.Steps list
	// have completed successfully.
	WaitFor []*string `json:"waitFor,omitempty" tf:"wait_for,omitempty"`
}

type StepParameters struct {

	// Allow this build step to fail without failing the entire build if and
	// only if the exit code is one of the specified codes.
	// If allowFailure is also specified, this field will take precedence.
	// +kubebuilder:validation:Optional
	AllowExitCodes []*float64 `json:"allowExitCodes,omitempty" tf:"allow_exit_codes,omitempty"`

	// Allow this build step to fail without failing the entire build.
	// If false, the entire build will fail if this step fails. Otherwise, the
	// build will succeed, but this step will still have a failure status.
	// Error information will be reported in the failureDetail field.
	// allowExitCodes takes precedence over this field.
	// +kubebuilder:validation:Optional
	AllowFailure *bool `json:"allowFailure,omitempty" tf:"allow_failure,omitempty"`

	// A list of arguments that will be presented to the step when it is started.
	// If the image used to run the step's container has an entrypoint, the args
	// are used as arguments to that entrypoint. If the image does not define an
	// entrypoint, the first element in args is used as the entrypoint, and the
	// remainder will be used as arguments.
	// +kubebuilder:validation:Optional
	Args []*string `json:"args,omitempty" tf:"args,omitempty"`

	// Directory, relative to the source root, in which to run the build.
	// This must be a relative path. If a step's dir is specified and
	// is an absolute path, this value is ignored for that step's
	// execution.
	// +kubebuilder:validation:Optional
	Dir *string `json:"dir,omitempty" tf:"dir,omitempty"`

	// Entrypoint to be used instead of the build step image's
	// default entrypoint.
	// If unset, the image's default entrypoint is used
	// +kubebuilder:validation:Optional
	Entrypoint *string `json:"entrypoint,omitempty" tf:"entrypoint,omitempty"`

	// A list of environment variable definitions to be used when
	// running a step.
	// The elements are of the form "KEY=VALUE" for the environment variable
	// "KEY" being given the value "VALUE".
	// +kubebuilder:validation:Optional
	Env []*string `json:"env,omitempty" tf:"env,omitempty"`

	// Unique identifier for this build step, used in wait_for to
	// reference this build step as a dependency.
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Name of the volume to mount.
	// Volume names must be unique per build step and must be valid names for
	// Docker volumes. Each named volume must be used by at least two build steps.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// A shell script to be executed in the step.
	// When script is provided, the user cannot specify the entrypoint or args.
	// +kubebuilder:validation:Optional
	Script *string `json:"script,omitempty" tf:"script,omitempty"`

	// A list of environment variables which are encrypted using
	// a Cloud Key
	// Management Service crypto key. These values must be specified in
	// the build's Secret.
	// +kubebuilder:validation:Optional
	SecretEnv []*string `json:"secretEnv,omitempty" tf:"secret_env,omitempty"`

	// Time limit for executing this build step. If not defined,
	// the step has no
	// time limit and will be allowed to continue to run until either it
	// completes or the build itself times out.
	// +kubebuilder:validation:Optional
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// Output only. Stores timing information for executing this
	// build step.
	// +kubebuilder:validation:Optional
	Timing *string `json:"timing,omitempty" tf:"timing,omitempty"`

	// List of volumes to mount into the build step.
	// Each volume is created as an empty volume prior to execution of the
	// build step. Upon completion of the build, volumes and their contents
	// are discarded.
	// Using a named volume in only one step is not valid as it is
	// indicative of a build request with an incorrect configuration.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Volumes []StepVolumesParameters `json:"volumes,omitempty" tf:"volumes,omitempty"`

	// The ID(s) of the step(s) that this build step depends on.
	// This build step will not start until all the build steps in wait_for
	// have completed successfully. If wait_for is empty, this build step
	// will start when all previous build steps in the Build.Steps list
	// have completed successfully.
	// +kubebuilder:validation:Optional
	WaitFor []*string `json:"waitFor,omitempty" tf:"wait_for,omitempty"`
}

type StepVolumesInitParameters struct {

	// Name of the volume to mount.
	// Volume names must be unique per build step and must be valid names for
	// Docker volumes. Each named volume must be used by at least two build steps.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Path at which to mount the volume.
	// Paths must be absolute and cannot conflict with other volume paths on
	// the same build step or with certain reserved volume paths.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type StepVolumesObservation struct {

	// Name of the volume to mount.
	// Volume names must be unique per build step and must be valid names for
	// Docker volumes. Each named volume must be used by at least two build steps.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Path at which to mount the volume.
	// Paths must be absolute and cannot conflict with other volume paths on
	// the same build step or with certain reserved volume paths.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type StepVolumesParameters struct {

	// Name of the volume to mount.
	// Volume names must be unique per build step and must be valid names for
	// Docker volumes. Each named volume must be used by at least two build steps.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Path at which to mount the volume.
	// Paths must be absolute and cannot conflict with other volume paths on
	// the same build step or with certain reserved volume paths.
	// +kubebuilder:validation:Optional
	Path *string `json:"path" tf:"path,omitempty"`
}

type StorageSourceInitParameters struct {

	// Google Cloud Storage bucket containing the source.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Google Cloud Storage generation for the object.
	// If the generation is omitted, the latest generation will be used
	Generation *string `json:"generation,omitempty" tf:"generation,omitempty"`

	// Google Cloud Storage object containing the source.
	// This object must be a gzipped archive file (.tar.gz) containing source to build.
	Object *string `json:"object,omitempty" tf:"object,omitempty"`
}

type StorageSourceObservation struct {

	// Google Cloud Storage bucket containing the source.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Google Cloud Storage generation for the object.
	// If the generation is omitted, the latest generation will be used
	Generation *string `json:"generation,omitempty" tf:"generation,omitempty"`

	// Google Cloud Storage object containing the source.
	// This object must be a gzipped archive file (.tar.gz) containing source to build.
	Object *string `json:"object,omitempty" tf:"object,omitempty"`
}

type StorageSourceParameters struct {

	// Google Cloud Storage bucket containing the source.
	// +kubebuilder:validation:Optional
	Bucket *string `json:"bucket" tf:"bucket,omitempty"`

	// Google Cloud Storage generation for the object.
	// If the generation is omitted, the latest generation will be used
	// +kubebuilder:validation:Optional
	Generation *string `json:"generation,omitempty" tf:"generation,omitempty"`

	// Google Cloud Storage object containing the source.
	// This object must be a gzipped archive file (.tar.gz) containing source to build.
	// +kubebuilder:validation:Optional
	Object *string `json:"object" tf:"object,omitempty"`
}

type TimingInitParameters struct {
}

type TimingObservation struct {

	// End of time span.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
	// nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	EndTime *string `json:"endTime,omitempty" tf:"end_time,omitempty"`

	// Start of time span.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
	// nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`
}

type TimingParameters struct {
}

type TriggerInitParameters struct {

	// Configuration for manual approval to start a build invocation of this BuildTrigger.
	// Builds created by this trigger will require approval before they execute.
	// Any user with a Cloud Build Approver role for the project can approve a build.
	// Structure is documented below.
	ApprovalConfig []ApprovalConfigInitParameters `json:"approvalConfig,omitempty" tf:"approval_config,omitempty"`

	// BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server event is received.
	// Structure is documented below.
	BitbucketServerTriggerConfig []BitbucketServerTriggerConfigInitParameters `json:"bitbucketServerTriggerConfig,omitempty" tf:"bitbucket_server_trigger_config,omitempty"`

	// Contents of the build template. Either a filename or build template must be provided.
	// Structure is documented below.
	Build []BuildInitParameters `json:"build,omitempty" tf:"build,omitempty"`

	// Human-readable description of the trigger.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Whether the trigger is disabled or not. If true, the trigger will never result in a build.
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// Path, from the source root, to a file whose contents is used for the template.
	// Either a filename or build template must be provided. Set this only when using trigger_template or github.
	// When using Pub/Sub, Webhook or Manual set the file name using git_file_source instead.
	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`

	// A Common Expression Language string. Used only with Pub/Sub and Webhook.
	Filter *string `json:"filter,omitempty" tf:"filter,omitempty"`

	// The file source describing the local or remote Build template.
	// Structure is documented below.
	GitFileSource []GitFileSourceInitParameters `json:"gitFileSource,omitempty" tf:"git_file_source,omitempty"`

	// Describes the configuration of a trigger that creates a build whenever a GitHub event is received.
	// One of trigger_template, github, pubsub_config or webhook_config must be provided.
	// Structure is documented below.
	Github []GithubInitParameters `json:"github,omitempty" tf:"github,omitempty"`

	// ignoredFiles and includedFiles are file glob matches using https://golang.org/pkg/path/filepath/#Match
	// extended with support for **.
	// If ignoredFiles and changed files are both empty, then they are not
	// used to determine whether or not to trigger a build.
	// If ignoredFiles is not empty, then we ignore any files that match any
	// of the ignored_file globs. If the change has no files that are outside
	// of the ignoredFiles globs, then we do not trigger a build.
	IgnoredFiles []*string `json:"ignoredFiles,omitempty" tf:"ignored_files,omitempty"`

	// Build logs will be sent back to GitHub as part of the checkrun
	// result.  Values can be INCLUDE_BUILD_LOGS_UNSPECIFIED or
	// INCLUDE_BUILD_LOGS_WITH_STATUS
	// Possible values are: INCLUDE_BUILD_LOGS_UNSPECIFIED, INCLUDE_BUILD_LOGS_WITH_STATUS.
	IncludeBuildLogs *string `json:"includeBuildLogs,omitempty" tf:"include_build_logs,omitempty"`

	// ignoredFiles and includedFiles are file glob matches using https://golang.org/pkg/path/filepath/#Match
	// extended with support for **.
	// If any of the files altered in the commit pass the ignoredFiles filter
	// and includedFiles is empty, then as far as this filter is concerned, we
	// should trigger the build.
	// If any of the files altered in the commit pass the ignoredFiles filter
	// and includedFiles is not empty, then we make sure that at least one of
	// those files matches a includedFiles glob. If not, then we do not trigger
	// a build.
	IncludedFiles []*string `json:"includedFiles,omitempty" tf:"included_files,omitempty"`

	// The Cloud Build location for the trigger.
	// If not specified, "global" is used.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// Name of the trigger. Must be unique within the project.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// PubsubConfig describes the configuration of a trigger that creates
	// a build whenever a Pub/Sub message is published.
	// One of trigger_template, github, pubsub_config webhook_config or source_to_build must be provided.
	// Structure is documented below.
	PubsubConfig []PubsubConfigInitParameters `json:"pubsubConfig,omitempty" tf:"pubsub_config,omitempty"`

	// The configuration of a trigger that creates a build whenever an event from Repo API is received.
	// Structure is documented below.
	RepositoryEventConfig []RepositoryEventConfigInitParameters `json:"repositoryEventConfig,omitempty" tf:"repository_event_config,omitempty"`

	// The service account used for all user-controlled operations including
	// triggers.patch, triggers.run, builds.create, and builds.cancel.
	// If no service account is set, then the standard Cloud Build service account
	// ([PROJECT_NUM]@system.gserviceaccount.com) will be used instead.
	// Format: projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL}
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/cloudplatform/v1beta1.ServiceAccount
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	ServiceAccount *string `json:"serviceAccount,omitempty" tf:"service_account,omitempty"`

	// Reference to a ServiceAccount in cloudplatform to populate serviceAccount.
	// +kubebuilder:validation:Optional
	ServiceAccountRef *v1.Reference `json:"serviceAccountRef,omitempty" tf:"-"`

	// Selector for a ServiceAccount in cloudplatform to populate serviceAccount.
	// +kubebuilder:validation:Optional
	ServiceAccountSelector *v1.Selector `json:"serviceAccountSelector,omitempty" tf:"-"`

	// The repo and ref of the repository from which to build.
	// This field is used only for those triggers that do not respond to SCM events.
	// Triggers that respond to such events build source at whatever commit caused the event.
	// This field is currently only used by Webhook, Pub/Sub, Manual, and Cron triggers.
	// One of trigger_template, github, pubsub_config webhook_config or source_to_build must be provided.
	// Structure is documented below.
	SourceToBuild []SourceToBuildInitParameters `json:"sourceToBuild,omitempty" tf:"source_to_build,omitempty"`

	// Substitutions data for Build resource.
	// +mapType=granular
	Substitutions map[string]*string `json:"substitutions,omitempty" tf:"substitutions,omitempty"`

	// Tags for annotation of a BuildTrigger
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Template describing the types of source changes to trigger a build.
	// Branch and tag names in trigger templates are interpreted as regular
	// expressions. Any branch or tag change that matches that regular
	// expression will trigger a build.
	// One of trigger_template, github, pubsub_config, webhook_config or source_to_build must be provided.
	// Structure is documented below.
	TriggerTemplate []TriggerTemplateInitParameters `json:"triggerTemplate,omitempty" tf:"trigger_template,omitempty"`

	// WebhookConfig describes the configuration of a trigger that creates
	// a build whenever a webhook is sent to a trigger's webhook URL.
	// One of trigger_template, github, pubsub_config webhook_config or source_to_build must be provided.
	// Structure is documented below.
	WebhookConfig []WebhookConfigInitParameters `json:"webhookConfig,omitempty" tf:"webhook_config,omitempty"`
}

type TriggerObservation struct {

	// Configuration for manual approval to start a build invocation of this BuildTrigger.
	// Builds created by this trigger will require approval before they execute.
	// Any user with a Cloud Build Approver role for the project can approve a build.
	// Structure is documented below.
	ApprovalConfig []ApprovalConfigObservation `json:"approvalConfig,omitempty" tf:"approval_config,omitempty"`

	// BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server event is received.
	// Structure is documented below.
	BitbucketServerTriggerConfig []BitbucketServerTriggerConfigObservation `json:"bitbucketServerTriggerConfig,omitempty" tf:"bitbucket_server_trigger_config,omitempty"`

	// Contents of the build template. Either a filename or build template must be provided.
	// Structure is documented below.
	Build []BuildObservation `json:"build,omitempty" tf:"build,omitempty"`

	// Time when the trigger was created.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Human-readable description of the trigger.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Whether the trigger is disabled or not. If true, the trigger will never result in a build.
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// Path, from the source root, to a file whose contents is used for the template.
	// Either a filename or build template must be provided. Set this only when using trigger_template or github.
	// When using Pub/Sub, Webhook or Manual set the file name using git_file_source instead.
	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`

	// A Common Expression Language string. Used only with Pub/Sub and Webhook.
	Filter *string `json:"filter,omitempty" tf:"filter,omitempty"`

	// The file source describing the local or remote Build template.
	// Structure is documented below.
	GitFileSource []GitFileSourceObservation `json:"gitFileSource,omitempty" tf:"git_file_source,omitempty"`

	// Describes the configuration of a trigger that creates a build whenever a GitHub event is received.
	// One of trigger_template, github, pubsub_config or webhook_config must be provided.
	// Structure is documented below.
	Github []GithubObservation `json:"github,omitempty" tf:"github,omitempty"`

	// an identifier for the resource with format projects/{{project}}/locations/{{location}}/triggers/{{trigger_id}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// ignoredFiles and includedFiles are file glob matches using https://golang.org/pkg/path/filepath/#Match
	// extended with support for **.
	// If ignoredFiles and changed files are both empty, then they are not
	// used to determine whether or not to trigger a build.
	// If ignoredFiles is not empty, then we ignore any files that match any
	// of the ignored_file globs. If the change has no files that are outside
	// of the ignoredFiles globs, then we do not trigger a build.
	IgnoredFiles []*string `json:"ignoredFiles,omitempty" tf:"ignored_files,omitempty"`

	// Build logs will be sent back to GitHub as part of the checkrun
	// result.  Values can be INCLUDE_BUILD_LOGS_UNSPECIFIED or
	// INCLUDE_BUILD_LOGS_WITH_STATUS
	// Possible values are: INCLUDE_BUILD_LOGS_UNSPECIFIED, INCLUDE_BUILD_LOGS_WITH_STATUS.
	IncludeBuildLogs *string `json:"includeBuildLogs,omitempty" tf:"include_build_logs,omitempty"`

	// ignoredFiles and includedFiles are file glob matches using https://golang.org/pkg/path/filepath/#Match
	// extended with support for **.
	// If any of the files altered in the commit pass the ignoredFiles filter
	// and includedFiles is empty, then as far as this filter is concerned, we
	// should trigger the build.
	// If any of the files altered in the commit pass the ignoredFiles filter
	// and includedFiles is not empty, then we make sure that at least one of
	// those files matches a includedFiles glob. If not, then we do not trigger
	// a build.
	IncludedFiles []*string `json:"includedFiles,omitempty" tf:"included_files,omitempty"`

	// The Cloud Build location for the trigger.
	// If not specified, "global" is used.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// Name of the trigger. Must be unique within the project.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// PubsubConfig describes the configuration of a trigger that creates
	// a build whenever a Pub/Sub message is published.
	// One of trigger_template, github, pubsub_config webhook_config or source_to_build must be provided.
	// Structure is documented below.
	PubsubConfig []PubsubConfigObservation `json:"pubsubConfig,omitempty" tf:"pubsub_config,omitempty"`

	// The configuration of a trigger that creates a build whenever an event from Repo API is received.
	// Structure is documented below.
	RepositoryEventConfig []RepositoryEventConfigObservation `json:"repositoryEventConfig,omitempty" tf:"repository_event_config,omitempty"`

	// The service account used for all user-controlled operations including
	// triggers.patch, triggers.run, builds.create, and builds.cancel.
	// If no service account is set, then the standard Cloud Build service account
	// ([PROJECT_NUM]@system.gserviceaccount.com) will be used instead.
	// Format: projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL}
	ServiceAccount *string `json:"serviceAccount,omitempty" tf:"service_account,omitempty"`

	// The repo and ref of the repository from which to build.
	// This field is used only for those triggers that do not respond to SCM events.
	// Triggers that respond to such events build source at whatever commit caused the event.
	// This field is currently only used by Webhook, Pub/Sub, Manual, and Cron triggers.
	// One of trigger_template, github, pubsub_config webhook_config or source_to_build must be provided.
	// Structure is documented below.
	SourceToBuild []SourceToBuildObservation `json:"sourceToBuild,omitempty" tf:"source_to_build,omitempty"`

	// Substitutions data for Build resource.
	// +mapType=granular
	Substitutions map[string]*string `json:"substitutions,omitempty" tf:"substitutions,omitempty"`

	// Tags for annotation of a BuildTrigger
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The unique identifier for the trigger.
	TriggerID *string `json:"triggerId,omitempty" tf:"trigger_id,omitempty"`

	// Template describing the types of source changes to trigger a build.
	// Branch and tag names in trigger templates are interpreted as regular
	// expressions. Any branch or tag change that matches that regular
	// expression will trigger a build.
	// One of trigger_template, github, pubsub_config, webhook_config or source_to_build must be provided.
	// Structure is documented below.
	TriggerTemplate []TriggerTemplateObservation `json:"triggerTemplate,omitempty" tf:"trigger_template,omitempty"`

	// WebhookConfig describes the configuration of a trigger that creates
	// a build whenever a webhook is sent to a trigger's webhook URL.
	// One of trigger_template, github, pubsub_config webhook_config or source_to_build must be provided.
	// Structure is documented below.
	WebhookConfig []WebhookConfigObservation `json:"webhookConfig,omitempty" tf:"webhook_config,omitempty"`
}

type TriggerParameters struct {

	// Configuration for manual approval to start a build invocation of this BuildTrigger.
	// Builds created by this trigger will require approval before they execute.
	// Any user with a Cloud Build Approver role for the project can approve a build.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	ApprovalConfig []ApprovalConfigParameters `json:"approvalConfig,omitempty" tf:"approval_config,omitempty"`

	// BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server event is received.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	BitbucketServerTriggerConfig []BitbucketServerTriggerConfigParameters `json:"bitbucketServerTriggerConfig,omitempty" tf:"bitbucket_server_trigger_config,omitempty"`

	// Contents of the build template. Either a filename or build template must be provided.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Build []BuildParameters `json:"build,omitempty" tf:"build,omitempty"`

	// Human-readable description of the trigger.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Whether the trigger is disabled or not. If true, the trigger will never result in a build.
	// +kubebuilder:validation:Optional
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// Path, from the source root, to a file whose contents is used for the template.
	// Either a filename or build template must be provided. Set this only when using trigger_template or github.
	// When using Pub/Sub, Webhook or Manual set the file name using git_file_source instead.
	// +kubebuilder:validation:Optional
	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`

	// A Common Expression Language string. Used only with Pub/Sub and Webhook.
	// +kubebuilder:validation:Optional
	Filter *string `json:"filter,omitempty" tf:"filter,omitempty"`

	// The file source describing the local or remote Build template.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	GitFileSource []GitFileSourceParameters `json:"gitFileSource,omitempty" tf:"git_file_source,omitempty"`

	// Describes the configuration of a trigger that creates a build whenever a GitHub event is received.
	// One of trigger_template, github, pubsub_config or webhook_config must be provided.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Github []GithubParameters `json:"github,omitempty" tf:"github,omitempty"`

	// ignoredFiles and includedFiles are file glob matches using https://golang.org/pkg/path/filepath/#Match
	// extended with support for **.
	// If ignoredFiles and changed files are both empty, then they are not
	// used to determine whether or not to trigger a build.
	// If ignoredFiles is not empty, then we ignore any files that match any
	// of the ignored_file globs. If the change has no files that are outside
	// of the ignoredFiles globs, then we do not trigger a build.
	// +kubebuilder:validation:Optional
	IgnoredFiles []*string `json:"ignoredFiles,omitempty" tf:"ignored_files,omitempty"`

	// Build logs will be sent back to GitHub as part of the checkrun
	// result.  Values can be INCLUDE_BUILD_LOGS_UNSPECIFIED or
	// INCLUDE_BUILD_LOGS_WITH_STATUS
	// Possible values are: INCLUDE_BUILD_LOGS_UNSPECIFIED, INCLUDE_BUILD_LOGS_WITH_STATUS.
	// +kubebuilder:validation:Optional
	IncludeBuildLogs *string `json:"includeBuildLogs,omitempty" tf:"include_build_logs,omitempty"`

	// ignoredFiles and includedFiles are file glob matches using https://golang.org/pkg/path/filepath/#Match
	// extended with support for **.
	// If any of the files altered in the commit pass the ignoredFiles filter
	// and includedFiles is empty, then as far as this filter is concerned, we
	// should trigger the build.
	// If any of the files altered in the commit pass the ignoredFiles filter
	// and includedFiles is not empty, then we make sure that at least one of
	// those files matches a includedFiles glob. If not, then we do not trigger
	// a build.
	// +kubebuilder:validation:Optional
	IncludedFiles []*string `json:"includedFiles,omitempty" tf:"included_files,omitempty"`

	// The Cloud Build location for the trigger.
	// If not specified, "global" is used.
	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// Name of the trigger. Must be unique within the project.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// PubsubConfig describes the configuration of a trigger that creates
	// a build whenever a Pub/Sub message is published.
	// One of trigger_template, github, pubsub_config webhook_config or source_to_build must be provided.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	PubsubConfig []PubsubConfigParameters `json:"pubsubConfig,omitempty" tf:"pubsub_config,omitempty"`

	// The configuration of a trigger that creates a build whenever an event from Repo API is received.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	RepositoryEventConfig []RepositoryEventConfigParameters `json:"repositoryEventConfig,omitempty" tf:"repository_event_config,omitempty"`

	// The service account used for all user-controlled operations including
	// triggers.patch, triggers.run, builds.create, and builds.cancel.
	// If no service account is set, then the standard Cloud Build service account
	// ([PROJECT_NUM]@system.gserviceaccount.com) will be used instead.
	// Format: projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL}
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/cloudplatform/v1beta1.ServiceAccount
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ServiceAccount *string `json:"serviceAccount,omitempty" tf:"service_account,omitempty"`

	// Reference to a ServiceAccount in cloudplatform to populate serviceAccount.
	// +kubebuilder:validation:Optional
	ServiceAccountRef *v1.Reference `json:"serviceAccountRef,omitempty" tf:"-"`

	// Selector for a ServiceAccount in cloudplatform to populate serviceAccount.
	// +kubebuilder:validation:Optional
	ServiceAccountSelector *v1.Selector `json:"serviceAccountSelector,omitempty" tf:"-"`

	// The repo and ref of the repository from which to build.
	// This field is used only for those triggers that do not respond to SCM events.
	// Triggers that respond to such events build source at whatever commit caused the event.
	// This field is currently only used by Webhook, Pub/Sub, Manual, and Cron triggers.
	// One of trigger_template, github, pubsub_config webhook_config or source_to_build must be provided.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	SourceToBuild []SourceToBuildParameters `json:"sourceToBuild,omitempty" tf:"source_to_build,omitempty"`

	// Substitutions data for Build resource.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Substitutions map[string]*string `json:"substitutions,omitempty" tf:"substitutions,omitempty"`

	// Tags for annotation of a BuildTrigger
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Template describing the types of source changes to trigger a build.
	// Branch and tag names in trigger templates are interpreted as regular
	// expressions. Any branch or tag change that matches that regular
	// expression will trigger a build.
	// One of trigger_template, github, pubsub_config, webhook_config or source_to_build must be provided.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	TriggerTemplate []TriggerTemplateParameters `json:"triggerTemplate,omitempty" tf:"trigger_template,omitempty"`

	// WebhookConfig describes the configuration of a trigger that creates
	// a build whenever a webhook is sent to a trigger's webhook URL.
	// One of trigger_template, github, pubsub_config webhook_config or source_to_build must be provided.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	WebhookConfig []WebhookConfigParameters `json:"webhookConfig,omitempty" tf:"webhook_config,omitempty"`
}

type TriggerTemplateInitParameters struct {

	// Name of the branch to build. Exactly one a of branch name, tag, or commit SHA must be provided.
	// This field is a regular expression.
	BranchName *string `json:"branchName,omitempty" tf:"branch_name,omitempty"`

	// Explicit commit SHA to build. Exactly one of a branch name, tag, or commit SHA must be provided.
	CommitSha *string `json:"commitSha,omitempty" tf:"commit_sha,omitempty"`

	// Directory, relative to the source root, in which to run the build.
	// This must be a relative path. If a step's dir is specified and
	// is an absolute path, this value is ignored for that step's
	// execution.
	Dir *string `json:"dir,omitempty" tf:"dir,omitempty"`

	// Only trigger a build if the revision regex does NOT match the revision regex.
	InvertRegex *bool `json:"invertRegex,omitempty" tf:"invert_regex,omitempty"`

	// ID of the project that owns the Cloud Source Repository. If
	// omitted, the project ID requesting the build is assumed.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Name of the Cloud Source Repository. If omitted, the name "default" is assumed.
	RepoName *string `json:"repoName,omitempty" tf:"repo_name,omitempty"`

	// Name of the tag to build. Exactly one of a branch name, tag, or commit SHA must be provided.
	// This field is a regular expression.
	TagName *string `json:"tagName,omitempty" tf:"tag_name,omitempty"`
}

type TriggerTemplateObservation struct {

	// Name of the branch to build. Exactly one a of branch name, tag, or commit SHA must be provided.
	// This field is a regular expression.
	BranchName *string `json:"branchName,omitempty" tf:"branch_name,omitempty"`

	// Explicit commit SHA to build. Exactly one of a branch name, tag, or commit SHA must be provided.
	CommitSha *string `json:"commitSha,omitempty" tf:"commit_sha,omitempty"`

	// Directory, relative to the source root, in which to run the build.
	// This must be a relative path. If a step's dir is specified and
	// is an absolute path, this value is ignored for that step's
	// execution.
	Dir *string `json:"dir,omitempty" tf:"dir,omitempty"`

	// Only trigger a build if the revision regex does NOT match the revision regex.
	InvertRegex *bool `json:"invertRegex,omitempty" tf:"invert_regex,omitempty"`

	// ID of the project that owns the Cloud Source Repository. If
	// omitted, the project ID requesting the build is assumed.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Name of the Cloud Source Repository. If omitted, the name "default" is assumed.
	RepoName *string `json:"repoName,omitempty" tf:"repo_name,omitempty"`

	// Name of the tag to build. Exactly one of a branch name, tag, or commit SHA must be provided.
	// This field is a regular expression.
	TagName *string `json:"tagName,omitempty" tf:"tag_name,omitempty"`
}

type TriggerTemplateParameters struct {

	// Name of the branch to build. Exactly one a of branch name, tag, or commit SHA must be provided.
	// This field is a regular expression.
	// +kubebuilder:validation:Optional
	BranchName *string `json:"branchName,omitempty" tf:"branch_name,omitempty"`

	// Explicit commit SHA to build. Exactly one of a branch name, tag, or commit SHA must be provided.
	// +kubebuilder:validation:Optional
	CommitSha *string `json:"commitSha,omitempty" tf:"commit_sha,omitempty"`

	// Directory, relative to the source root, in which to run the build.
	// This must be a relative path. If a step's dir is specified and
	// is an absolute path, this value is ignored for that step's
	// execution.
	// +kubebuilder:validation:Optional
	Dir *string `json:"dir,omitempty" tf:"dir,omitempty"`

	// Only trigger a build if the revision regex does NOT match the revision regex.
	// +kubebuilder:validation:Optional
	InvertRegex *bool `json:"invertRegex,omitempty" tf:"invert_regex,omitempty"`

	// ID of the project that owns the Cloud Source Repository. If
	// omitted, the project ID requesting the build is assumed.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Name of the Cloud Source Repository. If omitted, the name "default" is assumed.
	// +kubebuilder:validation:Optional
	RepoName *string `json:"repoName,omitempty" tf:"repo_name,omitempty"`

	// Name of the tag to build. Exactly one of a branch name, tag, or commit SHA must be provided.
	// This field is a regular expression.
	// +kubebuilder:validation:Optional
	TagName *string `json:"tagName,omitempty" tf:"tag_name,omitempty"`
}

type VolumesInitParameters struct {

	// Name of the volume to mount.
	// Volume names must be unique per build step and must be valid names for
	// Docker volumes. Each named volume must be used by at least two build steps.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Path at which to mount the volume.
	// Paths must be absolute and cannot conflict with other volume paths on
	// the same build step or with certain reserved volume paths.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type VolumesObservation struct {

	// Name of the volume to mount.
	// Volume names must be unique per build step and must be valid names for
	// Docker volumes. Each named volume must be used by at least two build steps.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Path at which to mount the volume.
	// Paths must be absolute and cannot conflict with other volume paths on
	// the same build step or with certain reserved volume paths.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type VolumesParameters struct {

	// Name of the volume to mount.
	// Volume names must be unique per build step and must be valid names for
	// Docker volumes. Each named volume must be used by at least two build steps.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Path at which to mount the volume.
	// Paths must be absolute and cannot conflict with other volume paths on
	// the same build step or with certain reserved volume paths.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type WebhookConfigInitParameters struct {

	// Resource name for the secret required as a URL parameter.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/secretmanager/v1beta1.SecretVersion
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	Secret *string `json:"secret,omitempty" tf:"secret,omitempty"`

	// Reference to a SecretVersion in secretmanager to populate secret.
	// +kubebuilder:validation:Optional
	SecretRef *v1.Reference `json:"secretRef,omitempty" tf:"-"`

	// Selector for a SecretVersion in secretmanager to populate secret.
	// +kubebuilder:validation:Optional
	SecretSelector *v1.Selector `json:"secretSelector,omitempty" tf:"-"`
}

type WebhookConfigObservation struct {

	// Resource name for the secret required as a URL parameter.
	Secret *string `json:"secret,omitempty" tf:"secret,omitempty"`

	// (Output)
	// Potential issues with the underlying Pub/Sub subscription configuration.
	// Only populated on get requests.
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type WebhookConfigParameters struct {

	// Resource name for the secret required as a URL parameter.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/secretmanager/v1beta1.SecretVersion
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	Secret *string `json:"secret,omitempty" tf:"secret,omitempty"`

	// Reference to a SecretVersion in secretmanager to populate secret.
	// +kubebuilder:validation:Optional
	SecretRef *v1.Reference `json:"secretRef,omitempty" tf:"-"`

	// Selector for a SecretVersion in secretmanager to populate secret.
	// +kubebuilder:validation:Optional
	SecretSelector *v1.Selector `json:"secretSelector,omitempty" tf:"-"`
}

// TriggerSpec defines the desired state of Trigger
type TriggerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TriggerParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TriggerInitParameters `json:"initProvider,omitempty"`
}

// TriggerStatus defines the observed state of Trigger.
type TriggerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TriggerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Trigger is the Schema for the Triggers API. Configuration for an automated build in response to source repository changes.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type Trigger struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TriggerSpec   `json:"spec"`
	Status            TriggerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TriggerList contains a list of Triggers
type TriggerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Trigger `json:"items"`
}

// Repository type metadata.
var (
	Trigger_Kind             = "Trigger"
	Trigger_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Trigger_Kind}.String()
	Trigger_KindAPIVersion   = Trigger_Kind + "." + CRDGroupVersion.String()
	Trigger_GroupVersionKind = CRDGroupVersion.WithKind(Trigger_Kind)
)

func init() {
	SchemeBuilder.Register(&Trigger{}, &TriggerList{})
}
