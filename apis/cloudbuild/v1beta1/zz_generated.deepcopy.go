//go:build !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ApprovalConfigInitParameters) DeepCopyInto(out *ApprovalConfigInitParameters) {
	*out = *in
	if in.ApprovalRequired != nil {
		in, out := &in.ApprovalRequired, &out.ApprovalRequired
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ApprovalConfigInitParameters.
func (in *ApprovalConfigInitParameters) DeepCopy() *ApprovalConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(ApprovalConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ApprovalConfigObservation) DeepCopyInto(out *ApprovalConfigObservation) {
	*out = *in
	if in.ApprovalRequired != nil {
		in, out := &in.ApprovalRequired, &out.ApprovalRequired
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ApprovalConfigObservation.
func (in *ApprovalConfigObservation) DeepCopy() *ApprovalConfigObservation {
	if in == nil {
		return nil
	}
	out := new(ApprovalConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ApprovalConfigParameters) DeepCopyInto(out *ApprovalConfigParameters) {
	*out = *in
	if in.ApprovalRequired != nil {
		in, out := &in.ApprovalRequired, &out.ApprovalRequired
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ApprovalConfigParameters.
func (in *ApprovalConfigParameters) DeepCopy() *ApprovalConfigParameters {
	if in == nil {
		return nil
	}
	out := new(ApprovalConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ArtifactsInitParameters) DeepCopyInto(out *ArtifactsInitParameters) {
	*out = *in
	if in.Images != nil {
		in, out := &in.Images, &out.Images
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MavenArtifacts != nil {
		in, out := &in.MavenArtifacts, &out.MavenArtifacts
		*out = make([]MavenArtifactsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NpmPackages != nil {
		in, out := &in.NpmPackages, &out.NpmPackages
		*out = make([]NpmPackagesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Objects != nil {
		in, out := &in.Objects, &out.Objects
		*out = make([]ObjectsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PythonPackages != nil {
		in, out := &in.PythonPackages, &out.PythonPackages
		*out = make([]PythonPackagesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ArtifactsInitParameters.
func (in *ArtifactsInitParameters) DeepCopy() *ArtifactsInitParameters {
	if in == nil {
		return nil
	}
	out := new(ArtifactsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ArtifactsObservation) DeepCopyInto(out *ArtifactsObservation) {
	*out = *in
	if in.Images != nil {
		in, out := &in.Images, &out.Images
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MavenArtifacts != nil {
		in, out := &in.MavenArtifacts, &out.MavenArtifacts
		*out = make([]MavenArtifactsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NpmPackages != nil {
		in, out := &in.NpmPackages, &out.NpmPackages
		*out = make([]NpmPackagesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Objects != nil {
		in, out := &in.Objects, &out.Objects
		*out = make([]ObjectsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PythonPackages != nil {
		in, out := &in.PythonPackages, &out.PythonPackages
		*out = make([]PythonPackagesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ArtifactsObservation.
func (in *ArtifactsObservation) DeepCopy() *ArtifactsObservation {
	if in == nil {
		return nil
	}
	out := new(ArtifactsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ArtifactsParameters) DeepCopyInto(out *ArtifactsParameters) {
	*out = *in
	if in.Images != nil {
		in, out := &in.Images, &out.Images
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MavenArtifacts != nil {
		in, out := &in.MavenArtifacts, &out.MavenArtifacts
		*out = make([]MavenArtifactsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NpmPackages != nil {
		in, out := &in.NpmPackages, &out.NpmPackages
		*out = make([]NpmPackagesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Objects != nil {
		in, out := &in.Objects, &out.Objects
		*out = make([]ObjectsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PythonPackages != nil {
		in, out := &in.PythonPackages, &out.PythonPackages
		*out = make([]PythonPackagesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ArtifactsParameters.
func (in *ArtifactsParameters) DeepCopy() *ArtifactsParameters {
	if in == nil {
		return nil
	}
	out := new(ArtifactsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AvailableSecretsInitParameters) DeepCopyInto(out *AvailableSecretsInitParameters) {
	*out = *in
	if in.SecretManager != nil {
		in, out := &in.SecretManager, &out.SecretManager
		*out = make([]SecretManagerInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AvailableSecretsInitParameters.
func (in *AvailableSecretsInitParameters) DeepCopy() *AvailableSecretsInitParameters {
	if in == nil {
		return nil
	}
	out := new(AvailableSecretsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AvailableSecretsObservation) DeepCopyInto(out *AvailableSecretsObservation) {
	*out = *in
	if in.SecretManager != nil {
		in, out := &in.SecretManager, &out.SecretManager
		*out = make([]SecretManagerObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AvailableSecretsObservation.
func (in *AvailableSecretsObservation) DeepCopy() *AvailableSecretsObservation {
	if in == nil {
		return nil
	}
	out := new(AvailableSecretsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AvailableSecretsParameters) DeepCopyInto(out *AvailableSecretsParameters) {
	*out = *in
	if in.SecretManager != nil {
		in, out := &in.SecretManager, &out.SecretManager
		*out = make([]SecretManagerParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AvailableSecretsParameters.
func (in *AvailableSecretsParameters) DeepCopy() *AvailableSecretsParameters {
	if in == nil {
		return nil
	}
	out := new(AvailableSecretsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BitbucketServerTriggerConfigInitParameters) DeepCopyInto(out *BitbucketServerTriggerConfigInitParameters) {
	*out = *in
	if in.BitbucketServerConfigResource != nil {
		in, out := &in.BitbucketServerConfigResource, &out.BitbucketServerConfigResource
		*out = new(string)
		**out = **in
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PullRequest != nil {
		in, out := &in.PullRequest, &out.PullRequest
		*out = make([]PullRequestInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Push != nil {
		in, out := &in.Push, &out.Push
		*out = make([]PushInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RepoSlug != nil {
		in, out := &in.RepoSlug, &out.RepoSlug
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BitbucketServerTriggerConfigInitParameters.
func (in *BitbucketServerTriggerConfigInitParameters) DeepCopy() *BitbucketServerTriggerConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(BitbucketServerTriggerConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BitbucketServerTriggerConfigObservation) DeepCopyInto(out *BitbucketServerTriggerConfigObservation) {
	*out = *in
	if in.BitbucketServerConfigResource != nil {
		in, out := &in.BitbucketServerConfigResource, &out.BitbucketServerConfigResource
		*out = new(string)
		**out = **in
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PullRequest != nil {
		in, out := &in.PullRequest, &out.PullRequest
		*out = make([]PullRequestObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Push != nil {
		in, out := &in.Push, &out.Push
		*out = make([]PushObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RepoSlug != nil {
		in, out := &in.RepoSlug, &out.RepoSlug
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BitbucketServerTriggerConfigObservation.
func (in *BitbucketServerTriggerConfigObservation) DeepCopy() *BitbucketServerTriggerConfigObservation {
	if in == nil {
		return nil
	}
	out := new(BitbucketServerTriggerConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BitbucketServerTriggerConfigParameters) DeepCopyInto(out *BitbucketServerTriggerConfigParameters) {
	*out = *in
	if in.BitbucketServerConfigResource != nil {
		in, out := &in.BitbucketServerConfigResource, &out.BitbucketServerConfigResource
		*out = new(string)
		**out = **in
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.PullRequest != nil {
		in, out := &in.PullRequest, &out.PullRequest
		*out = make([]PullRequestParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Push != nil {
		in, out := &in.Push, &out.Push
		*out = make([]PushParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RepoSlug != nil {
		in, out := &in.RepoSlug, &out.RepoSlug
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BitbucketServerTriggerConfigParameters.
func (in *BitbucketServerTriggerConfigParameters) DeepCopy() *BitbucketServerTriggerConfigParameters {
	if in == nil {
		return nil
	}
	out := new(BitbucketServerTriggerConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BuildInitParameters) DeepCopyInto(out *BuildInitParameters) {
	*out = *in
	if in.Artifacts != nil {
		in, out := &in.Artifacts, &out.Artifacts
		*out = make([]ArtifactsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AvailableSecrets != nil {
		in, out := &in.AvailableSecrets, &out.AvailableSecrets
		*out = make([]AvailableSecretsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Images != nil {
		in, out := &in.Images, &out.Images
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.LogsBucket != nil {
		in, out := &in.LogsBucket, &out.LogsBucket
		*out = new(string)
		**out = **in
	}
	if in.Options != nil {
		in, out := &in.Options, &out.Options
		*out = make([]OptionsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.QueueTTL != nil {
		in, out := &in.QueueTTL, &out.QueueTTL
		*out = new(string)
		**out = **in
	}
	if in.Secret != nil {
		in, out := &in.Secret, &out.Secret
		*out = make([]SecretInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Source != nil {
		in, out := &in.Source, &out.Source
		*out = make([]SourceInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Step != nil {
		in, out := &in.Step, &out.Step
		*out = make([]StepInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Substitutions != nil {
		in, out := &in.Substitutions, &out.Substitutions
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BuildInitParameters.
func (in *BuildInitParameters) DeepCopy() *BuildInitParameters {
	if in == nil {
		return nil
	}
	out := new(BuildInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BuildObservation) DeepCopyInto(out *BuildObservation) {
	*out = *in
	if in.Artifacts != nil {
		in, out := &in.Artifacts, &out.Artifacts
		*out = make([]ArtifactsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AvailableSecrets != nil {
		in, out := &in.AvailableSecrets, &out.AvailableSecrets
		*out = make([]AvailableSecretsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Images != nil {
		in, out := &in.Images, &out.Images
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.LogsBucket != nil {
		in, out := &in.LogsBucket, &out.LogsBucket
		*out = new(string)
		**out = **in
	}
	if in.Options != nil {
		in, out := &in.Options, &out.Options
		*out = make([]OptionsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.QueueTTL != nil {
		in, out := &in.QueueTTL, &out.QueueTTL
		*out = new(string)
		**out = **in
	}
	if in.Secret != nil {
		in, out := &in.Secret, &out.Secret
		*out = make([]SecretObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Source != nil {
		in, out := &in.Source, &out.Source
		*out = make([]SourceObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Step != nil {
		in, out := &in.Step, &out.Step
		*out = make([]StepObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Substitutions != nil {
		in, out := &in.Substitutions, &out.Substitutions
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BuildObservation.
func (in *BuildObservation) DeepCopy() *BuildObservation {
	if in == nil {
		return nil
	}
	out := new(BuildObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BuildParameters) DeepCopyInto(out *BuildParameters) {
	*out = *in
	if in.Artifacts != nil {
		in, out := &in.Artifacts, &out.Artifacts
		*out = make([]ArtifactsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AvailableSecrets != nil {
		in, out := &in.AvailableSecrets, &out.AvailableSecrets
		*out = make([]AvailableSecretsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Images != nil {
		in, out := &in.Images, &out.Images
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.LogsBucket != nil {
		in, out := &in.LogsBucket, &out.LogsBucket
		*out = new(string)
		**out = **in
	}
	if in.Options != nil {
		in, out := &in.Options, &out.Options
		*out = make([]OptionsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.QueueTTL != nil {
		in, out := &in.QueueTTL, &out.QueueTTL
		*out = new(string)
		**out = **in
	}
	if in.Secret != nil {
		in, out := &in.Secret, &out.Secret
		*out = make([]SecretParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Source != nil {
		in, out := &in.Source, &out.Source
		*out = make([]SourceParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Step != nil {
		in, out := &in.Step, &out.Step
		*out = make([]StepParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Substitutions != nil {
		in, out := &in.Substitutions, &out.Substitutions
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BuildParameters.
func (in *BuildParameters) DeepCopy() *BuildParameters {
	if in == nil {
		return nil
	}
	out := new(BuildParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitFileSourceInitParameters) DeepCopyInto(out *GitFileSourceInitParameters) {
	*out = *in
	if in.BitbucketServerConfig != nil {
		in, out := &in.BitbucketServerConfig, &out.BitbucketServerConfig
		*out = new(string)
		**out = **in
	}
	if in.GithubEnterpriseConfig != nil {
		in, out := &in.GithubEnterpriseConfig, &out.GithubEnterpriseConfig
		*out = new(string)
		**out = **in
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.RepoType != nil {
		in, out := &in.RepoType, &out.RepoType
		*out = new(string)
		**out = **in
	}
	if in.Repository != nil {
		in, out := &in.Repository, &out.Repository
		*out = new(string)
		**out = **in
	}
	if in.Revision != nil {
		in, out := &in.Revision, &out.Revision
		*out = new(string)
		**out = **in
	}
	if in.URI != nil {
		in, out := &in.URI, &out.URI
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitFileSourceInitParameters.
func (in *GitFileSourceInitParameters) DeepCopy() *GitFileSourceInitParameters {
	if in == nil {
		return nil
	}
	out := new(GitFileSourceInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitFileSourceObservation) DeepCopyInto(out *GitFileSourceObservation) {
	*out = *in
	if in.BitbucketServerConfig != nil {
		in, out := &in.BitbucketServerConfig, &out.BitbucketServerConfig
		*out = new(string)
		**out = **in
	}
	if in.GithubEnterpriseConfig != nil {
		in, out := &in.GithubEnterpriseConfig, &out.GithubEnterpriseConfig
		*out = new(string)
		**out = **in
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.RepoType != nil {
		in, out := &in.RepoType, &out.RepoType
		*out = new(string)
		**out = **in
	}
	if in.Repository != nil {
		in, out := &in.Repository, &out.Repository
		*out = new(string)
		**out = **in
	}
	if in.Revision != nil {
		in, out := &in.Revision, &out.Revision
		*out = new(string)
		**out = **in
	}
	if in.URI != nil {
		in, out := &in.URI, &out.URI
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitFileSourceObservation.
func (in *GitFileSourceObservation) DeepCopy() *GitFileSourceObservation {
	if in == nil {
		return nil
	}
	out := new(GitFileSourceObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitFileSourceParameters) DeepCopyInto(out *GitFileSourceParameters) {
	*out = *in
	if in.BitbucketServerConfig != nil {
		in, out := &in.BitbucketServerConfig, &out.BitbucketServerConfig
		*out = new(string)
		**out = **in
	}
	if in.GithubEnterpriseConfig != nil {
		in, out := &in.GithubEnterpriseConfig, &out.GithubEnterpriseConfig
		*out = new(string)
		**out = **in
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.RepoType != nil {
		in, out := &in.RepoType, &out.RepoType
		*out = new(string)
		**out = **in
	}
	if in.Repository != nil {
		in, out := &in.Repository, &out.Repository
		*out = new(string)
		**out = **in
	}
	if in.Revision != nil {
		in, out := &in.Revision, &out.Revision
		*out = new(string)
		**out = **in
	}
	if in.URI != nil {
		in, out := &in.URI, &out.URI
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitFileSourceParameters.
func (in *GitFileSourceParameters) DeepCopy() *GitFileSourceParameters {
	if in == nil {
		return nil
	}
	out := new(GitFileSourceParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GithubInitParameters) DeepCopyInto(out *GithubInitParameters) {
	*out = *in
	if in.EnterpriseConfigResourceName != nil {
		in, out := &in.EnterpriseConfigResourceName, &out.EnterpriseConfigResourceName
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Owner != nil {
		in, out := &in.Owner, &out.Owner
		*out = new(string)
		**out = **in
	}
	if in.PullRequest != nil {
		in, out := &in.PullRequest, &out.PullRequest
		*out = make([]GithubPullRequestInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Push != nil {
		in, out := &in.Push, &out.Push
		*out = make([]GithubPushInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GithubInitParameters.
func (in *GithubInitParameters) DeepCopy() *GithubInitParameters {
	if in == nil {
		return nil
	}
	out := new(GithubInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GithubObservation) DeepCopyInto(out *GithubObservation) {
	*out = *in
	if in.EnterpriseConfigResourceName != nil {
		in, out := &in.EnterpriseConfigResourceName, &out.EnterpriseConfigResourceName
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Owner != nil {
		in, out := &in.Owner, &out.Owner
		*out = new(string)
		**out = **in
	}
	if in.PullRequest != nil {
		in, out := &in.PullRequest, &out.PullRequest
		*out = make([]GithubPullRequestObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Push != nil {
		in, out := &in.Push, &out.Push
		*out = make([]GithubPushObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GithubObservation.
func (in *GithubObservation) DeepCopy() *GithubObservation {
	if in == nil {
		return nil
	}
	out := new(GithubObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GithubParameters) DeepCopyInto(out *GithubParameters) {
	*out = *in
	if in.EnterpriseConfigResourceName != nil {
		in, out := &in.EnterpriseConfigResourceName, &out.EnterpriseConfigResourceName
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Owner != nil {
		in, out := &in.Owner, &out.Owner
		*out = new(string)
		**out = **in
	}
	if in.PullRequest != nil {
		in, out := &in.PullRequest, &out.PullRequest
		*out = make([]GithubPullRequestParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Push != nil {
		in, out := &in.Push, &out.Push
		*out = make([]GithubPushParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GithubParameters.
func (in *GithubParameters) DeepCopy() *GithubParameters {
	if in == nil {
		return nil
	}
	out := new(GithubParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GithubPullRequestInitParameters) DeepCopyInto(out *GithubPullRequestInitParameters) {
	*out = *in
	if in.Branch != nil {
		in, out := &in.Branch, &out.Branch
		*out = new(string)
		**out = **in
	}
	if in.CommentControl != nil {
		in, out := &in.CommentControl, &out.CommentControl
		*out = new(string)
		**out = **in
	}
	if in.InvertRegex != nil {
		in, out := &in.InvertRegex, &out.InvertRegex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GithubPullRequestInitParameters.
func (in *GithubPullRequestInitParameters) DeepCopy() *GithubPullRequestInitParameters {
	if in == nil {
		return nil
	}
	out := new(GithubPullRequestInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GithubPullRequestObservation) DeepCopyInto(out *GithubPullRequestObservation) {
	*out = *in
	if in.Branch != nil {
		in, out := &in.Branch, &out.Branch
		*out = new(string)
		**out = **in
	}
	if in.CommentControl != nil {
		in, out := &in.CommentControl, &out.CommentControl
		*out = new(string)
		**out = **in
	}
	if in.InvertRegex != nil {
		in, out := &in.InvertRegex, &out.InvertRegex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GithubPullRequestObservation.
func (in *GithubPullRequestObservation) DeepCopy() *GithubPullRequestObservation {
	if in == nil {
		return nil
	}
	out := new(GithubPullRequestObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GithubPullRequestParameters) DeepCopyInto(out *GithubPullRequestParameters) {
	*out = *in
	if in.Branch != nil {
		in, out := &in.Branch, &out.Branch
		*out = new(string)
		**out = **in
	}
	if in.CommentControl != nil {
		in, out := &in.CommentControl, &out.CommentControl
		*out = new(string)
		**out = **in
	}
	if in.InvertRegex != nil {
		in, out := &in.InvertRegex, &out.InvertRegex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GithubPullRequestParameters.
func (in *GithubPullRequestParameters) DeepCopy() *GithubPullRequestParameters {
	if in == nil {
		return nil
	}
	out := new(GithubPullRequestParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GithubPushInitParameters) DeepCopyInto(out *GithubPushInitParameters) {
	*out = *in
	if in.Branch != nil {
		in, out := &in.Branch, &out.Branch
		*out = new(string)
		**out = **in
	}
	if in.InvertRegex != nil {
		in, out := &in.InvertRegex, &out.InvertRegex
		*out = new(bool)
		**out = **in
	}
	if in.Tag != nil {
		in, out := &in.Tag, &out.Tag
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GithubPushInitParameters.
func (in *GithubPushInitParameters) DeepCopy() *GithubPushInitParameters {
	if in == nil {
		return nil
	}
	out := new(GithubPushInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GithubPushObservation) DeepCopyInto(out *GithubPushObservation) {
	*out = *in
	if in.Branch != nil {
		in, out := &in.Branch, &out.Branch
		*out = new(string)
		**out = **in
	}
	if in.InvertRegex != nil {
		in, out := &in.InvertRegex, &out.InvertRegex
		*out = new(bool)
		**out = **in
	}
	if in.Tag != nil {
		in, out := &in.Tag, &out.Tag
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GithubPushObservation.
func (in *GithubPushObservation) DeepCopy() *GithubPushObservation {
	if in == nil {
		return nil
	}
	out := new(GithubPushObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GithubPushParameters) DeepCopyInto(out *GithubPushParameters) {
	*out = *in
	if in.Branch != nil {
		in, out := &in.Branch, &out.Branch
		*out = new(string)
		**out = **in
	}
	if in.InvertRegex != nil {
		in, out := &in.InvertRegex, &out.InvertRegex
		*out = new(bool)
		**out = **in
	}
	if in.Tag != nil {
		in, out := &in.Tag, &out.Tag
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GithubPushParameters.
func (in *GithubPushParameters) DeepCopy() *GithubPushParameters {
	if in == nil {
		return nil
	}
	out := new(GithubPushParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MavenArtifactsInitParameters) DeepCopyInto(out *MavenArtifactsInitParameters) {
	*out = *in
	if in.ArtifactID != nil {
		in, out := &in.ArtifactID, &out.ArtifactID
		*out = new(string)
		**out = **in
	}
	if in.GroupID != nil {
		in, out := &in.GroupID, &out.GroupID
		*out = new(string)
		**out = **in
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.Repository != nil {
		in, out := &in.Repository, &out.Repository
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MavenArtifactsInitParameters.
func (in *MavenArtifactsInitParameters) DeepCopy() *MavenArtifactsInitParameters {
	if in == nil {
		return nil
	}
	out := new(MavenArtifactsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MavenArtifactsObservation) DeepCopyInto(out *MavenArtifactsObservation) {
	*out = *in
	if in.ArtifactID != nil {
		in, out := &in.ArtifactID, &out.ArtifactID
		*out = new(string)
		**out = **in
	}
	if in.GroupID != nil {
		in, out := &in.GroupID, &out.GroupID
		*out = new(string)
		**out = **in
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.Repository != nil {
		in, out := &in.Repository, &out.Repository
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MavenArtifactsObservation.
func (in *MavenArtifactsObservation) DeepCopy() *MavenArtifactsObservation {
	if in == nil {
		return nil
	}
	out := new(MavenArtifactsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MavenArtifactsParameters) DeepCopyInto(out *MavenArtifactsParameters) {
	*out = *in
	if in.ArtifactID != nil {
		in, out := &in.ArtifactID, &out.ArtifactID
		*out = new(string)
		**out = **in
	}
	if in.GroupID != nil {
		in, out := &in.GroupID, &out.GroupID
		*out = new(string)
		**out = **in
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.Repository != nil {
		in, out := &in.Repository, &out.Repository
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MavenArtifactsParameters.
func (in *MavenArtifactsParameters) DeepCopy() *MavenArtifactsParameters {
	if in == nil {
		return nil
	}
	out := new(MavenArtifactsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NetworkConfigInitParameters) DeepCopyInto(out *NetworkConfigInitParameters) {
	*out = *in
	if in.PeeredNetwork != nil {
		in, out := &in.PeeredNetwork, &out.PeeredNetwork
		*out = new(string)
		**out = **in
	}
	if in.PeeredNetworkIPRange != nil {
		in, out := &in.PeeredNetworkIPRange, &out.PeeredNetworkIPRange
		*out = new(string)
		**out = **in
	}
	if in.PeeredNetworkRef != nil {
		in, out := &in.PeeredNetworkRef, &out.PeeredNetworkRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.PeeredNetworkSelector != nil {
		in, out := &in.PeeredNetworkSelector, &out.PeeredNetworkSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NetworkConfigInitParameters.
func (in *NetworkConfigInitParameters) DeepCopy() *NetworkConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(NetworkConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NetworkConfigObservation) DeepCopyInto(out *NetworkConfigObservation) {
	*out = *in
	if in.PeeredNetwork != nil {
		in, out := &in.PeeredNetwork, &out.PeeredNetwork
		*out = new(string)
		**out = **in
	}
	if in.PeeredNetworkIPRange != nil {
		in, out := &in.PeeredNetworkIPRange, &out.PeeredNetworkIPRange
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NetworkConfigObservation.
func (in *NetworkConfigObservation) DeepCopy() *NetworkConfigObservation {
	if in == nil {
		return nil
	}
	out := new(NetworkConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NetworkConfigParameters) DeepCopyInto(out *NetworkConfigParameters) {
	*out = *in
	if in.PeeredNetwork != nil {
		in, out := &in.PeeredNetwork, &out.PeeredNetwork
		*out = new(string)
		**out = **in
	}
	if in.PeeredNetworkIPRange != nil {
		in, out := &in.PeeredNetworkIPRange, &out.PeeredNetworkIPRange
		*out = new(string)
		**out = **in
	}
	if in.PeeredNetworkRef != nil {
		in, out := &in.PeeredNetworkRef, &out.PeeredNetworkRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.PeeredNetworkSelector != nil {
		in, out := &in.PeeredNetworkSelector, &out.PeeredNetworkSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NetworkConfigParameters.
func (in *NetworkConfigParameters) DeepCopy() *NetworkConfigParameters {
	if in == nil {
		return nil
	}
	out := new(NetworkConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NpmPackagesInitParameters) DeepCopyInto(out *NpmPackagesInitParameters) {
	*out = *in
	if in.PackagePath != nil {
		in, out := &in.PackagePath, &out.PackagePath
		*out = new(string)
		**out = **in
	}
	if in.Repository != nil {
		in, out := &in.Repository, &out.Repository
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NpmPackagesInitParameters.
func (in *NpmPackagesInitParameters) DeepCopy() *NpmPackagesInitParameters {
	if in == nil {
		return nil
	}
	out := new(NpmPackagesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NpmPackagesObservation) DeepCopyInto(out *NpmPackagesObservation) {
	*out = *in
	if in.PackagePath != nil {
		in, out := &in.PackagePath, &out.PackagePath
		*out = new(string)
		**out = **in
	}
	if in.Repository != nil {
		in, out := &in.Repository, &out.Repository
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NpmPackagesObservation.
func (in *NpmPackagesObservation) DeepCopy() *NpmPackagesObservation {
	if in == nil {
		return nil
	}
	out := new(NpmPackagesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NpmPackagesParameters) DeepCopyInto(out *NpmPackagesParameters) {
	*out = *in
	if in.PackagePath != nil {
		in, out := &in.PackagePath, &out.PackagePath
		*out = new(string)
		**out = **in
	}
	if in.Repository != nil {
		in, out := &in.Repository, &out.Repository
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NpmPackagesParameters.
func (in *NpmPackagesParameters) DeepCopy() *NpmPackagesParameters {
	if in == nil {
		return nil
	}
	out := new(NpmPackagesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ObjectsInitParameters) DeepCopyInto(out *ObjectsInitParameters) {
	*out = *in
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.Paths != nil {
		in, out := &in.Paths, &out.Paths
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ObjectsInitParameters.
func (in *ObjectsInitParameters) DeepCopy() *ObjectsInitParameters {
	if in == nil {
		return nil
	}
	out := new(ObjectsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ObjectsObservation) DeepCopyInto(out *ObjectsObservation) {
	*out = *in
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.Paths != nil {
		in, out := &in.Paths, &out.Paths
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Timing != nil {
		in, out := &in.Timing, &out.Timing
		*out = make([]TimingObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ObjectsObservation.
func (in *ObjectsObservation) DeepCopy() *ObjectsObservation {
	if in == nil {
		return nil
	}
	out := new(ObjectsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ObjectsParameters) DeepCopyInto(out *ObjectsParameters) {
	*out = *in
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.Paths != nil {
		in, out := &in.Paths, &out.Paths
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ObjectsParameters.
func (in *ObjectsParameters) DeepCopy() *ObjectsParameters {
	if in == nil {
		return nil
	}
	out := new(ObjectsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OptionsInitParameters) DeepCopyInto(out *OptionsInitParameters) {
	*out = *in
	if in.DiskSizeGb != nil {
		in, out := &in.DiskSizeGb, &out.DiskSizeGb
		*out = new(float64)
		**out = **in
	}
	if in.DynamicSubstitutions != nil {
		in, out := &in.DynamicSubstitutions, &out.DynamicSubstitutions
		*out = new(bool)
		**out = **in
	}
	if in.Env != nil {
		in, out := &in.Env, &out.Env
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.LogStreamingOption != nil {
		in, out := &in.LogStreamingOption, &out.LogStreamingOption
		*out = new(string)
		**out = **in
	}
	if in.Logging != nil {
		in, out := &in.Logging, &out.Logging
		*out = new(string)
		**out = **in
	}
	if in.MachineType != nil {
		in, out := &in.MachineType, &out.MachineType
		*out = new(string)
		**out = **in
	}
	if in.RequestedVerifyOption != nil {
		in, out := &in.RequestedVerifyOption, &out.RequestedVerifyOption
		*out = new(string)
		**out = **in
	}
	if in.SecretEnv != nil {
		in, out := &in.SecretEnv, &out.SecretEnv
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SourceProvenanceHash != nil {
		in, out := &in.SourceProvenanceHash, &out.SourceProvenanceHash
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SubstitutionOption != nil {
		in, out := &in.SubstitutionOption, &out.SubstitutionOption
		*out = new(string)
		**out = **in
	}
	if in.Volumes != nil {
		in, out := &in.Volumes, &out.Volumes
		*out = make([]VolumesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WorkerPool != nil {
		in, out := &in.WorkerPool, &out.WorkerPool
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OptionsInitParameters.
func (in *OptionsInitParameters) DeepCopy() *OptionsInitParameters {
	if in == nil {
		return nil
	}
	out := new(OptionsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OptionsObservation) DeepCopyInto(out *OptionsObservation) {
	*out = *in
	if in.DiskSizeGb != nil {
		in, out := &in.DiskSizeGb, &out.DiskSizeGb
		*out = new(float64)
		**out = **in
	}
	if in.DynamicSubstitutions != nil {
		in, out := &in.DynamicSubstitutions, &out.DynamicSubstitutions
		*out = new(bool)
		**out = **in
	}
	if in.Env != nil {
		in, out := &in.Env, &out.Env
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.LogStreamingOption != nil {
		in, out := &in.LogStreamingOption, &out.LogStreamingOption
		*out = new(string)
		**out = **in
	}
	if in.Logging != nil {
		in, out := &in.Logging, &out.Logging
		*out = new(string)
		**out = **in
	}
	if in.MachineType != nil {
		in, out := &in.MachineType, &out.MachineType
		*out = new(string)
		**out = **in
	}
	if in.RequestedVerifyOption != nil {
		in, out := &in.RequestedVerifyOption, &out.RequestedVerifyOption
		*out = new(string)
		**out = **in
	}
	if in.SecretEnv != nil {
		in, out := &in.SecretEnv, &out.SecretEnv
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SourceProvenanceHash != nil {
		in, out := &in.SourceProvenanceHash, &out.SourceProvenanceHash
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SubstitutionOption != nil {
		in, out := &in.SubstitutionOption, &out.SubstitutionOption
		*out = new(string)
		**out = **in
	}
	if in.Volumes != nil {
		in, out := &in.Volumes, &out.Volumes
		*out = make([]VolumesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WorkerPool != nil {
		in, out := &in.WorkerPool, &out.WorkerPool
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OptionsObservation.
func (in *OptionsObservation) DeepCopy() *OptionsObservation {
	if in == nil {
		return nil
	}
	out := new(OptionsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OptionsParameters) DeepCopyInto(out *OptionsParameters) {
	*out = *in
	if in.DiskSizeGb != nil {
		in, out := &in.DiskSizeGb, &out.DiskSizeGb
		*out = new(float64)
		**out = **in
	}
	if in.DynamicSubstitutions != nil {
		in, out := &in.DynamicSubstitutions, &out.DynamicSubstitutions
		*out = new(bool)
		**out = **in
	}
	if in.Env != nil {
		in, out := &in.Env, &out.Env
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.LogStreamingOption != nil {
		in, out := &in.LogStreamingOption, &out.LogStreamingOption
		*out = new(string)
		**out = **in
	}
	if in.Logging != nil {
		in, out := &in.Logging, &out.Logging
		*out = new(string)
		**out = **in
	}
	if in.MachineType != nil {
		in, out := &in.MachineType, &out.MachineType
		*out = new(string)
		**out = **in
	}
	if in.RequestedVerifyOption != nil {
		in, out := &in.RequestedVerifyOption, &out.RequestedVerifyOption
		*out = new(string)
		**out = **in
	}
	if in.SecretEnv != nil {
		in, out := &in.SecretEnv, &out.SecretEnv
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SourceProvenanceHash != nil {
		in, out := &in.SourceProvenanceHash, &out.SourceProvenanceHash
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SubstitutionOption != nil {
		in, out := &in.SubstitutionOption, &out.SubstitutionOption
		*out = new(string)
		**out = **in
	}
	if in.Volumes != nil {
		in, out := &in.Volumes, &out.Volumes
		*out = make([]VolumesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WorkerPool != nil {
		in, out := &in.WorkerPool, &out.WorkerPool
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OptionsParameters.
func (in *OptionsParameters) DeepCopy() *OptionsParameters {
	if in == nil {
		return nil
	}
	out := new(OptionsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PubsubConfigInitParameters) DeepCopyInto(out *PubsubConfigInitParameters) {
	*out = *in
	if in.ServiceAccountEmail != nil {
		in, out := &in.ServiceAccountEmail, &out.ServiceAccountEmail
		*out = new(string)
		**out = **in
	}
	if in.Topic != nil {
		in, out := &in.Topic, &out.Topic
		*out = new(string)
		**out = **in
	}
	if in.TopicRef != nil {
		in, out := &in.TopicRef, &out.TopicRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.TopicSelector != nil {
		in, out := &in.TopicSelector, &out.TopicSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PubsubConfigInitParameters.
func (in *PubsubConfigInitParameters) DeepCopy() *PubsubConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(PubsubConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PubsubConfigObservation) DeepCopyInto(out *PubsubConfigObservation) {
	*out = *in
	if in.ServiceAccountEmail != nil {
		in, out := &in.ServiceAccountEmail, &out.ServiceAccountEmail
		*out = new(string)
		**out = **in
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
	if in.Subscription != nil {
		in, out := &in.Subscription, &out.Subscription
		*out = new(string)
		**out = **in
	}
	if in.Topic != nil {
		in, out := &in.Topic, &out.Topic
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PubsubConfigObservation.
func (in *PubsubConfigObservation) DeepCopy() *PubsubConfigObservation {
	if in == nil {
		return nil
	}
	out := new(PubsubConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PubsubConfigParameters) DeepCopyInto(out *PubsubConfigParameters) {
	*out = *in
	if in.ServiceAccountEmail != nil {
		in, out := &in.ServiceAccountEmail, &out.ServiceAccountEmail
		*out = new(string)
		**out = **in
	}
	if in.Topic != nil {
		in, out := &in.Topic, &out.Topic
		*out = new(string)
		**out = **in
	}
	if in.TopicRef != nil {
		in, out := &in.TopicRef, &out.TopicRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.TopicSelector != nil {
		in, out := &in.TopicSelector, &out.TopicSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PubsubConfigParameters.
func (in *PubsubConfigParameters) DeepCopy() *PubsubConfigParameters {
	if in == nil {
		return nil
	}
	out := new(PubsubConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PullRequestInitParameters) DeepCopyInto(out *PullRequestInitParameters) {
	*out = *in
	if in.Branch != nil {
		in, out := &in.Branch, &out.Branch
		*out = new(string)
		**out = **in
	}
	if in.CommentControl != nil {
		in, out := &in.CommentControl, &out.CommentControl
		*out = new(string)
		**out = **in
	}
	if in.InvertRegex != nil {
		in, out := &in.InvertRegex, &out.InvertRegex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PullRequestInitParameters.
func (in *PullRequestInitParameters) DeepCopy() *PullRequestInitParameters {
	if in == nil {
		return nil
	}
	out := new(PullRequestInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PullRequestObservation) DeepCopyInto(out *PullRequestObservation) {
	*out = *in
	if in.Branch != nil {
		in, out := &in.Branch, &out.Branch
		*out = new(string)
		**out = **in
	}
	if in.CommentControl != nil {
		in, out := &in.CommentControl, &out.CommentControl
		*out = new(string)
		**out = **in
	}
	if in.InvertRegex != nil {
		in, out := &in.InvertRegex, &out.InvertRegex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PullRequestObservation.
func (in *PullRequestObservation) DeepCopy() *PullRequestObservation {
	if in == nil {
		return nil
	}
	out := new(PullRequestObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PullRequestParameters) DeepCopyInto(out *PullRequestParameters) {
	*out = *in
	if in.Branch != nil {
		in, out := &in.Branch, &out.Branch
		*out = new(string)
		**out = **in
	}
	if in.CommentControl != nil {
		in, out := &in.CommentControl, &out.CommentControl
		*out = new(string)
		**out = **in
	}
	if in.InvertRegex != nil {
		in, out := &in.InvertRegex, &out.InvertRegex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PullRequestParameters.
func (in *PullRequestParameters) DeepCopy() *PullRequestParameters {
	if in == nil {
		return nil
	}
	out := new(PullRequestParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PushInitParameters) DeepCopyInto(out *PushInitParameters) {
	*out = *in
	if in.Branch != nil {
		in, out := &in.Branch, &out.Branch
		*out = new(string)
		**out = **in
	}
	if in.InvertRegex != nil {
		in, out := &in.InvertRegex, &out.InvertRegex
		*out = new(bool)
		**out = **in
	}
	if in.Tag != nil {
		in, out := &in.Tag, &out.Tag
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PushInitParameters.
func (in *PushInitParameters) DeepCopy() *PushInitParameters {
	if in == nil {
		return nil
	}
	out := new(PushInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PushObservation) DeepCopyInto(out *PushObservation) {
	*out = *in
	if in.Branch != nil {
		in, out := &in.Branch, &out.Branch
		*out = new(string)
		**out = **in
	}
	if in.InvertRegex != nil {
		in, out := &in.InvertRegex, &out.InvertRegex
		*out = new(bool)
		**out = **in
	}
	if in.Tag != nil {
		in, out := &in.Tag, &out.Tag
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PushObservation.
func (in *PushObservation) DeepCopy() *PushObservation {
	if in == nil {
		return nil
	}
	out := new(PushObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PushParameters) DeepCopyInto(out *PushParameters) {
	*out = *in
	if in.Branch != nil {
		in, out := &in.Branch, &out.Branch
		*out = new(string)
		**out = **in
	}
	if in.InvertRegex != nil {
		in, out := &in.InvertRegex, &out.InvertRegex
		*out = new(bool)
		**out = **in
	}
	if in.Tag != nil {
		in, out := &in.Tag, &out.Tag
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PushParameters.
func (in *PushParameters) DeepCopy() *PushParameters {
	if in == nil {
		return nil
	}
	out := new(PushParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PythonPackagesInitParameters) DeepCopyInto(out *PythonPackagesInitParameters) {
	*out = *in
	if in.Paths != nil {
		in, out := &in.Paths, &out.Paths
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Repository != nil {
		in, out := &in.Repository, &out.Repository
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PythonPackagesInitParameters.
func (in *PythonPackagesInitParameters) DeepCopy() *PythonPackagesInitParameters {
	if in == nil {
		return nil
	}
	out := new(PythonPackagesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PythonPackagesObservation) DeepCopyInto(out *PythonPackagesObservation) {
	*out = *in
	if in.Paths != nil {
		in, out := &in.Paths, &out.Paths
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Repository != nil {
		in, out := &in.Repository, &out.Repository
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PythonPackagesObservation.
func (in *PythonPackagesObservation) DeepCopy() *PythonPackagesObservation {
	if in == nil {
		return nil
	}
	out := new(PythonPackagesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PythonPackagesParameters) DeepCopyInto(out *PythonPackagesParameters) {
	*out = *in
	if in.Paths != nil {
		in, out := &in.Paths, &out.Paths
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Repository != nil {
		in, out := &in.Repository, &out.Repository
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PythonPackagesParameters.
func (in *PythonPackagesParameters) DeepCopy() *PythonPackagesParameters {
	if in == nil {
		return nil
	}
	out := new(PythonPackagesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepoSourceInitParameters) DeepCopyInto(out *RepoSourceInitParameters) {
	*out = *in
	if in.BranchName != nil {
		in, out := &in.BranchName, &out.BranchName
		*out = new(string)
		**out = **in
	}
	if in.CommitSha != nil {
		in, out := &in.CommitSha, &out.CommitSha
		*out = new(string)
		**out = **in
	}
	if in.Dir != nil {
		in, out := &in.Dir, &out.Dir
		*out = new(string)
		**out = **in
	}
	if in.InvertRegex != nil {
		in, out := &in.InvertRegex, &out.InvertRegex
		*out = new(bool)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.RepoName != nil {
		in, out := &in.RepoName, &out.RepoName
		*out = new(string)
		**out = **in
	}
	if in.Substitutions != nil {
		in, out := &in.Substitutions, &out.Substitutions
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TagName != nil {
		in, out := &in.TagName, &out.TagName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepoSourceInitParameters.
func (in *RepoSourceInitParameters) DeepCopy() *RepoSourceInitParameters {
	if in == nil {
		return nil
	}
	out := new(RepoSourceInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepoSourceObservation) DeepCopyInto(out *RepoSourceObservation) {
	*out = *in
	if in.BranchName != nil {
		in, out := &in.BranchName, &out.BranchName
		*out = new(string)
		**out = **in
	}
	if in.CommitSha != nil {
		in, out := &in.CommitSha, &out.CommitSha
		*out = new(string)
		**out = **in
	}
	if in.Dir != nil {
		in, out := &in.Dir, &out.Dir
		*out = new(string)
		**out = **in
	}
	if in.InvertRegex != nil {
		in, out := &in.InvertRegex, &out.InvertRegex
		*out = new(bool)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.RepoName != nil {
		in, out := &in.RepoName, &out.RepoName
		*out = new(string)
		**out = **in
	}
	if in.Substitutions != nil {
		in, out := &in.Substitutions, &out.Substitutions
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TagName != nil {
		in, out := &in.TagName, &out.TagName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepoSourceObservation.
func (in *RepoSourceObservation) DeepCopy() *RepoSourceObservation {
	if in == nil {
		return nil
	}
	out := new(RepoSourceObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepoSourceParameters) DeepCopyInto(out *RepoSourceParameters) {
	*out = *in
	if in.BranchName != nil {
		in, out := &in.BranchName, &out.BranchName
		*out = new(string)
		**out = **in
	}
	if in.CommitSha != nil {
		in, out := &in.CommitSha, &out.CommitSha
		*out = new(string)
		**out = **in
	}
	if in.Dir != nil {
		in, out := &in.Dir, &out.Dir
		*out = new(string)
		**out = **in
	}
	if in.InvertRegex != nil {
		in, out := &in.InvertRegex, &out.InvertRegex
		*out = new(bool)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.RepoName != nil {
		in, out := &in.RepoName, &out.RepoName
		*out = new(string)
		**out = **in
	}
	if in.Substitutions != nil {
		in, out := &in.Substitutions, &out.Substitutions
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TagName != nil {
		in, out := &in.TagName, &out.TagName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepoSourceParameters.
func (in *RepoSourceParameters) DeepCopy() *RepoSourceParameters {
	if in == nil {
		return nil
	}
	out := new(RepoSourceParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryEventConfigInitParameters) DeepCopyInto(out *RepositoryEventConfigInitParameters) {
	*out = *in
	if in.PullRequest != nil {
		in, out := &in.PullRequest, &out.PullRequest
		*out = make([]RepositoryEventConfigPullRequestInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Push != nil {
		in, out := &in.Push, &out.Push
		*out = make([]RepositoryEventConfigPushInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Repository != nil {
		in, out := &in.Repository, &out.Repository
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryEventConfigInitParameters.
func (in *RepositoryEventConfigInitParameters) DeepCopy() *RepositoryEventConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(RepositoryEventConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryEventConfigObservation) DeepCopyInto(out *RepositoryEventConfigObservation) {
	*out = *in
	if in.PullRequest != nil {
		in, out := &in.PullRequest, &out.PullRequest
		*out = make([]RepositoryEventConfigPullRequestObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Push != nil {
		in, out := &in.Push, &out.Push
		*out = make([]RepositoryEventConfigPushObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Repository != nil {
		in, out := &in.Repository, &out.Repository
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryEventConfigObservation.
func (in *RepositoryEventConfigObservation) DeepCopy() *RepositoryEventConfigObservation {
	if in == nil {
		return nil
	}
	out := new(RepositoryEventConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryEventConfigParameters) DeepCopyInto(out *RepositoryEventConfigParameters) {
	*out = *in
	if in.PullRequest != nil {
		in, out := &in.PullRequest, &out.PullRequest
		*out = make([]RepositoryEventConfigPullRequestParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Push != nil {
		in, out := &in.Push, &out.Push
		*out = make([]RepositoryEventConfigPushParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Repository != nil {
		in, out := &in.Repository, &out.Repository
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryEventConfigParameters.
func (in *RepositoryEventConfigParameters) DeepCopy() *RepositoryEventConfigParameters {
	if in == nil {
		return nil
	}
	out := new(RepositoryEventConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryEventConfigPullRequestInitParameters) DeepCopyInto(out *RepositoryEventConfigPullRequestInitParameters) {
	*out = *in
	if in.Branch != nil {
		in, out := &in.Branch, &out.Branch
		*out = new(string)
		**out = **in
	}
	if in.CommentControl != nil {
		in, out := &in.CommentControl, &out.CommentControl
		*out = new(string)
		**out = **in
	}
	if in.InvertRegex != nil {
		in, out := &in.InvertRegex, &out.InvertRegex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryEventConfigPullRequestInitParameters.
func (in *RepositoryEventConfigPullRequestInitParameters) DeepCopy() *RepositoryEventConfigPullRequestInitParameters {
	if in == nil {
		return nil
	}
	out := new(RepositoryEventConfigPullRequestInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryEventConfigPullRequestObservation) DeepCopyInto(out *RepositoryEventConfigPullRequestObservation) {
	*out = *in
	if in.Branch != nil {
		in, out := &in.Branch, &out.Branch
		*out = new(string)
		**out = **in
	}
	if in.CommentControl != nil {
		in, out := &in.CommentControl, &out.CommentControl
		*out = new(string)
		**out = **in
	}
	if in.InvertRegex != nil {
		in, out := &in.InvertRegex, &out.InvertRegex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryEventConfigPullRequestObservation.
func (in *RepositoryEventConfigPullRequestObservation) DeepCopy() *RepositoryEventConfigPullRequestObservation {
	if in == nil {
		return nil
	}
	out := new(RepositoryEventConfigPullRequestObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryEventConfigPullRequestParameters) DeepCopyInto(out *RepositoryEventConfigPullRequestParameters) {
	*out = *in
	if in.Branch != nil {
		in, out := &in.Branch, &out.Branch
		*out = new(string)
		**out = **in
	}
	if in.CommentControl != nil {
		in, out := &in.CommentControl, &out.CommentControl
		*out = new(string)
		**out = **in
	}
	if in.InvertRegex != nil {
		in, out := &in.InvertRegex, &out.InvertRegex
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryEventConfigPullRequestParameters.
func (in *RepositoryEventConfigPullRequestParameters) DeepCopy() *RepositoryEventConfigPullRequestParameters {
	if in == nil {
		return nil
	}
	out := new(RepositoryEventConfigPullRequestParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryEventConfigPushInitParameters) DeepCopyInto(out *RepositoryEventConfigPushInitParameters) {
	*out = *in
	if in.Branch != nil {
		in, out := &in.Branch, &out.Branch
		*out = new(string)
		**out = **in
	}
	if in.InvertRegex != nil {
		in, out := &in.InvertRegex, &out.InvertRegex
		*out = new(bool)
		**out = **in
	}
	if in.Tag != nil {
		in, out := &in.Tag, &out.Tag
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryEventConfigPushInitParameters.
func (in *RepositoryEventConfigPushInitParameters) DeepCopy() *RepositoryEventConfigPushInitParameters {
	if in == nil {
		return nil
	}
	out := new(RepositoryEventConfigPushInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryEventConfigPushObservation) DeepCopyInto(out *RepositoryEventConfigPushObservation) {
	*out = *in
	if in.Branch != nil {
		in, out := &in.Branch, &out.Branch
		*out = new(string)
		**out = **in
	}
	if in.InvertRegex != nil {
		in, out := &in.InvertRegex, &out.InvertRegex
		*out = new(bool)
		**out = **in
	}
	if in.Tag != nil {
		in, out := &in.Tag, &out.Tag
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryEventConfigPushObservation.
func (in *RepositoryEventConfigPushObservation) DeepCopy() *RepositoryEventConfigPushObservation {
	if in == nil {
		return nil
	}
	out := new(RepositoryEventConfigPushObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryEventConfigPushParameters) DeepCopyInto(out *RepositoryEventConfigPushParameters) {
	*out = *in
	if in.Branch != nil {
		in, out := &in.Branch, &out.Branch
		*out = new(string)
		**out = **in
	}
	if in.InvertRegex != nil {
		in, out := &in.InvertRegex, &out.InvertRegex
		*out = new(bool)
		**out = **in
	}
	if in.Tag != nil {
		in, out := &in.Tag, &out.Tag
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryEventConfigPushParameters.
func (in *RepositoryEventConfigPushParameters) DeepCopy() *RepositoryEventConfigPushParameters {
	if in == nil {
		return nil
	}
	out := new(RepositoryEventConfigPushParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretInitParameters) DeepCopyInto(out *SecretInitParameters) {
	*out = *in
	if in.KMSKeyName != nil {
		in, out := &in.KMSKeyName, &out.KMSKeyName
		*out = new(string)
		**out = **in
	}
	if in.SecretEnv != nil {
		in, out := &in.SecretEnv, &out.SecretEnv
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretInitParameters.
func (in *SecretInitParameters) DeepCopy() *SecretInitParameters {
	if in == nil {
		return nil
	}
	out := new(SecretInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretManagerInitParameters) DeepCopyInto(out *SecretManagerInitParameters) {
	*out = *in
	if in.Env != nil {
		in, out := &in.Env, &out.Env
		*out = new(string)
		**out = **in
	}
	if in.VersionName != nil {
		in, out := &in.VersionName, &out.VersionName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretManagerInitParameters.
func (in *SecretManagerInitParameters) DeepCopy() *SecretManagerInitParameters {
	if in == nil {
		return nil
	}
	out := new(SecretManagerInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretManagerObservation) DeepCopyInto(out *SecretManagerObservation) {
	*out = *in
	if in.Env != nil {
		in, out := &in.Env, &out.Env
		*out = new(string)
		**out = **in
	}
	if in.VersionName != nil {
		in, out := &in.VersionName, &out.VersionName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretManagerObservation.
func (in *SecretManagerObservation) DeepCopy() *SecretManagerObservation {
	if in == nil {
		return nil
	}
	out := new(SecretManagerObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretManagerParameters) DeepCopyInto(out *SecretManagerParameters) {
	*out = *in
	if in.Env != nil {
		in, out := &in.Env, &out.Env
		*out = new(string)
		**out = **in
	}
	if in.VersionName != nil {
		in, out := &in.VersionName, &out.VersionName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretManagerParameters.
func (in *SecretManagerParameters) DeepCopy() *SecretManagerParameters {
	if in == nil {
		return nil
	}
	out := new(SecretManagerParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretObservation) DeepCopyInto(out *SecretObservation) {
	*out = *in
	if in.KMSKeyName != nil {
		in, out := &in.KMSKeyName, &out.KMSKeyName
		*out = new(string)
		**out = **in
	}
	if in.SecretEnv != nil {
		in, out := &in.SecretEnv, &out.SecretEnv
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretObservation.
func (in *SecretObservation) DeepCopy() *SecretObservation {
	if in == nil {
		return nil
	}
	out := new(SecretObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretParameters) DeepCopyInto(out *SecretParameters) {
	*out = *in
	if in.KMSKeyName != nil {
		in, out := &in.KMSKeyName, &out.KMSKeyName
		*out = new(string)
		**out = **in
	}
	if in.SecretEnv != nil {
		in, out := &in.SecretEnv, &out.SecretEnv
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretParameters.
func (in *SecretParameters) DeepCopy() *SecretParameters {
	if in == nil {
		return nil
	}
	out := new(SecretParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SourceInitParameters) DeepCopyInto(out *SourceInitParameters) {
	*out = *in
	if in.RepoSource != nil {
		in, out := &in.RepoSource, &out.RepoSource
		*out = make([]RepoSourceInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.StorageSource != nil {
		in, out := &in.StorageSource, &out.StorageSource
		*out = make([]StorageSourceInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SourceInitParameters.
func (in *SourceInitParameters) DeepCopy() *SourceInitParameters {
	if in == nil {
		return nil
	}
	out := new(SourceInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SourceObservation) DeepCopyInto(out *SourceObservation) {
	*out = *in
	if in.RepoSource != nil {
		in, out := &in.RepoSource, &out.RepoSource
		*out = make([]RepoSourceObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.StorageSource != nil {
		in, out := &in.StorageSource, &out.StorageSource
		*out = make([]StorageSourceObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SourceObservation.
func (in *SourceObservation) DeepCopy() *SourceObservation {
	if in == nil {
		return nil
	}
	out := new(SourceObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SourceParameters) DeepCopyInto(out *SourceParameters) {
	*out = *in
	if in.RepoSource != nil {
		in, out := &in.RepoSource, &out.RepoSource
		*out = make([]RepoSourceParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.StorageSource != nil {
		in, out := &in.StorageSource, &out.StorageSource
		*out = make([]StorageSourceParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SourceParameters.
func (in *SourceParameters) DeepCopy() *SourceParameters {
	if in == nil {
		return nil
	}
	out := new(SourceParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SourceToBuildInitParameters) DeepCopyInto(out *SourceToBuildInitParameters) {
	*out = *in
	if in.BitbucketServerConfig != nil {
		in, out := &in.BitbucketServerConfig, &out.BitbucketServerConfig
		*out = new(string)
		**out = **in
	}
	if in.GithubEnterpriseConfig != nil {
		in, out := &in.GithubEnterpriseConfig, &out.GithubEnterpriseConfig
		*out = new(string)
		**out = **in
	}
	if in.Ref != nil {
		in, out := &in.Ref, &out.Ref
		*out = new(string)
		**out = **in
	}
	if in.RepoType != nil {
		in, out := &in.RepoType, &out.RepoType
		*out = new(string)
		**out = **in
	}
	if in.Repository != nil {
		in, out := &in.Repository, &out.Repository
		*out = new(string)
		**out = **in
	}
	if in.URI != nil {
		in, out := &in.URI, &out.URI
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SourceToBuildInitParameters.
func (in *SourceToBuildInitParameters) DeepCopy() *SourceToBuildInitParameters {
	if in == nil {
		return nil
	}
	out := new(SourceToBuildInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SourceToBuildObservation) DeepCopyInto(out *SourceToBuildObservation) {
	*out = *in
	if in.BitbucketServerConfig != nil {
		in, out := &in.BitbucketServerConfig, &out.BitbucketServerConfig
		*out = new(string)
		**out = **in
	}
	if in.GithubEnterpriseConfig != nil {
		in, out := &in.GithubEnterpriseConfig, &out.GithubEnterpriseConfig
		*out = new(string)
		**out = **in
	}
	if in.Ref != nil {
		in, out := &in.Ref, &out.Ref
		*out = new(string)
		**out = **in
	}
	if in.RepoType != nil {
		in, out := &in.RepoType, &out.RepoType
		*out = new(string)
		**out = **in
	}
	if in.Repository != nil {
		in, out := &in.Repository, &out.Repository
		*out = new(string)
		**out = **in
	}
	if in.URI != nil {
		in, out := &in.URI, &out.URI
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SourceToBuildObservation.
func (in *SourceToBuildObservation) DeepCopy() *SourceToBuildObservation {
	if in == nil {
		return nil
	}
	out := new(SourceToBuildObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SourceToBuildParameters) DeepCopyInto(out *SourceToBuildParameters) {
	*out = *in
	if in.BitbucketServerConfig != nil {
		in, out := &in.BitbucketServerConfig, &out.BitbucketServerConfig
		*out = new(string)
		**out = **in
	}
	if in.GithubEnterpriseConfig != nil {
		in, out := &in.GithubEnterpriseConfig, &out.GithubEnterpriseConfig
		*out = new(string)
		**out = **in
	}
	if in.Ref != nil {
		in, out := &in.Ref, &out.Ref
		*out = new(string)
		**out = **in
	}
	if in.RepoType != nil {
		in, out := &in.RepoType, &out.RepoType
		*out = new(string)
		**out = **in
	}
	if in.Repository != nil {
		in, out := &in.Repository, &out.Repository
		*out = new(string)
		**out = **in
	}
	if in.URI != nil {
		in, out := &in.URI, &out.URI
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SourceToBuildParameters.
func (in *SourceToBuildParameters) DeepCopy() *SourceToBuildParameters {
	if in == nil {
		return nil
	}
	out := new(SourceToBuildParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StepInitParameters) DeepCopyInto(out *StepInitParameters) {
	*out = *in
	if in.AllowExitCodes != nil {
		in, out := &in.AllowExitCodes, &out.AllowExitCodes
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.AllowFailure != nil {
		in, out := &in.AllowFailure, &out.AllowFailure
		*out = new(bool)
		**out = **in
	}
	if in.Args != nil {
		in, out := &in.Args, &out.Args
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Dir != nil {
		in, out := &in.Dir, &out.Dir
		*out = new(string)
		**out = **in
	}
	if in.Entrypoint != nil {
		in, out := &in.Entrypoint, &out.Entrypoint
		*out = new(string)
		**out = **in
	}
	if in.Env != nil {
		in, out := &in.Env, &out.Env
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Script != nil {
		in, out := &in.Script, &out.Script
		*out = new(string)
		**out = **in
	}
	if in.SecretEnv != nil {
		in, out := &in.SecretEnv, &out.SecretEnv
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(string)
		**out = **in
	}
	if in.Timing != nil {
		in, out := &in.Timing, &out.Timing
		*out = new(string)
		**out = **in
	}
	if in.Volumes != nil {
		in, out := &in.Volumes, &out.Volumes
		*out = make([]StepVolumesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WaitFor != nil {
		in, out := &in.WaitFor, &out.WaitFor
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StepInitParameters.
func (in *StepInitParameters) DeepCopy() *StepInitParameters {
	if in == nil {
		return nil
	}
	out := new(StepInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StepObservation) DeepCopyInto(out *StepObservation) {
	*out = *in
	if in.AllowExitCodes != nil {
		in, out := &in.AllowExitCodes, &out.AllowExitCodes
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.AllowFailure != nil {
		in, out := &in.AllowFailure, &out.AllowFailure
		*out = new(bool)
		**out = **in
	}
	if in.Args != nil {
		in, out := &in.Args, &out.Args
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Dir != nil {
		in, out := &in.Dir, &out.Dir
		*out = new(string)
		**out = **in
	}
	if in.Entrypoint != nil {
		in, out := &in.Entrypoint, &out.Entrypoint
		*out = new(string)
		**out = **in
	}
	if in.Env != nil {
		in, out := &in.Env, &out.Env
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Script != nil {
		in, out := &in.Script, &out.Script
		*out = new(string)
		**out = **in
	}
	if in.SecretEnv != nil {
		in, out := &in.SecretEnv, &out.SecretEnv
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(string)
		**out = **in
	}
	if in.Timing != nil {
		in, out := &in.Timing, &out.Timing
		*out = new(string)
		**out = **in
	}
	if in.Volumes != nil {
		in, out := &in.Volumes, &out.Volumes
		*out = make([]StepVolumesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WaitFor != nil {
		in, out := &in.WaitFor, &out.WaitFor
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StepObservation.
func (in *StepObservation) DeepCopy() *StepObservation {
	if in == nil {
		return nil
	}
	out := new(StepObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StepParameters) DeepCopyInto(out *StepParameters) {
	*out = *in
	if in.AllowExitCodes != nil {
		in, out := &in.AllowExitCodes, &out.AllowExitCodes
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.AllowFailure != nil {
		in, out := &in.AllowFailure, &out.AllowFailure
		*out = new(bool)
		**out = **in
	}
	if in.Args != nil {
		in, out := &in.Args, &out.Args
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Dir != nil {
		in, out := &in.Dir, &out.Dir
		*out = new(string)
		**out = **in
	}
	if in.Entrypoint != nil {
		in, out := &in.Entrypoint, &out.Entrypoint
		*out = new(string)
		**out = **in
	}
	if in.Env != nil {
		in, out := &in.Env, &out.Env
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Script != nil {
		in, out := &in.Script, &out.Script
		*out = new(string)
		**out = **in
	}
	if in.SecretEnv != nil {
		in, out := &in.SecretEnv, &out.SecretEnv
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(string)
		**out = **in
	}
	if in.Timing != nil {
		in, out := &in.Timing, &out.Timing
		*out = new(string)
		**out = **in
	}
	if in.Volumes != nil {
		in, out := &in.Volumes, &out.Volumes
		*out = make([]StepVolumesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WaitFor != nil {
		in, out := &in.WaitFor, &out.WaitFor
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StepParameters.
func (in *StepParameters) DeepCopy() *StepParameters {
	if in == nil {
		return nil
	}
	out := new(StepParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StepVolumesInitParameters) DeepCopyInto(out *StepVolumesInitParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StepVolumesInitParameters.
func (in *StepVolumesInitParameters) DeepCopy() *StepVolumesInitParameters {
	if in == nil {
		return nil
	}
	out := new(StepVolumesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StepVolumesObservation) DeepCopyInto(out *StepVolumesObservation) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StepVolumesObservation.
func (in *StepVolumesObservation) DeepCopy() *StepVolumesObservation {
	if in == nil {
		return nil
	}
	out := new(StepVolumesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StepVolumesParameters) DeepCopyInto(out *StepVolumesParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StepVolumesParameters.
func (in *StepVolumesParameters) DeepCopy() *StepVolumesParameters {
	if in == nil {
		return nil
	}
	out := new(StepVolumesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StorageSourceInitParameters) DeepCopyInto(out *StorageSourceInitParameters) {
	*out = *in
	if in.Bucket != nil {
		in, out := &in.Bucket, &out.Bucket
		*out = new(string)
		**out = **in
	}
	if in.Generation != nil {
		in, out := &in.Generation, &out.Generation
		*out = new(string)
		**out = **in
	}
	if in.Object != nil {
		in, out := &in.Object, &out.Object
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StorageSourceInitParameters.
func (in *StorageSourceInitParameters) DeepCopy() *StorageSourceInitParameters {
	if in == nil {
		return nil
	}
	out := new(StorageSourceInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StorageSourceObservation) DeepCopyInto(out *StorageSourceObservation) {
	*out = *in
	if in.Bucket != nil {
		in, out := &in.Bucket, &out.Bucket
		*out = new(string)
		**out = **in
	}
	if in.Generation != nil {
		in, out := &in.Generation, &out.Generation
		*out = new(string)
		**out = **in
	}
	if in.Object != nil {
		in, out := &in.Object, &out.Object
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StorageSourceObservation.
func (in *StorageSourceObservation) DeepCopy() *StorageSourceObservation {
	if in == nil {
		return nil
	}
	out := new(StorageSourceObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StorageSourceParameters) DeepCopyInto(out *StorageSourceParameters) {
	*out = *in
	if in.Bucket != nil {
		in, out := &in.Bucket, &out.Bucket
		*out = new(string)
		**out = **in
	}
	if in.Generation != nil {
		in, out := &in.Generation, &out.Generation
		*out = new(string)
		**out = **in
	}
	if in.Object != nil {
		in, out := &in.Object, &out.Object
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StorageSourceParameters.
func (in *StorageSourceParameters) DeepCopy() *StorageSourceParameters {
	if in == nil {
		return nil
	}
	out := new(StorageSourceParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TimingInitParameters) DeepCopyInto(out *TimingInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TimingInitParameters.
func (in *TimingInitParameters) DeepCopy() *TimingInitParameters {
	if in == nil {
		return nil
	}
	out := new(TimingInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TimingObservation) DeepCopyInto(out *TimingObservation) {
	*out = *in
	if in.EndTime != nil {
		in, out := &in.EndTime, &out.EndTime
		*out = new(string)
		**out = **in
	}
	if in.StartTime != nil {
		in, out := &in.StartTime, &out.StartTime
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TimingObservation.
func (in *TimingObservation) DeepCopy() *TimingObservation {
	if in == nil {
		return nil
	}
	out := new(TimingObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TimingParameters) DeepCopyInto(out *TimingParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TimingParameters.
func (in *TimingParameters) DeepCopy() *TimingParameters {
	if in == nil {
		return nil
	}
	out := new(TimingParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Trigger) DeepCopyInto(out *Trigger) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Trigger.
func (in *Trigger) DeepCopy() *Trigger {
	if in == nil {
		return nil
	}
	out := new(Trigger)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Trigger) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TriggerInitParameters) DeepCopyInto(out *TriggerInitParameters) {
	*out = *in
	if in.ApprovalConfig != nil {
		in, out := &in.ApprovalConfig, &out.ApprovalConfig
		*out = make([]ApprovalConfigInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.BitbucketServerTriggerConfig != nil {
		in, out := &in.BitbucketServerTriggerConfig, &out.BitbucketServerTriggerConfig
		*out = make([]BitbucketServerTriggerConfigInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Build != nil {
		in, out := &in.Build, &out.Build
		*out = make([]BuildInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Disabled != nil {
		in, out := &in.Disabled, &out.Disabled
		*out = new(bool)
		**out = **in
	}
	if in.Filename != nil {
		in, out := &in.Filename, &out.Filename
		*out = new(string)
		**out = **in
	}
	if in.Filter != nil {
		in, out := &in.Filter, &out.Filter
		*out = new(string)
		**out = **in
	}
	if in.GitFileSource != nil {
		in, out := &in.GitFileSource, &out.GitFileSource
		*out = make([]GitFileSourceInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Github != nil {
		in, out := &in.Github, &out.Github
		*out = make([]GithubInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.IgnoredFiles != nil {
		in, out := &in.IgnoredFiles, &out.IgnoredFiles
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IncludeBuildLogs != nil {
		in, out := &in.IncludeBuildLogs, &out.IncludeBuildLogs
		*out = new(string)
		**out = **in
	}
	if in.IncludedFiles != nil {
		in, out := &in.IncludedFiles, &out.IncludedFiles
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.PubsubConfig != nil {
		in, out := &in.PubsubConfig, &out.PubsubConfig
		*out = make([]PubsubConfigInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RepositoryEventConfig != nil {
		in, out := &in.RepositoryEventConfig, &out.RepositoryEventConfig
		*out = make([]RepositoryEventConfigInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ServiceAccount != nil {
		in, out := &in.ServiceAccount, &out.ServiceAccount
		*out = new(string)
		**out = **in
	}
	if in.ServiceAccountRef != nil {
		in, out := &in.ServiceAccountRef, &out.ServiceAccountRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ServiceAccountSelector != nil {
		in, out := &in.ServiceAccountSelector, &out.ServiceAccountSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SourceToBuild != nil {
		in, out := &in.SourceToBuild, &out.SourceToBuild
		*out = make([]SourceToBuildInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Substitutions != nil {
		in, out := &in.Substitutions, &out.Substitutions
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TriggerTemplate != nil {
		in, out := &in.TriggerTemplate, &out.TriggerTemplate
		*out = make([]TriggerTemplateInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WebhookConfig != nil {
		in, out := &in.WebhookConfig, &out.WebhookConfig
		*out = make([]WebhookConfigInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TriggerInitParameters.
func (in *TriggerInitParameters) DeepCopy() *TriggerInitParameters {
	if in == nil {
		return nil
	}
	out := new(TriggerInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TriggerList) DeepCopyInto(out *TriggerList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Trigger, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TriggerList.
func (in *TriggerList) DeepCopy() *TriggerList {
	if in == nil {
		return nil
	}
	out := new(TriggerList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *TriggerList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TriggerObservation) DeepCopyInto(out *TriggerObservation) {
	*out = *in
	if in.ApprovalConfig != nil {
		in, out := &in.ApprovalConfig, &out.ApprovalConfig
		*out = make([]ApprovalConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.BitbucketServerTriggerConfig != nil {
		in, out := &in.BitbucketServerTriggerConfig, &out.BitbucketServerTriggerConfig
		*out = make([]BitbucketServerTriggerConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Build != nil {
		in, out := &in.Build, &out.Build
		*out = make([]BuildObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CreateTime != nil {
		in, out := &in.CreateTime, &out.CreateTime
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Disabled != nil {
		in, out := &in.Disabled, &out.Disabled
		*out = new(bool)
		**out = **in
	}
	if in.Filename != nil {
		in, out := &in.Filename, &out.Filename
		*out = new(string)
		**out = **in
	}
	if in.Filter != nil {
		in, out := &in.Filter, &out.Filter
		*out = new(string)
		**out = **in
	}
	if in.GitFileSource != nil {
		in, out := &in.GitFileSource, &out.GitFileSource
		*out = make([]GitFileSourceObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Github != nil {
		in, out := &in.Github, &out.Github
		*out = make([]GithubObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IgnoredFiles != nil {
		in, out := &in.IgnoredFiles, &out.IgnoredFiles
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IncludeBuildLogs != nil {
		in, out := &in.IncludeBuildLogs, &out.IncludeBuildLogs
		*out = new(string)
		**out = **in
	}
	if in.IncludedFiles != nil {
		in, out := &in.IncludedFiles, &out.IncludedFiles
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.PubsubConfig != nil {
		in, out := &in.PubsubConfig, &out.PubsubConfig
		*out = make([]PubsubConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RepositoryEventConfig != nil {
		in, out := &in.RepositoryEventConfig, &out.RepositoryEventConfig
		*out = make([]RepositoryEventConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ServiceAccount != nil {
		in, out := &in.ServiceAccount, &out.ServiceAccount
		*out = new(string)
		**out = **in
	}
	if in.SourceToBuild != nil {
		in, out := &in.SourceToBuild, &out.SourceToBuild
		*out = make([]SourceToBuildObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Substitutions != nil {
		in, out := &in.Substitutions, &out.Substitutions
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TriggerID != nil {
		in, out := &in.TriggerID, &out.TriggerID
		*out = new(string)
		**out = **in
	}
	if in.TriggerTemplate != nil {
		in, out := &in.TriggerTemplate, &out.TriggerTemplate
		*out = make([]TriggerTemplateObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WebhookConfig != nil {
		in, out := &in.WebhookConfig, &out.WebhookConfig
		*out = make([]WebhookConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TriggerObservation.
func (in *TriggerObservation) DeepCopy() *TriggerObservation {
	if in == nil {
		return nil
	}
	out := new(TriggerObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TriggerParameters) DeepCopyInto(out *TriggerParameters) {
	*out = *in
	if in.ApprovalConfig != nil {
		in, out := &in.ApprovalConfig, &out.ApprovalConfig
		*out = make([]ApprovalConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.BitbucketServerTriggerConfig != nil {
		in, out := &in.BitbucketServerTriggerConfig, &out.BitbucketServerTriggerConfig
		*out = make([]BitbucketServerTriggerConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Build != nil {
		in, out := &in.Build, &out.Build
		*out = make([]BuildParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Disabled != nil {
		in, out := &in.Disabled, &out.Disabled
		*out = new(bool)
		**out = **in
	}
	if in.Filename != nil {
		in, out := &in.Filename, &out.Filename
		*out = new(string)
		**out = **in
	}
	if in.Filter != nil {
		in, out := &in.Filter, &out.Filter
		*out = new(string)
		**out = **in
	}
	if in.GitFileSource != nil {
		in, out := &in.GitFileSource, &out.GitFileSource
		*out = make([]GitFileSourceParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Github != nil {
		in, out := &in.Github, &out.Github
		*out = make([]GithubParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.IgnoredFiles != nil {
		in, out := &in.IgnoredFiles, &out.IgnoredFiles
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IncludeBuildLogs != nil {
		in, out := &in.IncludeBuildLogs, &out.IncludeBuildLogs
		*out = new(string)
		**out = **in
	}
	if in.IncludedFiles != nil {
		in, out := &in.IncludedFiles, &out.IncludedFiles
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.PubsubConfig != nil {
		in, out := &in.PubsubConfig, &out.PubsubConfig
		*out = make([]PubsubConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RepositoryEventConfig != nil {
		in, out := &in.RepositoryEventConfig, &out.RepositoryEventConfig
		*out = make([]RepositoryEventConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ServiceAccount != nil {
		in, out := &in.ServiceAccount, &out.ServiceAccount
		*out = new(string)
		**out = **in
	}
	if in.ServiceAccountRef != nil {
		in, out := &in.ServiceAccountRef, &out.ServiceAccountRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ServiceAccountSelector != nil {
		in, out := &in.ServiceAccountSelector, &out.ServiceAccountSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SourceToBuild != nil {
		in, out := &in.SourceToBuild, &out.SourceToBuild
		*out = make([]SourceToBuildParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Substitutions != nil {
		in, out := &in.Substitutions, &out.Substitutions
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TriggerTemplate != nil {
		in, out := &in.TriggerTemplate, &out.TriggerTemplate
		*out = make([]TriggerTemplateParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WebhookConfig != nil {
		in, out := &in.WebhookConfig, &out.WebhookConfig
		*out = make([]WebhookConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TriggerParameters.
func (in *TriggerParameters) DeepCopy() *TriggerParameters {
	if in == nil {
		return nil
	}
	out := new(TriggerParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TriggerSpec) DeepCopyInto(out *TriggerSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TriggerSpec.
func (in *TriggerSpec) DeepCopy() *TriggerSpec {
	if in == nil {
		return nil
	}
	out := new(TriggerSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TriggerStatus) DeepCopyInto(out *TriggerStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TriggerStatus.
func (in *TriggerStatus) DeepCopy() *TriggerStatus {
	if in == nil {
		return nil
	}
	out := new(TriggerStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TriggerTemplateInitParameters) DeepCopyInto(out *TriggerTemplateInitParameters) {
	*out = *in
	if in.BranchName != nil {
		in, out := &in.BranchName, &out.BranchName
		*out = new(string)
		**out = **in
	}
	if in.CommitSha != nil {
		in, out := &in.CommitSha, &out.CommitSha
		*out = new(string)
		**out = **in
	}
	if in.Dir != nil {
		in, out := &in.Dir, &out.Dir
		*out = new(string)
		**out = **in
	}
	if in.InvertRegex != nil {
		in, out := &in.InvertRegex, &out.InvertRegex
		*out = new(bool)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.RepoName != nil {
		in, out := &in.RepoName, &out.RepoName
		*out = new(string)
		**out = **in
	}
	if in.TagName != nil {
		in, out := &in.TagName, &out.TagName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TriggerTemplateInitParameters.
func (in *TriggerTemplateInitParameters) DeepCopy() *TriggerTemplateInitParameters {
	if in == nil {
		return nil
	}
	out := new(TriggerTemplateInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TriggerTemplateObservation) DeepCopyInto(out *TriggerTemplateObservation) {
	*out = *in
	if in.BranchName != nil {
		in, out := &in.BranchName, &out.BranchName
		*out = new(string)
		**out = **in
	}
	if in.CommitSha != nil {
		in, out := &in.CommitSha, &out.CommitSha
		*out = new(string)
		**out = **in
	}
	if in.Dir != nil {
		in, out := &in.Dir, &out.Dir
		*out = new(string)
		**out = **in
	}
	if in.InvertRegex != nil {
		in, out := &in.InvertRegex, &out.InvertRegex
		*out = new(bool)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.RepoName != nil {
		in, out := &in.RepoName, &out.RepoName
		*out = new(string)
		**out = **in
	}
	if in.TagName != nil {
		in, out := &in.TagName, &out.TagName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TriggerTemplateObservation.
func (in *TriggerTemplateObservation) DeepCopy() *TriggerTemplateObservation {
	if in == nil {
		return nil
	}
	out := new(TriggerTemplateObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TriggerTemplateParameters) DeepCopyInto(out *TriggerTemplateParameters) {
	*out = *in
	if in.BranchName != nil {
		in, out := &in.BranchName, &out.BranchName
		*out = new(string)
		**out = **in
	}
	if in.CommitSha != nil {
		in, out := &in.CommitSha, &out.CommitSha
		*out = new(string)
		**out = **in
	}
	if in.Dir != nil {
		in, out := &in.Dir, &out.Dir
		*out = new(string)
		**out = **in
	}
	if in.InvertRegex != nil {
		in, out := &in.InvertRegex, &out.InvertRegex
		*out = new(bool)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.RepoName != nil {
		in, out := &in.RepoName, &out.RepoName
		*out = new(string)
		**out = **in
	}
	if in.TagName != nil {
		in, out := &in.TagName, &out.TagName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TriggerTemplateParameters.
func (in *TriggerTemplateParameters) DeepCopy() *TriggerTemplateParameters {
	if in == nil {
		return nil
	}
	out := new(TriggerTemplateParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumesInitParameters) DeepCopyInto(out *VolumesInitParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumesInitParameters.
func (in *VolumesInitParameters) DeepCopy() *VolumesInitParameters {
	if in == nil {
		return nil
	}
	out := new(VolumesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumesObservation) DeepCopyInto(out *VolumesObservation) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumesObservation.
func (in *VolumesObservation) DeepCopy() *VolumesObservation {
	if in == nil {
		return nil
	}
	out := new(VolumesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumesParameters) DeepCopyInto(out *VolumesParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumesParameters.
func (in *VolumesParameters) DeepCopy() *VolumesParameters {
	if in == nil {
		return nil
	}
	out := new(VolumesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WebhookConfigInitParameters) DeepCopyInto(out *WebhookConfigInitParameters) {
	*out = *in
	if in.Secret != nil {
		in, out := &in.Secret, &out.Secret
		*out = new(string)
		**out = **in
	}
	if in.SecretRef != nil {
		in, out := &in.SecretRef, &out.SecretRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SecretSelector != nil {
		in, out := &in.SecretSelector, &out.SecretSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WebhookConfigInitParameters.
func (in *WebhookConfigInitParameters) DeepCopy() *WebhookConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(WebhookConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WebhookConfigObservation) DeepCopyInto(out *WebhookConfigObservation) {
	*out = *in
	if in.Secret != nil {
		in, out := &in.Secret, &out.Secret
		*out = new(string)
		**out = **in
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WebhookConfigObservation.
func (in *WebhookConfigObservation) DeepCopy() *WebhookConfigObservation {
	if in == nil {
		return nil
	}
	out := new(WebhookConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WebhookConfigParameters) DeepCopyInto(out *WebhookConfigParameters) {
	*out = *in
	if in.Secret != nil {
		in, out := &in.Secret, &out.Secret
		*out = new(string)
		**out = **in
	}
	if in.SecretRef != nil {
		in, out := &in.SecretRef, &out.SecretRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SecretSelector != nil {
		in, out := &in.SecretSelector, &out.SecretSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WebhookConfigParameters.
func (in *WebhookConfigParameters) DeepCopy() *WebhookConfigParameters {
	if in == nil {
		return nil
	}
	out := new(WebhookConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerConfigInitParameters) DeepCopyInto(out *WorkerConfigInitParameters) {
	*out = *in
	if in.DiskSizeGb != nil {
		in, out := &in.DiskSizeGb, &out.DiskSizeGb
		*out = new(float64)
		**out = **in
	}
	if in.MachineType != nil {
		in, out := &in.MachineType, &out.MachineType
		*out = new(string)
		**out = **in
	}
	if in.NoExternalIP != nil {
		in, out := &in.NoExternalIP, &out.NoExternalIP
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerConfigInitParameters.
func (in *WorkerConfigInitParameters) DeepCopy() *WorkerConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(WorkerConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerConfigObservation) DeepCopyInto(out *WorkerConfigObservation) {
	*out = *in
	if in.DiskSizeGb != nil {
		in, out := &in.DiskSizeGb, &out.DiskSizeGb
		*out = new(float64)
		**out = **in
	}
	if in.MachineType != nil {
		in, out := &in.MachineType, &out.MachineType
		*out = new(string)
		**out = **in
	}
	if in.NoExternalIP != nil {
		in, out := &in.NoExternalIP, &out.NoExternalIP
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerConfigObservation.
func (in *WorkerConfigObservation) DeepCopy() *WorkerConfigObservation {
	if in == nil {
		return nil
	}
	out := new(WorkerConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerConfigParameters) DeepCopyInto(out *WorkerConfigParameters) {
	*out = *in
	if in.DiskSizeGb != nil {
		in, out := &in.DiskSizeGb, &out.DiskSizeGb
		*out = new(float64)
		**out = **in
	}
	if in.MachineType != nil {
		in, out := &in.MachineType, &out.MachineType
		*out = new(string)
		**out = **in
	}
	if in.NoExternalIP != nil {
		in, out := &in.NoExternalIP, &out.NoExternalIP
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerConfigParameters.
func (in *WorkerConfigParameters) DeepCopy() *WorkerConfigParameters {
	if in == nil {
		return nil
	}
	out := new(WorkerConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerPool) DeepCopyInto(out *WorkerPool) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerPool.
func (in *WorkerPool) DeepCopy() *WorkerPool {
	if in == nil {
		return nil
	}
	out := new(WorkerPool)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *WorkerPool) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerPoolInitParameters) DeepCopyInto(out *WorkerPoolInitParameters) {
	*out = *in
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.NetworkConfig != nil {
		in, out := &in.NetworkConfig, &out.NetworkConfig
		*out = make([]NetworkConfigInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.WorkerConfig != nil {
		in, out := &in.WorkerConfig, &out.WorkerConfig
		*out = make([]WorkerConfigInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerPoolInitParameters.
func (in *WorkerPoolInitParameters) DeepCopy() *WorkerPoolInitParameters {
	if in == nil {
		return nil
	}
	out := new(WorkerPoolInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerPoolList) DeepCopyInto(out *WorkerPoolList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]WorkerPool, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerPoolList.
func (in *WorkerPoolList) DeepCopy() *WorkerPoolList {
	if in == nil {
		return nil
	}
	out := new(WorkerPoolList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *WorkerPoolList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerPoolObservation) DeepCopyInto(out *WorkerPoolObservation) {
	*out = *in
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.CreateTime != nil {
		in, out := &in.CreateTime, &out.CreateTime
		*out = new(string)
		**out = **in
	}
	if in.DeleteTime != nil {
		in, out := &in.DeleteTime, &out.DeleteTime
		*out = new(string)
		**out = **in
	}
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.EffectiveAnnotations != nil {
		in, out := &in.EffectiveAnnotations, &out.EffectiveAnnotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.NetworkConfig != nil {
		in, out := &in.NetworkConfig, &out.NetworkConfig
		*out = make([]NetworkConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
	if in.UID != nil {
		in, out := &in.UID, &out.UID
		*out = new(string)
		**out = **in
	}
	if in.UpdateTime != nil {
		in, out := &in.UpdateTime, &out.UpdateTime
		*out = new(string)
		**out = **in
	}
	if in.WorkerConfig != nil {
		in, out := &in.WorkerConfig, &out.WorkerConfig
		*out = make([]WorkerConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerPoolObservation.
func (in *WorkerPoolObservation) DeepCopy() *WorkerPoolObservation {
	if in == nil {
		return nil
	}
	out := new(WorkerPoolObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerPoolParameters) DeepCopyInto(out *WorkerPoolParameters) {
	*out = *in
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.NetworkConfig != nil {
		in, out := &in.NetworkConfig, &out.NetworkConfig
		*out = make([]NetworkConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.WorkerConfig != nil {
		in, out := &in.WorkerConfig, &out.WorkerConfig
		*out = make([]WorkerConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerPoolParameters.
func (in *WorkerPoolParameters) DeepCopy() *WorkerPoolParameters {
	if in == nil {
		return nil
	}
	out := new(WorkerPoolParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerPoolSpec) DeepCopyInto(out *WorkerPoolSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerPoolSpec.
func (in *WorkerPoolSpec) DeepCopy() *WorkerPoolSpec {
	if in == nil {
		return nil
	}
	out := new(WorkerPoolSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerPoolStatus) DeepCopyInto(out *WorkerPoolStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerPoolStatus.
func (in *WorkerPoolStatus) DeepCopy() *WorkerPoolStatus {
	if in == nil {
		return nil
	}
	out := new(WorkerPoolStatus)
	in.DeepCopyInto(out)
	return out
}
