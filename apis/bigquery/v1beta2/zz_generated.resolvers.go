// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta2

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	apisresolver "github.com/upbound/provider-gcp/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *AnalyticsHubDataExchangeIAMMember) ResolveReferences( // ResolveReferences of this AnalyticsHubDataExchangeIAMMember.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta1", "AnalyticsHubDataExchange", "AnalyticsHubDataExchangeList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataExchangeID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.DataExchangeIDRef,
			Selector:     mg.Spec.ForProvider.DataExchangeIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataExchangeID")
	}
	mg.Spec.ForProvider.DataExchangeID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataExchangeIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta1", "AnalyticsHubDataExchange", "AnalyticsHubDataExchangeList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DataExchangeID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.DataExchangeIDRef,
			Selector:     mg.Spec.InitProvider.DataExchangeIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DataExchangeID")
	}
	mg.Spec.InitProvider.DataExchangeID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DataExchangeIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this AnalyticsHubListing.
func (mg *AnalyticsHubListing) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	if mg.Spec.ForProvider.BigqueryDataset != nil {
		{
			m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Dataset", "DatasetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BigqueryDataset.Dataset),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.BigqueryDataset.DatasetRef,
				Selector:     mg.Spec.ForProvider.BigqueryDataset.DatasetSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.BigqueryDataset.Dataset")
		}
		mg.Spec.ForProvider.BigqueryDataset.Dataset = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.BigqueryDataset.DatasetRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.BigqueryDataset != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.BigqueryDataset.SelectedResources); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Table", "TableList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BigqueryDataset.SelectedResources[i4].Table),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.ForProvider.BigqueryDataset.SelectedResources[i4].TableRef,
					Selector:     mg.Spec.ForProvider.BigqueryDataset.SelectedResources[i4].TableSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.BigqueryDataset.SelectedResources[i4].Table")
			}
			mg.Spec.ForProvider.BigqueryDataset.SelectedResources[i4].Table = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.BigqueryDataset.SelectedResources[i4].TableRef = rsp.ResolvedReference

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta1", "AnalyticsHubDataExchange", "AnalyticsHubDataExchangeList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataExchangeID),
			Extract:      resource.ExtractParamPath("data_exchange_id", false),
			Reference:    mg.Spec.ForProvider.DataExchangeIDRef,
			Selector:     mg.Spec.ForProvider.DataExchangeIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataExchangeID")
	}
	mg.Spec.ForProvider.DataExchangeID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataExchangeIDRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.PubsubTopic != nil {
		{
			m, l, err = apisresolver.GetManagedResource("pubsub.gcp.upbound.io", "v1beta2", "Topic", "TopicList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PubsubTopic.Topic),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.PubsubTopic.TopicRef,
				Selector:     mg.Spec.ForProvider.PubsubTopic.TopicSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.PubsubTopic.Topic")
		}
		mg.Spec.ForProvider.PubsubTopic.Topic = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.PubsubTopic.TopicRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.BigqueryDataset != nil {
		{
			m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Dataset", "DatasetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BigqueryDataset.Dataset),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.BigqueryDataset.DatasetRef,
				Selector:     mg.Spec.InitProvider.BigqueryDataset.DatasetSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.BigqueryDataset.Dataset")
		}
		mg.Spec.InitProvider.BigqueryDataset.Dataset = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.BigqueryDataset.DatasetRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.BigqueryDataset != nil {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.BigqueryDataset.SelectedResources); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Table", "TableList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BigqueryDataset.SelectedResources[i4].Table),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.InitProvider.BigqueryDataset.SelectedResources[i4].TableRef,
					Selector:     mg.Spec.InitProvider.BigqueryDataset.SelectedResources[i4].TableSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.BigqueryDataset.SelectedResources[i4].Table")
			}
			mg.Spec.InitProvider.BigqueryDataset.SelectedResources[i4].Table = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.BigqueryDataset.SelectedResources[i4].TableRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.PubsubTopic != nil {
		{
			m, l, err = apisresolver.GetManagedResource("pubsub.gcp.upbound.io", "v1beta2", "Topic", "TopicList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PubsubTopic.Topic),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.PubsubTopic.TopicRef,
				Selector:     mg.Spec.InitProvider.PubsubTopic.TopicSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.PubsubTopic.Topic")
		}
		mg.Spec.InitProvider.PubsubTopic.Topic = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.PubsubTopic.TopicRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this Connection.
func (mg *Connection) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	if mg.Spec.ForProvider.CloudSQL != nil {
		if mg.Spec.ForProvider.CloudSQL.Credential != nil {
			{
				m, l, err = apisresolver.GetManagedResource("sql.gcp.upbound.io", "v1beta2", "User", "UserList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CloudSQL.Credential.Username),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.ForProvider.CloudSQL.Credential.UsernameRef,
					Selector:     mg.Spec.ForProvider.CloudSQL.Credential.UsernameSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.CloudSQL.Credential.Username")
			}
			mg.Spec.ForProvider.CloudSQL.Credential.Username = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.CloudSQL.Credential.UsernameRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.CloudSQL != nil {
		{
			m, l, err = apisresolver.GetManagedResource("sql.gcp.upbound.io", "v1beta1", "Database", "DatabaseList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CloudSQL.Database),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.CloudSQL.DatabaseRef,
				Selector:     mg.Spec.ForProvider.CloudSQL.DatabaseSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.CloudSQL.Database")
		}
		mg.Spec.ForProvider.CloudSQL.Database = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.CloudSQL.DatabaseRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.CloudSQL != nil {
		{
			m, l, err = apisresolver.GetManagedResource("sql.gcp.upbound.io", "v1beta2", "DatabaseInstance", "DatabaseInstanceList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CloudSQL.InstanceID),
				Extract:      resource.ExtractParamPath("connection_name", true),
				Reference:    mg.Spec.ForProvider.CloudSQL.InstanceIDRef,
				Selector:     mg.Spec.ForProvider.CloudSQL.InstanceIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.CloudSQL.InstanceID")
		}
		mg.Spec.ForProvider.CloudSQL.InstanceID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.CloudSQL.InstanceIDRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.Spark != nil {
		if mg.Spec.ForProvider.Spark.SparkHistoryServerConfig != nil {
			{
				m, l, err = apisresolver.GetManagedResource("dataproc.gcp.upbound.io", "v1beta2", "Cluster", "ClusterList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Spark.SparkHistoryServerConfig.DataprocCluster),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.ForProvider.Spark.SparkHistoryServerConfig.DataprocClusterRef,
					Selector:     mg.Spec.ForProvider.Spark.SparkHistoryServerConfig.DataprocClusterSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Spark.SparkHistoryServerConfig.DataprocCluster")
			}
			mg.Spec.ForProvider.Spark.SparkHistoryServerConfig.DataprocCluster = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Spark.SparkHistoryServerConfig.DataprocClusterRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.CloudSQL != nil {
		if mg.Spec.InitProvider.CloudSQL.Credential != nil {
			{
				m, l, err = apisresolver.GetManagedResource("sql.gcp.upbound.io", "v1beta2", "User", "UserList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CloudSQL.Credential.Username),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.InitProvider.CloudSQL.Credential.UsernameRef,
					Selector:     mg.Spec.InitProvider.CloudSQL.Credential.UsernameSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.CloudSQL.Credential.Username")
			}
			mg.Spec.InitProvider.CloudSQL.Credential.Username = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.CloudSQL.Credential.UsernameRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.CloudSQL != nil {
		{
			m, l, err = apisresolver.GetManagedResource("sql.gcp.upbound.io", "v1beta1", "Database", "DatabaseList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CloudSQL.Database),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.CloudSQL.DatabaseRef,
				Selector:     mg.Spec.InitProvider.CloudSQL.DatabaseSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.CloudSQL.Database")
		}
		mg.Spec.InitProvider.CloudSQL.Database = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.CloudSQL.DatabaseRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.CloudSQL != nil {
		{
			m, l, err = apisresolver.GetManagedResource("sql.gcp.upbound.io", "v1beta2", "DatabaseInstance", "DatabaseInstanceList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CloudSQL.InstanceID),
				Extract:      resource.ExtractParamPath("connection_name", true),
				Reference:    mg.Spec.InitProvider.CloudSQL.InstanceIDRef,
				Selector:     mg.Spec.InitProvider.CloudSQL.InstanceIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.CloudSQL.InstanceID")
		}
		mg.Spec.InitProvider.CloudSQL.InstanceID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.CloudSQL.InstanceIDRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.Spark != nil {
		if mg.Spec.InitProvider.Spark.SparkHistoryServerConfig != nil {
			{
				m, l, err = apisresolver.GetManagedResource("dataproc.gcp.upbound.io", "v1beta2", "Cluster", "ClusterList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Spark.SparkHistoryServerConfig.DataprocCluster),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.InitProvider.Spark.SparkHistoryServerConfig.DataprocClusterRef,
					Selector:     mg.Spec.InitProvider.Spark.SparkHistoryServerConfig.DataprocClusterSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Spark.SparkHistoryServerConfig.DataprocCluster")
			}
			mg.Spec.InitProvider.Spark.SparkHistoryServerConfig.DataprocCluster = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Spark.SparkHistoryServerConfig.DataprocClusterRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this DataTransferConfig.
func (mg *DataTransferConfig) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Dataset", "DatasetList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DestinationDatasetID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.DestinationDatasetIDRef,
			Selector:     mg.Spec.ForProvider.DestinationDatasetIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DestinationDatasetID")
	}
	mg.Spec.ForProvider.DestinationDatasetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DestinationDatasetIDRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.EncryptionConfiguration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("kms.gcp.upbound.io", "v1beta2", "CryptoKey", "CryptoKeyList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EncryptionConfiguration.KMSKeyName),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.EncryptionConfiguration.KMSKeyNameRef,
				Selector:     mg.Spec.ForProvider.EncryptionConfiguration.KMSKeyNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.EncryptionConfiguration.KMSKeyName")
		}
		mg.Spec.ForProvider.EncryptionConfiguration.KMSKeyName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.EncryptionConfiguration.KMSKeyNameRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Dataset", "DatasetList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DestinationDatasetID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.DestinationDatasetIDRef,
			Selector:     mg.Spec.InitProvider.DestinationDatasetIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DestinationDatasetID")
	}
	mg.Spec.InitProvider.DestinationDatasetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DestinationDatasetIDRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.EncryptionConfiguration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("kms.gcp.upbound.io", "v1beta2", "CryptoKey", "CryptoKeyList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.EncryptionConfiguration.KMSKeyName),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.EncryptionConfiguration.KMSKeyNameRef,
				Selector:     mg.Spec.InitProvider.EncryptionConfiguration.KMSKeyNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.EncryptionConfiguration.KMSKeyName")
		}
		mg.Spec.InitProvider.EncryptionConfiguration.KMSKeyName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.EncryptionConfiguration.KMSKeyNameRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this Dataset.
func (mg *Dataset) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Access); i3++ {
		if mg.Spec.ForProvider.Access[i3].Dataset != nil {
			if mg.Spec.ForProvider.Access[i3].Dataset.Dataset != nil {
				{
					m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Dataset", "DatasetList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Access[i3].Dataset.Dataset.DatasetID),
						Extract:      reference.ExternalName(),
						Reference:    mg.Spec.ForProvider.Access[i3].Dataset.Dataset.DatasetIDRef,
						Selector:     mg.Spec.ForProvider.Access[i3].Dataset.Dataset.DatasetIDSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.Access[i3].Dataset.Dataset.DatasetID")
				}
				mg.Spec.ForProvider.Access[i3].Dataset.Dataset.DatasetID = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.ForProvider.Access[i3].Dataset.Dataset.DatasetIDRef = rsp.ResolvedReference

			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Access); i3++ {
		if mg.Spec.ForProvider.Access[i3].Routine != nil {
			{
				m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Routine", "RoutineList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Access[i3].Routine.DatasetID),
					Extract:      resource.ExtractParamPath("dataset_id", false),
					Reference:    mg.Spec.ForProvider.Access[i3].Routine.DatasetIDRef,
					Selector:     mg.Spec.ForProvider.Access[i3].Routine.DatasetIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Access[i3].Routine.DatasetID")
			}
			mg.Spec.ForProvider.Access[i3].Routine.DatasetID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Access[i3].Routine.DatasetIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Access); i3++ {
		if mg.Spec.ForProvider.Access[i3].Routine != nil {
			{
				m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Routine", "RoutineList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Access[i3].Routine.ProjectID),
					Extract:      resource.ExtractParamPath("project", false),
					Reference:    mg.Spec.ForProvider.Access[i3].Routine.ProjectIDRef,
					Selector:     mg.Spec.ForProvider.Access[i3].Routine.ProjectIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Access[i3].Routine.ProjectID")
			}
			mg.Spec.ForProvider.Access[i3].Routine.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Access[i3].Routine.ProjectIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Access); i3++ {
		if mg.Spec.ForProvider.Access[i3].Routine != nil {
			{
				m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Routine", "RoutineList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Access[i3].Routine.RoutineID),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.ForProvider.Access[i3].Routine.RoutineIDRef,
					Selector:     mg.Spec.ForProvider.Access[i3].Routine.RoutineIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Access[i3].Routine.RoutineID")
			}
			mg.Spec.ForProvider.Access[i3].Routine.RoutineID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Access[i3].Routine.RoutineIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Access); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "ServiceAccount", "ServiceAccountList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Access[i3].UserByEmail),
				Extract:      resource.ExtractParamPath("email", true),
				Reference:    mg.Spec.ForProvider.Access[i3].UserByEmailRef,
				Selector:     mg.Spec.ForProvider.Access[i3].UserByEmailSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Access[i3].UserByEmail")
		}
		mg.Spec.ForProvider.Access[i3].UserByEmail = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Access[i3].UserByEmailRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.DefaultEncryptionConfiguration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("kms.gcp.upbound.io", "v1beta2", "CryptoKey", "CryptoKeyList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DefaultEncryptionConfiguration.KMSKeyName),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.DefaultEncryptionConfiguration.KMSKeyNameRef,
				Selector:     mg.Spec.ForProvider.DefaultEncryptionConfiguration.KMSKeyNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.DefaultEncryptionConfiguration.KMSKeyName")
		}
		mg.Spec.ForProvider.DefaultEncryptionConfiguration.KMSKeyName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.DefaultEncryptionConfiguration.KMSKeyNameRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Access); i3++ {
		if mg.Spec.InitProvider.Access[i3].Dataset != nil {
			if mg.Spec.InitProvider.Access[i3].Dataset.Dataset != nil {
				{
					m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Dataset", "DatasetList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Access[i3].Dataset.Dataset.DatasetID),
						Extract:      reference.ExternalName(),
						Reference:    mg.Spec.InitProvider.Access[i3].Dataset.Dataset.DatasetIDRef,
						Selector:     mg.Spec.InitProvider.Access[i3].Dataset.Dataset.DatasetIDSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.InitProvider.Access[i3].Dataset.Dataset.DatasetID")
				}
				mg.Spec.InitProvider.Access[i3].Dataset.Dataset.DatasetID = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.InitProvider.Access[i3].Dataset.Dataset.DatasetIDRef = rsp.ResolvedReference

			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Access); i3++ {
		if mg.Spec.InitProvider.Access[i3].Routine != nil {
			{
				m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Routine", "RoutineList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Access[i3].Routine.DatasetID),
					Extract:      resource.ExtractParamPath("dataset_id", false),
					Reference:    mg.Spec.InitProvider.Access[i3].Routine.DatasetIDRef,
					Selector:     mg.Spec.InitProvider.Access[i3].Routine.DatasetIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Access[i3].Routine.DatasetID")
			}
			mg.Spec.InitProvider.Access[i3].Routine.DatasetID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Access[i3].Routine.DatasetIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Access); i3++ {
		if mg.Spec.InitProvider.Access[i3].Routine != nil {
			{
				m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Routine", "RoutineList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Access[i3].Routine.ProjectID),
					Extract:      resource.ExtractParamPath("project", false),
					Reference:    mg.Spec.InitProvider.Access[i3].Routine.ProjectIDRef,
					Selector:     mg.Spec.InitProvider.Access[i3].Routine.ProjectIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Access[i3].Routine.ProjectID")
			}
			mg.Spec.InitProvider.Access[i3].Routine.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Access[i3].Routine.ProjectIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Access); i3++ {
		if mg.Spec.InitProvider.Access[i3].Routine != nil {
			{
				m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Routine", "RoutineList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Access[i3].Routine.RoutineID),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.InitProvider.Access[i3].Routine.RoutineIDRef,
					Selector:     mg.Spec.InitProvider.Access[i3].Routine.RoutineIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Access[i3].Routine.RoutineID")
			}
			mg.Spec.InitProvider.Access[i3].Routine.RoutineID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Access[i3].Routine.RoutineIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Access); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "ServiceAccount", "ServiceAccountList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Access[i3].UserByEmail),
				Extract:      resource.ExtractParamPath("email", true),
				Reference:    mg.Spec.InitProvider.Access[i3].UserByEmailRef,
				Selector:     mg.Spec.InitProvider.Access[i3].UserByEmailSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Access[i3].UserByEmail")
		}
		mg.Spec.InitProvider.Access[i3].UserByEmail = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Access[i3].UserByEmailRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.DefaultEncryptionConfiguration != nil {
		{
			m, l, err = apisresolver.GetManagedResource("kms.gcp.upbound.io", "v1beta2", "CryptoKey", "CryptoKeyList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DefaultEncryptionConfiguration.KMSKeyName),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.DefaultEncryptionConfiguration.KMSKeyNameRef,
				Selector:     mg.Spec.InitProvider.DefaultEncryptionConfiguration.KMSKeyNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.DefaultEncryptionConfiguration.KMSKeyName")
		}
		mg.Spec.InitProvider.DefaultEncryptionConfiguration.KMSKeyName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.DefaultEncryptionConfiguration.KMSKeyNameRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this DatasetAccess.
func (mg *DatasetAccess) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	if mg.Spec.ForProvider.Dataset != nil {
		if mg.Spec.ForProvider.Dataset.Dataset != nil {
			{
				m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Dataset", "DatasetList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Dataset.Dataset.DatasetID),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.ForProvider.Dataset.Dataset.DatasetIDRef,
					Selector:     mg.Spec.ForProvider.Dataset.Dataset.DatasetIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Dataset.Dataset.DatasetID")
			}
			mg.Spec.ForProvider.Dataset.Dataset.DatasetID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Dataset.Dataset.DatasetIDRef = rsp.ResolvedReference

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Dataset", "DatasetList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DatasetID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.DatasetIDRef,
			Selector:     mg.Spec.ForProvider.DatasetIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DatasetID")
	}
	mg.Spec.ForProvider.DatasetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DatasetIDRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.Routine != nil {
		{
			m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Routine", "RoutineList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Routine.DatasetID),
				Extract:      resource.ExtractParamPath("dataset_id", false),
				Reference:    mg.Spec.ForProvider.Routine.DatasetIDRef,
				Selector:     mg.Spec.ForProvider.Routine.DatasetIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Routine.DatasetID")
		}
		mg.Spec.ForProvider.Routine.DatasetID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Routine.DatasetIDRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.Routine != nil {
		{
			m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Routine", "RoutineList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Routine.ProjectID),
				Extract:      resource.ExtractParamPath("project", false),
				Reference:    mg.Spec.ForProvider.Routine.ProjectIDRef,
				Selector:     mg.Spec.ForProvider.Routine.ProjectIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Routine.ProjectID")
		}
		mg.Spec.ForProvider.Routine.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Routine.ProjectIDRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.Routine != nil {
		{
			m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Routine", "RoutineList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Routine.RoutineID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.Routine.RoutineIDRef,
				Selector:     mg.Spec.ForProvider.Routine.RoutineIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Routine.RoutineID")
		}
		mg.Spec.ForProvider.Routine.RoutineID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Routine.RoutineIDRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "ServiceAccount", "ServiceAccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.UserByEmail),
			Extract:      resource.ExtractParamPath("email", true),
			Reference:    mg.Spec.ForProvider.UserByEmailRef,
			Selector:     mg.Spec.ForProvider.UserByEmailSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UserByEmail")
	}
	mg.Spec.ForProvider.UserByEmail = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UserByEmailRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.View != nil {
		{
			m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Dataset", "DatasetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.View.DatasetID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.View.DatasetIDRef,
				Selector:     mg.Spec.ForProvider.View.DatasetIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.View.DatasetID")
		}
		mg.Spec.ForProvider.View.DatasetID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.View.DatasetIDRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.View != nil {
		{
			m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Table", "TableList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.View.TableID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.View.TableIDRef,
				Selector:     mg.Spec.ForProvider.View.TableIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.View.TableID")
		}
		mg.Spec.ForProvider.View.TableID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.View.TableIDRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.Dataset != nil {
		if mg.Spec.InitProvider.Dataset.Dataset != nil {
			{
				m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Dataset", "DatasetList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Dataset.Dataset.DatasetID),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.InitProvider.Dataset.Dataset.DatasetIDRef,
					Selector:     mg.Spec.InitProvider.Dataset.Dataset.DatasetIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Dataset.Dataset.DatasetID")
			}
			mg.Spec.InitProvider.Dataset.Dataset.DatasetID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Dataset.Dataset.DatasetIDRef = rsp.ResolvedReference

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Dataset", "DatasetList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DatasetID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.DatasetIDRef,
			Selector:     mg.Spec.InitProvider.DatasetIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DatasetID")
	}
	mg.Spec.InitProvider.DatasetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DatasetIDRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.Routine != nil {
		{
			m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Routine", "RoutineList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Routine.DatasetID),
				Extract:      resource.ExtractParamPath("dataset_id", false),
				Reference:    mg.Spec.InitProvider.Routine.DatasetIDRef,
				Selector:     mg.Spec.InitProvider.Routine.DatasetIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Routine.DatasetID")
		}
		mg.Spec.InitProvider.Routine.DatasetID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Routine.DatasetIDRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.Routine != nil {
		{
			m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Routine", "RoutineList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Routine.ProjectID),
				Extract:      resource.ExtractParamPath("project", false),
				Reference:    mg.Spec.InitProvider.Routine.ProjectIDRef,
				Selector:     mg.Spec.InitProvider.Routine.ProjectIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Routine.ProjectID")
		}
		mg.Spec.InitProvider.Routine.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Routine.ProjectIDRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.Routine != nil {
		{
			m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Routine", "RoutineList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Routine.RoutineID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.Routine.RoutineIDRef,
				Selector:     mg.Spec.InitProvider.Routine.RoutineIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Routine.RoutineID")
		}
		mg.Spec.InitProvider.Routine.RoutineID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Routine.RoutineIDRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "ServiceAccount", "ServiceAccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.UserByEmail),
			Extract:      resource.ExtractParamPath("email", true),
			Reference:    mg.Spec.InitProvider.UserByEmailRef,
			Selector:     mg.Spec.InitProvider.UserByEmailSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.UserByEmail")
	}
	mg.Spec.InitProvider.UserByEmail = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.UserByEmailRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.View != nil {
		{
			m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Dataset", "DatasetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.View.DatasetID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.View.DatasetIDRef,
				Selector:     mg.Spec.InitProvider.View.DatasetIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.View.DatasetID")
		}
		mg.Spec.InitProvider.View.DatasetID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.View.DatasetIDRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.View != nil {
		{
			m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Table", "TableList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.View.TableID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.View.TableIDRef,
				Selector:     mg.Spec.InitProvider.View.TableIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.View.TableID")
		}
		mg.Spec.InitProvider.View.TableID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.View.TableIDRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this DatasetIAMBinding.
func (mg *DatasetIAMBinding) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Dataset", "DatasetList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DatasetID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.DatasetIDRef,
			Selector:     mg.Spec.ForProvider.DatasetIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DatasetID")
	}
	mg.Spec.ForProvider.DatasetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DatasetIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DatasetIAMMember.
func (mg *DatasetIAMMember) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Dataset", "DatasetList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DatasetID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.DatasetIDRef,
			Selector:     mg.Spec.ForProvider.DatasetIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DatasetID")
	}
	mg.Spec.ForProvider.DatasetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DatasetIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Job.
func (mg *Job) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	if mg.Spec.ForProvider.Copy != nil {
		if mg.Spec.ForProvider.Copy.DestinationTable != nil {
			{
				m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Dataset", "DatasetList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Copy.DestinationTable.DatasetID),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.ForProvider.Copy.DestinationTable.DatasetIDRef,
					Selector:     mg.Spec.ForProvider.Copy.DestinationTable.DatasetIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Copy.DestinationTable.DatasetID")
			}
			mg.Spec.ForProvider.Copy.DestinationTable.DatasetID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Copy.DestinationTable.DatasetIDRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.Copy != nil {
		if mg.Spec.ForProvider.Copy.DestinationTable != nil {
			{
				m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Table", "TableList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Copy.DestinationTable.TableID),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.ForProvider.Copy.DestinationTable.TableIDRef,
					Selector:     mg.Spec.ForProvider.Copy.DestinationTable.TableIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Copy.DestinationTable.TableID")
			}
			mg.Spec.ForProvider.Copy.DestinationTable.TableID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Copy.DestinationTable.TableIDRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.Extract != nil {
		if mg.Spec.ForProvider.Extract.SourceTable != nil {
			{
				m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Dataset", "DatasetList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Extract.SourceTable.DatasetID),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.ForProvider.Extract.SourceTable.DatasetIDRef,
					Selector:     mg.Spec.ForProvider.Extract.SourceTable.DatasetIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Extract.SourceTable.DatasetID")
			}
			mg.Spec.ForProvider.Extract.SourceTable.DatasetID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Extract.SourceTable.DatasetIDRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.Extract != nil {
		if mg.Spec.ForProvider.Extract.SourceTable != nil {
			{
				m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Table", "TableList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Extract.SourceTable.TableID),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.ForProvider.Extract.SourceTable.TableIDRef,
					Selector:     mg.Spec.ForProvider.Extract.SourceTable.TableIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Extract.SourceTable.TableID")
			}
			mg.Spec.ForProvider.Extract.SourceTable.TableID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Extract.SourceTable.TableIDRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.Load != nil {
		if mg.Spec.ForProvider.Load.DestinationTable != nil {
			{
				m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Dataset", "DatasetList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Load.DestinationTable.DatasetID),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.ForProvider.Load.DestinationTable.DatasetIDRef,
					Selector:     mg.Spec.ForProvider.Load.DestinationTable.DatasetIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Load.DestinationTable.DatasetID")
			}
			mg.Spec.ForProvider.Load.DestinationTable.DatasetID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Load.DestinationTable.DatasetIDRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.Load != nil {
		if mg.Spec.ForProvider.Load.DestinationTable != nil {
			{
				m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Table", "TableList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Load.DestinationTable.TableID),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.ForProvider.Load.DestinationTable.TableIDRef,
					Selector:     mg.Spec.ForProvider.Load.DestinationTable.TableIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Load.DestinationTable.TableID")
			}
			mg.Spec.ForProvider.Load.DestinationTable.TableID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Load.DestinationTable.TableIDRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.Query != nil {
		if mg.Spec.ForProvider.Query.DefaultDataset != nil {
			{
				m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Dataset", "DatasetList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Query.DefaultDataset.DatasetID),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.ForProvider.Query.DefaultDataset.DatasetIDRef,
					Selector:     mg.Spec.ForProvider.Query.DefaultDataset.DatasetIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Query.DefaultDataset.DatasetID")
			}
			mg.Spec.ForProvider.Query.DefaultDataset.DatasetID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Query.DefaultDataset.DatasetIDRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.Query != nil {
		if mg.Spec.ForProvider.Query.DestinationTable != nil {
			{
				m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Dataset", "DatasetList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Query.DestinationTable.DatasetID),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.ForProvider.Query.DestinationTable.DatasetIDRef,
					Selector:     mg.Spec.ForProvider.Query.DestinationTable.DatasetIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Query.DestinationTable.DatasetID")
			}
			mg.Spec.ForProvider.Query.DestinationTable.DatasetID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Query.DestinationTable.DatasetIDRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.Query != nil {
		if mg.Spec.ForProvider.Query.DestinationTable != nil {
			{
				m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Table", "TableList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Query.DestinationTable.TableID),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.ForProvider.Query.DestinationTable.TableIDRef,
					Selector:     mg.Spec.ForProvider.Query.DestinationTable.TableIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Query.DestinationTable.TableID")
			}
			mg.Spec.ForProvider.Query.DestinationTable.TableID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Query.DestinationTable.TableIDRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.Copy != nil {
		if mg.Spec.InitProvider.Copy.DestinationTable != nil {
			{
				m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Dataset", "DatasetList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Copy.DestinationTable.DatasetID),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.InitProvider.Copy.DestinationTable.DatasetIDRef,
					Selector:     mg.Spec.InitProvider.Copy.DestinationTable.DatasetIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Copy.DestinationTable.DatasetID")
			}
			mg.Spec.InitProvider.Copy.DestinationTable.DatasetID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Copy.DestinationTable.DatasetIDRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.Copy != nil {
		if mg.Spec.InitProvider.Copy.DestinationTable != nil {
			{
				m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Table", "TableList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Copy.DestinationTable.TableID),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.InitProvider.Copy.DestinationTable.TableIDRef,
					Selector:     mg.Spec.InitProvider.Copy.DestinationTable.TableIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Copy.DestinationTable.TableID")
			}
			mg.Spec.InitProvider.Copy.DestinationTable.TableID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Copy.DestinationTable.TableIDRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.Extract != nil {
		if mg.Spec.InitProvider.Extract.SourceTable != nil {
			{
				m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Dataset", "DatasetList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Extract.SourceTable.DatasetID),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.InitProvider.Extract.SourceTable.DatasetIDRef,
					Selector:     mg.Spec.InitProvider.Extract.SourceTable.DatasetIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Extract.SourceTable.DatasetID")
			}
			mg.Spec.InitProvider.Extract.SourceTable.DatasetID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Extract.SourceTable.DatasetIDRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.Extract != nil {
		if mg.Spec.InitProvider.Extract.SourceTable != nil {
			{
				m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Table", "TableList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Extract.SourceTable.TableID),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.InitProvider.Extract.SourceTable.TableIDRef,
					Selector:     mg.Spec.InitProvider.Extract.SourceTable.TableIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Extract.SourceTable.TableID")
			}
			mg.Spec.InitProvider.Extract.SourceTable.TableID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Extract.SourceTable.TableIDRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.Load != nil {
		if mg.Spec.InitProvider.Load.DestinationTable != nil {
			{
				m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Dataset", "DatasetList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Load.DestinationTable.DatasetID),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.InitProvider.Load.DestinationTable.DatasetIDRef,
					Selector:     mg.Spec.InitProvider.Load.DestinationTable.DatasetIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Load.DestinationTable.DatasetID")
			}
			mg.Spec.InitProvider.Load.DestinationTable.DatasetID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Load.DestinationTable.DatasetIDRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.Load != nil {
		if mg.Spec.InitProvider.Load.DestinationTable != nil {
			{
				m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Table", "TableList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Load.DestinationTable.TableID),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.InitProvider.Load.DestinationTable.TableIDRef,
					Selector:     mg.Spec.InitProvider.Load.DestinationTable.TableIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Load.DestinationTable.TableID")
			}
			mg.Spec.InitProvider.Load.DestinationTable.TableID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Load.DestinationTable.TableIDRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.Query != nil {
		if mg.Spec.InitProvider.Query.DefaultDataset != nil {
			{
				m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Dataset", "DatasetList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Query.DefaultDataset.DatasetID),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.InitProvider.Query.DefaultDataset.DatasetIDRef,
					Selector:     mg.Spec.InitProvider.Query.DefaultDataset.DatasetIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Query.DefaultDataset.DatasetID")
			}
			mg.Spec.InitProvider.Query.DefaultDataset.DatasetID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Query.DefaultDataset.DatasetIDRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.Query != nil {
		if mg.Spec.InitProvider.Query.DestinationTable != nil {
			{
				m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Dataset", "DatasetList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Query.DestinationTable.DatasetID),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.InitProvider.Query.DestinationTable.DatasetIDRef,
					Selector:     mg.Spec.InitProvider.Query.DestinationTable.DatasetIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Query.DestinationTable.DatasetID")
			}
			mg.Spec.InitProvider.Query.DestinationTable.DatasetID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Query.DestinationTable.DatasetIDRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.Query != nil {
		if mg.Spec.InitProvider.Query.DestinationTable != nil {
			{
				m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Table", "TableList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Query.DestinationTable.TableID),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.InitProvider.Query.DestinationTable.TableIDRef,
					Selector:     mg.Spec.InitProvider.Query.DestinationTable.TableIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Query.DestinationTable.TableID")
			}
			mg.Spec.InitProvider.Query.DestinationTable.TableID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Query.DestinationTable.TableIDRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this Routine.
func (mg *Routine) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Dataset", "DatasetList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DatasetID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.DatasetIDRef,
			Selector:     mg.Spec.ForProvider.DatasetIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DatasetID")
	}
	mg.Spec.ForProvider.DatasetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DatasetIDRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.RemoteFunctionOptions != nil {
		{
			m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Connection", "ConnectionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RemoteFunctionOptions.Connection),
				Extract:      resource.ExtractParamPath("name", true),
				Reference:    mg.Spec.ForProvider.RemoteFunctionOptions.ConnectionRef,
				Selector:     mg.Spec.ForProvider.RemoteFunctionOptions.ConnectionSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.RemoteFunctionOptions.Connection")
		}
		mg.Spec.ForProvider.RemoteFunctionOptions.Connection = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.RemoteFunctionOptions.ConnectionRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.SparkOptions != nil {
		{
			m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Connection", "ConnectionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SparkOptions.Connection),
				Extract:      resource.ExtractParamPath("name", true),
				Reference:    mg.Spec.ForProvider.SparkOptions.ConnectionRef,
				Selector:     mg.Spec.ForProvider.SparkOptions.ConnectionSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.SparkOptions.Connection")
		}
		mg.Spec.ForProvider.SparkOptions.Connection = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.SparkOptions.ConnectionRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.RemoteFunctionOptions != nil {
		{
			m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Connection", "ConnectionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RemoteFunctionOptions.Connection),
				Extract:      resource.ExtractParamPath("name", true),
				Reference:    mg.Spec.InitProvider.RemoteFunctionOptions.ConnectionRef,
				Selector:     mg.Spec.InitProvider.RemoteFunctionOptions.ConnectionSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.RemoteFunctionOptions.Connection")
		}
		mg.Spec.InitProvider.RemoteFunctionOptions.Connection = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.RemoteFunctionOptions.ConnectionRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.SparkOptions != nil {
		{
			m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Connection", "ConnectionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SparkOptions.Connection),
				Extract:      resource.ExtractParamPath("name", true),
				Reference:    mg.Spec.InitProvider.SparkOptions.ConnectionRef,
				Selector:     mg.Spec.InitProvider.SparkOptions.ConnectionSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.SparkOptions.Connection")
		}
		mg.Spec.InitProvider.SparkOptions.Connection = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.SparkOptions.ConnectionRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this Table.
func (mg *Table) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Dataset", "DatasetList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DatasetID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.DatasetIDRef,
			Selector:     mg.Spec.ForProvider.DatasetIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DatasetID")
	}
	mg.Spec.ForProvider.DatasetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DatasetIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TableIAMBinding.
func (mg *TableIAMBinding) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Dataset", "DatasetList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DatasetID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.DatasetIDRef,
			Selector:     mg.Spec.ForProvider.DatasetIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DatasetID")
	}
	mg.Spec.ForProvider.DatasetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DatasetIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Table", "TableList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TableID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.TableIDRef,
			Selector:     mg.Spec.ForProvider.TableIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TableID")
	}
	mg.Spec.ForProvider.TableID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TableIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Dataset", "DatasetList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DatasetID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.DatasetIDRef,
			Selector:     mg.Spec.InitProvider.DatasetIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DatasetID")
	}
	mg.Spec.InitProvider.DatasetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DatasetIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Table", "TableList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.TableID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.TableIDRef,
			Selector:     mg.Spec.InitProvider.TableIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.TableID")
	}
	mg.Spec.InitProvider.TableID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TableIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TableIAMMember.
func (mg *TableIAMMember) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Dataset", "DatasetList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DatasetID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.DatasetIDRef,
			Selector:     mg.Spec.ForProvider.DatasetIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DatasetID")
	}
	mg.Spec.ForProvider.DatasetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DatasetIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta2", "Table", "TableList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TableID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.TableIDRef,
			Selector:     mg.Spec.ForProvider.TableIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TableID")
	}
	mg.Spec.ForProvider.TableID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TableIDRef = rsp.ResolvedReference

	return nil
}
