// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta2

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AutoscaleInitParameters struct {

	// Number of slots to be scaled when needed.
	MaxSlots *float64 `json:"maxSlots,omitempty" tf:"max_slots,omitempty"`
}

type AutoscaleObservation struct {

	// (Output)
	// The slot capacity added to this reservation when autoscale happens. Will be between [0, max_slots].
	CurrentSlots *float64 `json:"currentSlots,omitempty" tf:"current_slots,omitempty"`

	// Number of slots to be scaled when needed.
	MaxSlots *float64 `json:"maxSlots,omitempty" tf:"max_slots,omitempty"`
}

type AutoscaleParameters struct {

	// Number of slots to be scaled when needed.
	// +kubebuilder:validation:Optional
	MaxSlots *float64 `json:"maxSlots,omitempty" tf:"max_slots,omitempty"`
}

type ErrorInitParameters struct {
}

type ErrorObservation struct {

	// (Output)
	// The status code, which should be an enum value of google.rpc.Code.
	Code *float64 `json:"code,omitempty" tf:"code,omitempty"`

	// (Output)
	// A developer-facing error message, which should be in English.
	Message *string `json:"message,omitempty" tf:"message,omitempty"`
}

type ErrorParameters struct {
}

type ReplicationStatusInitParameters struct {
}

type ReplicationStatusObservation struct {

	// (Output)
	// The last error encountered while trying to replicate changes from the primary to the
	// secondary. This field is only available if the replication has not succeeded since.
	// Structure is documented below.
	Error []ErrorObservation `json:"error,omitempty" tf:"error,omitempty"`

	// (Output)
	// The time at which the last error was encountered while trying to replicate changes from
	// the primary to the secondary. This field is only available if the replication has not
	// succeeded since.
	LastErrorTime *string `json:"lastErrorTime,omitempty" tf:"last_error_time,omitempty"`

	// (Output)
	// A timestamp corresponding to the last change on the primary that was successfully
	// replicated to the secondary.
	LastReplicationTime *string `json:"lastReplicationTime,omitempty" tf:"last_replication_time,omitempty"`
}

type ReplicationStatusParameters struct {
}

type ReservationInitParameters struct {

	// The configuration parameters for the auto scaling feature.
	// Structure is documented below.
	Autoscale *AutoscaleInitParameters `json:"autoscale,omitempty" tf:"autoscale,omitempty"`

	// Maximum number of queries that are allowed to run concurrently in this reservation. This is a soft limit due to asynchronous nature of the system and various optimizations for small queries. Default value is 0 which means that concurrency will be automatically set based on the reservation size.
	Concurrency *float64 `json:"concurrency,omitempty" tf:"concurrency,omitempty"`

	// The edition type. Valid values are STANDARD, ENTERPRISE, ENTERPRISE_PLUS
	Edition *string `json:"edition,omitempty" tf:"edition,omitempty"`

	// If false, any query using this reservation will use idle slots from other reservations within
	// the same admin project. If true, a query using this reservation will execute with the slot
	// capacity specified above at most.
	IgnoreIdleSlots *bool `json:"ignoreIdleSlots,omitempty" tf:"ignore_idle_slots,omitempty"`

	// The current location of the reservation's secondary replica. This field is only set for
	// reservations using the managed disaster recovery feature. Users can set this in create
	// reservation calls to create a failover reservation or in update reservation calls to convert
	// a non-failover reservation to a failover reservation(or vice versa).
	SecondaryLocation *string `json:"secondaryLocation,omitempty" tf:"secondary_location,omitempty"`

	// Minimum slots available to this reservation. A slot is a unit of computational power in BigQuery, and serves as the
	// unit of parallelism. Queries using this reservation might use more slots during runtime if ignoreIdleSlots is set to false.
	SlotCapacity *float64 `json:"slotCapacity,omitempty" tf:"slot_capacity,omitempty"`
}

type ReservationObservation struct {

	// The configuration parameters for the auto scaling feature.
	// Structure is documented below.
	Autoscale *AutoscaleObservation `json:"autoscale,omitempty" tf:"autoscale,omitempty"`

	// Maximum number of queries that are allowed to run concurrently in this reservation. This is a soft limit due to asynchronous nature of the system and various optimizations for small queries. Default value is 0 which means that concurrency will be automatically set based on the reservation size.
	Concurrency *float64 `json:"concurrency,omitempty" tf:"concurrency,omitempty"`

	// The edition type. Valid values are STANDARD, ENTERPRISE, ENTERPRISE_PLUS
	Edition *string `json:"edition,omitempty" tf:"edition,omitempty"`

	// an identifier for the resource with format projects/{{project}}/locations/{{location}}/reservations/{{name}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// If false, any query using this reservation will use idle slots from other reservations within
	// the same admin project. If true, a query using this reservation will execute with the slot
	// capacity specified above at most.
	IgnoreIdleSlots *bool `json:"ignoreIdleSlots,omitempty" tf:"ignore_idle_slots,omitempty"`

	// The geographic location where the transfer config should reside.
	// Examples: US, EU, asia-northeast1. The default value is US.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// The location where the reservation was originally created. This is set only during the
	// failover reservation's creation. All billing charges for the failover reservation will be
	// applied to this location.
	OriginalPrimaryLocation *string `json:"originalPrimaryLocation,omitempty" tf:"original_primary_location,omitempty"`

	// The current location of the reservation's primary replica. This field is only set for
	// reservations using the managed disaster recovery feature.
	PrimaryLocation *string `json:"primaryLocation,omitempty" tf:"primary_location,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The Disaster Recovery(DR) replication status of the reservation. This is only available for
	// the primary replicas of DR/failover reservations and provides information about the both the
	// staleness of the secondary and the last error encountered while trying to replicate changes
	// from the primary to the secondary. If this field is blank, it means that the reservation is
	// either not a DR reservation or the reservation is a DR secondary or that any replication
	// operations on the reservation have succeeded.
	// Structure is documented below.
	ReplicationStatus []ReplicationStatusObservation `json:"replicationStatus,omitempty" tf:"replication_status,omitempty"`

	// The current location of the reservation's secondary replica. This field is only set for
	// reservations using the managed disaster recovery feature. Users can set this in create
	// reservation calls to create a failover reservation or in update reservation calls to convert
	// a non-failover reservation to a failover reservation(or vice versa).
	SecondaryLocation *string `json:"secondaryLocation,omitempty" tf:"secondary_location,omitempty"`

	// Minimum slots available to this reservation. A slot is a unit of computational power in BigQuery, and serves as the
	// unit of parallelism. Queries using this reservation might use more slots during runtime if ignoreIdleSlots is set to false.
	SlotCapacity *float64 `json:"slotCapacity,omitempty" tf:"slot_capacity,omitempty"`
}

type ReservationParameters struct {

	// The configuration parameters for the auto scaling feature.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Autoscale *AutoscaleParameters `json:"autoscale,omitempty" tf:"autoscale,omitempty"`

	// Maximum number of queries that are allowed to run concurrently in this reservation. This is a soft limit due to asynchronous nature of the system and various optimizations for small queries. Default value is 0 which means that concurrency will be automatically set based on the reservation size.
	// +kubebuilder:validation:Optional
	Concurrency *float64 `json:"concurrency,omitempty" tf:"concurrency,omitempty"`

	// The edition type. Valid values are STANDARD, ENTERPRISE, ENTERPRISE_PLUS
	// +kubebuilder:validation:Optional
	Edition *string `json:"edition,omitempty" tf:"edition,omitempty"`

	// If false, any query using this reservation will use idle slots from other reservations within
	// the same admin project. If true, a query using this reservation will execute with the slot
	// capacity specified above at most.
	// +kubebuilder:validation:Optional
	IgnoreIdleSlots *bool `json:"ignoreIdleSlots,omitempty" tf:"ignore_idle_slots,omitempty"`

	// The geographic location where the transfer config should reside.
	// Examples: US, EU, asia-northeast1. The default value is US.
	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The current location of the reservation's secondary replica. This field is only set for
	// reservations using the managed disaster recovery feature. Users can set this in create
	// reservation calls to create a failover reservation or in update reservation calls to convert
	// a non-failover reservation to a failover reservation(or vice versa).
	// +kubebuilder:validation:Optional
	SecondaryLocation *string `json:"secondaryLocation,omitempty" tf:"secondary_location,omitempty"`

	// Minimum slots available to this reservation. A slot is a unit of computational power in BigQuery, and serves as the
	// unit of parallelism. Queries using this reservation might use more slots during runtime if ignoreIdleSlots is set to false.
	// +kubebuilder:validation:Optional
	SlotCapacity *float64 `json:"slotCapacity,omitempty" tf:"slot_capacity,omitempty"`
}

// ReservationSpec defines the desired state of Reservation
type ReservationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ReservationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ReservationInitParameters `json:"initProvider,omitempty"`
}

// ReservationStatus defines the observed state of Reservation.
type ReservationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ReservationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status

// Reservation is the Schema for the Reservations API. A reservation is a mechanism used to guarantee BigQuery slots to users.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type Reservation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.slotCapacity) || (has(self.initProvider) && has(self.initProvider.slotCapacity))",message="spec.forProvider.slotCapacity is a required parameter"
	Spec   ReservationSpec   `json:"spec"`
	Status ReservationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ReservationList contains a list of Reservations
type ReservationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Reservation `json:"items"`
}

// Repository type metadata.
var (
	Reservation_Kind             = "Reservation"
	Reservation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Reservation_Kind}.String()
	Reservation_KindAPIVersion   = Reservation_Kind + "." + CRDGroupVersion.String()
	Reservation_GroupVersionKind = CRDGroupVersion.WithKind(Reservation_Kind)
)

func init() {
	SchemeBuilder.Register(&Reservation{}, &ReservationList{})
}
