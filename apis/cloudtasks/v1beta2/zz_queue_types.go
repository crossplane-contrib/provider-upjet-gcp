// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta2

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AppEngineRoutingOverrideInitParameters struct {

	// App instance.
	// By default, the task is sent to an instance which is available when the task is attempted.
	Instance *string `json:"instance,omitempty" tf:"instance,omitempty"`

	// App service.
	// By default, the task is sent to the service which is the default service when the task is attempted.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// App version.
	// By default, the task is sent to the version which is the default version when the task is attempted.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type AppEngineRoutingOverrideObservation struct {

	// (Output)
	// The host that the task is sent to.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// App instance.
	// By default, the task is sent to an instance which is available when the task is attempted.
	Instance *string `json:"instance,omitempty" tf:"instance,omitempty"`

	// App service.
	// By default, the task is sent to the service which is the default service when the task is attempted.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// App version.
	// By default, the task is sent to the version which is the default version when the task is attempted.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type AppEngineRoutingOverrideParameters struct {

	// App instance.
	// By default, the task is sent to an instance which is available when the task is attempted.
	// +kubebuilder:validation:Optional
	Instance *string `json:"instance,omitempty" tf:"instance,omitempty"`

	// App service.
	// By default, the task is sent to the service which is the default service when the task is attempted.
	// +kubebuilder:validation:Optional
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// App version.
	// By default, the task is sent to the version which is the default version when the task is attempted.
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type HTTPTargetInitParameters struct {
	HTTPMethod *string `json:"httpMethod,omitempty" tf:"http_method,omitempty"`

	HeaderOverrides []HeaderOverridesInitParameters `json:"headerOverrides,omitempty" tf:"header_overrides,omitempty"`

	OAuthToken *OAuthTokenInitParameters `json:"oauthToken,omitempty" tf:"oauth_token,omitempty"`

	OidcToken *OidcTokenInitParameters `json:"oidcToken,omitempty" tf:"oidc_token,omitempty"`

	URIOverride *URIOverrideInitParameters `json:"uriOverride,omitempty" tf:"uri_override,omitempty"`
}

type HTTPTargetObservation struct {
	HTTPMethod *string `json:"httpMethod,omitempty" tf:"http_method,omitempty"`

	HeaderOverrides []HeaderOverridesObservation `json:"headerOverrides,omitempty" tf:"header_overrides,omitempty"`

	OAuthToken *OAuthTokenObservation `json:"oauthToken,omitempty" tf:"oauth_token,omitempty"`

	OidcToken *OidcTokenObservation `json:"oidcToken,omitempty" tf:"oidc_token,omitempty"`

	URIOverride *URIOverrideObservation `json:"uriOverride,omitempty" tf:"uri_override,omitempty"`
}

type HTTPTargetParameters struct {

	// +kubebuilder:validation:Optional
	HTTPMethod *string `json:"httpMethod,omitempty" tf:"http_method,omitempty"`

	// +kubebuilder:validation:Optional
	HeaderOverrides []HeaderOverridesParameters `json:"headerOverrides,omitempty" tf:"header_overrides,omitempty"`

	// +kubebuilder:validation:Optional
	OAuthToken *OAuthTokenParameters `json:"oauthToken,omitempty" tf:"oauth_token,omitempty"`

	// +kubebuilder:validation:Optional
	OidcToken *OidcTokenParameters `json:"oidcToken,omitempty" tf:"oidc_token,omitempty"`

	// +kubebuilder:validation:Optional
	URIOverride *URIOverrideParameters `json:"uriOverride,omitempty" tf:"uri_override,omitempty"`
}

type HeaderInitParameters struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type HeaderObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type HeaderOverridesInitParameters struct {
	Header *HeaderInitParameters `json:"header,omitempty" tf:"header,omitempty"`
}

type HeaderOverridesObservation struct {
	Header *HeaderObservation `json:"header,omitempty" tf:"header,omitempty"`
}

type HeaderOverridesParameters struct {

	// +kubebuilder:validation:Optional
	Header *HeaderParameters `json:"header" tf:"header,omitempty"`
}

type HeaderParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type OAuthTokenInitParameters struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	ServiceAccountEmail *string `json:"serviceAccountEmail,omitempty" tf:"service_account_email,omitempty"`
}

type OAuthTokenObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	ServiceAccountEmail *string `json:"serviceAccountEmail,omitempty" tf:"service_account_email,omitempty"`
}

type OAuthTokenParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	ServiceAccountEmail *string `json:"serviceAccountEmail" tf:"service_account_email,omitempty"`
}

type OidcTokenInitParameters struct {
	Audience *string `json:"audience,omitempty" tf:"audience,omitempty"`

	ServiceAccountEmail *string `json:"serviceAccountEmail,omitempty" tf:"service_account_email,omitempty"`
}

type OidcTokenObservation struct {
	Audience *string `json:"audience,omitempty" tf:"audience,omitempty"`

	ServiceAccountEmail *string `json:"serviceAccountEmail,omitempty" tf:"service_account_email,omitempty"`
}

type OidcTokenParameters struct {

	// +kubebuilder:validation:Optional
	Audience *string `json:"audience,omitempty" tf:"audience,omitempty"`

	// +kubebuilder:validation:Optional
	ServiceAccountEmail *string `json:"serviceAccountEmail" tf:"service_account_email,omitempty"`
}

type PathOverrideInitParameters struct {
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type PathOverrideObservation struct {
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type PathOverrideParameters struct {

	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type QueryOverrideInitParameters struct {
	QueryParams *string `json:"queryParams,omitempty" tf:"query_params,omitempty"`
}

type QueryOverrideObservation struct {
	QueryParams *string `json:"queryParams,omitempty" tf:"query_params,omitempty"`
}

type QueryOverrideParameters struct {

	// +kubebuilder:validation:Optional
	QueryParams *string `json:"queryParams,omitempty" tf:"query_params,omitempty"`
}

type QueueInitParameters struct {

	// Overrides for task-level appEngineRouting. These settings apply only
	// to App Engine tasks in this queue
	// Structure is documented below.
	AppEngineRoutingOverride *AppEngineRoutingOverrideInitParameters `json:"appEngineRoutingOverride,omitempty" tf:"app_engine_routing_override,omitempty"`

	HTTPTarget *HTTPTargetInitParameters `json:"httpTarget,omitempty" tf:"http_target,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/cloudplatform/v1beta1.Project
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Reference to a Project in cloudplatform to populate project.
	// +kubebuilder:validation:Optional
	ProjectRef *v1.Reference `json:"projectRef,omitempty" tf:"-"`

	// Selector for a Project in cloudplatform to populate project.
	// +kubebuilder:validation:Optional
	ProjectSelector *v1.Selector `json:"projectSelector,omitempty" tf:"-"`

	// Rate limits for task dispatches.
	// The queue's actual dispatch rate is the result of:
	RateLimits *RateLimitsInitParameters `json:"rateLimits,omitempty" tf:"rate_limits,omitempty"`

	// Settings that determine the retry behavior.
	// Structure is documented below.
	RetryConfig *RetryConfigInitParameters `json:"retryConfig,omitempty" tf:"retry_config,omitempty"`

	// Configuration options for writing logs to Stackdriver Logging.
	// Structure is documented below.
	StackdriverLoggingConfig *StackdriverLoggingConfigInitParameters `json:"stackdriverLoggingConfig,omitempty" tf:"stackdriver_logging_config,omitempty"`
}

type QueueObservation struct {

	// Overrides for task-level appEngineRouting. These settings apply only
	// to App Engine tasks in this queue
	// Structure is documented below.
	AppEngineRoutingOverride *AppEngineRoutingOverrideObservation `json:"appEngineRoutingOverride,omitempty" tf:"app_engine_routing_override,omitempty"`

	HTTPTarget *HTTPTargetObservation `json:"httpTarget,omitempty" tf:"http_target,omitempty"`

	// an identifier for the resource with format projects/{{project}}/locations/{{location}}/queues/{{name}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The location of the queue
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Rate limits for task dispatches.
	// The queue's actual dispatch rate is the result of:
	RateLimits *RateLimitsObservation `json:"rateLimits,omitempty" tf:"rate_limits,omitempty"`

	// Settings that determine the retry behavior.
	// Structure is documented below.
	RetryConfig *RetryConfigObservation `json:"retryConfig,omitempty" tf:"retry_config,omitempty"`

	// Configuration options for writing logs to Stackdriver Logging.
	// Structure is documented below.
	StackdriverLoggingConfig *StackdriverLoggingConfigObservation `json:"stackdriverLoggingConfig,omitempty" tf:"stackdriver_logging_config,omitempty"`
}

type QueueParameters struct {

	// Overrides for task-level appEngineRouting. These settings apply only
	// to App Engine tasks in this queue
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	AppEngineRoutingOverride *AppEngineRoutingOverrideParameters `json:"appEngineRoutingOverride,omitempty" tf:"app_engine_routing_override,omitempty"`

	// +kubebuilder:validation:Optional
	HTTPTarget *HTTPTargetParameters `json:"httpTarget,omitempty" tf:"http_target,omitempty"`

	// The location of the queue
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/cloudplatform/v1beta1.Project
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Reference to a Project in cloudplatform to populate project.
	// +kubebuilder:validation:Optional
	ProjectRef *v1.Reference `json:"projectRef,omitempty" tf:"-"`

	// Selector for a Project in cloudplatform to populate project.
	// +kubebuilder:validation:Optional
	ProjectSelector *v1.Selector `json:"projectSelector,omitempty" tf:"-"`

	// Rate limits for task dispatches.
	// The queue's actual dispatch rate is the result of:
	// +kubebuilder:validation:Optional
	RateLimits *RateLimitsParameters `json:"rateLimits,omitempty" tf:"rate_limits,omitempty"`

	// Settings that determine the retry behavior.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	RetryConfig *RetryConfigParameters `json:"retryConfig,omitempty" tf:"retry_config,omitempty"`

	// Configuration options for writing logs to Stackdriver Logging.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	StackdriverLoggingConfig *StackdriverLoggingConfigParameters `json:"stackdriverLoggingConfig,omitempty" tf:"stackdriver_logging_config,omitempty"`
}

type RateLimitsInitParameters struct {

	// The maximum number of concurrent tasks that Cloud Tasks allows to
	// be dispatched for this queue. After this threshold has been
	// reached, Cloud Tasks stops dispatching tasks until the number of
	// concurrent requests decreases.
	MaxConcurrentDispatches *float64 `json:"maxConcurrentDispatches,omitempty" tf:"max_concurrent_dispatches,omitempty"`

	// The maximum rate at which tasks are dispatched from this queue.
	// If unspecified when the queue is created, Cloud Tasks will pick the default.
	MaxDispatchesPerSecond *float64 `json:"maxDispatchesPerSecond,omitempty" tf:"max_dispatches_per_second,omitempty"`
}

type RateLimitsObservation struct {

	// (Output)
	// The max burst size.
	// Max burst size limits how fast tasks in queue are processed when many tasks are
	// in the queue and the rate is high. This field allows the queue to have a high
	// rate so processing starts shortly after a task is enqueued, but still limits
	// resource usage when many tasks are enqueued in a short period of time.
	MaxBurstSize *float64 `json:"maxBurstSize,omitempty" tf:"max_burst_size,omitempty"`

	// The maximum number of concurrent tasks that Cloud Tasks allows to
	// be dispatched for this queue. After this threshold has been
	// reached, Cloud Tasks stops dispatching tasks until the number of
	// concurrent requests decreases.
	MaxConcurrentDispatches *float64 `json:"maxConcurrentDispatches,omitempty" tf:"max_concurrent_dispatches,omitempty"`

	// The maximum rate at which tasks are dispatched from this queue.
	// If unspecified when the queue is created, Cloud Tasks will pick the default.
	MaxDispatchesPerSecond *float64 `json:"maxDispatchesPerSecond,omitempty" tf:"max_dispatches_per_second,omitempty"`
}

type RateLimitsParameters struct {

	// The maximum number of concurrent tasks that Cloud Tasks allows to
	// be dispatched for this queue. After this threshold has been
	// reached, Cloud Tasks stops dispatching tasks until the number of
	// concurrent requests decreases.
	// +kubebuilder:validation:Optional
	MaxConcurrentDispatches *float64 `json:"maxConcurrentDispatches,omitempty" tf:"max_concurrent_dispatches,omitempty"`

	// The maximum rate at which tasks are dispatched from this queue.
	// If unspecified when the queue is created, Cloud Tasks will pick the default.
	// +kubebuilder:validation:Optional
	MaxDispatchesPerSecond *float64 `json:"maxDispatchesPerSecond,omitempty" tf:"max_dispatches_per_second,omitempty"`
}

type RetryConfigInitParameters struct {

	// Number of attempts per task.
	// Cloud Tasks will attempt the task maxAttempts times (that is, if
	// the first attempt fails, then there will be maxAttempts - 1
	// retries). Must be >= -1.
	// If unspecified when the queue is created, Cloud Tasks will pick
	// the default.
	// -1 indicates unlimited attempts.
	MaxAttempts *float64 `json:"maxAttempts,omitempty" tf:"max_attempts,omitempty"`

	// A task will be scheduled for retry between minBackoff and
	// maxBackoff duration after it fails, if the queue's RetryConfig
	// specifies that the task should be retried.
	MaxBackoff *string `json:"maxBackoff,omitempty" tf:"max_backoff,omitempty"`

	// The time between retries will double maxDoublings times.
	// A task's retry interval starts at minBackoff, then doubles maxDoublings times,
	// then increases linearly, and finally retries retries at intervals of maxBackoff
	// up to maxAttempts times.
	MaxDoublings *float64 `json:"maxDoublings,omitempty" tf:"max_doublings,omitempty"`

	// If positive, maxRetryDuration specifies the time limit for
	// retrying a failed task, measured from when the task was first
	// attempted. Once maxRetryDuration time has passed and the task has
	// been attempted maxAttempts times, no further attempts will be
	// made and the task will be deleted.
	// If zero, then the task age is unlimited.
	MaxRetryDuration *string `json:"maxRetryDuration,omitempty" tf:"max_retry_duration,omitempty"`

	// A task will be scheduled for retry between minBackoff and
	// maxBackoff duration after it fails, if the queue's RetryConfig
	// specifies that the task should be retried.
	MinBackoff *string `json:"minBackoff,omitempty" tf:"min_backoff,omitempty"`
}

type RetryConfigObservation struct {

	// Number of attempts per task.
	// Cloud Tasks will attempt the task maxAttempts times (that is, if
	// the first attempt fails, then there will be maxAttempts - 1
	// retries). Must be >= -1.
	// If unspecified when the queue is created, Cloud Tasks will pick
	// the default.
	// -1 indicates unlimited attempts.
	MaxAttempts *float64 `json:"maxAttempts,omitempty" tf:"max_attempts,omitempty"`

	// A task will be scheduled for retry between minBackoff and
	// maxBackoff duration after it fails, if the queue's RetryConfig
	// specifies that the task should be retried.
	MaxBackoff *string `json:"maxBackoff,omitempty" tf:"max_backoff,omitempty"`

	// The time between retries will double maxDoublings times.
	// A task's retry interval starts at minBackoff, then doubles maxDoublings times,
	// then increases linearly, and finally retries retries at intervals of maxBackoff
	// up to maxAttempts times.
	MaxDoublings *float64 `json:"maxDoublings,omitempty" tf:"max_doublings,omitempty"`

	// If positive, maxRetryDuration specifies the time limit for
	// retrying a failed task, measured from when the task was first
	// attempted. Once maxRetryDuration time has passed and the task has
	// been attempted maxAttempts times, no further attempts will be
	// made and the task will be deleted.
	// If zero, then the task age is unlimited.
	MaxRetryDuration *string `json:"maxRetryDuration,omitempty" tf:"max_retry_duration,omitempty"`

	// A task will be scheduled for retry between minBackoff and
	// maxBackoff duration after it fails, if the queue's RetryConfig
	// specifies that the task should be retried.
	MinBackoff *string `json:"minBackoff,omitempty" tf:"min_backoff,omitempty"`
}

type RetryConfigParameters struct {

	// Number of attempts per task.
	// Cloud Tasks will attempt the task maxAttempts times (that is, if
	// the first attempt fails, then there will be maxAttempts - 1
	// retries). Must be >= -1.
	// If unspecified when the queue is created, Cloud Tasks will pick
	// the default.
	// -1 indicates unlimited attempts.
	// +kubebuilder:validation:Optional
	MaxAttempts *float64 `json:"maxAttempts,omitempty" tf:"max_attempts,omitempty"`

	// A task will be scheduled for retry between minBackoff and
	// maxBackoff duration after it fails, if the queue's RetryConfig
	// specifies that the task should be retried.
	// +kubebuilder:validation:Optional
	MaxBackoff *string `json:"maxBackoff,omitempty" tf:"max_backoff,omitempty"`

	// The time between retries will double maxDoublings times.
	// A task's retry interval starts at minBackoff, then doubles maxDoublings times,
	// then increases linearly, and finally retries retries at intervals of maxBackoff
	// up to maxAttempts times.
	// +kubebuilder:validation:Optional
	MaxDoublings *float64 `json:"maxDoublings,omitempty" tf:"max_doublings,omitempty"`

	// If positive, maxRetryDuration specifies the time limit for
	// retrying a failed task, measured from when the task was first
	// attempted. Once maxRetryDuration time has passed and the task has
	// been attempted maxAttempts times, no further attempts will be
	// made and the task will be deleted.
	// If zero, then the task age is unlimited.
	// +kubebuilder:validation:Optional
	MaxRetryDuration *string `json:"maxRetryDuration,omitempty" tf:"max_retry_duration,omitempty"`

	// A task will be scheduled for retry between minBackoff and
	// maxBackoff duration after it fails, if the queue's RetryConfig
	// specifies that the task should be retried.
	// +kubebuilder:validation:Optional
	MinBackoff *string `json:"minBackoff,omitempty" tf:"min_backoff,omitempty"`
}

type StackdriverLoggingConfigInitParameters struct {

	// Specifies the fraction of operations to write to Stackdriver Logging.
	// This field may contain any value between 0.0 and 1.0, inclusive. 0.0 is the
	// default and means that no operations are logged.
	SamplingRatio *float64 `json:"samplingRatio,omitempty" tf:"sampling_ratio,omitempty"`
}

type StackdriverLoggingConfigObservation struct {

	// Specifies the fraction of operations to write to Stackdriver Logging.
	// This field may contain any value between 0.0 and 1.0, inclusive. 0.0 is the
	// default and means that no operations are logged.
	SamplingRatio *float64 `json:"samplingRatio,omitempty" tf:"sampling_ratio,omitempty"`
}

type StackdriverLoggingConfigParameters struct {

	// Specifies the fraction of operations to write to Stackdriver Logging.
	// This field may contain any value between 0.0 and 1.0, inclusive. 0.0 is the
	// default and means that no operations are logged.
	// +kubebuilder:validation:Optional
	SamplingRatio *float64 `json:"samplingRatio" tf:"sampling_ratio,omitempty"`
}

type URIOverrideInitParameters struct {

	// (Output)
	// The host that the task is sent to.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	PathOverride *PathOverrideInitParameters `json:"pathOverride,omitempty" tf:"path_override,omitempty"`

	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	QueryOverride *QueryOverrideInitParameters `json:"queryOverride,omitempty" tf:"query_override,omitempty"`

	Scheme *string `json:"scheme,omitempty" tf:"scheme,omitempty"`

	URIOverrideEnforceMode *string `json:"uriOverrideEnforceMode,omitempty" tf:"uri_override_enforce_mode,omitempty"`
}

type URIOverrideObservation struct {

	// (Output)
	// The host that the task is sent to.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	PathOverride *PathOverrideObservation `json:"pathOverride,omitempty" tf:"path_override,omitempty"`

	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	QueryOverride *QueryOverrideObservation `json:"queryOverride,omitempty" tf:"query_override,omitempty"`

	Scheme *string `json:"scheme,omitempty" tf:"scheme,omitempty"`

	URIOverrideEnforceMode *string `json:"uriOverrideEnforceMode,omitempty" tf:"uri_override_enforce_mode,omitempty"`
}

type URIOverrideParameters struct {

	// (Output)
	// The host that the task is sent to.
	// +kubebuilder:validation:Optional
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// +kubebuilder:validation:Optional
	PathOverride *PathOverrideParameters `json:"pathOverride,omitempty" tf:"path_override,omitempty"`

	// +kubebuilder:validation:Optional
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	// +kubebuilder:validation:Optional
	QueryOverride *QueryOverrideParameters `json:"queryOverride,omitempty" tf:"query_override,omitempty"`

	// +kubebuilder:validation:Optional
	Scheme *string `json:"scheme,omitempty" tf:"scheme,omitempty"`

	// +kubebuilder:validation:Optional
	URIOverrideEnforceMode *string `json:"uriOverrideEnforceMode,omitempty" tf:"uri_override_enforce_mode,omitempty"`
}

// QueueSpec defines the desired state of Queue
type QueueSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     QueueParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider QueueInitParameters `json:"initProvider,omitempty"`
}

// QueueStatus defines the observed state of Queue.
type QueueStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        QueueObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status

// Queue is the Schema for the Queues API. A named resource to which messages are sent by publishers.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type Queue struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              QueueSpec   `json:"spec"`
	Status            QueueStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// QueueList contains a list of Queues
type QueueList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Queue `json:"items"`
}

// Repository type metadata.
var (
	Queue_Kind             = "Queue"
	Queue_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Queue_Kind}.String()
	Queue_KindAPIVersion   = Queue_Kind + "." + CRDGroupVersion.String()
	Queue_GroupVersionKind = CRDGroupVersion.WithKind(Queue_Kind)
)

func init() {
	SchemeBuilder.Register(&Queue{}, &QueueList{})
}
