// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	apisresolver "github.com/upbound/provider-gcp/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *RegistryRepository) ResolveReferences( // ResolveReferences of this RegistryRepository.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.RemoteRepositoryConfig); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.RemoteRepositoryConfig[i3].UpstreamCredentials); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.RemoteRepositoryConfig[i3].UpstreamCredentials[i4].UsernamePasswordCredentials); i5++ {
				{
					m, l, err = apisresolver.GetManagedResource("secretmanager.gcp.upbound.io", "v1beta1", "SecretVersion", "SecretVersionList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RemoteRepositoryConfig[i3].UpstreamCredentials[i4].UsernamePasswordCredentials[i5].PasswordSecretVersion),
						Extract:      resource.ExtractParamPath("name", true),
						Reference:    mg.Spec.ForProvider.RemoteRepositoryConfig[i3].UpstreamCredentials[i4].UsernamePasswordCredentials[i5].PasswordSecretVersionRef,
						Selector:     mg.Spec.ForProvider.RemoteRepositoryConfig[i3].UpstreamCredentials[i4].UsernamePasswordCredentials[i5].PasswordSecretVersionSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.RemoteRepositoryConfig[i3].UpstreamCredentials[i4].UsernamePasswordCredentials[i5].PasswordSecretVersion")
				}
				mg.Spec.ForProvider.RemoteRepositoryConfig[i3].UpstreamCredentials[i4].UsernamePasswordCredentials[i5].PasswordSecretVersion = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.ForProvider.RemoteRepositoryConfig[i3].UpstreamCredentials[i4].UsernamePasswordCredentials[i5].PasswordSecretVersionRef = rsp.ResolvedReference

			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.VirtualRepositoryConfig); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.VirtualRepositoryConfig[i3].UpstreamPolicies); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("artifact.gcp.upbound.io", "v1beta1", "RegistryRepository", "RegistryRepositoryList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VirtualRepositoryConfig[i3].UpstreamPolicies[i4].Repository),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.ForProvider.VirtualRepositoryConfig[i3].UpstreamPolicies[i4].RepositoryRef,
					Selector:     mg.Spec.ForProvider.VirtualRepositoryConfig[i3].UpstreamPolicies[i4].RepositorySelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.VirtualRepositoryConfig[i3].UpstreamPolicies[i4].Repository")
			}
			mg.Spec.ForProvider.VirtualRepositoryConfig[i3].UpstreamPolicies[i4].Repository = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.VirtualRepositoryConfig[i3].UpstreamPolicies[i4].RepositoryRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.RemoteRepositoryConfig); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.RemoteRepositoryConfig[i3].UpstreamCredentials); i4++ {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.RemoteRepositoryConfig[i3].UpstreamCredentials[i4].UsernamePasswordCredentials); i5++ {
				{
					m, l, err = apisresolver.GetManagedResource("secretmanager.gcp.upbound.io", "v1beta1", "SecretVersion", "SecretVersionList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RemoteRepositoryConfig[i3].UpstreamCredentials[i4].UsernamePasswordCredentials[i5].PasswordSecretVersion),
						Extract:      resource.ExtractParamPath("name", true),
						Reference:    mg.Spec.InitProvider.RemoteRepositoryConfig[i3].UpstreamCredentials[i4].UsernamePasswordCredentials[i5].PasswordSecretVersionRef,
						Selector:     mg.Spec.InitProvider.RemoteRepositoryConfig[i3].UpstreamCredentials[i4].UsernamePasswordCredentials[i5].PasswordSecretVersionSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.InitProvider.RemoteRepositoryConfig[i3].UpstreamCredentials[i4].UsernamePasswordCredentials[i5].PasswordSecretVersion")
				}
				mg.Spec.InitProvider.RemoteRepositoryConfig[i3].UpstreamCredentials[i4].UsernamePasswordCredentials[i5].PasswordSecretVersion = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.InitProvider.RemoteRepositoryConfig[i3].UpstreamCredentials[i4].UsernamePasswordCredentials[i5].PasswordSecretVersionRef = rsp.ResolvedReference

			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.VirtualRepositoryConfig); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.VirtualRepositoryConfig[i3].UpstreamPolicies); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("artifact.gcp.upbound.io", "v1beta1", "RegistryRepository", "RegistryRepositoryList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VirtualRepositoryConfig[i3].UpstreamPolicies[i4].Repository),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.InitProvider.VirtualRepositoryConfig[i3].UpstreamPolicies[i4].RepositoryRef,
					Selector:     mg.Spec.InitProvider.VirtualRepositoryConfig[i3].UpstreamPolicies[i4].RepositorySelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.VirtualRepositoryConfig[i3].UpstreamPolicies[i4].Repository")
			}
			mg.Spec.InitProvider.VirtualRepositoryConfig[i3].UpstreamPolicies[i4].Repository = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.VirtualRepositoryConfig[i3].UpstreamPolicies[i4].RepositoryRef = rsp.ResolvedReference

		}
	}

	return nil
}
