// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AptRepositoryInitParameters struct {

	// One of the publicly available Yum repositories supported by Artifact Registry.
	// Structure is documented below.
	PublicRepository []PublicRepositoryInitParameters `json:"publicRepository,omitempty" tf:"public_repository,omitempty"`
}

type AptRepositoryObservation struct {

	// One of the publicly available Yum repositories supported by Artifact Registry.
	// Structure is documented below.
	PublicRepository []PublicRepositoryObservation `json:"publicRepository,omitempty" tf:"public_repository,omitempty"`
}

type AptRepositoryParameters struct {

	// One of the publicly available Yum repositories supported by Artifact Registry.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	PublicRepository []PublicRepositoryParameters `json:"publicRepository,omitempty" tf:"public_repository,omitempty"`
}

type CleanupPoliciesInitParameters struct {

	// Policy action.
	// Possible values are: DELETE, KEEP.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Policy condition for matching versions.
	// Structure is documented below.
	Condition []ConditionInitParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// The identifier for this object. Format specified above.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Policy condition for retaining a minimum number of versions. May only be
	// specified with a Keep action.
	// Structure is documented below.
	MostRecentVersions []MostRecentVersionsInitParameters `json:"mostRecentVersions,omitempty" tf:"most_recent_versions,omitempty"`
}

type CleanupPoliciesObservation struct {

	// Policy action.
	// Possible values are: DELETE, KEEP.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Policy condition for matching versions.
	// Structure is documented below.
	Condition []ConditionObservation `json:"condition,omitempty" tf:"condition,omitempty"`

	// The identifier for this object. Format specified above.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Policy condition for retaining a minimum number of versions. May only be
	// specified with a Keep action.
	// Structure is documented below.
	MostRecentVersions []MostRecentVersionsObservation `json:"mostRecentVersions,omitempty" tf:"most_recent_versions,omitempty"`
}

type CleanupPoliciesParameters struct {

	// Policy action.
	// Possible values are: DELETE, KEEP.
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Policy condition for matching versions.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Condition []ConditionParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// The identifier for this object. Format specified above.
	// +kubebuilder:validation:Optional
	ID *string `json:"id" tf:"id,omitempty"`

	// Policy condition for retaining a minimum number of versions. May only be
	// specified with a Keep action.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	MostRecentVersions []MostRecentVersionsParameters `json:"mostRecentVersions,omitempty" tf:"most_recent_versions,omitempty"`
}

type ConditionInitParameters struct {

	// Match versions newer than a duration.
	NewerThan *string `json:"newerThan,omitempty" tf:"newer_than,omitempty"`

	// Match versions older than a duration.
	OlderThan *string `json:"olderThan,omitempty" tf:"older_than,omitempty"`

	// Match versions by package prefix. Applied on any prefix match.
	PackageNamePrefixes []*string `json:"packageNamePrefixes,omitempty" tf:"package_name_prefixes,omitempty"`

	// Match versions by tag prefix. Applied on any prefix match.
	TagPrefixes []*string `json:"tagPrefixes,omitempty" tf:"tag_prefixes,omitempty"`

	// Match versions by tag status.
	// Default value is ANY.
	// Possible values are: TAGGED, UNTAGGED, ANY.
	TagState *string `json:"tagState,omitempty" tf:"tag_state,omitempty"`

	// Match versions by version name prefix. Applied on any prefix match.
	VersionNamePrefixes []*string `json:"versionNamePrefixes,omitempty" tf:"version_name_prefixes,omitempty"`
}

type ConditionObservation struct {

	// Match versions newer than a duration.
	NewerThan *string `json:"newerThan,omitempty" tf:"newer_than,omitempty"`

	// Match versions older than a duration.
	OlderThan *string `json:"olderThan,omitempty" tf:"older_than,omitempty"`

	// Match versions by package prefix. Applied on any prefix match.
	PackageNamePrefixes []*string `json:"packageNamePrefixes,omitempty" tf:"package_name_prefixes,omitempty"`

	// Match versions by tag prefix. Applied on any prefix match.
	TagPrefixes []*string `json:"tagPrefixes,omitempty" tf:"tag_prefixes,omitempty"`

	// Match versions by tag status.
	// Default value is ANY.
	// Possible values are: TAGGED, UNTAGGED, ANY.
	TagState *string `json:"tagState,omitempty" tf:"tag_state,omitempty"`

	// Match versions by version name prefix. Applied on any prefix match.
	VersionNamePrefixes []*string `json:"versionNamePrefixes,omitempty" tf:"version_name_prefixes,omitempty"`
}

type ConditionParameters struct {

	// Match versions newer than a duration.
	// +kubebuilder:validation:Optional
	NewerThan *string `json:"newerThan,omitempty" tf:"newer_than,omitempty"`

	// Match versions older than a duration.
	// +kubebuilder:validation:Optional
	OlderThan *string `json:"olderThan,omitempty" tf:"older_than,omitempty"`

	// Match versions by package prefix. Applied on any prefix match.
	// +kubebuilder:validation:Optional
	PackageNamePrefixes []*string `json:"packageNamePrefixes,omitempty" tf:"package_name_prefixes,omitempty"`

	// Match versions by tag prefix. Applied on any prefix match.
	// +kubebuilder:validation:Optional
	TagPrefixes []*string `json:"tagPrefixes,omitempty" tf:"tag_prefixes,omitempty"`

	// Match versions by tag status.
	// Default value is ANY.
	// Possible values are: TAGGED, UNTAGGED, ANY.
	// +kubebuilder:validation:Optional
	TagState *string `json:"tagState,omitempty" tf:"tag_state,omitempty"`

	// Match versions by version name prefix. Applied on any prefix match.
	// +kubebuilder:validation:Optional
	VersionNamePrefixes []*string `json:"versionNamePrefixes,omitempty" tf:"version_name_prefixes,omitempty"`
}

type DockerConfigInitParameters struct {

	// The repository which enabled this flag prevents all tags from being modified, moved or deleted. This does not prevent tags from being created.
	ImmutableTags *bool `json:"immutableTags,omitempty" tf:"immutable_tags,omitempty"`
}

type DockerConfigObservation struct {

	// The repository which enabled this flag prevents all tags from being modified, moved or deleted. This does not prevent tags from being created.
	ImmutableTags *bool `json:"immutableTags,omitempty" tf:"immutable_tags,omitempty"`
}

type DockerConfigParameters struct {

	// The repository which enabled this flag prevents all tags from being modified, moved or deleted. This does not prevent tags from being created.
	// +kubebuilder:validation:Optional
	ImmutableTags *bool `json:"immutableTags,omitempty" tf:"immutable_tags,omitempty"`
}

type DockerRepositoryInitParameters struct {

	// One of the publicly available Yum repositories supported by Artifact Registry.
	// Structure is documented below.
	PublicRepository *string `json:"publicRepository,omitempty" tf:"public_repository,omitempty"`
}

type DockerRepositoryObservation struct {

	// One of the publicly available Yum repositories supported by Artifact Registry.
	// Structure is documented below.
	PublicRepository *string `json:"publicRepository,omitempty" tf:"public_repository,omitempty"`
}

type DockerRepositoryParameters struct {

	// One of the publicly available Yum repositories supported by Artifact Registry.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	PublicRepository *string `json:"publicRepository,omitempty" tf:"public_repository,omitempty"`
}

type MavenConfigInitParameters struct {

	// The repository with this flag will allow publishing the same
	// snapshot versions.
	AllowSnapshotOverwrites *bool `json:"allowSnapshotOverwrites,omitempty" tf:"allow_snapshot_overwrites,omitempty"`

	// Version policy defines the versions that the registry will accept.
	// Default value is VERSION_POLICY_UNSPECIFIED.
	// Possible values are: VERSION_POLICY_UNSPECIFIED, RELEASE, SNAPSHOT.
	VersionPolicy *string `json:"versionPolicy,omitempty" tf:"version_policy,omitempty"`
}

type MavenConfigObservation struct {

	// The repository with this flag will allow publishing the same
	// snapshot versions.
	AllowSnapshotOverwrites *bool `json:"allowSnapshotOverwrites,omitempty" tf:"allow_snapshot_overwrites,omitempty"`

	// Version policy defines the versions that the registry will accept.
	// Default value is VERSION_POLICY_UNSPECIFIED.
	// Possible values are: VERSION_POLICY_UNSPECIFIED, RELEASE, SNAPSHOT.
	VersionPolicy *string `json:"versionPolicy,omitempty" tf:"version_policy,omitempty"`
}

type MavenConfigParameters struct {

	// The repository with this flag will allow publishing the same
	// snapshot versions.
	// +kubebuilder:validation:Optional
	AllowSnapshotOverwrites *bool `json:"allowSnapshotOverwrites,omitempty" tf:"allow_snapshot_overwrites,omitempty"`

	// Version policy defines the versions that the registry will accept.
	// Default value is VERSION_POLICY_UNSPECIFIED.
	// Possible values are: VERSION_POLICY_UNSPECIFIED, RELEASE, SNAPSHOT.
	// +kubebuilder:validation:Optional
	VersionPolicy *string `json:"versionPolicy,omitempty" tf:"version_policy,omitempty"`
}

type MavenRepositoryInitParameters struct {

	// One of the publicly available Yum repositories supported by Artifact Registry.
	// Structure is documented below.
	PublicRepository *string `json:"publicRepository,omitempty" tf:"public_repository,omitempty"`
}

type MavenRepositoryObservation struct {

	// One of the publicly available Yum repositories supported by Artifact Registry.
	// Structure is documented below.
	PublicRepository *string `json:"publicRepository,omitempty" tf:"public_repository,omitempty"`
}

type MavenRepositoryParameters struct {

	// One of the publicly available Yum repositories supported by Artifact Registry.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	PublicRepository *string `json:"publicRepository,omitempty" tf:"public_repository,omitempty"`
}

type MostRecentVersionsInitParameters struct {

	// Minimum number of versions to keep.
	KeepCount *float64 `json:"keepCount,omitempty" tf:"keep_count,omitempty"`

	// Match versions by package prefix. Applied on any prefix match.
	PackageNamePrefixes []*string `json:"packageNamePrefixes,omitempty" tf:"package_name_prefixes,omitempty"`
}

type MostRecentVersionsObservation struct {

	// Minimum number of versions to keep.
	KeepCount *float64 `json:"keepCount,omitempty" tf:"keep_count,omitempty"`

	// Match versions by package prefix. Applied on any prefix match.
	PackageNamePrefixes []*string `json:"packageNamePrefixes,omitempty" tf:"package_name_prefixes,omitempty"`
}

type MostRecentVersionsParameters struct {

	// Minimum number of versions to keep.
	// +kubebuilder:validation:Optional
	KeepCount *float64 `json:"keepCount,omitempty" tf:"keep_count,omitempty"`

	// Match versions by package prefix. Applied on any prefix match.
	// +kubebuilder:validation:Optional
	PackageNamePrefixes []*string `json:"packageNamePrefixes,omitempty" tf:"package_name_prefixes,omitempty"`
}

type NpmRepositoryInitParameters struct {

	// One of the publicly available Yum repositories supported by Artifact Registry.
	// Structure is documented below.
	PublicRepository *string `json:"publicRepository,omitempty" tf:"public_repository,omitempty"`
}

type NpmRepositoryObservation struct {

	// One of the publicly available Yum repositories supported by Artifact Registry.
	// Structure is documented below.
	PublicRepository *string `json:"publicRepository,omitempty" tf:"public_repository,omitempty"`
}

type NpmRepositoryParameters struct {

	// One of the publicly available Yum repositories supported by Artifact Registry.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	PublicRepository *string `json:"publicRepository,omitempty" tf:"public_repository,omitempty"`
}

type PublicRepositoryInitParameters struct {

	// A common public repository base for Yum.
	// Possible values are: CENTOS, CENTOS_DEBUG, CENTOS_VAULT, CENTOS_STREAM, ROCKY, EPEL.
	RepositoryBase *string `json:"repositoryBase,omitempty" tf:"repository_base,omitempty"`

	// Specific repository from the base, e.g. "centos/8-stream/BaseOS/x86_64/os"
	RepositoryPath *string `json:"repositoryPath,omitempty" tf:"repository_path,omitempty"`
}

type PublicRepositoryObservation struct {

	// A common public repository base for Yum.
	// Possible values are: CENTOS, CENTOS_DEBUG, CENTOS_VAULT, CENTOS_STREAM, ROCKY, EPEL.
	RepositoryBase *string `json:"repositoryBase,omitempty" tf:"repository_base,omitempty"`

	// Specific repository from the base, e.g. "centos/8-stream/BaseOS/x86_64/os"
	RepositoryPath *string `json:"repositoryPath,omitempty" tf:"repository_path,omitempty"`
}

type PublicRepositoryParameters struct {

	// A common public repository base for Yum.
	// Possible values are: CENTOS, CENTOS_DEBUG, CENTOS_VAULT, CENTOS_STREAM, ROCKY, EPEL.
	// +kubebuilder:validation:Optional
	RepositoryBase *string `json:"repositoryBase" tf:"repository_base,omitempty"`

	// Specific repository from the base, e.g. "centos/8-stream/BaseOS/x86_64/os"
	// +kubebuilder:validation:Optional
	RepositoryPath *string `json:"repositoryPath" tf:"repository_path,omitempty"`
}

type PythonRepositoryInitParameters struct {

	// One of the publicly available Yum repositories supported by Artifact Registry.
	// Structure is documented below.
	PublicRepository *string `json:"publicRepository,omitempty" tf:"public_repository,omitempty"`
}

type PythonRepositoryObservation struct {

	// One of the publicly available Yum repositories supported by Artifact Registry.
	// Structure is documented below.
	PublicRepository *string `json:"publicRepository,omitempty" tf:"public_repository,omitempty"`
}

type PythonRepositoryParameters struct {

	// One of the publicly available Yum repositories supported by Artifact Registry.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	PublicRepository *string `json:"publicRepository,omitempty" tf:"public_repository,omitempty"`
}

type RegistryRepositoryInitParameters struct {

	// Cleanup policies for this repository. Cleanup policies indicate when
	// certain package versions can be automatically deleted.
	// Map keys are policy IDs supplied by users during policy creation. They must
	// unique within a repository and be under 128 characters in length.
	// Structure is documented below.
	CleanupPolicies []CleanupPoliciesInitParameters `json:"cleanupPolicies,omitempty" tf:"cleanup_policies,omitempty"`

	// If true, the cleanup pipeline is prevented from deleting versions in this
	// repository.
	CleanupPolicyDryRun *bool `json:"cleanupPolicyDryRun,omitempty" tf:"cleanup_policy_dry_run,omitempty"`

	// The user-provided description of the repository.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Docker repository config contains repository level configuration for the repositories of docker type.
	// Structure is documented below.
	DockerConfig []DockerConfigInitParameters `json:"dockerConfig,omitempty" tf:"docker_config,omitempty"`

	// The format of packages that are stored in the repository. Supported formats
	// can be found here.
	// You can only create alpha formats if you are a member of the
	// alpha user group.
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// The Cloud KMS resource name of the customer managed encryption key that’s
	// used to encrypt the contents of the Repository. Has the form:
	// projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key.
	// This value may not be changed after the Repository has been created.
	KMSKeyName *string `json:"kmsKeyName,omitempty" tf:"kms_key_name,omitempty"`

	// Labels with user-defined metadata.
	// This field may contain up to 64 entries. Label keys and values may be no
	// longer than 63 characters. Label keys must begin with a lowercase letter
	// and may only contain lowercase letters, numeric characters, underscores,
	// and dashes.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// MavenRepositoryConfig is maven related repository details.
	// Provides additional configuration details for repositories of the maven
	// format type.
	// Structure is documented below.
	MavenConfig []MavenConfigInitParameters `json:"mavenConfig,omitempty" tf:"maven_config,omitempty"`

	// The mode configures the repository to serve artifacts from different sources.
	// Default value is STANDARD_REPOSITORY.
	// Possible values are: STANDARD_REPOSITORY, VIRTUAL_REPOSITORY, REMOTE_REPOSITORY.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Configuration specific for a Remote Repository.
	// Structure is documented below.
	RemoteRepositoryConfig []RemoteRepositoryConfigInitParameters `json:"remoteRepositoryConfig,omitempty" tf:"remote_repository_config,omitempty"`

	// Configuration specific for a Virtual Repository.
	// Structure is documented below.
	VirtualRepositoryConfig []VirtualRepositoryConfigInitParameters `json:"virtualRepositoryConfig,omitempty" tf:"virtual_repository_config,omitempty"`
}

type RegistryRepositoryObservation struct {

	// Cleanup policies for this repository. Cleanup policies indicate when
	// certain package versions can be automatically deleted.
	// Map keys are policy IDs supplied by users during policy creation. They must
	// unique within a repository and be under 128 characters in length.
	// Structure is documented below.
	CleanupPolicies []CleanupPoliciesObservation `json:"cleanupPolicies,omitempty" tf:"cleanup_policies,omitempty"`

	// If true, the cleanup pipeline is prevented from deleting versions in this
	// repository.
	CleanupPolicyDryRun *bool `json:"cleanupPolicyDryRun,omitempty" tf:"cleanup_policy_dry_run,omitempty"`

	// The time when the repository was created.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// The user-provided description of the repository.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Docker repository config contains repository level configuration for the repositories of docker type.
	// Structure is documented below.
	DockerConfig []DockerConfigObservation `json:"dockerConfig,omitempty" tf:"docker_config,omitempty"`

	// for all of the labels present on the resource.
	// +mapType=granular
	EffectiveLabels map[string]*string `json:"effectiveLabels,omitempty" tf:"effective_labels,omitempty"`

	// The format of packages that are stored in the repository. Supported formats
	// can be found here.
	// You can only create alpha formats if you are a member of the
	// alpha user group.
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// an identifier for the resource with format projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The Cloud KMS resource name of the customer managed encryption key that’s
	// used to encrypt the contents of the Repository. Has the form:
	// projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key.
	// This value may not be changed after the Repository has been created.
	KMSKeyName *string `json:"kmsKeyName,omitempty" tf:"kms_key_name,omitempty"`

	// Labels with user-defined metadata.
	// This field may contain up to 64 entries. Label keys and values may be no
	// longer than 63 characters. Label keys must begin with a lowercase letter
	// and may only contain lowercase letters, numeric characters, underscores,
	// and dashes.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The name of the location this repository is located in.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// MavenRepositoryConfig is maven related repository details.
	// Provides additional configuration details for repositories of the maven
	// format type.
	// Structure is documented below.
	MavenConfig []MavenConfigObservation `json:"mavenConfig,omitempty" tf:"maven_config,omitempty"`

	// The mode configures the repository to serve artifacts from different sources.
	// Default value is STANDARD_REPOSITORY.
	// Possible values are: STANDARD_REPOSITORY, VIRTUAL_REPOSITORY, REMOTE_REPOSITORY.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// The name of the repository, for example:
	// "repo1"
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Configuration specific for a Remote Repository.
	// Structure is documented below.
	RemoteRepositoryConfig []RemoteRepositoryConfigObservation `json:"remoteRepositoryConfig,omitempty" tf:"remote_repository_config,omitempty"`

	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	// +mapType=granular
	TerraformLabels map[string]*string `json:"terraformLabels,omitempty" tf:"terraform_labels,omitempty"`

	// The time when the repository was last updated.
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`

	// Configuration specific for a Virtual Repository.
	// Structure is documented below.
	VirtualRepositoryConfig []VirtualRepositoryConfigObservation `json:"virtualRepositoryConfig,omitempty" tf:"virtual_repository_config,omitempty"`
}

type RegistryRepositoryParameters struct {

	// Cleanup policies for this repository. Cleanup policies indicate when
	// certain package versions can be automatically deleted.
	// Map keys are policy IDs supplied by users during policy creation. They must
	// unique within a repository and be under 128 characters in length.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	CleanupPolicies []CleanupPoliciesParameters `json:"cleanupPolicies,omitempty" tf:"cleanup_policies,omitempty"`

	// If true, the cleanup pipeline is prevented from deleting versions in this
	// repository.
	// +kubebuilder:validation:Optional
	CleanupPolicyDryRun *bool `json:"cleanupPolicyDryRun,omitempty" tf:"cleanup_policy_dry_run,omitempty"`

	// The user-provided description of the repository.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Docker repository config contains repository level configuration for the repositories of docker type.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	DockerConfig []DockerConfigParameters `json:"dockerConfig,omitempty" tf:"docker_config,omitempty"`

	// The format of packages that are stored in the repository. Supported formats
	// can be found here.
	// You can only create alpha formats if you are a member of the
	// alpha user group.
	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// The Cloud KMS resource name of the customer managed encryption key that’s
	// used to encrypt the contents of the Repository. Has the form:
	// projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key.
	// This value may not be changed after the Repository has been created.
	// +kubebuilder:validation:Optional
	KMSKeyName *string `json:"kmsKeyName,omitempty" tf:"kms_key_name,omitempty"`

	// Labels with user-defined metadata.
	// This field may contain up to 64 entries. Label keys and values may be no
	// longer than 63 characters. Label keys must begin with a lowercase letter
	// and may only contain lowercase letters, numeric characters, underscores,
	// and dashes.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The name of the location this repository is located in.
	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// MavenRepositoryConfig is maven related repository details.
	// Provides additional configuration details for repositories of the maven
	// format type.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	MavenConfig []MavenConfigParameters `json:"mavenConfig,omitempty" tf:"maven_config,omitempty"`

	// The mode configures the repository to serve artifacts from different sources.
	// Default value is STANDARD_REPOSITORY.
	// Possible values are: STANDARD_REPOSITORY, VIRTUAL_REPOSITORY, REMOTE_REPOSITORY.
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Configuration specific for a Remote Repository.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	RemoteRepositoryConfig []RemoteRepositoryConfigParameters `json:"remoteRepositoryConfig,omitempty" tf:"remote_repository_config,omitempty"`

	// Configuration specific for a Virtual Repository.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	VirtualRepositoryConfig []VirtualRepositoryConfigParameters `json:"virtualRepositoryConfig,omitempty" tf:"virtual_repository_config,omitempty"`
}

type RemoteRepositoryConfigInitParameters struct {

	// Specific settings for an Apt remote repository.
	// Structure is documented below.
	AptRepository []AptRepositoryInitParameters `json:"aptRepository,omitempty" tf:"apt_repository,omitempty"`

	// The description of the remote source.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specific settings for a Docker remote repository.
	// Structure is documented below.
	DockerRepository []DockerRepositoryInitParameters `json:"dockerRepository,omitempty" tf:"docker_repository,omitempty"`

	// Specific settings for a Maven remote repository.
	// Structure is documented below.
	MavenRepository []MavenRepositoryInitParameters `json:"mavenRepository,omitempty" tf:"maven_repository,omitempty"`

	// Specific settings for an Npm remote repository.
	// Structure is documented below.
	NpmRepository []NpmRepositoryInitParameters `json:"npmRepository,omitempty" tf:"npm_repository,omitempty"`

	// Specific settings for a Python remote repository.
	// Structure is documented below.
	PythonRepository []PythonRepositoryInitParameters `json:"pythonRepository,omitempty" tf:"python_repository,omitempty"`

	// The credentials used to access the remote repository.
	// Structure is documented below.
	UpstreamCredentials []UpstreamCredentialsInitParameters `json:"upstreamCredentials,omitempty" tf:"upstream_credentials,omitempty"`

	// Specific settings for an Yum remote repository.
	// Structure is documented below.
	YumRepository []YumRepositoryInitParameters `json:"yumRepository,omitempty" tf:"yum_repository,omitempty"`
}

type RemoteRepositoryConfigObservation struct {

	// Specific settings for an Apt remote repository.
	// Structure is documented below.
	AptRepository []AptRepositoryObservation `json:"aptRepository,omitempty" tf:"apt_repository,omitempty"`

	// The description of the remote source.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specific settings for a Docker remote repository.
	// Structure is documented below.
	DockerRepository []DockerRepositoryObservation `json:"dockerRepository,omitempty" tf:"docker_repository,omitempty"`

	// Specific settings for a Maven remote repository.
	// Structure is documented below.
	MavenRepository []MavenRepositoryObservation `json:"mavenRepository,omitempty" tf:"maven_repository,omitempty"`

	// Specific settings for an Npm remote repository.
	// Structure is documented below.
	NpmRepository []NpmRepositoryObservation `json:"npmRepository,omitempty" tf:"npm_repository,omitempty"`

	// Specific settings for a Python remote repository.
	// Structure is documented below.
	PythonRepository []PythonRepositoryObservation `json:"pythonRepository,omitempty" tf:"python_repository,omitempty"`

	// The credentials used to access the remote repository.
	// Structure is documented below.
	UpstreamCredentials []UpstreamCredentialsObservation `json:"upstreamCredentials,omitempty" tf:"upstream_credentials,omitempty"`

	// Specific settings for an Yum remote repository.
	// Structure is documented below.
	YumRepository []YumRepositoryObservation `json:"yumRepository,omitempty" tf:"yum_repository,omitempty"`
}

type RemoteRepositoryConfigParameters struct {

	// Specific settings for an Apt remote repository.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	AptRepository []AptRepositoryParameters `json:"aptRepository,omitempty" tf:"apt_repository,omitempty"`

	// The description of the remote source.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specific settings for a Docker remote repository.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	DockerRepository []DockerRepositoryParameters `json:"dockerRepository,omitempty" tf:"docker_repository,omitempty"`

	// Specific settings for a Maven remote repository.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	MavenRepository []MavenRepositoryParameters `json:"mavenRepository,omitempty" tf:"maven_repository,omitempty"`

	// Specific settings for an Npm remote repository.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	NpmRepository []NpmRepositoryParameters `json:"npmRepository,omitempty" tf:"npm_repository,omitempty"`

	// Specific settings for a Python remote repository.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	PythonRepository []PythonRepositoryParameters `json:"pythonRepository,omitempty" tf:"python_repository,omitempty"`

	// The credentials used to access the remote repository.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	UpstreamCredentials []UpstreamCredentialsParameters `json:"upstreamCredentials,omitempty" tf:"upstream_credentials,omitempty"`

	// Specific settings for an Yum remote repository.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	YumRepository []YumRepositoryParameters `json:"yumRepository,omitempty" tf:"yum_repository,omitempty"`
}

type UpstreamCredentialsInitParameters struct {

	// Use username and password to access the remote repository.
	// Structure is documented below.
	UsernamePasswordCredentials []UsernamePasswordCredentialsInitParameters `json:"usernamePasswordCredentials,omitempty" tf:"username_password_credentials,omitempty"`
}

type UpstreamCredentialsObservation struct {

	// Use username and password to access the remote repository.
	// Structure is documented below.
	UsernamePasswordCredentials []UsernamePasswordCredentialsObservation `json:"usernamePasswordCredentials,omitempty" tf:"username_password_credentials,omitempty"`
}

type UpstreamCredentialsParameters struct {

	// Use username and password to access the remote repository.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	UsernamePasswordCredentials []UsernamePasswordCredentialsParameters `json:"usernamePasswordCredentials,omitempty" tf:"username_password_credentials,omitempty"`
}

type UpstreamPoliciesInitParameters struct {

	// The user-provided ID of the upstream policy.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Entries with a greater priority value take precedence in the pull order.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// A reference to the repository resource, for example:
	// "projects/p1/locations/us-central1/repository/repo1".
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/artifact/v1beta1.RegistryRepository
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`

	// Reference to a RegistryRepository in artifact to populate repository.
	// +kubebuilder:validation:Optional
	RepositoryRef *v1.Reference `json:"repositoryRef,omitempty" tf:"-"`

	// Selector for a RegistryRepository in artifact to populate repository.
	// +kubebuilder:validation:Optional
	RepositorySelector *v1.Selector `json:"repositorySelector,omitempty" tf:"-"`
}

type UpstreamPoliciesObservation struct {

	// The user-provided ID of the upstream policy.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Entries with a greater priority value take precedence in the pull order.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// A reference to the repository resource, for example:
	// "projects/p1/locations/us-central1/repository/repo1".
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`
}

type UpstreamPoliciesParameters struct {

	// The user-provided ID of the upstream policy.
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Entries with a greater priority value take precedence in the pull order.
	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// A reference to the repository resource, for example:
	// "projects/p1/locations/us-central1/repository/repo1".
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/artifact/v1beta1.RegistryRepository
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`

	// Reference to a RegistryRepository in artifact to populate repository.
	// +kubebuilder:validation:Optional
	RepositoryRef *v1.Reference `json:"repositoryRef,omitempty" tf:"-"`

	// Selector for a RegistryRepository in artifact to populate repository.
	// +kubebuilder:validation:Optional
	RepositorySelector *v1.Selector `json:"repositorySelector,omitempty" tf:"-"`
}

type UsernamePasswordCredentialsInitParameters struct {

	// The Secret Manager key version that holds the password to access the
	// remote repository. Must be in the format of
	// projects/{project}/secrets/{secret}/versions/{version}.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/secretmanager/v1beta1.SecretVersion
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("name",true)
	PasswordSecretVersion *string `json:"passwordSecretVersion,omitempty" tf:"password_secret_version,omitempty"`

	// Reference to a SecretVersion in secretmanager to populate passwordSecretVersion.
	// +kubebuilder:validation:Optional
	PasswordSecretVersionRef *v1.Reference `json:"passwordSecretVersionRef,omitempty" tf:"-"`

	// Selector for a SecretVersion in secretmanager to populate passwordSecretVersion.
	// +kubebuilder:validation:Optional
	PasswordSecretVersionSelector *v1.Selector `json:"passwordSecretVersionSelector,omitempty" tf:"-"`

	// The username to access the remote repository.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type UsernamePasswordCredentialsObservation struct {

	// The Secret Manager key version that holds the password to access the
	// remote repository. Must be in the format of
	// projects/{project}/secrets/{secret}/versions/{version}.
	PasswordSecretVersion *string `json:"passwordSecretVersion,omitempty" tf:"password_secret_version,omitempty"`

	// The username to access the remote repository.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type UsernamePasswordCredentialsParameters struct {

	// The Secret Manager key version that holds the password to access the
	// remote repository. Must be in the format of
	// projects/{project}/secrets/{secret}/versions/{version}.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/secretmanager/v1beta1.SecretVersion
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("name",true)
	// +kubebuilder:validation:Optional
	PasswordSecretVersion *string `json:"passwordSecretVersion,omitempty" tf:"password_secret_version,omitempty"`

	// Reference to a SecretVersion in secretmanager to populate passwordSecretVersion.
	// +kubebuilder:validation:Optional
	PasswordSecretVersionRef *v1.Reference `json:"passwordSecretVersionRef,omitempty" tf:"-"`

	// Selector for a SecretVersion in secretmanager to populate passwordSecretVersion.
	// +kubebuilder:validation:Optional
	PasswordSecretVersionSelector *v1.Selector `json:"passwordSecretVersionSelector,omitempty" tf:"-"`

	// The username to access the remote repository.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type VirtualRepositoryConfigInitParameters struct {

	// Policies that configure the upstream artifacts distributed by the Virtual
	// Repository. Upstream policies cannot be set on a standard repository.
	// Structure is documented below.
	UpstreamPolicies []UpstreamPoliciesInitParameters `json:"upstreamPolicies,omitempty" tf:"upstream_policies,omitempty"`
}

type VirtualRepositoryConfigObservation struct {

	// Policies that configure the upstream artifacts distributed by the Virtual
	// Repository. Upstream policies cannot be set on a standard repository.
	// Structure is documented below.
	UpstreamPolicies []UpstreamPoliciesObservation `json:"upstreamPolicies,omitempty" tf:"upstream_policies,omitempty"`
}

type VirtualRepositoryConfigParameters struct {

	// Policies that configure the upstream artifacts distributed by the Virtual
	// Repository. Upstream policies cannot be set on a standard repository.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	UpstreamPolicies []UpstreamPoliciesParameters `json:"upstreamPolicies,omitempty" tf:"upstream_policies,omitempty"`
}

type YumRepositoryInitParameters struct {

	// One of the publicly available Yum repositories supported by Artifact Registry.
	// Structure is documented below.
	PublicRepository []YumRepositoryPublicRepositoryInitParameters `json:"publicRepository,omitempty" tf:"public_repository,omitempty"`
}

type YumRepositoryObservation struct {

	// One of the publicly available Yum repositories supported by Artifact Registry.
	// Structure is documented below.
	PublicRepository []YumRepositoryPublicRepositoryObservation `json:"publicRepository,omitempty" tf:"public_repository,omitempty"`
}

type YumRepositoryParameters struct {

	// One of the publicly available Yum repositories supported by Artifact Registry.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	PublicRepository []YumRepositoryPublicRepositoryParameters `json:"publicRepository,omitempty" tf:"public_repository,omitempty"`
}

type YumRepositoryPublicRepositoryInitParameters struct {

	// A common public repository base for Yum.
	// Possible values are: CENTOS, CENTOS_DEBUG, CENTOS_VAULT, CENTOS_STREAM, ROCKY, EPEL.
	RepositoryBase *string `json:"repositoryBase,omitempty" tf:"repository_base,omitempty"`

	// Specific repository from the base, e.g. "centos/8-stream/BaseOS/x86_64/os"
	RepositoryPath *string `json:"repositoryPath,omitempty" tf:"repository_path,omitempty"`
}

type YumRepositoryPublicRepositoryObservation struct {

	// A common public repository base for Yum.
	// Possible values are: CENTOS, CENTOS_DEBUG, CENTOS_VAULT, CENTOS_STREAM, ROCKY, EPEL.
	RepositoryBase *string `json:"repositoryBase,omitempty" tf:"repository_base,omitempty"`

	// Specific repository from the base, e.g. "centos/8-stream/BaseOS/x86_64/os"
	RepositoryPath *string `json:"repositoryPath,omitempty" tf:"repository_path,omitempty"`
}

type YumRepositoryPublicRepositoryParameters struct {

	// A common public repository base for Yum.
	// Possible values are: CENTOS, CENTOS_DEBUG, CENTOS_VAULT, CENTOS_STREAM, ROCKY, EPEL.
	// +kubebuilder:validation:Optional
	RepositoryBase *string `json:"repositoryBase" tf:"repository_base,omitempty"`

	// Specific repository from the base, e.g. "centos/8-stream/BaseOS/x86_64/os"
	// +kubebuilder:validation:Optional
	RepositoryPath *string `json:"repositoryPath" tf:"repository_path,omitempty"`
}

// RegistryRepositorySpec defines the desired state of RegistryRepository
type RegistryRepositorySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RegistryRepositoryParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RegistryRepositoryInitParameters `json:"initProvider,omitempty"`
}

// RegistryRepositoryStatus defines the observed state of RegistryRepository.
type RegistryRepositoryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RegistryRepositoryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// RegistryRepository is the Schema for the RegistryRepositorys API. A repository for storing artifacts
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type RegistryRepository struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.format) || (has(self.initProvider) && has(self.initProvider.format))",message="spec.forProvider.format is a required parameter"
	Spec   RegistryRepositorySpec   `json:"spec"`
	Status RegistryRepositoryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RegistryRepositoryList contains a list of RegistryRepositorys
type RegistryRepositoryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RegistryRepository `json:"items"`
}

// Repository type metadata.
var (
	RegistryRepository_Kind             = "RegistryRepository"
	RegistryRepository_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RegistryRepository_Kind}.String()
	RegistryRepository_KindAPIVersion   = RegistryRepository_Kind + "." + CRDGroupVersion.String()
	RegistryRepository_GroupVersionKind = CRDGroupVersion.WithKind(RegistryRepository_Kind)
)

func init() {
	SchemeBuilder.Register(&RegistryRepository{}, &RegistryRepositoryList{})
}
