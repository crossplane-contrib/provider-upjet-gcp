// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfigInitParameters struct {
}

type ConfigObservation struct {

	// The device configuration data.
	BinaryData *string `json:"binaryData,omitempty" tf:"binary_data,omitempty"`

	// (Output)
	// The time at which this configuration version was updated in Cloud IoT Core.
	CloudUpdateTime *string `json:"cloudUpdateTime,omitempty" tf:"cloud_update_time,omitempty"`

	// (Output)
	// The time at which Cloud IoT Core received the acknowledgment from the device,
	// indicating that the device has received this configuration version.
	DeviceAckTime *string `json:"deviceAckTime,omitempty" tf:"device_ack_time,omitempty"`

	// (Output)
	// The version of this update.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type ConfigParameters struct {
}

type CredentialsInitParameters struct {

	// The time at which this credential becomes invalid.
	ExpirationTime *string `json:"expirationTime,omitempty" tf:"expiration_time,omitempty"`

	// A public key used to verify the signature of JSON Web Tokens (JWTs).
	// Structure is documented below.
	PublicKey []PublicKeyInitParameters `json:"publicKey,omitempty" tf:"public_key,omitempty"`
}

type CredentialsObservation struct {

	// The time at which this credential becomes invalid.
	ExpirationTime *string `json:"expirationTime,omitempty" tf:"expiration_time,omitempty"`

	// A public key used to verify the signature of JSON Web Tokens (JWTs).
	// Structure is documented below.
	PublicKey []PublicKeyObservation `json:"publicKey,omitempty" tf:"public_key,omitempty"`
}

type CredentialsParameters struct {

	// The time at which this credential becomes invalid.
	// +kubebuilder:validation:Optional
	ExpirationTime *string `json:"expirationTime,omitempty" tf:"expiration_time,omitempty"`

	// A public key used to verify the signature of JSON Web Tokens (JWTs).
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	PublicKey []PublicKeyParameters `json:"publicKey" tf:"public_key,omitempty"`
}

type DeviceInitParameters struct {

	// If a device is blocked, connections or requests from this device will fail.
	Blocked *bool `json:"blocked,omitempty" tf:"blocked,omitempty"`

	// The credentials used to authenticate this device.
	// Structure is documented below.
	Credentials []CredentialsInitParameters `json:"credentials,omitempty" tf:"credentials,omitempty"`

	// Gateway-related configuration and state.
	// Structure is documented below.
	GatewayConfig []GatewayConfigInitParameters `json:"gatewayConfig,omitempty" tf:"gateway_config,omitempty"`

	// The logging verbosity for device activity.
	// Possible values are: NONE, ERROR, INFO, DEBUG.
	LogLevel *string `json:"logLevel,omitempty" tf:"log_level,omitempty"`

	// The metadata key-value pairs assigned to the device.
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`
}

type DeviceObservation struct {

	// If a device is blocked, connections or requests from this device will fail.
	Blocked *bool `json:"blocked,omitempty" tf:"blocked,omitempty"`

	// The most recent device configuration, which is eventually sent from Cloud IoT Core to the device.
	// Structure is documented below.
	Config []ConfigObservation `json:"config,omitempty" tf:"config,omitempty"`

	// The credentials used to authenticate this device.
	// Structure is documented below.
	Credentials []CredentialsObservation `json:"credentials,omitempty" tf:"credentials,omitempty"`

	// Gateway-related configuration and state.
	// Structure is documented below.
	GatewayConfig []GatewayConfigObservation `json:"gatewayConfig,omitempty" tf:"gateway_config,omitempty"`

	// an identifier for the resource with format {{registry}}/devices/{{name}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The last time a cloud-to-device config version acknowledgment was received from the device.
	LastConfigAckTime *string `json:"lastConfigAckTime,omitempty" tf:"last_config_ack_time,omitempty"`

	// The last time a cloud-to-device config version was sent to the device.
	LastConfigSendTime *string `json:"lastConfigSendTime,omitempty" tf:"last_config_send_time,omitempty"`

	// The error message of the most recent error, such as a failure to publish to Cloud Pub/Sub.
	// Structure is documented below.
	LastErrorStatus []LastErrorStatusObservation `json:"lastErrorStatus,omitempty" tf:"last_error_status,omitempty"`

	// The time the most recent error occurred, such as a failure to publish to Cloud Pub/Sub.
	LastErrorTime *string `json:"lastErrorTime,omitempty" tf:"last_error_time,omitempty"`

	// The last time a telemetry event was received.
	LastEventTime *string `json:"lastEventTime,omitempty" tf:"last_event_time,omitempty"`

	// The last time an MQTT PINGREQ was received.
	LastHeartbeatTime *string `json:"lastHeartbeatTime,omitempty" tf:"last_heartbeat_time,omitempty"`

	// The last time a state event was received.
	LastStateTime *string `json:"lastStateTime,omitempty" tf:"last_state_time,omitempty"`

	// The logging verbosity for device activity.
	// Possible values are: NONE, ERROR, INFO, DEBUG.
	LogLevel *string `json:"logLevel,omitempty" tf:"log_level,omitempty"`

	// The metadata key-value pairs assigned to the device.
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// A server-defined unique numeric ID for the device.
	// This is a more compact way to identify devices, and it is globally unique.
	NumID *string `json:"numId,omitempty" tf:"num_id,omitempty"`

	// The name of the device registry where this device should be created.
	Registry *string `json:"registry,omitempty" tf:"registry,omitempty"`

	// The state most recently received from the device.
	// Structure is documented below.
	State []StateObservation `json:"state,omitempty" tf:"state,omitempty"`
}

type DeviceParameters struct {

	// If a device is blocked, connections or requests from this device will fail.
	// +kubebuilder:validation:Optional
	Blocked *bool `json:"blocked,omitempty" tf:"blocked,omitempty"`

	// The credentials used to authenticate this device.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Credentials []CredentialsParameters `json:"credentials,omitempty" tf:"credentials,omitempty"`

	// Gateway-related configuration and state.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	GatewayConfig []GatewayConfigParameters `json:"gatewayConfig,omitempty" tf:"gateway_config,omitempty"`

	// The logging verbosity for device activity.
	// Possible values are: NONE, ERROR, INFO, DEBUG.
	// +kubebuilder:validation:Optional
	LogLevel *string `json:"logLevel,omitempty" tf:"log_level,omitempty"`

	// The metadata key-value pairs assigned to the device.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// The name of the device registry where this device should be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/cloudiot/v1beta1.Registry
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	Registry *string `json:"registry,omitempty" tf:"registry,omitempty"`

	// Reference to a Registry in cloudiot to populate registry.
	// +kubebuilder:validation:Optional
	RegistryRef *v1.Reference `json:"registryRef,omitempty" tf:"-"`

	// Selector for a Registry in cloudiot to populate registry.
	// +kubebuilder:validation:Optional
	RegistrySelector *v1.Selector `json:"registrySelector,omitempty" tf:"-"`
}

type GatewayConfigInitParameters struct {

	// Indicates whether the device is a gateway.
	// Possible values are: ASSOCIATION_ONLY, DEVICE_AUTH_TOKEN_ONLY, ASSOCIATION_AND_DEVICE_AUTH_TOKEN.
	GatewayAuthMethod *string `json:"gatewayAuthMethod,omitempty" tf:"gateway_auth_method,omitempty"`

	// Indicates whether the device is a gateway.
	// Default value is NON_GATEWAY.
	// Possible values are: GATEWAY, NON_GATEWAY.
	GatewayType *string `json:"gatewayType,omitempty" tf:"gateway_type,omitempty"`
}

type GatewayConfigObservation struct {

	// Indicates whether the device is a gateway.
	// Possible values are: ASSOCIATION_ONLY, DEVICE_AUTH_TOKEN_ONLY, ASSOCIATION_AND_DEVICE_AUTH_TOKEN.
	GatewayAuthMethod *string `json:"gatewayAuthMethod,omitempty" tf:"gateway_auth_method,omitempty"`

	// Indicates whether the device is a gateway.
	// Default value is NON_GATEWAY.
	// Possible values are: GATEWAY, NON_GATEWAY.
	GatewayType *string `json:"gatewayType,omitempty" tf:"gateway_type,omitempty"`

	// (Output)
	// The ID of the gateway the device accessed most recently.
	LastAccessedGatewayID *string `json:"lastAccessedGatewayId,omitempty" tf:"last_accessed_gateway_id,omitempty"`

	// (Output)
	// The most recent time at which the device accessed the gateway specified in last_accessed_gateway.
	LastAccessedGatewayTime *string `json:"lastAccessedGatewayTime,omitempty" tf:"last_accessed_gateway_time,omitempty"`
}

type GatewayConfigParameters struct {

	// Indicates whether the device is a gateway.
	// Possible values are: ASSOCIATION_ONLY, DEVICE_AUTH_TOKEN_ONLY, ASSOCIATION_AND_DEVICE_AUTH_TOKEN.
	// +kubebuilder:validation:Optional
	GatewayAuthMethod *string `json:"gatewayAuthMethod,omitempty" tf:"gateway_auth_method,omitempty"`

	// Indicates whether the device is a gateway.
	// Default value is NON_GATEWAY.
	// Possible values are: GATEWAY, NON_GATEWAY.
	// +kubebuilder:validation:Optional
	GatewayType *string `json:"gatewayType,omitempty" tf:"gateway_type,omitempty"`
}

type LastErrorStatusInitParameters struct {
}

type LastErrorStatusObservation struct {

	// A list of messages that carry the error details.
	Details []string `json:"details,omitempty" tf:"details,omitempty"`

	// A developer-facing error message, which should be in English.
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// The status code, which should be an enum value of google.rpc.Code.
	Number *float64 `json:"number,omitempty" tf:"number,omitempty"`
}

type LastErrorStatusParameters struct {
}

type PublicKeyInitParameters struct {

	// The format of the key.
	// Possible values are: RSA_PEM, RSA_X509_PEM, ES256_PEM, ES256_X509_PEM.
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// The key data.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`
}

type PublicKeyObservation struct {

	// The format of the key.
	// Possible values are: RSA_PEM, RSA_X509_PEM, ES256_PEM, ES256_X509_PEM.
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// The key data.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`
}

type PublicKeyParameters struct {

	// The format of the key.
	// Possible values are: RSA_PEM, RSA_X509_PEM, ES256_PEM, ES256_X509_PEM.
	// +kubebuilder:validation:Optional
	Format *string `json:"format" tf:"format,omitempty"`

	// The key data.
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`
}

type StateInitParameters struct {
}

type StateObservation struct {

	// The device state data.
	BinaryData *string `json:"binaryData,omitempty" tf:"binary_data,omitempty"`

	// The time at which this state version was updated in Cloud IoT Core.
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type StateParameters struct {
}

// DeviceSpec defines the desired state of Device
type DeviceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DeviceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DeviceInitParameters `json:"initProvider,omitempty"`
}

// DeviceStatus defines the observed state of Device.
type DeviceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DeviceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Device is the Schema for the Devices API. A Google Cloud IoT Core device.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type Device struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DeviceSpec   `json:"spec"`
	Status            DeviceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DeviceList contains a list of Devices
type DeviceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Device `json:"items"`
}

// Repository type metadata.
var (
	Device_Kind             = "Device"
	Device_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Device_Kind}.String()
	Device_KindAPIVersion   = Device_Kind + "." + CRDGroupVersion.String()
	Device_GroupVersionKind = CRDGroupVersion.WithKind(Device_Kind)
)

func init() {
	SchemeBuilder.Register(&Device{}, &DeviceList{})
}
