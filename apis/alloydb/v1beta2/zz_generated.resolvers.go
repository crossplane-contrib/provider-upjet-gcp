// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta2

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	ptr "k8s.io/utils/ptr"
	client "sigs.k8s.io/controller-runtime/pkg/client"

	// ResolveReferences of this Backup.
	apisresolver "github.com/upbound/provider-gcp/internal/apis"
)

func (mg *Backup) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("alloydb.gcp.upbound.io", "v1beta2", "Cluster", "ClusterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.ClusterName, ""),
			Extract:      resource.ExtractParamPath("name", true),
			Reference:    mg.Spec.ForProvider.ClusterNameRef,
			Selector:     mg.Spec.ForProvider.ClusterNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ClusterName")
	}
	mg.Spec.ForProvider.ClusterName = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ClusterNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("alloydb.gcp.upbound.io", "v1beta2", "Cluster", "ClusterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.ClusterName, ""),
			Extract:      resource.ExtractParamPath("name", true),
			Reference:    mg.Spec.InitProvider.ClusterNameRef,
			Selector:     mg.Spec.InitProvider.ClusterNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ClusterName")
	}
	mg.Spec.InitProvider.ClusterName = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.ClusterNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Cluster.
func (mg *Cluster) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.Network, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.NetworkRef,
			Selector:     mg.Spec.ForProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Network")
	}
	mg.Spec.ForProvider.Network = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.NetworkConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.ForProvider.NetworkConfig.Network, ""),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.NetworkConfig.NetworkRef,
				Selector:     mg.Spec.ForProvider.NetworkConfig.NetworkSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.NetworkConfig.Network")
		}
		mg.Spec.ForProvider.NetworkConfig.Network = ptr.To(rsp.ResolvedValue)
		mg.Spec.ForProvider.NetworkConfig.NetworkRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.RestoreBackupSource != nil {
		{
			m, l, err = apisresolver.GetManagedResource("alloydb.gcp.upbound.io", "v1beta2", "Backup", "BackupList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.ForProvider.RestoreBackupSource.BackupName, ""),
				Extract:      resource.ExtractParamPath("name", true),
				Reference:    mg.Spec.ForProvider.RestoreBackupSource.BackupNameRef,
				Selector:     mg.Spec.ForProvider.RestoreBackupSource.BackupNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.RestoreBackupSource.BackupName")
		}
		mg.Spec.ForProvider.RestoreBackupSource.BackupName = ptr.To(rsp.ResolvedValue)
		mg.Spec.ForProvider.RestoreBackupSource.BackupNameRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.RestoreContinuousBackupSource != nil {
		{
			m, l, err = apisresolver.GetManagedResource("alloydb.gcp.upbound.io", "v1beta2", "Cluster", "ClusterList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.ForProvider.RestoreContinuousBackupSource.Cluster, ""),
				Extract:      resource.ExtractParamPath("name", true),
				Reference:    mg.Spec.ForProvider.RestoreContinuousBackupSource.ClusterRef,
				Selector:     mg.Spec.ForProvider.RestoreContinuousBackupSource.ClusterSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.RestoreContinuousBackupSource.Cluster")
		}
		mg.Spec.ForProvider.RestoreContinuousBackupSource.Cluster = ptr.To(rsp.ResolvedValue)
		mg.Spec.ForProvider.RestoreContinuousBackupSource.ClusterRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.SecondaryConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("alloydb.gcp.upbound.io", "v1beta2", "Cluster", "ClusterList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.ForProvider.SecondaryConfig.PrimaryClusterName, ""),
				Extract:      resource.ExtractParamPath("name", true),
				Reference:    mg.Spec.ForProvider.SecondaryConfig.PrimaryClusterNameRef,
				Selector:     mg.Spec.ForProvider.SecondaryConfig.PrimaryClusterNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.SecondaryConfig.PrimaryClusterName")
		}
		mg.Spec.ForProvider.SecondaryConfig.PrimaryClusterName = ptr.To(rsp.ResolvedValue)
		mg.Spec.ForProvider.SecondaryConfig.PrimaryClusterNameRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.Network, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.NetworkRef,
			Selector:     mg.Spec.InitProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Network")
	}
	mg.Spec.InitProvider.Network = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.NetworkRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.NetworkConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.InitProvider.NetworkConfig.Network, ""),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.NetworkConfig.NetworkRef,
				Selector:     mg.Spec.InitProvider.NetworkConfig.NetworkSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.NetworkConfig.Network")
		}
		mg.Spec.InitProvider.NetworkConfig.Network = ptr.To(rsp.ResolvedValue)
		mg.Spec.InitProvider.NetworkConfig.NetworkRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.RestoreBackupSource != nil {
		{
			m, l, err = apisresolver.GetManagedResource("alloydb.gcp.upbound.io", "v1beta2", "Backup", "BackupList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.InitProvider.RestoreBackupSource.BackupName, ""),
				Extract:      resource.ExtractParamPath("name", true),
				Reference:    mg.Spec.InitProvider.RestoreBackupSource.BackupNameRef,
				Selector:     mg.Spec.InitProvider.RestoreBackupSource.BackupNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.RestoreBackupSource.BackupName")
		}
		mg.Spec.InitProvider.RestoreBackupSource.BackupName = ptr.To(rsp.ResolvedValue)
		mg.Spec.InitProvider.RestoreBackupSource.BackupNameRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.RestoreContinuousBackupSource != nil {
		{
			m, l, err = apisresolver.GetManagedResource("alloydb.gcp.upbound.io", "v1beta2", "Cluster", "ClusterList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.InitProvider.RestoreContinuousBackupSource.Cluster, ""),
				Extract:      resource.ExtractParamPath("name", true),
				Reference:    mg.Spec.InitProvider.RestoreContinuousBackupSource.ClusterRef,
				Selector:     mg.Spec.InitProvider.RestoreContinuousBackupSource.ClusterSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.RestoreContinuousBackupSource.Cluster")
		}
		mg.Spec.InitProvider.RestoreContinuousBackupSource.Cluster = ptr.To(rsp.ResolvedValue)
		mg.Spec.InitProvider.RestoreContinuousBackupSource.ClusterRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.SecondaryConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("alloydb.gcp.upbound.io", "v1beta2", "Cluster", "ClusterList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: ptr.Deref(mg.Spec.InitProvider.SecondaryConfig.PrimaryClusterName, ""),
				Extract:      resource.ExtractParamPath("name", true),
				Reference:    mg.Spec.InitProvider.SecondaryConfig.PrimaryClusterNameRef,
				Selector:     mg.Spec.InitProvider.SecondaryConfig.PrimaryClusterNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.SecondaryConfig.PrimaryClusterName")
		}
		mg.Spec.InitProvider.SecondaryConfig.PrimaryClusterName = ptr.To(rsp.ResolvedValue)
		mg.Spec.InitProvider.SecondaryConfig.PrimaryClusterNameRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this Instance.
func (mg *Instance) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("alloydb.gcp.upbound.io", "v1beta2", "Cluster", "ClusterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.Cluster, ""),
			Extract:      resource.ExtractParamPath("name", true),
			Reference:    mg.Spec.ForProvider.ClusterRef,
			Selector:     mg.Spec.ForProvider.ClusterSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Cluster")
	}
	mg.Spec.ForProvider.Cluster = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.ClusterRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("alloydb.gcp.upbound.io", "v1beta2", "Cluster", "ClusterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.InstanceType, ""),
			Extract:      resource.ExtractParamPath("cluster_type", false),
			Reference:    mg.Spec.ForProvider.InstanceTypeRef,
			Selector:     mg.Spec.ForProvider.InstanceTypeSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.InstanceType")
	}
	mg.Spec.ForProvider.InstanceType = ptr.To(rsp.ResolvedValue)
	mg.Spec.ForProvider.InstanceTypeRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("alloydb.gcp.upbound.io", "v1beta2", "Cluster", "ClusterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.InstanceType, ""),
			Extract:      resource.ExtractParamPath("cluster_type", false),
			Reference:    mg.Spec.InitProvider.InstanceTypeRef,
			Selector:     mg.Spec.InitProvider.InstanceTypeSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.InstanceType")
	}
	mg.Spec.InitProvider.InstanceType = ptr.To(rsp.ResolvedValue)
	mg.Spec.InitProvider.InstanceTypeRef = rsp.ResolvedReference

	return nil
}
