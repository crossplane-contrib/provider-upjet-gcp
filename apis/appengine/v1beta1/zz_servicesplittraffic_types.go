// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServiceSplitTrafficInitParameters struct {

	// If set to true traffic will be migrated to this version.
	MigrateTraffic *bool `json:"migrateTraffic,omitempty" tf:"migrate_traffic,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Mapping that defines fractional HTTP traffic diversion to different versions within the service.
	// Structure is documented below.
	Split *SplitInitParameters `json:"split,omitempty" tf:"split,omitempty"`
}

type ServiceSplitTrafficObservation struct {

	// an identifier for the resource with format apps/{{project}}/services/{{service}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// If set to true traffic will be migrated to this version.
	MigrateTraffic *bool `json:"migrateTraffic,omitempty" tf:"migrate_traffic,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Mapping that defines fractional HTTP traffic diversion to different versions within the service.
	// Structure is documented below.
	Split *SplitObservation `json:"split,omitempty" tf:"split,omitempty"`
}

type ServiceSplitTrafficParameters struct {

	// If set to true traffic will be migrated to this version.
	// +kubebuilder:validation:Optional
	MigrateTraffic *bool `json:"migrateTraffic,omitempty" tf:"migrate_traffic,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Mapping that defines fractional HTTP traffic diversion to different versions within the service.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Split *SplitParameters `json:"split,omitempty" tf:"split,omitempty"`
}

type SplitInitParameters struct {

	// Mapping from version IDs within the service to fractional (0.000, 1] allocations of traffic for that version. Each version can be specified only once, but some versions in the service may not have any traffic allocation. Services that have traffic allocated cannot be deleted until either the service is deleted or their traffic allocation is removed. Allocations must sum to 1. Up to two decimal place precision is supported for IP-based splits and up to three decimal places is supported for cookie-based splits.
	// +mapType=granular
	Allocations map[string]*string `json:"allocations,omitempty" tf:"allocations,omitempty"`

	// Mechanism used to determine which version a request is sent to. The traffic selection algorithm will be stable for either type until allocations are changed.
	// Possible values are: UNSPECIFIED, COOKIE, IP, RANDOM.
	ShardBy *string `json:"shardBy,omitempty" tf:"shard_by,omitempty"`
}

type SplitObservation struct {

	// Mapping from version IDs within the service to fractional (0.000, 1] allocations of traffic for that version. Each version can be specified only once, but some versions in the service may not have any traffic allocation. Services that have traffic allocated cannot be deleted until either the service is deleted or their traffic allocation is removed. Allocations must sum to 1. Up to two decimal place precision is supported for IP-based splits and up to three decimal places is supported for cookie-based splits.
	// +mapType=granular
	Allocations map[string]*string `json:"allocations,omitempty" tf:"allocations,omitempty"`

	// Mechanism used to determine which version a request is sent to. The traffic selection algorithm will be stable for either type until allocations are changed.
	// Possible values are: UNSPECIFIED, COOKIE, IP, RANDOM.
	ShardBy *string `json:"shardBy,omitempty" tf:"shard_by,omitempty"`
}

type SplitParameters struct {

	// Mapping from version IDs within the service to fractional (0.000, 1] allocations of traffic for that version. Each version can be specified only once, but some versions in the service may not have any traffic allocation. Services that have traffic allocated cannot be deleted until either the service is deleted or their traffic allocation is removed. Allocations must sum to 1. Up to two decimal place precision is supported for IP-based splits and up to three decimal places is supported for cookie-based splits.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Allocations map[string]*string `json:"allocations" tf:"allocations,omitempty"`

	// Mechanism used to determine which version a request is sent to. The traffic selection algorithm will be stable for either type until allocations are changed.
	// Possible values are: UNSPECIFIED, COOKIE, IP, RANDOM.
	// +kubebuilder:validation:Optional
	ShardBy *string `json:"shardBy,omitempty" tf:"shard_by,omitempty"`
}

// ServiceSplitTrafficSpec defines the desired state of ServiceSplitTraffic
type ServiceSplitTrafficSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceSplitTrafficParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ServiceSplitTrafficInitParameters `json:"initProvider,omitempty"`
}

// ServiceSplitTrafficStatus defines the observed state of ServiceSplitTraffic.
type ServiceSplitTrafficStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceSplitTrafficObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ServiceSplitTraffic is the Schema for the ServiceSplitTraffics API. Traffic routing configuration for versions within a single service.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type ServiceSplitTraffic struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.split) || (has(self.initProvider) && has(self.initProvider.split))",message="spec.forProvider.split is a required parameter"
	Spec   ServiceSplitTrafficSpec   `json:"spec"`
	Status ServiceSplitTrafficStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceSplitTrafficList contains a list of ServiceSplitTraffics
type ServiceSplitTrafficList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceSplitTraffic `json:"items"`
}

// Repository type metadata.
var (
	ServiceSplitTraffic_Kind             = "ServiceSplitTraffic"
	ServiceSplitTraffic_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceSplitTraffic_Kind}.String()
	ServiceSplitTraffic_KindAPIVersion   = ServiceSplitTraffic_Kind + "." + CRDGroupVersion.String()
	ServiceSplitTraffic_GroupVersionKind = CRDGroupVersion.WithKind(ServiceSplitTraffic_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceSplitTraffic{}, &ServiceSplitTrafficList{})
}
