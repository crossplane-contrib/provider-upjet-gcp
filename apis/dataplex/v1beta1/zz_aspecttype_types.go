// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AspectTypeInitParameters struct {

	// Description of the AspectType.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// User friendly display name.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// User-defined labels for the AspectType.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// MetadataTemplate of the Aspect.
	MetadataTemplate *string `json:"metadataTemplate,omitempty" tf:"metadata_template,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/cloudplatform/v1beta1.Project
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Reference to a Project in cloudplatform to populate project.
	// +kubebuilder:validation:Optional
	ProjectRef *v1.Reference `json:"projectRef,omitempty" tf:"-"`

	// Selector for a Project in cloudplatform to populate project.
	// +kubebuilder:validation:Optional
	ProjectSelector *v1.Selector `json:"projectSelector,omitempty" tf:"-"`
}

type AspectTypeObservation struct {

	// The time when the AspectType was created.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Description of the AspectType.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// User friendly display name.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// for all of the labels present on the resource.
	// +mapType=granular
	EffectiveLabels map[string]*string `json:"effectiveLabels,omitempty" tf:"effective_labels,omitempty"`

	// an identifier for the resource with format projects/{{project}}/locations/{{location}}/aspectTypes/{{aspect_type_id}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// User-defined labels for the AspectType.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The location where aspect type will be created in.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// MetadataTemplate of the Aspect.
	MetadataTemplate *string `json:"metadataTemplate,omitempty" tf:"metadata_template,omitempty"`

	// The relative resource name of the AspectType, of the form: projects/{project_number}/locations/{location_id}/aspectTypes/{aspect_type_id}
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	// +mapType=granular
	TerraformLabels map[string]*string `json:"terraformLabels,omitempty" tf:"terraform_labels,omitempty"`

	// Denotes the transfer status of the Aspect Type. It is unspecified
	// for Aspect Type created from Dataplex API.
	TransferStatus *string `json:"transferStatus,omitempty" tf:"transfer_status,omitempty"`

	// System generated globally unique ID for the AspectType. This ID will be different if the AspectType is deleted and re-created with the same name.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`

	// The time when the AspectType was last updated.
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type AspectTypeParameters struct {

	// Description of the AspectType.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// User friendly display name.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// User-defined labels for the AspectType.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The location where aspect type will be created in.
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// MetadataTemplate of the Aspect.
	// +kubebuilder:validation:Optional
	MetadataTemplate *string `json:"metadataTemplate,omitempty" tf:"metadata_template,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/cloudplatform/v1beta1.Project
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Reference to a Project in cloudplatform to populate project.
	// +kubebuilder:validation:Optional
	ProjectRef *v1.Reference `json:"projectRef,omitempty" tf:"-"`

	// Selector for a Project in cloudplatform to populate project.
	// +kubebuilder:validation:Optional
	ProjectSelector *v1.Selector `json:"projectSelector,omitempty" tf:"-"`
}

// AspectTypeSpec defines the desired state of AspectType
type AspectTypeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AspectTypeParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AspectTypeInitParameters `json:"initProvider,omitempty"`
}

// AspectTypeStatus defines the observed state of AspectType.
type AspectTypeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AspectTypeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AspectType is the Schema for the AspectTypes API. An Aspect Type is a template for creating Aspects.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type AspectType struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AspectTypeSpec   `json:"spec"`
	Status            AspectTypeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AspectTypeList contains a list of AspectTypes
type AspectTypeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AspectType `json:"items"`
}

// Repository type metadata.
var (
	AspectType_Kind             = "AspectType"
	AspectType_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AspectType_Kind}.String()
	AspectType_KindAPIVersion   = AspectType_Kind + "." + CRDGroupVersion.String()
	AspectType_GroupVersionKind = CRDGroupVersion.WithKind(AspectType_Kind)
)

func init() {
	SchemeBuilder.Register(&AspectType{}, &AspectTypeList{})
}
