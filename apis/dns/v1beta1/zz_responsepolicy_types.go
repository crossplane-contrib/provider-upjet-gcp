// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ResponsePolicyGkeClustersInitParameters struct {

	// The resource name of the cluster to bind this ManagedZone to.
	// This should be specified in the format like
	// projects/*/locations/*/clusters/*
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/container/v1beta2.Cluster
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	GkeClusterName *string `json:"gkeClusterName,omitempty" tf:"gke_cluster_name,omitempty"`

	// Reference to a Cluster in container to populate gkeClusterName.
	// +kubebuilder:validation:Optional
	GkeClusterNameRef *v1.Reference `json:"gkeClusterNameRef,omitempty" tf:"-"`

	// Selector for a Cluster in container to populate gkeClusterName.
	// +kubebuilder:validation:Optional
	GkeClusterNameSelector *v1.Selector `json:"gkeClusterNameSelector,omitempty" tf:"-"`
}

type ResponsePolicyGkeClustersObservation struct {

	// The resource name of the cluster to bind this ManagedZone to.
	// This should be specified in the format like
	// projects/*/locations/*/clusters/*
	GkeClusterName *string `json:"gkeClusterName,omitempty" tf:"gke_cluster_name,omitempty"`
}

type ResponsePolicyGkeClustersParameters struct {

	// The resource name of the cluster to bind this ManagedZone to.
	// This should be specified in the format like
	// projects/*/locations/*/clusters/*
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/container/v1beta2.Cluster
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	GkeClusterName *string `json:"gkeClusterName,omitempty" tf:"gke_cluster_name,omitempty"`

	// Reference to a Cluster in container to populate gkeClusterName.
	// +kubebuilder:validation:Optional
	GkeClusterNameRef *v1.Reference `json:"gkeClusterNameRef,omitempty" tf:"-"`

	// Selector for a Cluster in container to populate gkeClusterName.
	// +kubebuilder:validation:Optional
	GkeClusterNameSelector *v1.Selector `json:"gkeClusterNameSelector,omitempty" tf:"-"`
}

type ResponsePolicyInitParameters struct {

	// The description of the response policy, such as My new response policy.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The list of Google Kubernetes Engine clusters that can see this zone.
	// Structure is documented below.
	GkeClusters []ResponsePolicyGkeClustersInitParameters `json:"gkeClusters,omitempty" tf:"gke_clusters,omitempty"`

	// The list of network names specifying networks to which this policy is applied.
	// Structure is documented below.
	Networks []ResponsePolicyNetworksInitParameters `json:"networks,omitempty" tf:"networks,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`
}

type ResponsePolicyNetworksInitParameters struct {

	// The fully qualified URL of the VPC network to bind to.
	// This should be formatted like
	// https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.Network
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	NetworkURL *string `json:"networkUrl,omitempty" tf:"network_url,omitempty"`

	// Reference to a Network in compute to populate networkUrl.
	// +kubebuilder:validation:Optional
	NetworkURLRef *v1.Reference `json:"networkUrlRef,omitempty" tf:"-"`

	// Selector for a Network in compute to populate networkUrl.
	// +kubebuilder:validation:Optional
	NetworkURLSelector *v1.Selector `json:"networkUrlSelector,omitempty" tf:"-"`
}

type ResponsePolicyNetworksObservation struct {

	// The fully qualified URL of the VPC network to bind to.
	// This should be formatted like
	// https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
	NetworkURL *string `json:"networkUrl,omitempty" tf:"network_url,omitempty"`
}

type ResponsePolicyNetworksParameters struct {

	// The fully qualified URL of the VPC network to bind to.
	// This should be formatted like
	// https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.Network
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	NetworkURL *string `json:"networkUrl,omitempty" tf:"network_url,omitempty"`

	// Reference to a Network in compute to populate networkUrl.
	// +kubebuilder:validation:Optional
	NetworkURLRef *v1.Reference `json:"networkUrlRef,omitempty" tf:"-"`

	// Selector for a Network in compute to populate networkUrl.
	// +kubebuilder:validation:Optional
	NetworkURLSelector *v1.Selector `json:"networkUrlSelector,omitempty" tf:"-"`
}

type ResponsePolicyObservation struct {

	// The description of the response policy, such as My new response policy.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The list of Google Kubernetes Engine clusters that can see this zone.
	// Structure is documented below.
	GkeClusters []ResponsePolicyGkeClustersObservation `json:"gkeClusters,omitempty" tf:"gke_clusters,omitempty"`

	// an identifier for the resource with format projects/{{project}}/responsePolicies/{{response_policy_name}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The list of network names specifying networks to which this policy is applied.
	// Structure is documented below.
	Networks []ResponsePolicyNetworksObservation `json:"networks,omitempty" tf:"networks,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`
}

type ResponsePolicyParameters struct {

	// The description of the response policy, such as My new response policy.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The list of Google Kubernetes Engine clusters that can see this zone.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	GkeClusters []ResponsePolicyGkeClustersParameters `json:"gkeClusters,omitempty" tf:"gke_clusters,omitempty"`

	// The list of network names specifying networks to which this policy is applied.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Networks []ResponsePolicyNetworksParameters `json:"networks,omitempty" tf:"networks,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`
}

// ResponsePolicySpec defines the desired state of ResponsePolicy
type ResponsePolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ResponsePolicyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ResponsePolicyInitParameters `json:"initProvider,omitempty"`
}

// ResponsePolicyStatus defines the observed state of ResponsePolicy.
type ResponsePolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ResponsePolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ResponsePolicy is the Schema for the ResponsePolicys API. A Response Policy is a collection of selectors that apply to queries made against one or more Virtual Private Cloud networks.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type ResponsePolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ResponsePolicySpec   `json:"spec"`
	Status            ResponsePolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ResponsePolicyList contains a list of ResponsePolicys
type ResponsePolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ResponsePolicy `json:"items"`
}

// Repository type metadata.
var (
	ResponsePolicy_Kind             = "ResponsePolicy"
	ResponsePolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ResponsePolicy_Kind}.String()
	ResponsePolicy_KindAPIVersion   = ResponsePolicy_Kind + "." + CRDGroupVersion.String()
	ResponsePolicy_GroupVersionKind = CRDGroupVersion.WithKind(ResponsePolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&ResponsePolicy{}, &ResponsePolicyList{})
}
