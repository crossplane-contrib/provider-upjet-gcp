// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LocalDataInitParameters struct {

	// All resource record sets for this selector, one per resource record type. The name must match the dns_name.
	// Structure is documented below.
	LocalDatas []LocalDatasInitParameters `json:"localDatas,omitempty" tf:"local_datas,omitempty"`
}

type LocalDataObservation struct {

	// All resource record sets for this selector, one per resource record type. The name must match the dns_name.
	// Structure is documented below.
	LocalDatas []LocalDatasObservation `json:"localDatas,omitempty" tf:"local_datas,omitempty"`
}

type LocalDataParameters struct {

	// All resource record sets for this selector, one per resource record type. The name must match the dns_name.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	LocalDatas []LocalDatasParameters `json:"localDatas" tf:"local_datas,omitempty"`
}

type LocalDatasInitParameters struct {

	// For example, www.example.com.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// As defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1)
	Rrdatas []*string `json:"rrdatas,omitempty" tf:"rrdatas,omitempty"`

	// Number of seconds that this ResourceRecordSet can be cached by
	// resolvers.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// One of valid DNS resource types.
	// Possible values are: A, AAAA, CAA, CNAME, DNSKEY, DS, HTTPS, IPSECVPNKEY, MX, NAPTR, NS, PTR, SOA, SPF, SRV, SSHFP, SVCB, TLSA, TXT.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type LocalDatasObservation struct {

	// For example, www.example.com.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// As defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1)
	Rrdatas []*string `json:"rrdatas,omitempty" tf:"rrdatas,omitempty"`

	// Number of seconds that this ResourceRecordSet can be cached by
	// resolvers.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// One of valid DNS resource types.
	// Possible values are: A, AAAA, CAA, CNAME, DNSKEY, DS, HTTPS, IPSECVPNKEY, MX, NAPTR, NS, PTR, SOA, SPF, SRV, SSHFP, SVCB, TLSA, TXT.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type LocalDatasParameters struct {

	// For example, www.example.com.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// As defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1)
	// +kubebuilder:validation:Optional
	Rrdatas []*string `json:"rrdatas,omitempty" tf:"rrdatas,omitempty"`

	// Number of seconds that this ResourceRecordSet can be cached by
	// resolvers.
	// +kubebuilder:validation:Optional
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// One of valid DNS resource types.
	// Possible values are: A, AAAA, CAA, CNAME, DNSKEY, DS, HTTPS, IPSECVPNKEY, MX, NAPTR, NS, PTR, SOA, SPF, SRV, SSHFP, SVCB, TLSA, TXT.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type ResponsePolicyRuleInitParameters struct {

	// The DNS name (wildcard or exact) to apply this rule to. Must be unique within the Response Policy Rule.
	DNSName *string `json:"dnsName,omitempty" tf:"dns_name,omitempty"`

	// Answer this query directly with DNS data. These ResourceRecordSets override any other DNS behavior for the matched name;
	// in particular they override private zones, the public internet, and GCP internal DNS. No SOA nor NS types are allowed.
	// Structure is documented below.
	LocalData *LocalDataInitParameters `json:"localData,omitempty" tf:"local_data,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`
}

type ResponsePolicyRuleObservation struct {

	// The DNS name (wildcard or exact) to apply this rule to. Must be unique within the Response Policy Rule.
	DNSName *string `json:"dnsName,omitempty" tf:"dns_name,omitempty"`

	// an identifier for the resource with format projects/{{project}}/responsePolicies/{{response_policy}}/rules/{{rule_name}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Answer this query directly with DNS data. These ResourceRecordSets override any other DNS behavior for the matched name;
	// in particular they override private zones, the public internet, and GCP internal DNS. No SOA nor NS types are allowed.
	// Structure is documented below.
	LocalData *LocalDataObservation `json:"localData,omitempty" tf:"local_data,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Identifies the response policy addressed by this request.
	ResponsePolicy *string `json:"responsePolicy,omitempty" tf:"response_policy,omitempty"`
}

type ResponsePolicyRuleParameters struct {

	// The DNS name (wildcard or exact) to apply this rule to. Must be unique within the Response Policy Rule.
	// +kubebuilder:validation:Optional
	DNSName *string `json:"dnsName,omitempty" tf:"dns_name,omitempty"`

	// Answer this query directly with DNS data. These ResourceRecordSets override any other DNS behavior for the matched name;
	// in particular they override private zones, the public internet, and GCP internal DNS. No SOA nor NS types are allowed.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	LocalData *LocalDataParameters `json:"localData,omitempty" tf:"local_data,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Identifies the response policy addressed by this request.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/dns/v1beta1.ResponsePolicy
	// +kubebuilder:validation:Optional
	ResponsePolicy *string `json:"responsePolicy,omitempty" tf:"response_policy,omitempty"`

	// Reference to a ResponsePolicy in dns to populate responsePolicy.
	// +kubebuilder:validation:Optional
	ResponsePolicyRef *v1.Reference `json:"responsePolicyRef,omitempty" tf:"-"`

	// Selector for a ResponsePolicy in dns to populate responsePolicy.
	// +kubebuilder:validation:Optional
	ResponsePolicySelector *v1.Selector `json:"responsePolicySelector,omitempty" tf:"-"`
}

// ResponsePolicyRuleSpec defines the desired state of ResponsePolicyRule
type ResponsePolicyRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ResponsePolicyRuleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ResponsePolicyRuleInitParameters `json:"initProvider,omitempty"`
}

// ResponsePolicyRuleStatus defines the observed state of ResponsePolicyRule.
type ResponsePolicyRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ResponsePolicyRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ResponsePolicyRule is the Schema for the ResponsePolicyRules API. A Response Policy Rule is a selector that applies its behavior to queries that match the selector.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type ResponsePolicyRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.dnsName) || (has(self.initProvider) && has(self.initProvider.dnsName))",message="spec.forProvider.dnsName is a required parameter"
	Spec   ResponsePolicyRuleSpec   `json:"spec"`
	Status ResponsePolicyRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ResponsePolicyRuleList contains a list of ResponsePolicyRules
type ResponsePolicyRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ResponsePolicyRule `json:"items"`
}

// Repository type metadata.
var (
	ResponsePolicyRule_Kind             = "ResponsePolicyRule"
	ResponsePolicyRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ResponsePolicyRule_Kind}.String()
	ResponsePolicyRule_KindAPIVersion   = ResponsePolicyRule_Kind + "." + CRDGroupVersion.String()
	ResponsePolicyRule_GroupVersionKind = CRDGroupVersion.WithKind(ResponsePolicyRule_Kind)
)

func init() {
	SchemeBuilder.Register(&ResponsePolicyRule{}, &ResponsePolicyRuleList{})
}
