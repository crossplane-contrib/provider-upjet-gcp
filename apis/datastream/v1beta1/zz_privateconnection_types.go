// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ErrorInitParameters struct {
}

type ErrorObservation struct {

	// A list of messages that carry the error details.
	// +mapType=granular
	Details map[string]*string `json:"details,omitempty" tf:"details,omitempty"`

	// A message containing more information about the error that occurred.
	Message *string `json:"message,omitempty" tf:"message,omitempty"`
}

type ErrorParameters struct {
}

type PrivateConnectionInitParameters struct {

	// Display name.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Labels.
	// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field effective_labels for all of the labels present on the resource.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The VPC Peering configuration is used to create VPC peering
	// between Datastream and the consumer's VPC.
	// Structure is documented below.
	VPCPeeringConfig []VPCPeeringConfigInitParameters `json:"vpcPeeringConfig,omitempty" tf:"vpc_peering_config,omitempty"`
}

type PrivateConnectionObservation struct {

	// Display name.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +mapType=granular
	EffectiveLabels map[string]*string `json:"effectiveLabels,omitempty" tf:"effective_labels,omitempty"`

	// The PrivateConnection error in case of failure.
	// Structure is documented below.
	Error []ErrorObservation `json:"error,omitempty" tf:"error,omitempty"`

	// an identifier for the resource with format projects/{{project}}/locations/{{location}}/privateConnections/{{private_connection_id}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Labels.
	// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field effective_labels for all of the labels present on the resource.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The name of the location this private connection is located in.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// The resource's name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// State of the PrivateConnection.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	// +mapType=granular
	TerraformLabels map[string]*string `json:"terraformLabels,omitempty" tf:"terraform_labels,omitempty"`

	// The VPC Peering configuration is used to create VPC peering
	// between Datastream and the consumer's VPC.
	// Structure is documented below.
	VPCPeeringConfig []VPCPeeringConfigObservation `json:"vpcPeeringConfig,omitempty" tf:"vpc_peering_config,omitempty"`
}

type PrivateConnectionParameters struct {

	// Display name.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Labels.
	// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field effective_labels for all of the labels present on the resource.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The name of the location this private connection is located in.
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The VPC Peering configuration is used to create VPC peering
	// between Datastream and the consumer's VPC.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	VPCPeeringConfig []VPCPeeringConfigParameters `json:"vpcPeeringConfig,omitempty" tf:"vpc_peering_config,omitempty"`
}

type VPCPeeringConfigInitParameters struct {

	// A free subnet for peering. (CIDR of /29)
	Subnet *string `json:"subnet,omitempty" tf:"subnet,omitempty"`

	// Fully qualified name of the VPC that Datastream will peer to.
	// Format: projects/{project}/global/{networks}/{name}
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.Network
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	VPC *string `json:"vpc,omitempty" tf:"vpc,omitempty"`

	// Reference to a Network in compute to populate vpc.
	// +kubebuilder:validation:Optional
	VPCRef *v1.Reference `json:"vpcRef,omitempty" tf:"-"`

	// Selector for a Network in compute to populate vpc.
	// +kubebuilder:validation:Optional
	VPCSelector *v1.Selector `json:"vpcSelector,omitempty" tf:"-"`
}

type VPCPeeringConfigObservation struct {

	// A free subnet for peering. (CIDR of /29)
	Subnet *string `json:"subnet,omitempty" tf:"subnet,omitempty"`

	// Fully qualified name of the VPC that Datastream will peer to.
	// Format: projects/{project}/global/{networks}/{name}
	VPC *string `json:"vpc,omitempty" tf:"vpc,omitempty"`
}

type VPCPeeringConfigParameters struct {

	// A free subnet for peering. (CIDR of /29)
	// +kubebuilder:validation:Optional
	Subnet *string `json:"subnet" tf:"subnet,omitempty"`

	// Fully qualified name of the VPC that Datastream will peer to.
	// Format: projects/{project}/global/{networks}/{name}
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.Network
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	VPC *string `json:"vpc,omitempty" tf:"vpc,omitempty"`

	// Reference to a Network in compute to populate vpc.
	// +kubebuilder:validation:Optional
	VPCRef *v1.Reference `json:"vpcRef,omitempty" tf:"-"`

	// Selector for a Network in compute to populate vpc.
	// +kubebuilder:validation:Optional
	VPCSelector *v1.Selector `json:"vpcSelector,omitempty" tf:"-"`
}

// PrivateConnectionSpec defines the desired state of PrivateConnection
type PrivateConnectionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PrivateConnectionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PrivateConnectionInitParameters `json:"initProvider,omitempty"`
}

// PrivateConnectionStatus defines the observed state of PrivateConnection.
type PrivateConnectionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PrivateConnectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// PrivateConnection is the Schema for the PrivateConnections API. The PrivateConnection resource is used to establish private connectivity between Datastream and a customer's network.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type PrivateConnection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.displayName) || (has(self.initProvider) && has(self.initProvider.displayName))",message="spec.forProvider.displayName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.vpcPeeringConfig) || (has(self.initProvider) && has(self.initProvider.vpcPeeringConfig))",message="spec.forProvider.vpcPeeringConfig is a required parameter"
	Spec   PrivateConnectionSpec   `json:"spec"`
	Status PrivateConnectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PrivateConnectionList contains a list of PrivateConnections
type PrivateConnectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PrivateConnection `json:"items"`
}

// Repository type metadata.
var (
	PrivateConnection_Kind             = "PrivateConnection"
	PrivateConnection_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PrivateConnection_Kind}.String()
	PrivateConnection_KindAPIVersion   = PrivateConnection_Kind + "." + CRDGroupVersion.String()
	PrivateConnection_GroupVersionKind = CRDGroupVersion.WithKind(PrivateConnection_Kind)
)

func init() {
	SchemeBuilder.Register(&PrivateConnection{}, &PrivateConnectionList{})
}
