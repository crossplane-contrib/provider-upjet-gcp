// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AbortInitParameters struct {

	// The HTTP status code used to abort the request. The value must be between 200
	// and 599 inclusive.
	HTTPStatus *float64 `json:"httpStatus,omitempty" tf:"http_status,omitempty"`

	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	Percentage *float64 `json:"percentage,omitempty" tf:"percentage,omitempty"`
}

type AbortObservation struct {

	// The HTTP status code used to abort the request. The value must be between 200
	// and 599 inclusive.
	HTTPStatus *float64 `json:"httpStatus,omitempty" tf:"http_status,omitempty"`

	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	Percentage *float64 `json:"percentage,omitempty" tf:"percentage,omitempty"`
}

type AbortParameters struct {

	// The HTTP status code used to abort the request. The value must be between 200
	// and 599 inclusive.
	// +kubebuilder:validation:Optional
	HTTPStatus *float64 `json:"httpStatus,omitempty" tf:"http_status,omitempty"`

	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	// +kubebuilder:validation:Optional
	Percentage *float64 `json:"percentage,omitempty" tf:"percentage,omitempty"`
}

type CorsPolicyInitParameters struct {

	// In response to a preflight request, setting this to true indicates that the
	// actual request can include user credentials. This translates to the Access-
	// Control-Allow-Credentials header. Defaults to false.
	AllowCredentials *bool `json:"allowCredentials,omitempty" tf:"allow_credentials,omitempty"`

	// Specifies the content for the Access-Control-Allow-Headers header.
	AllowHeaders []*string `json:"allowHeaders,omitempty" tf:"allow_headers,omitempty"`

	// Specifies the content for the Access-Control-Allow-Methods header.
	AllowMethods []*string `json:"allowMethods,omitempty" tf:"allow_methods,omitempty"`

	// Specifies the regular expression patterns that match allowed origins. For
	// regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
	// An origin is allowed if it matches either allow_origins or allow_origin_regex.
	AllowOriginRegexes []*string `json:"allowOriginRegexes,omitempty" tf:"allow_origin_regexes,omitempty"`

	// Specifies the list of origins that will be allowed to do CORS requests. An
	// origin is allowed if it matches either allow_origins or allow_origin_regex.
	AllowOrigins []*string `json:"allowOrigins,omitempty" tf:"allow_origins,omitempty"`

	// If true, specifies the CORS policy is disabled.
	// which indicates that the CORS policy is in effect. Defaults to false.
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// Specifies the content for the Access-Control-Expose-Headers header.
	ExposeHeaders []*string `json:"exposeHeaders,omitempty" tf:"expose_headers,omitempty"`

	// Specifies how long the results of a preflight request can be cached. This
	// translates to the content for the Access-Control-Max-Age header.
	MaxAge *float64 `json:"maxAge,omitempty" tf:"max_age,omitempty"`
}

type CorsPolicyObservation struct {

	// In response to a preflight request, setting this to true indicates that the
	// actual request can include user credentials. This translates to the Access-
	// Control-Allow-Credentials header. Defaults to false.
	AllowCredentials *bool `json:"allowCredentials,omitempty" tf:"allow_credentials,omitempty"`

	// Specifies the content for the Access-Control-Allow-Headers header.
	AllowHeaders []*string `json:"allowHeaders,omitempty" tf:"allow_headers,omitempty"`

	// Specifies the content for the Access-Control-Allow-Methods header.
	AllowMethods []*string `json:"allowMethods,omitempty" tf:"allow_methods,omitempty"`

	// Specifies the regular expression patterns that match allowed origins. For
	// regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
	// An origin is allowed if it matches either allow_origins or allow_origin_regex.
	AllowOriginRegexes []*string `json:"allowOriginRegexes,omitempty" tf:"allow_origin_regexes,omitempty"`

	// Specifies the list of origins that will be allowed to do CORS requests. An
	// origin is allowed if it matches either allow_origins or allow_origin_regex.
	AllowOrigins []*string `json:"allowOrigins,omitempty" tf:"allow_origins,omitempty"`

	// If true, specifies the CORS policy is disabled.
	// which indicates that the CORS policy is in effect. Defaults to false.
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// Specifies the content for the Access-Control-Expose-Headers header.
	ExposeHeaders []*string `json:"exposeHeaders,omitempty" tf:"expose_headers,omitempty"`

	// Specifies how long the results of a preflight request can be cached. This
	// translates to the content for the Access-Control-Max-Age header.
	MaxAge *float64 `json:"maxAge,omitempty" tf:"max_age,omitempty"`
}

type CorsPolicyParameters struct {

	// In response to a preflight request, setting this to true indicates that the
	// actual request can include user credentials. This translates to the Access-
	// Control-Allow-Credentials header. Defaults to false.
	// +kubebuilder:validation:Optional
	AllowCredentials *bool `json:"allowCredentials,omitempty" tf:"allow_credentials,omitempty"`

	// Specifies the content for the Access-Control-Allow-Headers header.
	// +kubebuilder:validation:Optional
	AllowHeaders []*string `json:"allowHeaders,omitempty" tf:"allow_headers,omitempty"`

	// Specifies the content for the Access-Control-Allow-Methods header.
	// +kubebuilder:validation:Optional
	AllowMethods []*string `json:"allowMethods,omitempty" tf:"allow_methods,omitempty"`

	// Specifies the regular expression patterns that match allowed origins. For
	// regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
	// An origin is allowed if it matches either allow_origins or allow_origin_regex.
	// +kubebuilder:validation:Optional
	AllowOriginRegexes []*string `json:"allowOriginRegexes,omitempty" tf:"allow_origin_regexes,omitempty"`

	// Specifies the list of origins that will be allowed to do CORS requests. An
	// origin is allowed if it matches either allow_origins or allow_origin_regex.
	// +kubebuilder:validation:Optional
	AllowOrigins []*string `json:"allowOrigins,omitempty" tf:"allow_origins,omitempty"`

	// If true, specifies the CORS policy is disabled.
	// which indicates that the CORS policy is in effect. Defaults to false.
	// +kubebuilder:validation:Optional
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// Specifies the content for the Access-Control-Expose-Headers header.
	// +kubebuilder:validation:Optional
	ExposeHeaders []*string `json:"exposeHeaders,omitempty" tf:"expose_headers,omitempty"`

	// Specifies how long the results of a preflight request can be cached. This
	// translates to the content for the Access-Control-Max-Age header.
	// +kubebuilder:validation:Optional
	MaxAge *float64 `json:"maxAge,omitempty" tf:"max_age,omitempty"`
}

type DefaultRouteActionInitParameters struct {

	// The specification for allowing client side cross-origin requests. Please see
	// W3C Recommendation for Cross Origin Resource Sharing
	// Structure is documented below.
	CorsPolicy []CorsPolicyInitParameters `json:"corsPolicy,omitempty" tf:"cors_policy,omitempty"`

	// The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure.
	// As part of fault injection, when clients send requests to a backend service, delays can be introduced by a load balancer on a percentage of requests before sending those requests to the backend service.
	// Similarly requests from clients can be aborted by the load balancer for a percentage of requests.
	// timeout and retryPolicy is ignored by clients that are configured with a faultInjectionPolicy if: 1. The traffic is generated by fault injection AND 2. The fault injection is not a delay fault injection.
	// Fault injection is not supported with the global external HTTP(S) load balancer (classic). To see which load balancers support fault injection, see Load balancing: Routing and traffic management features.
	// Structure is documented below.
	FaultInjectionPolicy []FaultInjectionPolicyInitParameters `json:"faultInjectionPolicy,omitempty" tf:"fault_injection_policy,omitempty"`

	// Specifies the policy on how requests intended for the route's backends are shadowed to a separate mirrored backend service.
	// The load balancer does not wait for responses from the shadow service. Before sending traffic to the shadow service, the host / authority header is suffixed with -shadow.
	// Not supported when the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true.
	// Structure is documented below.
	RequestMirrorPolicy []RequestMirrorPolicyInitParameters `json:"requestMirrorPolicy,omitempty" tf:"request_mirror_policy,omitempty"`

	// Specifies the retry policy associated with this route.
	// Structure is documented below.
	RetryPolicy []RetryPolicyInitParameters `json:"retryPolicy,omitempty" tf:"retry_policy,omitempty"`

	// Specifies the timeout for the selected route. Timeout is computed from the time the request has been fully processed (known as end-of-stream) up until the response has been processed. Timeout includes all retries.
	// If not specified, this field uses the largest timeout among all backend services associated with the route.
	// Not supported when the URL map is bound to a target gRPC proxy that has validateForProxyless field set to true.
	// Structure is documented below.
	Timeout []TimeoutInitParameters `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// The spec to modify the URL of the request, before forwarding the request to the matched service.
	// urlRewrite is the only action supported in UrlMaps for external HTTP(S) load balancers.
	// Not supported when the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true.
	// Structure is documented below.
	URLRewrite []URLRewriteInitParameters `json:"urlRewrite,omitempty" tf:"url_rewrite,omitempty"`

	// A list of weighted backend services to send traffic to when a route match occurs. The weights determine the fraction of traffic that flows to their corresponding backend service. If all traffic needs to go to a single backend service, there must be one weightedBackendService with weight set to a non-zero number.
	// After a backend service is identified and before forwarding the request to the backend service, advanced routing actions such as URL rewrites and header transformations are applied depending on additional settings specified in this HttpRouteAction.
	// Structure is documented below.
	WeightedBackendServices []WeightedBackendServicesInitParameters `json:"weightedBackendServices,omitempty" tf:"weighted_backend_services,omitempty"`
}

type DefaultRouteActionObservation struct {

	// The specification for allowing client side cross-origin requests. Please see
	// W3C Recommendation for Cross Origin Resource Sharing
	// Structure is documented below.
	CorsPolicy []CorsPolicyObservation `json:"corsPolicy,omitempty" tf:"cors_policy,omitempty"`

	// The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure.
	// As part of fault injection, when clients send requests to a backend service, delays can be introduced by a load balancer on a percentage of requests before sending those requests to the backend service.
	// Similarly requests from clients can be aborted by the load balancer for a percentage of requests.
	// timeout and retryPolicy is ignored by clients that are configured with a faultInjectionPolicy if: 1. The traffic is generated by fault injection AND 2. The fault injection is not a delay fault injection.
	// Fault injection is not supported with the global external HTTP(S) load balancer (classic). To see which load balancers support fault injection, see Load balancing: Routing and traffic management features.
	// Structure is documented below.
	FaultInjectionPolicy []FaultInjectionPolicyObservation `json:"faultInjectionPolicy,omitempty" tf:"fault_injection_policy,omitempty"`

	// Specifies the policy on how requests intended for the route's backends are shadowed to a separate mirrored backend service.
	// The load balancer does not wait for responses from the shadow service. Before sending traffic to the shadow service, the host / authority header is suffixed with -shadow.
	// Not supported when the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true.
	// Structure is documented below.
	RequestMirrorPolicy []RequestMirrorPolicyObservation `json:"requestMirrorPolicy,omitempty" tf:"request_mirror_policy,omitempty"`

	// Specifies the retry policy associated with this route.
	// Structure is documented below.
	RetryPolicy []RetryPolicyObservation `json:"retryPolicy,omitempty" tf:"retry_policy,omitempty"`

	// Specifies the timeout for the selected route. Timeout is computed from the time the request has been fully processed (known as end-of-stream) up until the response has been processed. Timeout includes all retries.
	// If not specified, this field uses the largest timeout among all backend services associated with the route.
	// Not supported when the URL map is bound to a target gRPC proxy that has validateForProxyless field set to true.
	// Structure is documented below.
	Timeout []TimeoutObservation `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// The spec to modify the URL of the request, before forwarding the request to the matched service.
	// urlRewrite is the only action supported in UrlMaps for external HTTP(S) load balancers.
	// Not supported when the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true.
	// Structure is documented below.
	URLRewrite []URLRewriteObservation `json:"urlRewrite,omitempty" tf:"url_rewrite,omitempty"`

	// A list of weighted backend services to send traffic to when a route match occurs. The weights determine the fraction of traffic that flows to their corresponding backend service. If all traffic needs to go to a single backend service, there must be one weightedBackendService with weight set to a non-zero number.
	// After a backend service is identified and before forwarding the request to the backend service, advanced routing actions such as URL rewrites and header transformations are applied depending on additional settings specified in this HttpRouteAction.
	// Structure is documented below.
	WeightedBackendServices []WeightedBackendServicesObservation `json:"weightedBackendServices,omitempty" tf:"weighted_backend_services,omitempty"`
}

type DefaultRouteActionParameters struct {

	// The specification for allowing client side cross-origin requests. Please see
	// W3C Recommendation for Cross Origin Resource Sharing
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	CorsPolicy []CorsPolicyParameters `json:"corsPolicy,omitempty" tf:"cors_policy,omitempty"`

	// The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure.
	// As part of fault injection, when clients send requests to a backend service, delays can be introduced by a load balancer on a percentage of requests before sending those requests to the backend service.
	// Similarly requests from clients can be aborted by the load balancer for a percentage of requests.
	// timeout and retryPolicy is ignored by clients that are configured with a faultInjectionPolicy if: 1. The traffic is generated by fault injection AND 2. The fault injection is not a delay fault injection.
	// Fault injection is not supported with the global external HTTP(S) load balancer (classic). To see which load balancers support fault injection, see Load balancing: Routing and traffic management features.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	FaultInjectionPolicy []FaultInjectionPolicyParameters `json:"faultInjectionPolicy,omitempty" tf:"fault_injection_policy,omitempty"`

	// Specifies the policy on how requests intended for the route's backends are shadowed to a separate mirrored backend service.
	// The load balancer does not wait for responses from the shadow service. Before sending traffic to the shadow service, the host / authority header is suffixed with -shadow.
	// Not supported when the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	RequestMirrorPolicy []RequestMirrorPolicyParameters `json:"requestMirrorPolicy,omitempty" tf:"request_mirror_policy,omitempty"`

	// Specifies the retry policy associated with this route.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	RetryPolicy []RetryPolicyParameters `json:"retryPolicy,omitempty" tf:"retry_policy,omitempty"`

	// Specifies the timeout for the selected route. Timeout is computed from the time the request has been fully processed (known as end-of-stream) up until the response has been processed. Timeout includes all retries.
	// If not specified, this field uses the largest timeout among all backend services associated with the route.
	// Not supported when the URL map is bound to a target gRPC proxy that has validateForProxyless field set to true.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Timeout []TimeoutParameters `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// The spec to modify the URL of the request, before forwarding the request to the matched service.
	// urlRewrite is the only action supported in UrlMaps for external HTTP(S) load balancers.
	// Not supported when the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	URLRewrite []URLRewriteParameters `json:"urlRewrite,omitempty" tf:"url_rewrite,omitempty"`

	// A list of weighted backend services to send traffic to when a route match occurs. The weights determine the fraction of traffic that flows to their corresponding backend service. If all traffic needs to go to a single backend service, there must be one weightedBackendService with weight set to a non-zero number.
	// After a backend service is identified and before forwarding the request to the backend service, advanced routing actions such as URL rewrites and header transformations are applied depending on additional settings specified in this HttpRouteAction.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	WeightedBackendServices []WeightedBackendServicesParameters `json:"weightedBackendServices,omitempty" tf:"weighted_backend_services,omitempty"`
}

type DefaultURLRedirectInitParameters struct {

	// If set to true, the URL scheme in the redirected request is set to https. If set to
	// false, the URL scheme of the redirected request will remain the same as that of the
	// request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this
	// true for TargetHttpsProxy is not permitted. The default is set to false.
	HTTPSRedirect *bool `json:"httpsRedirect,omitempty" tf:"https_redirect,omitempty"`

	// The host that will be used in the redirect response instead of the one that was
	// supplied in the request. The value must be between 1 and 255 characters.
	HostRedirect *string `json:"hostRedirect,omitempty" tf:"host_redirect,omitempty"`

	// The path that will be used in the redirect response instead of the one that was
	// supplied in the request. pathRedirect cannot be supplied together with
	// prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the
	// original request will be used for the redirect. The value must be between 1 and 1024
	// characters.
	PathRedirect *string `json:"pathRedirect,omitempty" tf:"path_redirect,omitempty"`

	// The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
	// retaining the remaining portion of the URL before redirecting the request.
	// prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or
	// neither. If neither is supplied, the path of the original request will be used for
	// the redirect. The value must be between 1 and 1024 characters.
	PrefixRedirect *string `json:"prefixRedirect,omitempty" tf:"prefix_redirect,omitempty"`

	// The HTTP Status code to use for this RedirectAction. Supported values are:
	RedirectResponseCode *string `json:"redirectResponseCode,omitempty" tf:"redirect_response_code,omitempty"`

	// If set to true, any accompanying query portion of the original URL is removed prior
	// to redirecting the request. If set to false, the query portion of the original URL is
	// retained.
	// This field is required to ensure an empty block is not set. The normal default value is false.
	StripQuery *bool `json:"stripQuery,omitempty" tf:"strip_query,omitempty"`
}

type DefaultURLRedirectObservation struct {

	// If set to true, the URL scheme in the redirected request is set to https. If set to
	// false, the URL scheme of the redirected request will remain the same as that of the
	// request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this
	// true for TargetHttpsProxy is not permitted. The default is set to false.
	HTTPSRedirect *bool `json:"httpsRedirect,omitempty" tf:"https_redirect,omitempty"`

	// The host that will be used in the redirect response instead of the one that was
	// supplied in the request. The value must be between 1 and 255 characters.
	HostRedirect *string `json:"hostRedirect,omitempty" tf:"host_redirect,omitempty"`

	// The path that will be used in the redirect response instead of the one that was
	// supplied in the request. pathRedirect cannot be supplied together with
	// prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the
	// original request will be used for the redirect. The value must be between 1 and 1024
	// characters.
	PathRedirect *string `json:"pathRedirect,omitempty" tf:"path_redirect,omitempty"`

	// The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
	// retaining the remaining portion of the URL before redirecting the request.
	// prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or
	// neither. If neither is supplied, the path of the original request will be used for
	// the redirect. The value must be between 1 and 1024 characters.
	PrefixRedirect *string `json:"prefixRedirect,omitempty" tf:"prefix_redirect,omitempty"`

	// The HTTP Status code to use for this RedirectAction. Supported values are:
	RedirectResponseCode *string `json:"redirectResponseCode,omitempty" tf:"redirect_response_code,omitempty"`

	// If set to true, any accompanying query portion of the original URL is removed prior
	// to redirecting the request. If set to false, the query portion of the original URL is
	// retained.
	// This field is required to ensure an empty block is not set. The normal default value is false.
	StripQuery *bool `json:"stripQuery,omitempty" tf:"strip_query,omitempty"`
}

type DefaultURLRedirectParameters struct {

	// If set to true, the URL scheme in the redirected request is set to https. If set to
	// false, the URL scheme of the redirected request will remain the same as that of the
	// request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this
	// true for TargetHttpsProxy is not permitted. The default is set to false.
	// +kubebuilder:validation:Optional
	HTTPSRedirect *bool `json:"httpsRedirect,omitempty" tf:"https_redirect,omitempty"`

	// The host that will be used in the redirect response instead of the one that was
	// supplied in the request. The value must be between 1 and 255 characters.
	// +kubebuilder:validation:Optional
	HostRedirect *string `json:"hostRedirect,omitempty" tf:"host_redirect,omitempty"`

	// The path that will be used in the redirect response instead of the one that was
	// supplied in the request. pathRedirect cannot be supplied together with
	// prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the
	// original request will be used for the redirect. The value must be between 1 and 1024
	// characters.
	// +kubebuilder:validation:Optional
	PathRedirect *string `json:"pathRedirect,omitempty" tf:"path_redirect,omitempty"`

	// The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
	// retaining the remaining portion of the URL before redirecting the request.
	// prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or
	// neither. If neither is supplied, the path of the original request will be used for
	// the redirect. The value must be between 1 and 1024 characters.
	// +kubebuilder:validation:Optional
	PrefixRedirect *string `json:"prefixRedirect,omitempty" tf:"prefix_redirect,omitempty"`

	// The HTTP Status code to use for this RedirectAction. Supported values are:
	// +kubebuilder:validation:Optional
	RedirectResponseCode *string `json:"redirectResponseCode,omitempty" tf:"redirect_response_code,omitempty"`

	// If set to true, any accompanying query portion of the original URL is removed prior
	// to redirecting the request. If set to false, the query portion of the original URL is
	// retained.
	// This field is required to ensure an empty block is not set. The normal default value is false.
	// +kubebuilder:validation:Optional
	StripQuery *bool `json:"stripQuery" tf:"strip_query,omitempty"`
}

type DelayFixedDelayInitParameters struct {

	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	Nanos *float64 `json:"nanos,omitempty" tf:"nanos,omitempty"`

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds *string `json:"seconds,omitempty" tf:"seconds,omitempty"`
}

type DelayFixedDelayObservation struct {

	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	Nanos *float64 `json:"nanos,omitempty" tf:"nanos,omitempty"`

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds *string `json:"seconds,omitempty" tf:"seconds,omitempty"`
}

type DelayFixedDelayParameters struct {

	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	// +kubebuilder:validation:Optional
	Nanos *float64 `json:"nanos,omitempty" tf:"nanos,omitempty"`

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	// +kubebuilder:validation:Optional
	Seconds *string `json:"seconds" tf:"seconds,omitempty"`
}

type DelayInitParameters struct {

	// Specifies the value of the fixed delay interval.
	// Structure is documented below.
	FixedDelay []FixedDelayInitParameters `json:"fixedDelay,omitempty" tf:"fixed_delay,omitempty"`

	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	Percentage *float64 `json:"percentage,omitempty" tf:"percentage,omitempty"`
}

type DelayObservation struct {

	// Specifies the value of the fixed delay interval.
	// Structure is documented below.
	FixedDelay []FixedDelayObservation `json:"fixedDelay,omitempty" tf:"fixed_delay,omitempty"`

	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	Percentage *float64 `json:"percentage,omitempty" tf:"percentage,omitempty"`
}

type DelayParameters struct {

	// Specifies the value of the fixed delay interval.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	FixedDelay []FixedDelayParameters `json:"fixedDelay,omitempty" tf:"fixed_delay,omitempty"`

	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	// +kubebuilder:validation:Optional
	Percentage *float64 `json:"percentage,omitempty" tf:"percentage,omitempty"`
}

type FaultInjectionPolicyAbortInitParameters struct {

	// The HTTP status code used to abort the request. The value must be between 200
	// and 599 inclusive.
	HTTPStatus *float64 `json:"httpStatus,omitempty" tf:"http_status,omitempty"`

	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	Percentage *float64 `json:"percentage,omitempty" tf:"percentage,omitempty"`
}

type FaultInjectionPolicyAbortObservation struct {

	// The HTTP status code used to abort the request. The value must be between 200
	// and 599 inclusive.
	HTTPStatus *float64 `json:"httpStatus,omitempty" tf:"http_status,omitempty"`

	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	Percentage *float64 `json:"percentage,omitempty" tf:"percentage,omitempty"`
}

type FaultInjectionPolicyAbortParameters struct {

	// The HTTP status code used to abort the request. The value must be between 200
	// and 599 inclusive.
	// +kubebuilder:validation:Optional
	HTTPStatus *float64 `json:"httpStatus" tf:"http_status,omitempty"`

	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	// +kubebuilder:validation:Optional
	Percentage *float64 `json:"percentage" tf:"percentage,omitempty"`
}

type FaultInjectionPolicyDelayFixedDelayInitParameters struct {

	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	Nanos *float64 `json:"nanos,omitempty" tf:"nanos,omitempty"`

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds *string `json:"seconds,omitempty" tf:"seconds,omitempty"`
}

type FaultInjectionPolicyDelayFixedDelayObservation struct {

	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	Nanos *float64 `json:"nanos,omitempty" tf:"nanos,omitempty"`

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds *string `json:"seconds,omitempty" tf:"seconds,omitempty"`
}

type FaultInjectionPolicyDelayFixedDelayParameters struct {

	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	// +kubebuilder:validation:Optional
	Nanos *float64 `json:"nanos,omitempty" tf:"nanos,omitempty"`

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	// +kubebuilder:validation:Optional
	Seconds *string `json:"seconds" tf:"seconds,omitempty"`
}

type FaultInjectionPolicyDelayInitParameters struct {

	// Specifies the value of the fixed delay interval.
	// Structure is documented below.
	FixedDelay []DelayFixedDelayInitParameters `json:"fixedDelay,omitempty" tf:"fixed_delay,omitempty"`

	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	Percentage *float64 `json:"percentage,omitempty" tf:"percentage,omitempty"`
}

type FaultInjectionPolicyDelayObservation struct {

	// Specifies the value of the fixed delay interval.
	// Structure is documented below.
	FixedDelay []DelayFixedDelayObservation `json:"fixedDelay,omitempty" tf:"fixed_delay,omitempty"`

	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	Percentage *float64 `json:"percentage,omitempty" tf:"percentage,omitempty"`
}

type FaultInjectionPolicyDelayParameters struct {

	// Specifies the value of the fixed delay interval.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	FixedDelay []DelayFixedDelayParameters `json:"fixedDelay" tf:"fixed_delay,omitempty"`

	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	// +kubebuilder:validation:Optional
	Percentage *float64 `json:"percentage" tf:"percentage,omitempty"`
}

type FaultInjectionPolicyInitParameters struct {

	// The specification for how client requests are aborted as part of fault
	// injection.
	// Structure is documented below.
	Abort []AbortInitParameters `json:"abort,omitempty" tf:"abort,omitempty"`

	// The specification for how client requests are delayed as part of fault
	// injection, before being sent to a backend service.
	// Structure is documented below.
	Delay []DelayInitParameters `json:"delay,omitempty" tf:"delay,omitempty"`
}

type FaultInjectionPolicyObservation struct {

	// The specification for how client requests are aborted as part of fault
	// injection.
	// Structure is documented below.
	Abort []AbortObservation `json:"abort,omitempty" tf:"abort,omitempty"`

	// The specification for how client requests are delayed as part of fault
	// injection, before being sent to a backend service.
	// Structure is documented below.
	Delay []DelayObservation `json:"delay,omitempty" tf:"delay,omitempty"`
}

type FaultInjectionPolicyParameters struct {

	// The specification for how client requests are aborted as part of fault
	// injection.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Abort []AbortParameters `json:"abort,omitempty" tf:"abort,omitempty"`

	// The specification for how client requests are delayed as part of fault
	// injection, before being sent to a backend service.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Delay []DelayParameters `json:"delay,omitempty" tf:"delay,omitempty"`
}

type FixedDelayInitParameters struct {

	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	Nanos *float64 `json:"nanos,omitempty" tf:"nanos,omitempty"`

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds *string `json:"seconds,omitempty" tf:"seconds,omitempty"`
}

type FixedDelayObservation struct {

	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	Nanos *float64 `json:"nanos,omitempty" tf:"nanos,omitempty"`

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds *string `json:"seconds,omitempty" tf:"seconds,omitempty"`
}

type FixedDelayParameters struct {

	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	// +kubebuilder:validation:Optional
	Nanos *float64 `json:"nanos,omitempty" tf:"nanos,omitempty"`

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	// +kubebuilder:validation:Optional
	Seconds *string `json:"seconds,omitempty" tf:"seconds,omitempty"`
}

type HeaderActionInitParameters struct {

	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.
	// Structure is documented below.
	RequestHeadersToAdd []RequestHeadersToAddInitParameters `json:"requestHeadersToAdd,omitempty" tf:"request_headers_to_add,omitempty"`

	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	RequestHeadersToRemove []*string `json:"requestHeadersToRemove,omitempty" tf:"request_headers_to_remove,omitempty"`

	// Headers to add the response prior to sending the response back to the client.
	// Structure is documented below.
	ResponseHeadersToAdd []ResponseHeadersToAddInitParameters `json:"responseHeadersToAdd,omitempty" tf:"response_headers_to_add,omitempty"`

	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	ResponseHeadersToRemove []*string `json:"responseHeadersToRemove,omitempty" tf:"response_headers_to_remove,omitempty"`
}

type HeaderActionObservation struct {

	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.
	// Structure is documented below.
	RequestHeadersToAdd []RequestHeadersToAddObservation `json:"requestHeadersToAdd,omitempty" tf:"request_headers_to_add,omitempty"`

	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	RequestHeadersToRemove []*string `json:"requestHeadersToRemove,omitempty" tf:"request_headers_to_remove,omitempty"`

	// Headers to add the response prior to sending the response back to the client.
	// Structure is documented below.
	ResponseHeadersToAdd []ResponseHeadersToAddObservation `json:"responseHeadersToAdd,omitempty" tf:"response_headers_to_add,omitempty"`

	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	ResponseHeadersToRemove []*string `json:"responseHeadersToRemove,omitempty" tf:"response_headers_to_remove,omitempty"`
}

type HeaderActionParameters struct {

	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	RequestHeadersToAdd []RequestHeadersToAddParameters `json:"requestHeadersToAdd,omitempty" tf:"request_headers_to_add,omitempty"`

	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	// +kubebuilder:validation:Optional
	RequestHeadersToRemove []*string `json:"requestHeadersToRemove,omitempty" tf:"request_headers_to_remove,omitempty"`

	// Headers to add the response prior to sending the response back to the client.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	ResponseHeadersToAdd []ResponseHeadersToAddParameters `json:"responseHeadersToAdd,omitempty" tf:"response_headers_to_add,omitempty"`

	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	// +kubebuilder:validation:Optional
	ResponseHeadersToRemove []*string `json:"responseHeadersToRemove,omitempty" tf:"response_headers_to_remove,omitempty"`
}

type HeaderActionRequestHeadersToAddInitParameters struct {

	// The name of the header.
	HeaderName *string `json:"headerName,omitempty" tf:"header_name,omitempty"`

	// The value of the header to add.
	HeaderValue *string `json:"headerValue,omitempty" tf:"header_value,omitempty"`

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace *bool `json:"replace,omitempty" tf:"replace,omitempty"`
}

type HeaderActionRequestHeadersToAddObservation struct {

	// The name of the header.
	HeaderName *string `json:"headerName,omitempty" tf:"header_name,omitempty"`

	// The value of the header to add.
	HeaderValue *string `json:"headerValue,omitempty" tf:"header_value,omitempty"`

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace *bool `json:"replace,omitempty" tf:"replace,omitempty"`
}

type HeaderActionRequestHeadersToAddParameters struct {

	// The name of the header.
	// +kubebuilder:validation:Optional
	HeaderName *string `json:"headerName" tf:"header_name,omitempty"`

	// The value of the header to add.
	// +kubebuilder:validation:Optional
	HeaderValue *string `json:"headerValue" tf:"header_value,omitempty"`

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	// +kubebuilder:validation:Optional
	Replace *bool `json:"replace" tf:"replace,omitempty"`
}

type HeaderActionResponseHeadersToAddInitParameters struct {

	// The name of the header.
	HeaderName *string `json:"headerName,omitempty" tf:"header_name,omitempty"`

	// The value of the header to add.
	HeaderValue *string `json:"headerValue,omitempty" tf:"header_value,omitempty"`

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace *bool `json:"replace,omitempty" tf:"replace,omitempty"`
}

type HeaderActionResponseHeadersToAddObservation struct {

	// The name of the header.
	HeaderName *string `json:"headerName,omitempty" tf:"header_name,omitempty"`

	// The value of the header to add.
	HeaderValue *string `json:"headerValue,omitempty" tf:"header_value,omitempty"`

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace *bool `json:"replace,omitempty" tf:"replace,omitempty"`
}

type HeaderActionResponseHeadersToAddParameters struct {

	// The name of the header.
	// +kubebuilder:validation:Optional
	HeaderName *string `json:"headerName" tf:"header_name,omitempty"`

	// The value of the header to add.
	// +kubebuilder:validation:Optional
	HeaderValue *string `json:"headerValue" tf:"header_value,omitempty"`

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	// +kubebuilder:validation:Optional
	Replace *bool `json:"replace" tf:"replace,omitempty"`
}

type HeaderMatchesInitParameters struct {

	// The queryParameterMatch matches if the value of the parameter exactly matches
	// the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch
	// must be set.
	ExactMatch *string `json:"exactMatch,omitempty" tf:"exact_match,omitempty"`

	// The name of the header.
	HeaderName *string `json:"headerName,omitempty" tf:"header_name,omitempty"`

	// If set to false, the headerMatch is considered a match if the match criteria
	// above are met. If set to true, the headerMatch is considered a match if the
	// match criteria above are NOT met. Defaults to false.
	InvertMatch *bool `json:"invertMatch,omitempty" tf:"invert_match,omitempty"`

	// For satisfying the matchRule condition, the request's path must begin with the
	// specified prefixMatch. prefixMatch must begin with a /. The value must be
	// between 1 and 1024 characters. Only one of prefixMatch, fullPathMatch or
	// regexMatch must be specified.
	PrefixMatch *string `json:"prefixMatch,omitempty" tf:"prefix_match,omitempty"`

	// Specifies that the queryParameterMatch matches if the request contains the query
	// parameter, irrespective of whether the parameter has a value or not. Only one of
	// presentMatch, exactMatch and regexMatch must be set.
	PresentMatch *bool `json:"presentMatch,omitempty" tf:"present_match,omitempty"`

	// The header value must be an integer and its value must be in the range specified
	// in rangeMatch. If the header does not contain an integer, number or is empty,
	// the match fails. For example for a range [-5, 0]
	RangeMatch []RangeMatchInitParameters `json:"rangeMatch,omitempty" tf:"range_match,omitempty"`

	// The queryParameterMatch matches if the value of the parameter matches the
	// regular expression specified by regexMatch. For the regular expression grammar,
	// please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
	// exactMatch and regexMatch must be set.
	RegexMatch *string `json:"regexMatch,omitempty" tf:"regex_match,omitempty"`

	// The value of the header must end with the contents of suffixMatch. Only one of
	// exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
	// must be set.
	SuffixMatch *string `json:"suffixMatch,omitempty" tf:"suffix_match,omitempty"`
}

type HeaderMatchesObservation struct {

	// The queryParameterMatch matches if the value of the parameter exactly matches
	// the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch
	// must be set.
	ExactMatch *string `json:"exactMatch,omitempty" tf:"exact_match,omitempty"`

	// The name of the header.
	HeaderName *string `json:"headerName,omitempty" tf:"header_name,omitempty"`

	// If set to false, the headerMatch is considered a match if the match criteria
	// above are met. If set to true, the headerMatch is considered a match if the
	// match criteria above are NOT met. Defaults to false.
	InvertMatch *bool `json:"invertMatch,omitempty" tf:"invert_match,omitempty"`

	// For satisfying the matchRule condition, the request's path must begin with the
	// specified prefixMatch. prefixMatch must begin with a /. The value must be
	// between 1 and 1024 characters. Only one of prefixMatch, fullPathMatch or
	// regexMatch must be specified.
	PrefixMatch *string `json:"prefixMatch,omitempty" tf:"prefix_match,omitempty"`

	// Specifies that the queryParameterMatch matches if the request contains the query
	// parameter, irrespective of whether the parameter has a value or not. Only one of
	// presentMatch, exactMatch and regexMatch must be set.
	PresentMatch *bool `json:"presentMatch,omitempty" tf:"present_match,omitempty"`

	// The header value must be an integer and its value must be in the range specified
	// in rangeMatch. If the header does not contain an integer, number or is empty,
	// the match fails. For example for a range [-5, 0]
	RangeMatch []RangeMatchObservation `json:"rangeMatch,omitempty" tf:"range_match,omitempty"`

	// The queryParameterMatch matches if the value of the parameter matches the
	// regular expression specified by regexMatch. For the regular expression grammar,
	// please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
	// exactMatch and regexMatch must be set.
	RegexMatch *string `json:"regexMatch,omitempty" tf:"regex_match,omitempty"`

	// The value of the header must end with the contents of suffixMatch. Only one of
	// exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
	// must be set.
	SuffixMatch *string `json:"suffixMatch,omitempty" tf:"suffix_match,omitempty"`
}

type HeaderMatchesParameters struct {

	// The queryParameterMatch matches if the value of the parameter exactly matches
	// the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch
	// must be set.
	// +kubebuilder:validation:Optional
	ExactMatch *string `json:"exactMatch,omitempty" tf:"exact_match,omitempty"`

	// The name of the header.
	// +kubebuilder:validation:Optional
	HeaderName *string `json:"headerName" tf:"header_name,omitempty"`

	// If set to false, the headerMatch is considered a match if the match criteria
	// above are met. If set to true, the headerMatch is considered a match if the
	// match criteria above are NOT met. Defaults to false.
	// +kubebuilder:validation:Optional
	InvertMatch *bool `json:"invertMatch,omitempty" tf:"invert_match,omitempty"`

	// For satisfying the matchRule condition, the request's path must begin with the
	// specified prefixMatch. prefixMatch must begin with a /. The value must be
	// between 1 and 1024 characters. Only one of prefixMatch, fullPathMatch or
	// regexMatch must be specified.
	// +kubebuilder:validation:Optional
	PrefixMatch *string `json:"prefixMatch,omitempty" tf:"prefix_match,omitempty"`

	// Specifies that the queryParameterMatch matches if the request contains the query
	// parameter, irrespective of whether the parameter has a value or not. Only one of
	// presentMatch, exactMatch and regexMatch must be set.
	// +kubebuilder:validation:Optional
	PresentMatch *bool `json:"presentMatch,omitempty" tf:"present_match,omitempty"`

	// The header value must be an integer and its value must be in the range specified
	// in rangeMatch. If the header does not contain an integer, number or is empty,
	// the match fails. For example for a range [-5, 0]
	// +kubebuilder:validation:Optional
	RangeMatch []RangeMatchParameters `json:"rangeMatch,omitempty" tf:"range_match,omitempty"`

	// The queryParameterMatch matches if the value of the parameter matches the
	// regular expression specified by regexMatch. For the regular expression grammar,
	// please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
	// exactMatch and regexMatch must be set.
	// +kubebuilder:validation:Optional
	RegexMatch *string `json:"regexMatch,omitempty" tf:"regex_match,omitempty"`

	// The value of the header must end with the contents of suffixMatch. Only one of
	// exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
	// must be set.
	// +kubebuilder:validation:Optional
	SuffixMatch *string `json:"suffixMatch,omitempty" tf:"suffix_match,omitempty"`
}

type HostRuleInitParameters struct {

	// An optional description of this HostRule. Provide this property
	// when you create the resource.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The list of host patterns to match. They must be valid
	// hostnames, except * will match any string of ([a-z0-9-.]*). In
	// that case, * must be the first character and must be followed in
	// the pattern by either - or ..
	// +listType=set
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// The name of the PathMatcher to use to match the path portion of
	// the URL if the hostRule matches the URL's host portion.
	PathMatcher *string `json:"pathMatcher,omitempty" tf:"path_matcher,omitempty"`
}

type HostRuleObservation struct {

	// An optional description of this HostRule. Provide this property
	// when you create the resource.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The list of host patterns to match. They must be valid
	// hostnames, except * will match any string of ([a-z0-9-.]*). In
	// that case, * must be the first character and must be followed in
	// the pattern by either - or ..
	// +listType=set
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// The name of the PathMatcher to use to match the path portion of
	// the URL if the hostRule matches the URL's host portion.
	PathMatcher *string `json:"pathMatcher,omitempty" tf:"path_matcher,omitempty"`
}

type HostRuleParameters struct {

	// An optional description of this HostRule. Provide this property
	// when you create the resource.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The list of host patterns to match. They must be valid
	// hostnames, except * will match any string of ([a-z0-9-.]*). In
	// that case, * must be the first character and must be followed in
	// the pattern by either - or ..
	// +kubebuilder:validation:Optional
	// +listType=set
	Hosts []*string `json:"hosts" tf:"hosts,omitempty"`

	// The name of the PathMatcher to use to match the path portion of
	// the URL if the hostRule matches the URL's host portion.
	// +kubebuilder:validation:Optional
	PathMatcher *string `json:"pathMatcher" tf:"path_matcher,omitempty"`
}

type MatchRulesInitParameters struct {

	// For satisfying the matchRule condition, the path of the request must exactly
	// match the value specified in fullPathMatch after removing any query parameters
	// and anchor that may be part of the original URL. FullPathMatch must be between 1
	// and 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must
	// be specified.
	FullPathMatch *string `json:"fullPathMatch,omitempty" tf:"full_path_match,omitempty"`

	// Specifies a list of header match criteria, all of which must match corresponding
	// headers in the request.
	// Structure is documented below.
	HeaderMatches []HeaderMatchesInitParameters `json:"headerMatches,omitempty" tf:"header_matches,omitempty"`

	// Specifies that prefixMatch and fullPathMatch matches are case sensitive.
	// Defaults to false.
	IgnoreCase *bool `json:"ignoreCase,omitempty" tf:"ignore_case,omitempty"`

	// Opaque filter criteria used by Loadbalancer to restrict routing configuration to
	// a limited set xDS compliant clients. In their xDS requests to Loadbalancer, xDS
	// clients present node metadata. If a match takes place, the relevant routing
	// configuration is made available to those proxies. For each metadataFilter in
	// this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the
	// filterLabels must match the corresponding label provided in the metadata. If its
	// filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match
	// with corresponding labels in the provided metadata. metadataFilters specified
	// here can be overrides those specified in ForwardingRule that refers to this
	// UrlMap. metadataFilters only applies to Loadbalancers that have their
	// loadBalancingScheme set to INTERNAL_SELF_MANAGED.
	// Structure is documented below.
	MetadataFilters []MatchRulesMetadataFiltersInitParameters `json:"metadataFilters,omitempty" tf:"metadata_filters,omitempty"`

	// For satisfying the matchRule condition, the request's path must begin with the
	// specified prefixMatch. prefixMatch must begin with a /. The value must be
	// between 1 and 1024 characters. Only one of prefixMatch, fullPathMatch or
	// regexMatch must be specified.
	PrefixMatch *string `json:"prefixMatch,omitempty" tf:"prefix_match,omitempty"`

	// Specifies a list of query parameter match criteria, all of which must match
	// corresponding query parameters in the request.
	// Structure is documented below.
	QueryParameterMatches []QueryParameterMatchesInitParameters `json:"queryParameterMatches,omitempty" tf:"query_parameter_matches,omitempty"`

	// The queryParameterMatch matches if the value of the parameter matches the
	// regular expression specified by regexMatch. For the regular expression grammar,
	// please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
	// exactMatch and regexMatch must be set.
	RegexMatch *string `json:"regexMatch,omitempty" tf:"regex_match,omitempty"`
}

type MatchRulesMetadataFiltersInitParameters struct {

	// The list of label value pairs that must match labels in the provided metadata
	// based on filterMatchCriteria  This list must not be empty and can have at the
	// most 64 entries.
	// Structure is documented below.
	FilterLabels []MetadataFiltersFilterLabelsInitParameters `json:"filterLabels,omitempty" tf:"filter_labels,omitempty"`

	// Specifies how individual filterLabel matches within the list of filterLabels
	// contribute towards the overall metadataFilter match. Supported values are:
	FilterMatchCriteria *string `json:"filterMatchCriteria,omitempty" tf:"filter_match_criteria,omitempty"`
}

type MatchRulesMetadataFiltersObservation struct {

	// The list of label value pairs that must match labels in the provided metadata
	// based on filterMatchCriteria  This list must not be empty and can have at the
	// most 64 entries.
	// Structure is documented below.
	FilterLabels []MetadataFiltersFilterLabelsObservation `json:"filterLabels,omitempty" tf:"filter_labels,omitempty"`

	// Specifies how individual filterLabel matches within the list of filterLabels
	// contribute towards the overall metadataFilter match. Supported values are:
	FilterMatchCriteria *string `json:"filterMatchCriteria,omitempty" tf:"filter_match_criteria,omitempty"`
}

type MatchRulesMetadataFiltersParameters struct {

	// The list of label value pairs that must match labels in the provided metadata
	// based on filterMatchCriteria  This list must not be empty and can have at the
	// most 64 entries.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	FilterLabels []MetadataFiltersFilterLabelsParameters `json:"filterLabels" tf:"filter_labels,omitempty"`

	// Specifies how individual filterLabel matches within the list of filterLabels
	// contribute towards the overall metadataFilter match. Supported values are:
	// +kubebuilder:validation:Optional
	FilterMatchCriteria *string `json:"filterMatchCriteria" tf:"filter_match_criteria,omitempty"`
}

type MatchRulesObservation struct {

	// For satisfying the matchRule condition, the path of the request must exactly
	// match the value specified in fullPathMatch after removing any query parameters
	// and anchor that may be part of the original URL. FullPathMatch must be between 1
	// and 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must
	// be specified.
	FullPathMatch *string `json:"fullPathMatch,omitempty" tf:"full_path_match,omitempty"`

	// Specifies a list of header match criteria, all of which must match corresponding
	// headers in the request.
	// Structure is documented below.
	HeaderMatches []HeaderMatchesObservation `json:"headerMatches,omitempty" tf:"header_matches,omitempty"`

	// Specifies that prefixMatch and fullPathMatch matches are case sensitive.
	// Defaults to false.
	IgnoreCase *bool `json:"ignoreCase,omitempty" tf:"ignore_case,omitempty"`

	// Opaque filter criteria used by Loadbalancer to restrict routing configuration to
	// a limited set xDS compliant clients. In their xDS requests to Loadbalancer, xDS
	// clients present node metadata. If a match takes place, the relevant routing
	// configuration is made available to those proxies. For each metadataFilter in
	// this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the
	// filterLabels must match the corresponding label provided in the metadata. If its
	// filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match
	// with corresponding labels in the provided metadata. metadataFilters specified
	// here can be overrides those specified in ForwardingRule that refers to this
	// UrlMap. metadataFilters only applies to Loadbalancers that have their
	// loadBalancingScheme set to INTERNAL_SELF_MANAGED.
	// Structure is documented below.
	MetadataFilters []MatchRulesMetadataFiltersObservation `json:"metadataFilters,omitempty" tf:"metadata_filters,omitempty"`

	// For satisfying the matchRule condition, the request's path must begin with the
	// specified prefixMatch. prefixMatch must begin with a /. The value must be
	// between 1 and 1024 characters. Only one of prefixMatch, fullPathMatch or
	// regexMatch must be specified.
	PrefixMatch *string `json:"prefixMatch,omitempty" tf:"prefix_match,omitempty"`

	// Specifies a list of query parameter match criteria, all of which must match
	// corresponding query parameters in the request.
	// Structure is documented below.
	QueryParameterMatches []QueryParameterMatchesObservation `json:"queryParameterMatches,omitempty" tf:"query_parameter_matches,omitempty"`

	// The queryParameterMatch matches if the value of the parameter matches the
	// regular expression specified by regexMatch. For the regular expression grammar,
	// please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
	// exactMatch and regexMatch must be set.
	RegexMatch *string `json:"regexMatch,omitempty" tf:"regex_match,omitempty"`
}

type MatchRulesParameters struct {

	// For satisfying the matchRule condition, the path of the request must exactly
	// match the value specified in fullPathMatch after removing any query parameters
	// and anchor that may be part of the original URL. FullPathMatch must be between 1
	// and 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must
	// be specified.
	// +kubebuilder:validation:Optional
	FullPathMatch *string `json:"fullPathMatch,omitempty" tf:"full_path_match,omitempty"`

	// Specifies a list of header match criteria, all of which must match corresponding
	// headers in the request.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	HeaderMatches []HeaderMatchesParameters `json:"headerMatches,omitempty" tf:"header_matches,omitempty"`

	// Specifies that prefixMatch and fullPathMatch matches are case sensitive.
	// Defaults to false.
	// +kubebuilder:validation:Optional
	IgnoreCase *bool `json:"ignoreCase,omitempty" tf:"ignore_case,omitempty"`

	// Opaque filter criteria used by Loadbalancer to restrict routing configuration to
	// a limited set xDS compliant clients. In their xDS requests to Loadbalancer, xDS
	// clients present node metadata. If a match takes place, the relevant routing
	// configuration is made available to those proxies. For each metadataFilter in
	// this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the
	// filterLabels must match the corresponding label provided in the metadata. If its
	// filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match
	// with corresponding labels in the provided metadata. metadataFilters specified
	// here can be overrides those specified in ForwardingRule that refers to this
	// UrlMap. metadataFilters only applies to Loadbalancers that have their
	// loadBalancingScheme set to INTERNAL_SELF_MANAGED.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	MetadataFilters []MatchRulesMetadataFiltersParameters `json:"metadataFilters,omitempty" tf:"metadata_filters,omitempty"`

	// For satisfying the matchRule condition, the request's path must begin with the
	// specified prefixMatch. prefixMatch must begin with a /. The value must be
	// between 1 and 1024 characters. Only one of prefixMatch, fullPathMatch or
	// regexMatch must be specified.
	// +kubebuilder:validation:Optional
	PrefixMatch *string `json:"prefixMatch,omitempty" tf:"prefix_match,omitempty"`

	// Specifies a list of query parameter match criteria, all of which must match
	// corresponding query parameters in the request.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	QueryParameterMatches []QueryParameterMatchesParameters `json:"queryParameterMatches,omitempty" tf:"query_parameter_matches,omitempty"`

	// The queryParameterMatch matches if the value of the parameter matches the
	// regular expression specified by regexMatch. For the regular expression grammar,
	// please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
	// exactMatch and regexMatch must be set.
	// +kubebuilder:validation:Optional
	RegexMatch *string `json:"regexMatch,omitempty" tf:"regex_match,omitempty"`
}

type MetadataFiltersFilterLabelsInitParameters struct {

	// The name of the query parameter to match. The query parameter must exist in the
	// request, in the absence of which the request match fails.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The value of the label must match the specified value. value can have a maximum
	// length of 1024 characters.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type MetadataFiltersFilterLabelsObservation struct {

	// The name of the query parameter to match. The query parameter must exist in the
	// request, in the absence of which the request match fails.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The value of the label must match the specified value. value can have a maximum
	// length of 1024 characters.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type MetadataFiltersFilterLabelsParameters struct {

	// The name of the query parameter to match. The query parameter must exist in the
	// request, in the absence of which the request match fails.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// The value of the label must match the specified value. value can have a maximum
	// length of 1024 characters.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type PathMatcherDefaultURLRedirectInitParameters struct {

	// If set to true, the URL scheme in the redirected request is set to https.
	// If set to false, the URL scheme of the redirected request will remain the
	// same as that of the request. This must only be set for UrlMaps used in
	// TargetHttpProxys. Setting this true for TargetHttpsProxy is not
	// permitted. The default is set to false.
	HTTPSRedirect *bool `json:"httpsRedirect,omitempty" tf:"https_redirect,omitempty"`

	// The host that will be used in the redirect response instead of the one
	// that was supplied in the request. The value must be between 1 and 255
	// characters.
	HostRedirect *string `json:"hostRedirect,omitempty" tf:"host_redirect,omitempty"`

	// The path that will be used in the redirect response instead of the one
	// that was supplied in the request. pathRedirect cannot be supplied
	// together with prefixRedirect. Supply one alone or neither. If neither is
	// supplied, the path of the original request will be used for the redirect.
	// The value must be between 1 and 1024 characters.
	PathRedirect *string `json:"pathRedirect,omitempty" tf:"path_redirect,omitempty"`

	// The prefix that replaces the prefixMatch specified in the
	// HttpRouteRuleMatch, retaining the remaining portion of the URL before
	// redirecting the request. prefixRedirect cannot be supplied together with
	// pathRedirect. Supply one alone or neither. If neither is supplied, the
	// path of the original request will be used for the redirect. The value
	// must be between 1 and 1024 characters.
	PrefixRedirect *string `json:"prefixRedirect,omitempty" tf:"prefix_redirect,omitempty"`

	// The HTTP Status code to use for this RedirectAction. Supported values are:
	RedirectResponseCode *string `json:"redirectResponseCode,omitempty" tf:"redirect_response_code,omitempty"`

	// If set to true, any accompanying query portion of the original URL is
	// removed prior to redirecting the request. If set to false, the query
	// portion of the original URL is retained. The default value is false.
	StripQuery *bool `json:"stripQuery,omitempty" tf:"strip_query,omitempty"`
}

type PathMatcherDefaultURLRedirectObservation struct {

	// If set to true, the URL scheme in the redirected request is set to https.
	// If set to false, the URL scheme of the redirected request will remain the
	// same as that of the request. This must only be set for UrlMaps used in
	// TargetHttpProxys. Setting this true for TargetHttpsProxy is not
	// permitted. The default is set to false.
	HTTPSRedirect *bool `json:"httpsRedirect,omitempty" tf:"https_redirect,omitempty"`

	// The host that will be used in the redirect response instead of the one
	// that was supplied in the request. The value must be between 1 and 255
	// characters.
	HostRedirect *string `json:"hostRedirect,omitempty" tf:"host_redirect,omitempty"`

	// The path that will be used in the redirect response instead of the one
	// that was supplied in the request. pathRedirect cannot be supplied
	// together with prefixRedirect. Supply one alone or neither. If neither is
	// supplied, the path of the original request will be used for the redirect.
	// The value must be between 1 and 1024 characters.
	PathRedirect *string `json:"pathRedirect,omitempty" tf:"path_redirect,omitempty"`

	// The prefix that replaces the prefixMatch specified in the
	// HttpRouteRuleMatch, retaining the remaining portion of the URL before
	// redirecting the request. prefixRedirect cannot be supplied together with
	// pathRedirect. Supply one alone or neither. If neither is supplied, the
	// path of the original request will be used for the redirect. The value
	// must be between 1 and 1024 characters.
	PrefixRedirect *string `json:"prefixRedirect,omitempty" tf:"prefix_redirect,omitempty"`

	// The HTTP Status code to use for this RedirectAction. Supported values are:
	RedirectResponseCode *string `json:"redirectResponseCode,omitempty" tf:"redirect_response_code,omitempty"`

	// If set to true, any accompanying query portion of the original URL is
	// removed prior to redirecting the request. If set to false, the query
	// portion of the original URL is retained. The default value is false.
	StripQuery *bool `json:"stripQuery,omitempty" tf:"strip_query,omitempty"`
}

type PathMatcherDefaultURLRedirectParameters struct {

	// If set to true, the URL scheme in the redirected request is set to https.
	// If set to false, the URL scheme of the redirected request will remain the
	// same as that of the request. This must only be set for UrlMaps used in
	// TargetHttpProxys. Setting this true for TargetHttpsProxy is not
	// permitted. The default is set to false.
	// +kubebuilder:validation:Optional
	HTTPSRedirect *bool `json:"httpsRedirect,omitempty" tf:"https_redirect,omitempty"`

	// The host that will be used in the redirect response instead of the one
	// that was supplied in the request. The value must be between 1 and 255
	// characters.
	// +kubebuilder:validation:Optional
	HostRedirect *string `json:"hostRedirect,omitempty" tf:"host_redirect,omitempty"`

	// The path that will be used in the redirect response instead of the one
	// that was supplied in the request. pathRedirect cannot be supplied
	// together with prefixRedirect. Supply one alone or neither. If neither is
	// supplied, the path of the original request will be used for the redirect.
	// The value must be between 1 and 1024 characters.
	// +kubebuilder:validation:Optional
	PathRedirect *string `json:"pathRedirect,omitempty" tf:"path_redirect,omitempty"`

	// The prefix that replaces the prefixMatch specified in the
	// HttpRouteRuleMatch, retaining the remaining portion of the URL before
	// redirecting the request. prefixRedirect cannot be supplied together with
	// pathRedirect. Supply one alone or neither. If neither is supplied, the
	// path of the original request will be used for the redirect. The value
	// must be between 1 and 1024 characters.
	// +kubebuilder:validation:Optional
	PrefixRedirect *string `json:"prefixRedirect,omitempty" tf:"prefix_redirect,omitempty"`

	// The HTTP Status code to use for this RedirectAction. Supported values are:
	// +kubebuilder:validation:Optional
	RedirectResponseCode *string `json:"redirectResponseCode,omitempty" tf:"redirect_response_code,omitempty"`

	// If set to true, any accompanying query portion of the original URL is
	// removed prior to redirecting the request. If set to false, the query
	// portion of the original URL is retained. The default value is false.
	// +kubebuilder:validation:Optional
	StripQuery *bool `json:"stripQuery" tf:"strip_query,omitempty"`
}

type PathMatcherInitParameters struct {

	// A reference to a RegionBackendService resource. This will be used if
	// none of the pathRules defined by this PathMatcher is matched by
	// the URL's path portion.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.RegionBackendService
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	DefaultService *string `json:"defaultService,omitempty" tf:"default_service,omitempty"`

	// Reference to a RegionBackendService in compute to populate defaultService.
	// +kubebuilder:validation:Optional
	DefaultServiceRef *v1.Reference `json:"defaultServiceRef,omitempty" tf:"-"`

	// Selector for a RegionBackendService in compute to populate defaultService.
	// +kubebuilder:validation:Optional
	DefaultServiceSelector *v1.Selector `json:"defaultServiceSelector,omitempty" tf:"-"`

	// When none of the specified hostRules match, the request is redirected to a URL specified
	// by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
	// defaultRouteAction must not be set.
	// Structure is documented below.
	DefaultURLRedirect []PathMatcherDefaultURLRedirectInitParameters `json:"defaultUrlRedirect,omitempty" tf:"default_url_redirect,omitempty"`

	// An optional description of this resource.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name to which this PathMatcher is referred by the HostRule.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The list of path rules. Use this list instead of routeRules when routing based
	// on simple path matching is all that's required. The order by which path rules
	// are specified does not matter. Matches are always done on the longest-path-first
	// basis. For example: a pathRule with a path /a/b/c/* will match before /a/b/*
	// irrespective of the order in which those paths appear in this list. Within a
	// given pathMatcher, only one of pathRules or routeRules must be set.
	// Structure is documented below.
	PathRule []PathRuleInitParameters `json:"pathRule,omitempty" tf:"path_rule,omitempty"`

	// The list of ordered HTTP route rules. Use this list instead of pathRules when
	// advanced route matching and routing actions are desired. The order of specifying
	// routeRules matters: the first rule that matches will cause its specified routing
	// action to take effect. Within a given pathMatcher, only one of pathRules or
	// routeRules must be set. routeRules are not supported in UrlMaps intended for
	// External load balancers.
	// Structure is documented below.
	RouteRules []RouteRulesInitParameters `json:"routeRules,omitempty" tf:"route_rules,omitempty"`
}

type PathMatcherObservation struct {

	// A reference to a RegionBackendService resource. This will be used if
	// none of the pathRules defined by this PathMatcher is matched by
	// the URL's path portion.
	DefaultService *string `json:"defaultService,omitempty" tf:"default_service,omitempty"`

	// When none of the specified hostRules match, the request is redirected to a URL specified
	// by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
	// defaultRouteAction must not be set.
	// Structure is documented below.
	DefaultURLRedirect []PathMatcherDefaultURLRedirectObservation `json:"defaultUrlRedirect,omitempty" tf:"default_url_redirect,omitempty"`

	// An optional description of this resource.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name to which this PathMatcher is referred by the HostRule.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The list of path rules. Use this list instead of routeRules when routing based
	// on simple path matching is all that's required. The order by which path rules
	// are specified does not matter. Matches are always done on the longest-path-first
	// basis. For example: a pathRule with a path /a/b/c/* will match before /a/b/*
	// irrespective of the order in which those paths appear in this list. Within a
	// given pathMatcher, only one of pathRules or routeRules must be set.
	// Structure is documented below.
	PathRule []PathRuleObservation `json:"pathRule,omitempty" tf:"path_rule,omitempty"`

	// The list of ordered HTTP route rules. Use this list instead of pathRules when
	// advanced route matching and routing actions are desired. The order of specifying
	// routeRules matters: the first rule that matches will cause its specified routing
	// action to take effect. Within a given pathMatcher, only one of pathRules or
	// routeRules must be set. routeRules are not supported in UrlMaps intended for
	// External load balancers.
	// Structure is documented below.
	RouteRules []RouteRulesObservation `json:"routeRules,omitempty" tf:"route_rules,omitempty"`
}

type PathMatcherParameters struct {

	// A reference to a RegionBackendService resource. This will be used if
	// none of the pathRules defined by this PathMatcher is matched by
	// the URL's path portion.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.RegionBackendService
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	DefaultService *string `json:"defaultService,omitempty" tf:"default_service,omitempty"`

	// Reference to a RegionBackendService in compute to populate defaultService.
	// +kubebuilder:validation:Optional
	DefaultServiceRef *v1.Reference `json:"defaultServiceRef,omitempty" tf:"-"`

	// Selector for a RegionBackendService in compute to populate defaultService.
	// +kubebuilder:validation:Optional
	DefaultServiceSelector *v1.Selector `json:"defaultServiceSelector,omitempty" tf:"-"`

	// When none of the specified hostRules match, the request is redirected to a URL specified
	// by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
	// defaultRouteAction must not be set.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	DefaultURLRedirect []PathMatcherDefaultURLRedirectParameters `json:"defaultUrlRedirect,omitempty" tf:"default_url_redirect,omitempty"`

	// An optional description of this resource.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name to which this PathMatcher is referred by the HostRule.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// The list of path rules. Use this list instead of routeRules when routing based
	// on simple path matching is all that's required. The order by which path rules
	// are specified does not matter. Matches are always done on the longest-path-first
	// basis. For example: a pathRule with a path /a/b/c/* will match before /a/b/*
	// irrespective of the order in which those paths appear in this list. Within a
	// given pathMatcher, only one of pathRules or routeRules must be set.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	PathRule []PathRuleParameters `json:"pathRule,omitempty" tf:"path_rule,omitempty"`

	// The list of ordered HTTP route rules. Use this list instead of pathRules when
	// advanced route matching and routing actions are desired. The order of specifying
	// routeRules matters: the first rule that matches will cause its specified routing
	// action to take effect. Within a given pathMatcher, only one of pathRules or
	// routeRules must be set. routeRules are not supported in UrlMaps intended for
	// External load balancers.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	RouteRules []RouteRulesParameters `json:"routeRules,omitempty" tf:"route_rules,omitempty"`
}

type PathRuleInitParameters struct {

	// The list of path patterns to match. Each must start with / and the only place a
	// * is allowed is at the end following a /. The string fed to the path matcher
	// does not include any text after the first ? or #, and those chars are not
	// allowed here.
	// +listType=set
	Paths []*string `json:"paths,omitempty" tf:"paths,omitempty"`

	// In response to a matching matchRule, the load balancer performs advanced routing
	// actions like URL rewrites, header transformations, etc. prior to forwarding the
	// request to the selected backend. If  routeAction specifies any
	// weightedBackendServices, service must not be set. Conversely if service is set,
	// routeAction cannot contain any  weightedBackendServices. Only one of routeAction
	// or urlRedirect must be set.
	// Structure is documented below.
	RouteAction []RouteActionInitParameters `json:"routeAction,omitempty" tf:"route_action,omitempty"`

	// A reference to expected RegionBackendService resource the given URL should be mapped to.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.RegionBackendService
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// Reference to a RegionBackendService in compute to populate service.
	// +kubebuilder:validation:Optional
	ServiceRef *v1.Reference `json:"serviceRef,omitempty" tf:"-"`

	// Selector for a RegionBackendService in compute to populate service.
	// +kubebuilder:validation:Optional
	ServiceSelector *v1.Selector `json:"serviceSelector,omitempty" tf:"-"`

	// When this rule is matched, the request is redirected to a URL specified by
	// urlRedirect. If urlRedirect is specified, service or routeAction must not be
	// set.
	// Structure is documented below.
	URLRedirect []URLRedirectInitParameters `json:"urlRedirect,omitempty" tf:"url_redirect,omitempty"`
}

type PathRuleObservation struct {

	// The list of path patterns to match. Each must start with / and the only place a
	// * is allowed is at the end following a /. The string fed to the path matcher
	// does not include any text after the first ? or #, and those chars are not
	// allowed here.
	// +listType=set
	Paths []*string `json:"paths,omitempty" tf:"paths,omitempty"`

	// In response to a matching matchRule, the load balancer performs advanced routing
	// actions like URL rewrites, header transformations, etc. prior to forwarding the
	// request to the selected backend. If  routeAction specifies any
	// weightedBackendServices, service must not be set. Conversely if service is set,
	// routeAction cannot contain any  weightedBackendServices. Only one of routeAction
	// or urlRedirect must be set.
	// Structure is documented below.
	RouteAction []RouteActionObservation `json:"routeAction,omitempty" tf:"route_action,omitempty"`

	// A reference to expected RegionBackendService resource the given URL should be mapped to.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// When this rule is matched, the request is redirected to a URL specified by
	// urlRedirect. If urlRedirect is specified, service or routeAction must not be
	// set.
	// Structure is documented below.
	URLRedirect []URLRedirectObservation `json:"urlRedirect,omitempty" tf:"url_redirect,omitempty"`
}

type PathRuleParameters struct {

	// The list of path patterns to match. Each must start with / and the only place a
	// * is allowed is at the end following a /. The string fed to the path matcher
	// does not include any text after the first ? or #, and those chars are not
	// allowed here.
	// +kubebuilder:validation:Optional
	// +listType=set
	Paths []*string `json:"paths" tf:"paths,omitempty"`

	// In response to a matching matchRule, the load balancer performs advanced routing
	// actions like URL rewrites, header transformations, etc. prior to forwarding the
	// request to the selected backend. If  routeAction specifies any
	// weightedBackendServices, service must not be set. Conversely if service is set,
	// routeAction cannot contain any  weightedBackendServices. Only one of routeAction
	// or urlRedirect must be set.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	RouteAction []RouteActionParameters `json:"routeAction,omitempty" tf:"route_action,omitempty"`

	// A reference to expected RegionBackendService resource the given URL should be mapped to.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.RegionBackendService
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// Reference to a RegionBackendService in compute to populate service.
	// +kubebuilder:validation:Optional
	ServiceRef *v1.Reference `json:"serviceRef,omitempty" tf:"-"`

	// Selector for a RegionBackendService in compute to populate service.
	// +kubebuilder:validation:Optional
	ServiceSelector *v1.Selector `json:"serviceSelector,omitempty" tf:"-"`

	// When this rule is matched, the request is redirected to a URL specified by
	// urlRedirect. If urlRedirect is specified, service or routeAction must not be
	// set.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	URLRedirect []URLRedirectParameters `json:"urlRedirect,omitempty" tf:"url_redirect,omitempty"`
}

type PerTryTimeoutInitParameters struct {

	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	Nanos *float64 `json:"nanos,omitempty" tf:"nanos,omitempty"`

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds *string `json:"seconds,omitempty" tf:"seconds,omitempty"`
}

type PerTryTimeoutObservation struct {

	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	Nanos *float64 `json:"nanos,omitempty" tf:"nanos,omitempty"`

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds *string `json:"seconds,omitempty" tf:"seconds,omitempty"`
}

type PerTryTimeoutParameters struct {

	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	// +kubebuilder:validation:Optional
	Nanos *float64 `json:"nanos,omitempty" tf:"nanos,omitempty"`

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	// +kubebuilder:validation:Optional
	Seconds *string `json:"seconds,omitempty" tf:"seconds,omitempty"`
}

type QueryParameterMatchesInitParameters struct {

	// The queryParameterMatch matches if the value of the parameter exactly matches
	// the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch
	// must be set.
	ExactMatch *string `json:"exactMatch,omitempty" tf:"exact_match,omitempty"`

	// The name of the query parameter to match. The query parameter must exist in the
	// request, in the absence of which the request match fails.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies that the queryParameterMatch matches if the request contains the query
	// parameter, irrespective of whether the parameter has a value or not. Only one of
	// presentMatch, exactMatch and regexMatch must be set.
	PresentMatch *bool `json:"presentMatch,omitempty" tf:"present_match,omitempty"`

	// The queryParameterMatch matches if the value of the parameter matches the
	// regular expression specified by regexMatch. For the regular expression grammar,
	// please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
	// exactMatch and regexMatch must be set.
	RegexMatch *string `json:"regexMatch,omitempty" tf:"regex_match,omitempty"`
}

type QueryParameterMatchesObservation struct {

	// The queryParameterMatch matches if the value of the parameter exactly matches
	// the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch
	// must be set.
	ExactMatch *string `json:"exactMatch,omitempty" tf:"exact_match,omitempty"`

	// The name of the query parameter to match. The query parameter must exist in the
	// request, in the absence of which the request match fails.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies that the queryParameterMatch matches if the request contains the query
	// parameter, irrespective of whether the parameter has a value or not. Only one of
	// presentMatch, exactMatch and regexMatch must be set.
	PresentMatch *bool `json:"presentMatch,omitempty" tf:"present_match,omitempty"`

	// The queryParameterMatch matches if the value of the parameter matches the
	// regular expression specified by regexMatch. For the regular expression grammar,
	// please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
	// exactMatch and regexMatch must be set.
	RegexMatch *string `json:"regexMatch,omitempty" tf:"regex_match,omitempty"`
}

type QueryParameterMatchesParameters struct {

	// The queryParameterMatch matches if the value of the parameter exactly matches
	// the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch
	// must be set.
	// +kubebuilder:validation:Optional
	ExactMatch *string `json:"exactMatch,omitempty" tf:"exact_match,omitempty"`

	// The name of the query parameter to match. The query parameter must exist in the
	// request, in the absence of which the request match fails.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Specifies that the queryParameterMatch matches if the request contains the query
	// parameter, irrespective of whether the parameter has a value or not. Only one of
	// presentMatch, exactMatch and regexMatch must be set.
	// +kubebuilder:validation:Optional
	PresentMatch *bool `json:"presentMatch,omitempty" tf:"present_match,omitempty"`

	// The queryParameterMatch matches if the value of the parameter matches the
	// regular expression specified by regexMatch. For the regular expression grammar,
	// please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
	// exactMatch and regexMatch must be set.
	// +kubebuilder:validation:Optional
	RegexMatch *string `json:"regexMatch,omitempty" tf:"regex_match,omitempty"`
}

type RangeMatchInitParameters struct {

	// The end of the range (exclusive).
	RangeEnd *float64 `json:"rangeEnd,omitempty" tf:"range_end,omitempty"`

	// The start of the range (inclusive).
	RangeStart *float64 `json:"rangeStart,omitempty" tf:"range_start,omitempty"`
}

type RangeMatchObservation struct {

	// The end of the range (exclusive).
	RangeEnd *float64 `json:"rangeEnd,omitempty" tf:"range_end,omitempty"`

	// The start of the range (inclusive).
	RangeStart *float64 `json:"rangeStart,omitempty" tf:"range_start,omitempty"`
}

type RangeMatchParameters struct {

	// The end of the range (exclusive).
	// +kubebuilder:validation:Optional
	RangeEnd *float64 `json:"rangeEnd" tf:"range_end,omitempty"`

	// The start of the range (inclusive).
	// +kubebuilder:validation:Optional
	RangeStart *float64 `json:"rangeStart" tf:"range_start,omitempty"`
}

type RegionURLMapInitParameters struct {

	// defaultRouteAction takes effect when none of the hostRules match. The load balancer performs advanced routing actions, such as URL rewrites and header transformations, before forwarding the request to the selected backend. If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set. Conversely if defaultService is set, defaultRouteAction cannot contain any weightedBackendServices.
	// Only one of defaultRouteAction or defaultUrlRedirect must be set.
	// URL maps for Classic external HTTP(S) load balancers only support the urlRewrite action within defaultRouteAction.
	// defaultRouteAction has no effect when the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true.
	// Structure is documented below.
	DefaultRouteAction []DefaultRouteActionInitParameters `json:"defaultRouteAction,omitempty" tf:"default_route_action,omitempty"`

	// The full or partial URL of the defaultService resource to which traffic is directed if
	// none of the hostRules match. If defaultRouteAction is additionally specified, advanced
	// routing actions like URL Rewrites, etc. take effect prior to sending the request to the
	// backend. However, if defaultService is specified, defaultRouteAction cannot contain any
	// weightedBackendServices. Conversely, if routeAction specifies any
	// weightedBackendServices, service must not be specified.  Only one of defaultService,
	// defaultUrlRedirect or defaultRouteAction.weightedBackendService must be set.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.RegionBackendService
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	DefaultService *string `json:"defaultService,omitempty" tf:"default_service,omitempty"`

	// Reference to a RegionBackendService in compute to populate defaultService.
	// +kubebuilder:validation:Optional
	DefaultServiceRef *v1.Reference `json:"defaultServiceRef,omitempty" tf:"-"`

	// Selector for a RegionBackendService in compute to populate defaultService.
	// +kubebuilder:validation:Optional
	DefaultServiceSelector *v1.Selector `json:"defaultServiceSelector,omitempty" tf:"-"`

	// When none of the specified hostRules match, the request is redirected to a URL specified
	// by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
	// defaultRouteAction must not be set.
	// Structure is documented below.
	DefaultURLRedirect []DefaultURLRedirectInitParameters `json:"defaultUrlRedirect,omitempty" tf:"default_url_redirect,omitempty"`

	// An optional description of this resource. Provide this property when
	// you create the resource.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The list of HostRules to use against the URL.
	// Structure is documented below.
	HostRule []HostRuleInitParameters `json:"hostRule,omitempty" tf:"host_rule,omitempty"`

	// The list of named PathMatchers to use against the URL.
	// Structure is documented below.
	PathMatcher []PathMatcherInitParameters `json:"pathMatcher,omitempty" tf:"path_matcher,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The list of expected URL mappings. Requests to update this UrlMap will
	// succeed only if all of the test cases pass.
	// Structure is documented below.
	Test []TestInitParameters `json:"test,omitempty" tf:"test,omitempty"`
}

type RegionURLMapObservation struct {

	// Creation timestamp in RFC3339 text format.
	CreationTimestamp *string `json:"creationTimestamp,omitempty" tf:"creation_timestamp,omitempty"`

	// defaultRouteAction takes effect when none of the hostRules match. The load balancer performs advanced routing actions, such as URL rewrites and header transformations, before forwarding the request to the selected backend. If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set. Conversely if defaultService is set, defaultRouteAction cannot contain any weightedBackendServices.
	// Only one of defaultRouteAction or defaultUrlRedirect must be set.
	// URL maps for Classic external HTTP(S) load balancers only support the urlRewrite action within defaultRouteAction.
	// defaultRouteAction has no effect when the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true.
	// Structure is documented below.
	DefaultRouteAction []DefaultRouteActionObservation `json:"defaultRouteAction,omitempty" tf:"default_route_action,omitempty"`

	// The full or partial URL of the defaultService resource to which traffic is directed if
	// none of the hostRules match. If defaultRouteAction is additionally specified, advanced
	// routing actions like URL Rewrites, etc. take effect prior to sending the request to the
	// backend. However, if defaultService is specified, defaultRouteAction cannot contain any
	// weightedBackendServices. Conversely, if routeAction specifies any
	// weightedBackendServices, service must not be specified.  Only one of defaultService,
	// defaultUrlRedirect or defaultRouteAction.weightedBackendService must be set.
	DefaultService *string `json:"defaultService,omitempty" tf:"default_service,omitempty"`

	// When none of the specified hostRules match, the request is redirected to a URL specified
	// by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
	// defaultRouteAction must not be set.
	// Structure is documented below.
	DefaultURLRedirect []DefaultURLRedirectObservation `json:"defaultUrlRedirect,omitempty" tf:"default_url_redirect,omitempty"`

	// An optional description of this resource. Provide this property when
	// you create the resource.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Fingerprint of this resource. This field is used internally during
	// updates of this resource.
	Fingerprint *string `json:"fingerprint,omitempty" tf:"fingerprint,omitempty"`

	// The list of HostRules to use against the URL.
	// Structure is documented below.
	HostRule []HostRuleObservation `json:"hostRule,omitempty" tf:"host_rule,omitempty"`

	// an identifier for the resource with format projects/{{project}}/regions/{{region}}/urlMaps/{{name}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The unique identifier for the resource.
	MapID *float64 `json:"mapId,omitempty" tf:"map_id,omitempty"`

	// The list of named PathMatchers to use against the URL.
	// Structure is documented below.
	PathMatcher []PathMatcherObservation `json:"pathMatcher,omitempty" tf:"path_matcher,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The Region in which the url map should reside.
	// If it is not provided, the provider region is used.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The URI of the created resource.
	SelfLink *string `json:"selfLink,omitempty" tf:"self_link,omitempty"`

	// The list of expected URL mappings. Requests to update this UrlMap will
	// succeed only if all of the test cases pass.
	// Structure is documented below.
	Test []TestObservation `json:"test,omitempty" tf:"test,omitempty"`
}

type RegionURLMapParameters struct {

	// defaultRouteAction takes effect when none of the hostRules match. The load balancer performs advanced routing actions, such as URL rewrites and header transformations, before forwarding the request to the selected backend. If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set. Conversely if defaultService is set, defaultRouteAction cannot contain any weightedBackendServices.
	// Only one of defaultRouteAction or defaultUrlRedirect must be set.
	// URL maps for Classic external HTTP(S) load balancers only support the urlRewrite action within defaultRouteAction.
	// defaultRouteAction has no effect when the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	DefaultRouteAction []DefaultRouteActionParameters `json:"defaultRouteAction,omitempty" tf:"default_route_action,omitempty"`

	// The full or partial URL of the defaultService resource to which traffic is directed if
	// none of the hostRules match. If defaultRouteAction is additionally specified, advanced
	// routing actions like URL Rewrites, etc. take effect prior to sending the request to the
	// backend. However, if defaultService is specified, defaultRouteAction cannot contain any
	// weightedBackendServices. Conversely, if routeAction specifies any
	// weightedBackendServices, service must not be specified.  Only one of defaultService,
	// defaultUrlRedirect or defaultRouteAction.weightedBackendService must be set.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.RegionBackendService
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	DefaultService *string `json:"defaultService,omitempty" tf:"default_service,omitempty"`

	// Reference to a RegionBackendService in compute to populate defaultService.
	// +kubebuilder:validation:Optional
	DefaultServiceRef *v1.Reference `json:"defaultServiceRef,omitempty" tf:"-"`

	// Selector for a RegionBackendService in compute to populate defaultService.
	// +kubebuilder:validation:Optional
	DefaultServiceSelector *v1.Selector `json:"defaultServiceSelector,omitempty" tf:"-"`

	// When none of the specified hostRules match, the request is redirected to a URL specified
	// by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
	// defaultRouteAction must not be set.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	DefaultURLRedirect []DefaultURLRedirectParameters `json:"defaultUrlRedirect,omitempty" tf:"default_url_redirect,omitempty"`

	// An optional description of this resource. Provide this property when
	// you create the resource.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The list of HostRules to use against the URL.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	HostRule []HostRuleParameters `json:"hostRule,omitempty" tf:"host_rule,omitempty"`

	// The list of named PathMatchers to use against the URL.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	PathMatcher []PathMatcherParameters `json:"pathMatcher,omitempty" tf:"path_matcher,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The Region in which the url map should reside.
	// If it is not provided, the provider region is used.
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`

	// The list of expected URL mappings. Requests to update this UrlMap will
	// succeed only if all of the test cases pass.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Test []TestParameters `json:"test,omitempty" tf:"test,omitempty"`
}

type RequestHeadersToAddInitParameters struct {

	// The name of the header.
	HeaderName *string `json:"headerName,omitempty" tf:"header_name,omitempty"`

	// The value of the header to add.
	HeaderValue *string `json:"headerValue,omitempty" tf:"header_value,omitempty"`

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace *bool `json:"replace,omitempty" tf:"replace,omitempty"`
}

type RequestHeadersToAddObservation struct {

	// The name of the header.
	HeaderName *string `json:"headerName,omitempty" tf:"header_name,omitempty"`

	// The value of the header to add.
	HeaderValue *string `json:"headerValue,omitempty" tf:"header_value,omitempty"`

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace *bool `json:"replace,omitempty" tf:"replace,omitempty"`
}

type RequestHeadersToAddParameters struct {

	// The name of the header.
	// +kubebuilder:validation:Optional
	HeaderName *string `json:"headerName,omitempty" tf:"header_name,omitempty"`

	// The value of the header to add.
	// +kubebuilder:validation:Optional
	HeaderValue *string `json:"headerValue,omitempty" tf:"header_value,omitempty"`

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	// +kubebuilder:validation:Optional
	Replace *bool `json:"replace,omitempty" tf:"replace,omitempty"`
}

type RequestMirrorPolicyInitParameters struct {

	// The default RegionBackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.RegionBackendService
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	BackendService *string `json:"backendService,omitempty" tf:"backend_service,omitempty"`

	// Reference to a RegionBackendService in compute to populate backendService.
	// +kubebuilder:validation:Optional
	BackendServiceRef *v1.Reference `json:"backendServiceRef,omitempty" tf:"-"`

	// Selector for a RegionBackendService in compute to populate backendService.
	// +kubebuilder:validation:Optional
	BackendServiceSelector *v1.Selector `json:"backendServiceSelector,omitempty" tf:"-"`
}

type RequestMirrorPolicyObservation struct {

	// The default RegionBackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	BackendService *string `json:"backendService,omitempty" tf:"backend_service,omitempty"`
}

type RequestMirrorPolicyParameters struct {

	// The default RegionBackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.RegionBackendService
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	BackendService *string `json:"backendService,omitempty" tf:"backend_service,omitempty"`

	// Reference to a RegionBackendService in compute to populate backendService.
	// +kubebuilder:validation:Optional
	BackendServiceRef *v1.Reference `json:"backendServiceRef,omitempty" tf:"-"`

	// Selector for a RegionBackendService in compute to populate backendService.
	// +kubebuilder:validation:Optional
	BackendServiceSelector *v1.Selector `json:"backendServiceSelector,omitempty" tf:"-"`
}

type ResponseHeadersToAddInitParameters struct {

	// The name of the header.
	HeaderName *string `json:"headerName,omitempty" tf:"header_name,omitempty"`

	// The value of the header to add.
	HeaderValue *string `json:"headerValue,omitempty" tf:"header_value,omitempty"`

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace *bool `json:"replace,omitempty" tf:"replace,omitempty"`
}

type ResponseHeadersToAddObservation struct {

	// The name of the header.
	HeaderName *string `json:"headerName,omitempty" tf:"header_name,omitempty"`

	// The value of the header to add.
	HeaderValue *string `json:"headerValue,omitempty" tf:"header_value,omitempty"`

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace *bool `json:"replace,omitempty" tf:"replace,omitempty"`
}

type ResponseHeadersToAddParameters struct {

	// The name of the header.
	// +kubebuilder:validation:Optional
	HeaderName *string `json:"headerName,omitempty" tf:"header_name,omitempty"`

	// The value of the header to add.
	// +kubebuilder:validation:Optional
	HeaderValue *string `json:"headerValue,omitempty" tf:"header_value,omitempty"`

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	// +kubebuilder:validation:Optional
	Replace *bool `json:"replace,omitempty" tf:"replace,omitempty"`
}

type RetryPolicyInitParameters struct {

	// Specifies the allowed number retries. This number must be > 0.
	NumRetries *float64 `json:"numRetries,omitempty" tf:"num_retries,omitempty"`

	// Specifies a non-zero timeout per retry attempt.
	// Structure is documented below.
	PerTryTimeout []PerTryTimeoutInitParameters `json:"perTryTimeout,omitempty" tf:"per_try_timeout,omitempty"`

	// Specifies one or more conditions when this retry rule applies. Valid values are:
	RetryConditions []*string `json:"retryConditions,omitempty" tf:"retry_conditions,omitempty"`
}

type RetryPolicyObservation struct {

	// Specifies the allowed number retries. This number must be > 0.
	NumRetries *float64 `json:"numRetries,omitempty" tf:"num_retries,omitempty"`

	// Specifies a non-zero timeout per retry attempt.
	// Structure is documented below.
	PerTryTimeout []PerTryTimeoutObservation `json:"perTryTimeout,omitempty" tf:"per_try_timeout,omitempty"`

	// Specifies one or more conditions when this retry rule applies. Valid values are:
	RetryConditions []*string `json:"retryConditions,omitempty" tf:"retry_conditions,omitempty"`
}

type RetryPolicyParameters struct {

	// Specifies the allowed number retries. This number must be > 0.
	// +kubebuilder:validation:Optional
	NumRetries *float64 `json:"numRetries,omitempty" tf:"num_retries,omitempty"`

	// Specifies a non-zero timeout per retry attempt.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	PerTryTimeout []PerTryTimeoutParameters `json:"perTryTimeout,omitempty" tf:"per_try_timeout,omitempty"`

	// Specifies one or more conditions when this retry rule applies. Valid values are:
	// +kubebuilder:validation:Optional
	RetryConditions []*string `json:"retryConditions,omitempty" tf:"retry_conditions,omitempty"`
}

type RetryPolicyPerTryTimeoutInitParameters struct {

	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	Nanos *float64 `json:"nanos,omitempty" tf:"nanos,omitempty"`

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds *string `json:"seconds,omitempty" tf:"seconds,omitempty"`
}

type RetryPolicyPerTryTimeoutObservation struct {

	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	Nanos *float64 `json:"nanos,omitempty" tf:"nanos,omitempty"`

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds *string `json:"seconds,omitempty" tf:"seconds,omitempty"`
}

type RetryPolicyPerTryTimeoutParameters struct {

	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	// +kubebuilder:validation:Optional
	Nanos *float64 `json:"nanos,omitempty" tf:"nanos,omitempty"`

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	// +kubebuilder:validation:Optional
	Seconds *string `json:"seconds" tf:"seconds,omitempty"`
}

type RouteActionCorsPolicyInitParameters struct {

	// In response to a preflight request, setting this to true indicates that the
	// actual request can include user credentials. This translates to the Access-
	// Control-Allow-Credentials header. Defaults to false.
	AllowCredentials *bool `json:"allowCredentials,omitempty" tf:"allow_credentials,omitempty"`

	// Specifies the content for the Access-Control-Allow-Headers header.
	AllowHeaders []*string `json:"allowHeaders,omitempty" tf:"allow_headers,omitempty"`

	// Specifies the content for the Access-Control-Allow-Methods header.
	AllowMethods []*string `json:"allowMethods,omitempty" tf:"allow_methods,omitempty"`

	// Specifies the regular expression patterns that match allowed origins. For
	// regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
	// An origin is allowed if it matches either allow_origins or allow_origin_regex.
	AllowOriginRegexes []*string `json:"allowOriginRegexes,omitempty" tf:"allow_origin_regexes,omitempty"`

	// Specifies the list of origins that will be allowed to do CORS requests. An
	// origin is allowed if it matches either allow_origins or allow_origin_regex.
	AllowOrigins []*string `json:"allowOrigins,omitempty" tf:"allow_origins,omitempty"`

	// If true, specifies the CORS policy is disabled.
	// which indicates that the CORS policy is in effect. Defaults to false.
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// Specifies the content for the Access-Control-Expose-Headers header.
	ExposeHeaders []*string `json:"exposeHeaders,omitempty" tf:"expose_headers,omitempty"`

	// Specifies how long the results of a preflight request can be cached. This
	// translates to the content for the Access-Control-Max-Age header.
	MaxAge *float64 `json:"maxAge,omitempty" tf:"max_age,omitempty"`
}

type RouteActionCorsPolicyObservation struct {

	// In response to a preflight request, setting this to true indicates that the
	// actual request can include user credentials. This translates to the Access-
	// Control-Allow-Credentials header. Defaults to false.
	AllowCredentials *bool `json:"allowCredentials,omitempty" tf:"allow_credentials,omitempty"`

	// Specifies the content for the Access-Control-Allow-Headers header.
	AllowHeaders []*string `json:"allowHeaders,omitempty" tf:"allow_headers,omitempty"`

	// Specifies the content for the Access-Control-Allow-Methods header.
	AllowMethods []*string `json:"allowMethods,omitempty" tf:"allow_methods,omitempty"`

	// Specifies the regular expression patterns that match allowed origins. For
	// regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
	// An origin is allowed if it matches either allow_origins or allow_origin_regex.
	AllowOriginRegexes []*string `json:"allowOriginRegexes,omitempty" tf:"allow_origin_regexes,omitempty"`

	// Specifies the list of origins that will be allowed to do CORS requests. An
	// origin is allowed if it matches either allow_origins or allow_origin_regex.
	AllowOrigins []*string `json:"allowOrigins,omitempty" tf:"allow_origins,omitempty"`

	// If true, specifies the CORS policy is disabled.
	// which indicates that the CORS policy is in effect. Defaults to false.
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// Specifies the content for the Access-Control-Expose-Headers header.
	ExposeHeaders []*string `json:"exposeHeaders,omitempty" tf:"expose_headers,omitempty"`

	// Specifies how long the results of a preflight request can be cached. This
	// translates to the content for the Access-Control-Max-Age header.
	MaxAge *float64 `json:"maxAge,omitempty" tf:"max_age,omitempty"`
}

type RouteActionCorsPolicyParameters struct {

	// In response to a preflight request, setting this to true indicates that the
	// actual request can include user credentials. This translates to the Access-
	// Control-Allow-Credentials header. Defaults to false.
	// +kubebuilder:validation:Optional
	AllowCredentials *bool `json:"allowCredentials,omitempty" tf:"allow_credentials,omitempty"`

	// Specifies the content for the Access-Control-Allow-Headers header.
	// +kubebuilder:validation:Optional
	AllowHeaders []*string `json:"allowHeaders,omitempty" tf:"allow_headers,omitempty"`

	// Specifies the content for the Access-Control-Allow-Methods header.
	// +kubebuilder:validation:Optional
	AllowMethods []*string `json:"allowMethods,omitempty" tf:"allow_methods,omitempty"`

	// Specifies the regular expression patterns that match allowed origins. For
	// regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
	// An origin is allowed if it matches either allow_origins or allow_origin_regex.
	// +kubebuilder:validation:Optional
	AllowOriginRegexes []*string `json:"allowOriginRegexes,omitempty" tf:"allow_origin_regexes,omitempty"`

	// Specifies the list of origins that will be allowed to do CORS requests. An
	// origin is allowed if it matches either allow_origins or allow_origin_regex.
	// +kubebuilder:validation:Optional
	AllowOrigins []*string `json:"allowOrigins,omitempty" tf:"allow_origins,omitempty"`

	// If true, specifies the CORS policy is disabled.
	// which indicates that the CORS policy is in effect. Defaults to false.
	// +kubebuilder:validation:Optional
	Disabled *bool `json:"disabled" tf:"disabled,omitempty"`

	// Specifies the content for the Access-Control-Expose-Headers header.
	// +kubebuilder:validation:Optional
	ExposeHeaders []*string `json:"exposeHeaders,omitempty" tf:"expose_headers,omitempty"`

	// Specifies how long the results of a preflight request can be cached. This
	// translates to the content for the Access-Control-Max-Age header.
	// +kubebuilder:validation:Optional
	MaxAge *float64 `json:"maxAge,omitempty" tf:"max_age,omitempty"`
}

type RouteActionFaultInjectionPolicyAbortInitParameters struct {

	// The HTTP status code used to abort the request. The value must be between 200
	// and 599 inclusive.
	HTTPStatus *float64 `json:"httpStatus,omitempty" tf:"http_status,omitempty"`

	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	Percentage *float64 `json:"percentage,omitempty" tf:"percentage,omitempty"`
}

type RouteActionFaultInjectionPolicyAbortObservation struct {

	// The HTTP status code used to abort the request. The value must be between 200
	// and 599 inclusive.
	HTTPStatus *float64 `json:"httpStatus,omitempty" tf:"http_status,omitempty"`

	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	Percentage *float64 `json:"percentage,omitempty" tf:"percentage,omitempty"`
}

type RouteActionFaultInjectionPolicyAbortParameters struct {

	// The HTTP status code used to abort the request. The value must be between 200
	// and 599 inclusive.
	// +kubebuilder:validation:Optional
	HTTPStatus *float64 `json:"httpStatus,omitempty" tf:"http_status,omitempty"`

	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	// +kubebuilder:validation:Optional
	Percentage *float64 `json:"percentage,omitempty" tf:"percentage,omitempty"`
}

type RouteActionFaultInjectionPolicyDelayInitParameters struct {

	// Specifies the value of the fixed delay interval.
	// Structure is documented below.
	FixedDelay []FaultInjectionPolicyDelayFixedDelayInitParameters `json:"fixedDelay,omitempty" tf:"fixed_delay,omitempty"`

	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	Percentage *float64 `json:"percentage,omitempty" tf:"percentage,omitempty"`
}

type RouteActionFaultInjectionPolicyDelayObservation struct {

	// Specifies the value of the fixed delay interval.
	// Structure is documented below.
	FixedDelay []FaultInjectionPolicyDelayFixedDelayObservation `json:"fixedDelay,omitempty" tf:"fixed_delay,omitempty"`

	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	Percentage *float64 `json:"percentage,omitempty" tf:"percentage,omitempty"`
}

type RouteActionFaultInjectionPolicyDelayParameters struct {

	// Specifies the value of the fixed delay interval.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	FixedDelay []FaultInjectionPolicyDelayFixedDelayParameters `json:"fixedDelay,omitempty" tf:"fixed_delay,omitempty"`

	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	// +kubebuilder:validation:Optional
	Percentage *float64 `json:"percentage,omitempty" tf:"percentage,omitempty"`
}

type RouteActionFaultInjectionPolicyInitParameters struct {

	// The specification for how client requests are aborted as part of fault
	// injection.
	// Structure is documented below.
	Abort []FaultInjectionPolicyAbortInitParameters `json:"abort,omitempty" tf:"abort,omitempty"`

	// The specification for how client requests are delayed as part of fault
	// injection, before being sent to a backend service.
	// Structure is documented below.
	Delay []FaultInjectionPolicyDelayInitParameters `json:"delay,omitempty" tf:"delay,omitempty"`
}

type RouteActionFaultInjectionPolicyObservation struct {

	// The specification for how client requests are aborted as part of fault
	// injection.
	// Structure is documented below.
	Abort []FaultInjectionPolicyAbortObservation `json:"abort,omitempty" tf:"abort,omitempty"`

	// The specification for how client requests are delayed as part of fault
	// injection, before being sent to a backend service.
	// Structure is documented below.
	Delay []FaultInjectionPolicyDelayObservation `json:"delay,omitempty" tf:"delay,omitempty"`
}

type RouteActionFaultInjectionPolicyParameters struct {

	// The specification for how client requests are aborted as part of fault
	// injection.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Abort []FaultInjectionPolicyAbortParameters `json:"abort,omitempty" tf:"abort,omitempty"`

	// The specification for how client requests are delayed as part of fault
	// injection, before being sent to a backend service.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Delay []FaultInjectionPolicyDelayParameters `json:"delay,omitempty" tf:"delay,omitempty"`
}

type RouteActionInitParameters struct {

	// The specification for allowing client side cross-origin requests. Please see W3C
	// Recommendation for Cross Origin Resource Sharing
	// Structure is documented below.
	CorsPolicy []RouteActionCorsPolicyInitParameters `json:"corsPolicy,omitempty" tf:"cors_policy,omitempty"`

	// The specification for fault injection introduced into traffic to test the
	// resiliency of clients to backend service failure. As part of fault injection,
	// when clients send requests to a backend service, delays can be introduced by
	// Loadbalancer on a percentage of requests before sending those request to the
	// backend service. Similarly requests from clients can be aborted by the
	// Loadbalancer for a percentage of requests. timeout and retry_policy will be
	// ignored by clients that are configured with a fault_injection_policy.
	// Structure is documented below.
	FaultInjectionPolicy []RouteActionFaultInjectionPolicyInitParameters `json:"faultInjectionPolicy,omitempty" tf:"fault_injection_policy,omitempty"`

	// Specifies the policy on how requests intended for the route's backends are
	// shadowed to a separate mirrored backend service. Loadbalancer does not wait for
	// responses from the shadow service. Prior to sending traffic to the shadow
	// service, the host / authority header is suffixed with -shadow.
	// Structure is documented below.
	RequestMirrorPolicy []RouteActionRequestMirrorPolicyInitParameters `json:"requestMirrorPolicy,omitempty" tf:"request_mirror_policy,omitempty"`

	// Specifies the retry policy associated with this route.
	// Structure is documented below.
	RetryPolicy []RouteActionRetryPolicyInitParameters `json:"retryPolicy,omitempty" tf:"retry_policy,omitempty"`

	// Specifies the timeout for the selected route. Timeout is computed from the time
	// the request is has been fully processed (i.e. end-of-stream) up until the
	// response has been completely processed. Timeout includes all retries. If not
	// specified, the default value is 15 seconds.
	// Structure is documented below.
	Timeout []RouteActionTimeoutInitParameters `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// The spec to modify the URL of the request, prior to forwarding the request to
	// the matched service
	// Structure is documented below.
	URLRewrite []RouteActionURLRewriteInitParameters `json:"urlRewrite,omitempty" tf:"url_rewrite,omitempty"`

	// A list of weighted backend services to send traffic to when a route match
	// occurs. The weights determine the fraction of traffic that flows to their
	// corresponding backend service. If all traffic needs to go to a single backend
	// service, there must be one  weightedBackendService with weight set to a non 0
	// number. Once a backendService is identified and before forwarding the request to
	// the backend service, advanced routing actions like Url rewrites and header
	// transformations are applied depending on additional settings specified in this
	// HttpRouteAction.
	// Structure is documented below.
	WeightedBackendServices []RouteActionWeightedBackendServicesInitParameters `json:"weightedBackendServices,omitempty" tf:"weighted_backend_services,omitempty"`
}

type RouteActionObservation struct {

	// The specification for allowing client side cross-origin requests. Please see W3C
	// Recommendation for Cross Origin Resource Sharing
	// Structure is documented below.
	CorsPolicy []RouteActionCorsPolicyObservation `json:"corsPolicy,omitempty" tf:"cors_policy,omitempty"`

	// The specification for fault injection introduced into traffic to test the
	// resiliency of clients to backend service failure. As part of fault injection,
	// when clients send requests to a backend service, delays can be introduced by
	// Loadbalancer on a percentage of requests before sending those request to the
	// backend service. Similarly requests from clients can be aborted by the
	// Loadbalancer for a percentage of requests. timeout and retry_policy will be
	// ignored by clients that are configured with a fault_injection_policy.
	// Structure is documented below.
	FaultInjectionPolicy []RouteActionFaultInjectionPolicyObservation `json:"faultInjectionPolicy,omitempty" tf:"fault_injection_policy,omitempty"`

	// Specifies the policy on how requests intended for the route's backends are
	// shadowed to a separate mirrored backend service. Loadbalancer does not wait for
	// responses from the shadow service. Prior to sending traffic to the shadow
	// service, the host / authority header is suffixed with -shadow.
	// Structure is documented below.
	RequestMirrorPolicy []RouteActionRequestMirrorPolicyObservation `json:"requestMirrorPolicy,omitempty" tf:"request_mirror_policy,omitempty"`

	// Specifies the retry policy associated with this route.
	// Structure is documented below.
	RetryPolicy []RouteActionRetryPolicyObservation `json:"retryPolicy,omitempty" tf:"retry_policy,omitempty"`

	// Specifies the timeout for the selected route. Timeout is computed from the time
	// the request is has been fully processed (i.e. end-of-stream) up until the
	// response has been completely processed. Timeout includes all retries. If not
	// specified, the default value is 15 seconds.
	// Structure is documented below.
	Timeout []RouteActionTimeoutObservation `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// The spec to modify the URL of the request, prior to forwarding the request to
	// the matched service
	// Structure is documented below.
	URLRewrite []RouteActionURLRewriteObservation `json:"urlRewrite,omitempty" tf:"url_rewrite,omitempty"`

	// A list of weighted backend services to send traffic to when a route match
	// occurs. The weights determine the fraction of traffic that flows to their
	// corresponding backend service. If all traffic needs to go to a single backend
	// service, there must be one  weightedBackendService with weight set to a non 0
	// number. Once a backendService is identified and before forwarding the request to
	// the backend service, advanced routing actions like Url rewrites and header
	// transformations are applied depending on additional settings specified in this
	// HttpRouteAction.
	// Structure is documented below.
	WeightedBackendServices []RouteActionWeightedBackendServicesObservation `json:"weightedBackendServices,omitempty" tf:"weighted_backend_services,omitempty"`
}

type RouteActionParameters struct {

	// The specification for allowing client side cross-origin requests. Please see W3C
	// Recommendation for Cross Origin Resource Sharing
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	CorsPolicy []RouteActionCorsPolicyParameters `json:"corsPolicy,omitempty" tf:"cors_policy,omitempty"`

	// The specification for fault injection introduced into traffic to test the
	// resiliency of clients to backend service failure. As part of fault injection,
	// when clients send requests to a backend service, delays can be introduced by
	// Loadbalancer on a percentage of requests before sending those request to the
	// backend service. Similarly requests from clients can be aborted by the
	// Loadbalancer for a percentage of requests. timeout and retry_policy will be
	// ignored by clients that are configured with a fault_injection_policy.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	FaultInjectionPolicy []RouteActionFaultInjectionPolicyParameters `json:"faultInjectionPolicy,omitempty" tf:"fault_injection_policy,omitempty"`

	// Specifies the policy on how requests intended for the route's backends are
	// shadowed to a separate mirrored backend service. Loadbalancer does not wait for
	// responses from the shadow service. Prior to sending traffic to the shadow
	// service, the host / authority header is suffixed with -shadow.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	RequestMirrorPolicy []RouteActionRequestMirrorPolicyParameters `json:"requestMirrorPolicy,omitempty" tf:"request_mirror_policy,omitempty"`

	// Specifies the retry policy associated with this route.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	RetryPolicy []RouteActionRetryPolicyParameters `json:"retryPolicy,omitempty" tf:"retry_policy,omitempty"`

	// Specifies the timeout for the selected route. Timeout is computed from the time
	// the request is has been fully processed (i.e. end-of-stream) up until the
	// response has been completely processed. Timeout includes all retries. If not
	// specified, the default value is 15 seconds.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Timeout []RouteActionTimeoutParameters `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// The spec to modify the URL of the request, prior to forwarding the request to
	// the matched service
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	URLRewrite []RouteActionURLRewriteParameters `json:"urlRewrite,omitempty" tf:"url_rewrite,omitempty"`

	// A list of weighted backend services to send traffic to when a route match
	// occurs. The weights determine the fraction of traffic that flows to their
	// corresponding backend service. If all traffic needs to go to a single backend
	// service, there must be one  weightedBackendService with weight set to a non 0
	// number. Once a backendService is identified and before forwarding the request to
	// the backend service, advanced routing actions like Url rewrites and header
	// transformations are applied depending on additional settings specified in this
	// HttpRouteAction.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	WeightedBackendServices []RouteActionWeightedBackendServicesParameters `json:"weightedBackendServices,omitempty" tf:"weighted_backend_services,omitempty"`
}

type RouteActionRequestMirrorPolicyInitParameters struct {

	// The default RegionBackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.RegionBackendService
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	BackendService *string `json:"backendService,omitempty" tf:"backend_service,omitempty"`

	// Reference to a RegionBackendService in compute to populate backendService.
	// +kubebuilder:validation:Optional
	BackendServiceRef *v1.Reference `json:"backendServiceRef,omitempty" tf:"-"`

	// Selector for a RegionBackendService in compute to populate backendService.
	// +kubebuilder:validation:Optional
	BackendServiceSelector *v1.Selector `json:"backendServiceSelector,omitempty" tf:"-"`
}

type RouteActionRequestMirrorPolicyObservation struct {

	// The default RegionBackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	BackendService *string `json:"backendService,omitempty" tf:"backend_service,omitempty"`
}

type RouteActionRequestMirrorPolicyParameters struct {

	// The default RegionBackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.RegionBackendService
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	BackendService *string `json:"backendService,omitempty" tf:"backend_service,omitempty"`

	// Reference to a RegionBackendService in compute to populate backendService.
	// +kubebuilder:validation:Optional
	BackendServiceRef *v1.Reference `json:"backendServiceRef,omitempty" tf:"-"`

	// Selector for a RegionBackendService in compute to populate backendService.
	// +kubebuilder:validation:Optional
	BackendServiceSelector *v1.Selector `json:"backendServiceSelector,omitempty" tf:"-"`
}

type RouteActionRetryPolicyInitParameters struct {

	// Specifies the allowed number retries. This number must be > 0.
	NumRetries *float64 `json:"numRetries,omitempty" tf:"num_retries,omitempty"`

	// Specifies a non-zero timeout per retry attempt.
	// Structure is documented below.
	PerTryTimeout []RetryPolicyPerTryTimeoutInitParameters `json:"perTryTimeout,omitempty" tf:"per_try_timeout,omitempty"`

	// Specifies one or more conditions when this retry rule applies. Valid values are:
	RetryConditions []*string `json:"retryConditions,omitempty" tf:"retry_conditions,omitempty"`
}

type RouteActionRetryPolicyObservation struct {

	// Specifies the allowed number retries. This number must be > 0.
	NumRetries *float64 `json:"numRetries,omitempty" tf:"num_retries,omitempty"`

	// Specifies a non-zero timeout per retry attempt.
	// Structure is documented below.
	PerTryTimeout []RetryPolicyPerTryTimeoutObservation `json:"perTryTimeout,omitempty" tf:"per_try_timeout,omitempty"`

	// Specifies one or more conditions when this retry rule applies. Valid values are:
	RetryConditions []*string `json:"retryConditions,omitempty" tf:"retry_conditions,omitempty"`
}

type RouteActionRetryPolicyParameters struct {

	// Specifies the allowed number retries. This number must be > 0.
	// +kubebuilder:validation:Optional
	NumRetries *float64 `json:"numRetries,omitempty" tf:"num_retries,omitempty"`

	// Specifies a non-zero timeout per retry attempt.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	PerTryTimeout []RetryPolicyPerTryTimeoutParameters `json:"perTryTimeout,omitempty" tf:"per_try_timeout,omitempty"`

	// Specifies one or more conditions when this retry rule applies. Valid values are:
	// +kubebuilder:validation:Optional
	RetryConditions []*string `json:"retryConditions,omitempty" tf:"retry_conditions,omitempty"`
}

type RouteActionRetryPolicyPerTryTimeoutInitParameters struct {

	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	Nanos *float64 `json:"nanos,omitempty" tf:"nanos,omitempty"`

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds *string `json:"seconds,omitempty" tf:"seconds,omitempty"`
}

type RouteActionRetryPolicyPerTryTimeoutObservation struct {

	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	Nanos *float64 `json:"nanos,omitempty" tf:"nanos,omitempty"`

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds *string `json:"seconds,omitempty" tf:"seconds,omitempty"`
}

type RouteActionRetryPolicyPerTryTimeoutParameters struct {

	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	// +kubebuilder:validation:Optional
	Nanos *float64 `json:"nanos,omitempty" tf:"nanos,omitempty"`

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	// +kubebuilder:validation:Optional
	Seconds *string `json:"seconds" tf:"seconds,omitempty"`
}

type RouteActionTimeoutInitParameters struct {

	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	Nanos *float64 `json:"nanos,omitempty" tf:"nanos,omitempty"`

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds *string `json:"seconds,omitempty" tf:"seconds,omitempty"`
}

type RouteActionTimeoutObservation struct {

	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	Nanos *float64 `json:"nanos,omitempty" tf:"nanos,omitempty"`

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds *string `json:"seconds,omitempty" tf:"seconds,omitempty"`
}

type RouteActionTimeoutParameters struct {

	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	// +kubebuilder:validation:Optional
	Nanos *float64 `json:"nanos,omitempty" tf:"nanos,omitempty"`

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	// +kubebuilder:validation:Optional
	Seconds *string `json:"seconds" tf:"seconds,omitempty"`
}

type RouteActionURLRewriteInitParameters struct {

	// Prior to forwarding the request to the selected service, the request's host
	// header is replaced with contents of hostRewrite. The value must be between 1 and
	// 255 characters.
	HostRewrite *string `json:"hostRewrite,omitempty" tf:"host_rewrite,omitempty"`

	// Prior to forwarding the request to the selected backend service, the matching
	// portion of the request's path is replaced by pathPrefixRewrite. The value must
	// be between 1 and 1024 characters.
	PathPrefixRewrite *string `json:"pathPrefixRewrite,omitempty" tf:"path_prefix_rewrite,omitempty"`
}

type RouteActionURLRewriteObservation struct {

	// Prior to forwarding the request to the selected service, the request's host
	// header is replaced with contents of hostRewrite. The value must be between 1 and
	// 255 characters.
	HostRewrite *string `json:"hostRewrite,omitempty" tf:"host_rewrite,omitempty"`

	// Prior to forwarding the request to the selected backend service, the matching
	// portion of the request's path is replaced by pathPrefixRewrite. The value must
	// be between 1 and 1024 characters.
	PathPrefixRewrite *string `json:"pathPrefixRewrite,omitempty" tf:"path_prefix_rewrite,omitempty"`
}

type RouteActionURLRewriteParameters struct {

	// Prior to forwarding the request to the selected service, the request's host
	// header is replaced with contents of hostRewrite. The value must be between 1 and
	// 255 characters.
	// +kubebuilder:validation:Optional
	HostRewrite *string `json:"hostRewrite,omitempty" tf:"host_rewrite,omitempty"`

	// Prior to forwarding the request to the selected backend service, the matching
	// portion of the request's path is replaced by pathPrefixRewrite. The value must
	// be between 1 and 1024 characters.
	// +kubebuilder:validation:Optional
	PathPrefixRewrite *string `json:"pathPrefixRewrite,omitempty" tf:"path_prefix_rewrite,omitempty"`
}

type RouteActionWeightedBackendServicesHeaderActionInitParameters struct {

	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.
	// Structure is documented below.
	RequestHeadersToAdd []WeightedBackendServicesHeaderActionRequestHeadersToAddInitParameters `json:"requestHeadersToAdd,omitempty" tf:"request_headers_to_add,omitempty"`

	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	RequestHeadersToRemove []*string `json:"requestHeadersToRemove,omitempty" tf:"request_headers_to_remove,omitempty"`

	// Headers to add the response prior to sending the response back to the client.
	// Structure is documented below.
	ResponseHeadersToAdd []WeightedBackendServicesHeaderActionResponseHeadersToAddInitParameters `json:"responseHeadersToAdd,omitempty" tf:"response_headers_to_add,omitempty"`

	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	ResponseHeadersToRemove []*string `json:"responseHeadersToRemove,omitempty" tf:"response_headers_to_remove,omitempty"`
}

type RouteActionWeightedBackendServicesHeaderActionObservation struct {

	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.
	// Structure is documented below.
	RequestHeadersToAdd []WeightedBackendServicesHeaderActionRequestHeadersToAddObservation `json:"requestHeadersToAdd,omitempty" tf:"request_headers_to_add,omitempty"`

	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	RequestHeadersToRemove []*string `json:"requestHeadersToRemove,omitempty" tf:"request_headers_to_remove,omitempty"`

	// Headers to add the response prior to sending the response back to the client.
	// Structure is documented below.
	ResponseHeadersToAdd []WeightedBackendServicesHeaderActionResponseHeadersToAddObservation `json:"responseHeadersToAdd,omitempty" tf:"response_headers_to_add,omitempty"`

	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	ResponseHeadersToRemove []*string `json:"responseHeadersToRemove,omitempty" tf:"response_headers_to_remove,omitempty"`
}

type RouteActionWeightedBackendServicesHeaderActionParameters struct {

	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	RequestHeadersToAdd []WeightedBackendServicesHeaderActionRequestHeadersToAddParameters `json:"requestHeadersToAdd,omitempty" tf:"request_headers_to_add,omitempty"`

	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	// +kubebuilder:validation:Optional
	RequestHeadersToRemove []*string `json:"requestHeadersToRemove,omitempty" tf:"request_headers_to_remove,omitempty"`

	// Headers to add the response prior to sending the response back to the client.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	ResponseHeadersToAdd []WeightedBackendServicesHeaderActionResponseHeadersToAddParameters `json:"responseHeadersToAdd,omitempty" tf:"response_headers_to_add,omitempty"`

	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	// +kubebuilder:validation:Optional
	ResponseHeadersToRemove []*string `json:"responseHeadersToRemove,omitempty" tf:"response_headers_to_remove,omitempty"`
}

type RouteActionWeightedBackendServicesInitParameters struct {

	// The default RegionBackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.RegionBackendService
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	BackendService *string `json:"backendService,omitempty" tf:"backend_service,omitempty"`

	// Reference to a RegionBackendService in compute to populate backendService.
	// +kubebuilder:validation:Optional
	BackendServiceRef *v1.Reference `json:"backendServiceRef,omitempty" tf:"-"`

	// Selector for a RegionBackendService in compute to populate backendService.
	// +kubebuilder:validation:Optional
	BackendServiceSelector *v1.Selector `json:"backendServiceSelector,omitempty" tf:"-"`

	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.
	// Structure is documented below.
	HeaderAction []WeightedBackendServicesHeaderActionInitParameters `json:"headerAction,omitempty" tf:"header_action,omitempty"`

	// Specifies the fraction of traffic sent to backendService, computed as weight /
	// (sum of all weightedBackendService weights in routeAction) . The selection of a
	// backend service is determined only for new traffic. Once a user's request has
	// been directed to a backendService, subsequent requests will be sent to the same
	// backendService as determined by the BackendService's session affinity policy.
	// The value must be between 0 and 1000
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type RouteActionWeightedBackendServicesObservation struct {

	// The default RegionBackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	BackendService *string `json:"backendService,omitempty" tf:"backend_service,omitempty"`

	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.
	// Structure is documented below.
	HeaderAction []WeightedBackendServicesHeaderActionObservation `json:"headerAction,omitempty" tf:"header_action,omitempty"`

	// Specifies the fraction of traffic sent to backendService, computed as weight /
	// (sum of all weightedBackendService weights in routeAction) . The selection of a
	// backend service is determined only for new traffic. Once a user's request has
	// been directed to a backendService, subsequent requests will be sent to the same
	// backendService as determined by the BackendService's session affinity policy.
	// The value must be between 0 and 1000
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type RouteActionWeightedBackendServicesParameters struct {

	// The default RegionBackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.RegionBackendService
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	BackendService *string `json:"backendService,omitempty" tf:"backend_service,omitempty"`

	// Reference to a RegionBackendService in compute to populate backendService.
	// +kubebuilder:validation:Optional
	BackendServiceRef *v1.Reference `json:"backendServiceRef,omitempty" tf:"-"`

	// Selector for a RegionBackendService in compute to populate backendService.
	// +kubebuilder:validation:Optional
	BackendServiceSelector *v1.Selector `json:"backendServiceSelector,omitempty" tf:"-"`

	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	HeaderAction []WeightedBackendServicesHeaderActionParameters `json:"headerAction,omitempty" tf:"header_action,omitempty"`

	// Specifies the fraction of traffic sent to backendService, computed as weight /
	// (sum of all weightedBackendService weights in routeAction) . The selection of a
	// backend service is determined only for new traffic. Once a user's request has
	// been directed to a backendService, subsequent requests will be sent to the same
	// backendService as determined by the BackendService's session affinity policy.
	// The value must be between 0 and 1000
	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight" tf:"weight,omitempty"`
}

type RouteRulesHeaderActionInitParameters struct {

	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.
	// Structure is documented below.
	RequestHeadersToAdd []RouteRulesHeaderActionRequestHeadersToAddInitParameters `json:"requestHeadersToAdd,omitempty" tf:"request_headers_to_add,omitempty"`

	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	RequestHeadersToRemove []*string `json:"requestHeadersToRemove,omitempty" tf:"request_headers_to_remove,omitempty"`

	// Headers to add the response prior to sending the response back to the client.
	// Structure is documented below.
	ResponseHeadersToAdd []RouteRulesHeaderActionResponseHeadersToAddInitParameters `json:"responseHeadersToAdd,omitempty" tf:"response_headers_to_add,omitempty"`

	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	ResponseHeadersToRemove []*string `json:"responseHeadersToRemove,omitempty" tf:"response_headers_to_remove,omitempty"`
}

type RouteRulesHeaderActionObservation struct {

	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.
	// Structure is documented below.
	RequestHeadersToAdd []RouteRulesHeaderActionRequestHeadersToAddObservation `json:"requestHeadersToAdd,omitempty" tf:"request_headers_to_add,omitempty"`

	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	RequestHeadersToRemove []*string `json:"requestHeadersToRemove,omitempty" tf:"request_headers_to_remove,omitempty"`

	// Headers to add the response prior to sending the response back to the client.
	// Structure is documented below.
	ResponseHeadersToAdd []RouteRulesHeaderActionResponseHeadersToAddObservation `json:"responseHeadersToAdd,omitempty" tf:"response_headers_to_add,omitempty"`

	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	ResponseHeadersToRemove []*string `json:"responseHeadersToRemove,omitempty" tf:"response_headers_to_remove,omitempty"`
}

type RouteRulesHeaderActionParameters struct {

	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	RequestHeadersToAdd []RouteRulesHeaderActionRequestHeadersToAddParameters `json:"requestHeadersToAdd,omitempty" tf:"request_headers_to_add,omitempty"`

	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	// +kubebuilder:validation:Optional
	RequestHeadersToRemove []*string `json:"requestHeadersToRemove,omitempty" tf:"request_headers_to_remove,omitempty"`

	// Headers to add the response prior to sending the response back to the client.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	ResponseHeadersToAdd []RouteRulesHeaderActionResponseHeadersToAddParameters `json:"responseHeadersToAdd,omitempty" tf:"response_headers_to_add,omitempty"`

	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	// +kubebuilder:validation:Optional
	ResponseHeadersToRemove []*string `json:"responseHeadersToRemove,omitempty" tf:"response_headers_to_remove,omitempty"`
}

type RouteRulesHeaderActionRequestHeadersToAddInitParameters struct {

	// The name of the header.
	HeaderName *string `json:"headerName,omitempty" tf:"header_name,omitempty"`

	// The value of the header to add.
	HeaderValue *string `json:"headerValue,omitempty" tf:"header_value,omitempty"`

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace *bool `json:"replace,omitempty" tf:"replace,omitempty"`
}

type RouteRulesHeaderActionRequestHeadersToAddObservation struct {

	// The name of the header.
	HeaderName *string `json:"headerName,omitempty" tf:"header_name,omitempty"`

	// The value of the header to add.
	HeaderValue *string `json:"headerValue,omitempty" tf:"header_value,omitempty"`

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace *bool `json:"replace,omitempty" tf:"replace,omitempty"`
}

type RouteRulesHeaderActionRequestHeadersToAddParameters struct {

	// The name of the header.
	// +kubebuilder:validation:Optional
	HeaderName *string `json:"headerName" tf:"header_name,omitempty"`

	// The value of the header to add.
	// +kubebuilder:validation:Optional
	HeaderValue *string `json:"headerValue" tf:"header_value,omitempty"`

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	// +kubebuilder:validation:Optional
	Replace *bool `json:"replace" tf:"replace,omitempty"`
}

type RouteRulesHeaderActionResponseHeadersToAddInitParameters struct {

	// The name of the header.
	HeaderName *string `json:"headerName,omitempty" tf:"header_name,omitempty"`

	// The value of the header to add.
	HeaderValue *string `json:"headerValue,omitempty" tf:"header_value,omitempty"`

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace *bool `json:"replace,omitempty" tf:"replace,omitempty"`
}

type RouteRulesHeaderActionResponseHeadersToAddObservation struct {

	// The name of the header.
	HeaderName *string `json:"headerName,omitempty" tf:"header_name,omitempty"`

	// The value of the header to add.
	HeaderValue *string `json:"headerValue,omitempty" tf:"header_value,omitempty"`

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace *bool `json:"replace,omitempty" tf:"replace,omitempty"`
}

type RouteRulesHeaderActionResponseHeadersToAddParameters struct {

	// The name of the header.
	// +kubebuilder:validation:Optional
	HeaderName *string `json:"headerName" tf:"header_name,omitempty"`

	// The value of the header to add.
	// +kubebuilder:validation:Optional
	HeaderValue *string `json:"headerValue" tf:"header_value,omitempty"`

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	// +kubebuilder:validation:Optional
	Replace *bool `json:"replace" tf:"replace,omitempty"`
}

type RouteRulesInitParameters struct {

	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.
	// Structure is documented below.
	HeaderAction []RouteRulesHeaderActionInitParameters `json:"headerAction,omitempty" tf:"header_action,omitempty"`

	// The rules for determining a match.
	// Structure is documented below.
	MatchRules []MatchRulesInitParameters `json:"matchRules,omitempty" tf:"match_rules,omitempty"`

	// For routeRules within a given pathMatcher, priority determines the order
	// in which load balancer will interpret routeRules. RouteRules are evaluated
	// in order of priority, from the lowest to highest number. The priority of
	// a rule decreases as its number increases (1, 2, 3, N+1). The first rule
	// that matches the request is applied.
	// You cannot configure two or more routeRules with the same priority.
	// Priority for each rule must be set to a number between 0 and
	// 2147483647 inclusive.
	// Priority numbers can have gaps, which enable you to add or remove rules
	// in the future without affecting the rest of the rules. For example,
	// 1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers to which
	// you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the
	// future without any impact on existing rules.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// In response to a matching matchRule, the load balancer performs advanced routing
	// actions like URL rewrites, header transformations, etc. prior to forwarding the
	// request to the selected backend. If  routeAction specifies any
	// weightedBackendServices, service must not be set. Conversely if service is set,
	// routeAction cannot contain any  weightedBackendServices. Only one of routeAction
	// or urlRedirect must be set.
	// Structure is documented below.
	RouteAction []RouteRulesRouteActionInitParameters `json:"routeAction,omitempty" tf:"route_action,omitempty"`

	// A reference to expected RegionBackendService resource the given URL should be mapped to.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.RegionBackendService
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// Reference to a RegionBackendService in compute to populate service.
	// +kubebuilder:validation:Optional
	ServiceRef *v1.Reference `json:"serviceRef,omitempty" tf:"-"`

	// Selector for a RegionBackendService in compute to populate service.
	// +kubebuilder:validation:Optional
	ServiceSelector *v1.Selector `json:"serviceSelector,omitempty" tf:"-"`

	// When this rule is matched, the request is redirected to a URL specified by
	// urlRedirect. If urlRedirect is specified, service or routeAction must not be
	// set.
	// Structure is documented below.
	URLRedirect []RouteRulesURLRedirectInitParameters `json:"urlRedirect,omitempty" tf:"url_redirect,omitempty"`
}

type RouteRulesObservation struct {

	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.
	// Structure is documented below.
	HeaderAction []RouteRulesHeaderActionObservation `json:"headerAction,omitempty" tf:"header_action,omitempty"`

	// The rules for determining a match.
	// Structure is documented below.
	MatchRules []MatchRulesObservation `json:"matchRules,omitempty" tf:"match_rules,omitempty"`

	// For routeRules within a given pathMatcher, priority determines the order
	// in which load balancer will interpret routeRules. RouteRules are evaluated
	// in order of priority, from the lowest to highest number. The priority of
	// a rule decreases as its number increases (1, 2, 3, N+1). The first rule
	// that matches the request is applied.
	// You cannot configure two or more routeRules with the same priority.
	// Priority for each rule must be set to a number between 0 and
	// 2147483647 inclusive.
	// Priority numbers can have gaps, which enable you to add or remove rules
	// in the future without affecting the rest of the rules. For example,
	// 1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers to which
	// you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the
	// future without any impact on existing rules.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// In response to a matching matchRule, the load balancer performs advanced routing
	// actions like URL rewrites, header transformations, etc. prior to forwarding the
	// request to the selected backend. If  routeAction specifies any
	// weightedBackendServices, service must not be set. Conversely if service is set,
	// routeAction cannot contain any  weightedBackendServices. Only one of routeAction
	// or urlRedirect must be set.
	// Structure is documented below.
	RouteAction []RouteRulesRouteActionObservation `json:"routeAction,omitempty" tf:"route_action,omitempty"`

	// A reference to expected RegionBackendService resource the given URL should be mapped to.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// When this rule is matched, the request is redirected to a URL specified by
	// urlRedirect. If urlRedirect is specified, service or routeAction must not be
	// set.
	// Structure is documented below.
	URLRedirect []RouteRulesURLRedirectObservation `json:"urlRedirect,omitempty" tf:"url_redirect,omitempty"`
}

type RouteRulesParameters struct {

	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	HeaderAction []RouteRulesHeaderActionParameters `json:"headerAction,omitempty" tf:"header_action,omitempty"`

	// The rules for determining a match.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	MatchRules []MatchRulesParameters `json:"matchRules,omitempty" tf:"match_rules,omitempty"`

	// For routeRules within a given pathMatcher, priority determines the order
	// in which load balancer will interpret routeRules. RouteRules are evaluated
	// in order of priority, from the lowest to highest number. The priority of
	// a rule decreases as its number increases (1, 2, 3, N+1). The first rule
	// that matches the request is applied.
	// You cannot configure two or more routeRules with the same priority.
	// Priority for each rule must be set to a number between 0 and
	// 2147483647 inclusive.
	// Priority numbers can have gaps, which enable you to add or remove rules
	// in the future without affecting the rest of the rules. For example,
	// 1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers to which
	// you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the
	// future without any impact on existing rules.
	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority" tf:"priority,omitempty"`

	// In response to a matching matchRule, the load balancer performs advanced routing
	// actions like URL rewrites, header transformations, etc. prior to forwarding the
	// request to the selected backend. If  routeAction specifies any
	// weightedBackendServices, service must not be set. Conversely if service is set,
	// routeAction cannot contain any  weightedBackendServices. Only one of routeAction
	// or urlRedirect must be set.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	RouteAction []RouteRulesRouteActionParameters `json:"routeAction,omitempty" tf:"route_action,omitempty"`

	// A reference to expected RegionBackendService resource the given URL should be mapped to.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.RegionBackendService
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// Reference to a RegionBackendService in compute to populate service.
	// +kubebuilder:validation:Optional
	ServiceRef *v1.Reference `json:"serviceRef,omitempty" tf:"-"`

	// Selector for a RegionBackendService in compute to populate service.
	// +kubebuilder:validation:Optional
	ServiceSelector *v1.Selector `json:"serviceSelector,omitempty" tf:"-"`

	// When this rule is matched, the request is redirected to a URL specified by
	// urlRedirect. If urlRedirect is specified, service or routeAction must not be
	// set.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	URLRedirect []RouteRulesURLRedirectParameters `json:"urlRedirect,omitempty" tf:"url_redirect,omitempty"`
}

type RouteRulesRouteActionCorsPolicyInitParameters struct {

	// In response to a preflight request, setting this to true indicates that the
	// actual request can include user credentials. This translates to the Access-
	// Control-Allow-Credentials header. Defaults to false.
	AllowCredentials *bool `json:"allowCredentials,omitempty" tf:"allow_credentials,omitempty"`

	// Specifies the content for the Access-Control-Allow-Headers header.
	AllowHeaders []*string `json:"allowHeaders,omitempty" tf:"allow_headers,omitempty"`

	// Specifies the content for the Access-Control-Allow-Methods header.
	AllowMethods []*string `json:"allowMethods,omitempty" tf:"allow_methods,omitempty"`

	// Specifies the regular expression patterns that match allowed origins. For
	// regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
	// An origin is allowed if it matches either allow_origins or allow_origin_regex.
	AllowOriginRegexes []*string `json:"allowOriginRegexes,omitempty" tf:"allow_origin_regexes,omitempty"`

	// Specifies the list of origins that will be allowed to do CORS requests. An
	// origin is allowed if it matches either allow_origins or allow_origin_regex.
	AllowOrigins []*string `json:"allowOrigins,omitempty" tf:"allow_origins,omitempty"`

	// If true, specifies the CORS policy is disabled.
	// which indicates that the CORS policy is in effect. Defaults to false.
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// Specifies the content for the Access-Control-Expose-Headers header.
	ExposeHeaders []*string `json:"exposeHeaders,omitempty" tf:"expose_headers,omitempty"`

	// Specifies how long the results of a preflight request can be cached. This
	// translates to the content for the Access-Control-Max-Age header.
	MaxAge *float64 `json:"maxAge,omitempty" tf:"max_age,omitempty"`
}

type RouteRulesRouteActionCorsPolicyObservation struct {

	// In response to a preflight request, setting this to true indicates that the
	// actual request can include user credentials. This translates to the Access-
	// Control-Allow-Credentials header. Defaults to false.
	AllowCredentials *bool `json:"allowCredentials,omitempty" tf:"allow_credentials,omitempty"`

	// Specifies the content for the Access-Control-Allow-Headers header.
	AllowHeaders []*string `json:"allowHeaders,omitempty" tf:"allow_headers,omitempty"`

	// Specifies the content for the Access-Control-Allow-Methods header.
	AllowMethods []*string `json:"allowMethods,omitempty" tf:"allow_methods,omitempty"`

	// Specifies the regular expression patterns that match allowed origins. For
	// regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
	// An origin is allowed if it matches either allow_origins or allow_origin_regex.
	AllowOriginRegexes []*string `json:"allowOriginRegexes,omitempty" tf:"allow_origin_regexes,omitempty"`

	// Specifies the list of origins that will be allowed to do CORS requests. An
	// origin is allowed if it matches either allow_origins or allow_origin_regex.
	AllowOrigins []*string `json:"allowOrigins,omitempty" tf:"allow_origins,omitempty"`

	// If true, specifies the CORS policy is disabled.
	// which indicates that the CORS policy is in effect. Defaults to false.
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// Specifies the content for the Access-Control-Expose-Headers header.
	ExposeHeaders []*string `json:"exposeHeaders,omitempty" tf:"expose_headers,omitempty"`

	// Specifies how long the results of a preflight request can be cached. This
	// translates to the content for the Access-Control-Max-Age header.
	MaxAge *float64 `json:"maxAge,omitempty" tf:"max_age,omitempty"`
}

type RouteRulesRouteActionCorsPolicyParameters struct {

	// In response to a preflight request, setting this to true indicates that the
	// actual request can include user credentials. This translates to the Access-
	// Control-Allow-Credentials header. Defaults to false.
	// +kubebuilder:validation:Optional
	AllowCredentials *bool `json:"allowCredentials,omitempty" tf:"allow_credentials,omitempty"`

	// Specifies the content for the Access-Control-Allow-Headers header.
	// +kubebuilder:validation:Optional
	AllowHeaders []*string `json:"allowHeaders,omitempty" tf:"allow_headers,omitempty"`

	// Specifies the content for the Access-Control-Allow-Methods header.
	// +kubebuilder:validation:Optional
	AllowMethods []*string `json:"allowMethods,omitempty" tf:"allow_methods,omitempty"`

	// Specifies the regular expression patterns that match allowed origins. For
	// regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
	// An origin is allowed if it matches either allow_origins or allow_origin_regex.
	// +kubebuilder:validation:Optional
	AllowOriginRegexes []*string `json:"allowOriginRegexes,omitempty" tf:"allow_origin_regexes,omitempty"`

	// Specifies the list of origins that will be allowed to do CORS requests. An
	// origin is allowed if it matches either allow_origins or allow_origin_regex.
	// +kubebuilder:validation:Optional
	AllowOrigins []*string `json:"allowOrigins,omitempty" tf:"allow_origins,omitempty"`

	// If true, specifies the CORS policy is disabled.
	// which indicates that the CORS policy is in effect. Defaults to false.
	// +kubebuilder:validation:Optional
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// Specifies the content for the Access-Control-Expose-Headers header.
	// +kubebuilder:validation:Optional
	ExposeHeaders []*string `json:"exposeHeaders,omitempty" tf:"expose_headers,omitempty"`

	// Specifies how long the results of a preflight request can be cached. This
	// translates to the content for the Access-Control-Max-Age header.
	// +kubebuilder:validation:Optional
	MaxAge *float64 `json:"maxAge,omitempty" tf:"max_age,omitempty"`
}

type RouteRulesRouteActionFaultInjectionPolicyInitParameters struct {

	// The specification for how client requests are aborted as part of fault
	// injection.
	// Structure is documented below.
	Abort []RouteActionFaultInjectionPolicyAbortInitParameters `json:"abort,omitempty" tf:"abort,omitempty"`

	// The specification for how client requests are delayed as part of fault
	// injection, before being sent to a backend service.
	// Structure is documented below.
	Delay []RouteActionFaultInjectionPolicyDelayInitParameters `json:"delay,omitempty" tf:"delay,omitempty"`
}

type RouteRulesRouteActionFaultInjectionPolicyObservation struct {

	// The specification for how client requests are aborted as part of fault
	// injection.
	// Structure is documented below.
	Abort []RouteActionFaultInjectionPolicyAbortObservation `json:"abort,omitempty" tf:"abort,omitempty"`

	// The specification for how client requests are delayed as part of fault
	// injection, before being sent to a backend service.
	// Structure is documented below.
	Delay []RouteActionFaultInjectionPolicyDelayObservation `json:"delay,omitempty" tf:"delay,omitempty"`
}

type RouteRulesRouteActionFaultInjectionPolicyParameters struct {

	// The specification for how client requests are aborted as part of fault
	// injection.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Abort []RouteActionFaultInjectionPolicyAbortParameters `json:"abort,omitempty" tf:"abort,omitempty"`

	// The specification for how client requests are delayed as part of fault
	// injection, before being sent to a backend service.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Delay []RouteActionFaultInjectionPolicyDelayParameters `json:"delay,omitempty" tf:"delay,omitempty"`
}

type RouteRulesRouteActionInitParameters struct {

	// The specification for allowing client side cross-origin requests. Please see W3C
	// Recommendation for Cross Origin Resource Sharing
	// Structure is documented below.
	CorsPolicy []RouteRulesRouteActionCorsPolicyInitParameters `json:"corsPolicy,omitempty" tf:"cors_policy,omitempty"`

	// The specification for fault injection introduced into traffic to test the
	// resiliency of clients to backend service failure. As part of fault injection,
	// when clients send requests to a backend service, delays can be introduced by
	// Loadbalancer on a percentage of requests before sending those request to the
	// backend service. Similarly requests from clients can be aborted by the
	// Loadbalancer for a percentage of requests. timeout and retry_policy will be
	// ignored by clients that are configured with a fault_injection_policy.
	// Structure is documented below.
	FaultInjectionPolicy []RouteRulesRouteActionFaultInjectionPolicyInitParameters `json:"faultInjectionPolicy,omitempty" tf:"fault_injection_policy,omitempty"`

	// Specifies the policy on how requests intended for the route's backends are
	// shadowed to a separate mirrored backend service. Loadbalancer does not wait for
	// responses from the shadow service. Prior to sending traffic to the shadow
	// service, the host / authority header is suffixed with -shadow.
	// Structure is documented below.
	RequestMirrorPolicy []RouteRulesRouteActionRequestMirrorPolicyInitParameters `json:"requestMirrorPolicy,omitempty" tf:"request_mirror_policy,omitempty"`

	// Specifies the retry policy associated with this route.
	// Structure is documented below.
	RetryPolicy []RouteRulesRouteActionRetryPolicyInitParameters `json:"retryPolicy,omitempty" tf:"retry_policy,omitempty"`

	// Specifies the timeout for the selected route. Timeout is computed from the time
	// the request is has been fully processed (i.e. end-of-stream) up until the
	// response has been completely processed. Timeout includes all retries. If not
	// specified, the default value is 15 seconds.
	// Structure is documented below.
	Timeout []RouteRulesRouteActionTimeoutInitParameters `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// The spec to modify the URL of the request, prior to forwarding the request to
	// the matched service
	// Structure is documented below.
	URLRewrite []RouteRulesRouteActionURLRewriteInitParameters `json:"urlRewrite,omitempty" tf:"url_rewrite,omitempty"`

	// A list of weighted backend services to send traffic to when a route match
	// occurs. The weights determine the fraction of traffic that flows to their
	// corresponding backend service. If all traffic needs to go to a single backend
	// service, there must be one  weightedBackendService with weight set to a non 0
	// number. Once a backendService is identified and before forwarding the request to
	// the backend service, advanced routing actions like Url rewrites and header
	// transformations are applied depending on additional settings specified in this
	// HttpRouteAction.
	// Structure is documented below.
	WeightedBackendServices []RouteRulesRouteActionWeightedBackendServicesInitParameters `json:"weightedBackendServices,omitempty" tf:"weighted_backend_services,omitempty"`
}

type RouteRulesRouteActionObservation struct {

	// The specification for allowing client side cross-origin requests. Please see W3C
	// Recommendation for Cross Origin Resource Sharing
	// Structure is documented below.
	CorsPolicy []RouteRulesRouteActionCorsPolicyObservation `json:"corsPolicy,omitempty" tf:"cors_policy,omitempty"`

	// The specification for fault injection introduced into traffic to test the
	// resiliency of clients to backend service failure. As part of fault injection,
	// when clients send requests to a backend service, delays can be introduced by
	// Loadbalancer on a percentage of requests before sending those request to the
	// backend service. Similarly requests from clients can be aborted by the
	// Loadbalancer for a percentage of requests. timeout and retry_policy will be
	// ignored by clients that are configured with a fault_injection_policy.
	// Structure is documented below.
	FaultInjectionPolicy []RouteRulesRouteActionFaultInjectionPolicyObservation `json:"faultInjectionPolicy,omitempty" tf:"fault_injection_policy,omitempty"`

	// Specifies the policy on how requests intended for the route's backends are
	// shadowed to a separate mirrored backend service. Loadbalancer does not wait for
	// responses from the shadow service. Prior to sending traffic to the shadow
	// service, the host / authority header is suffixed with -shadow.
	// Structure is documented below.
	RequestMirrorPolicy []RouteRulesRouteActionRequestMirrorPolicyObservation `json:"requestMirrorPolicy,omitempty" tf:"request_mirror_policy,omitempty"`

	// Specifies the retry policy associated with this route.
	// Structure is documented below.
	RetryPolicy []RouteRulesRouteActionRetryPolicyObservation `json:"retryPolicy,omitempty" tf:"retry_policy,omitempty"`

	// Specifies the timeout for the selected route. Timeout is computed from the time
	// the request is has been fully processed (i.e. end-of-stream) up until the
	// response has been completely processed. Timeout includes all retries. If not
	// specified, the default value is 15 seconds.
	// Structure is documented below.
	Timeout []RouteRulesRouteActionTimeoutObservation `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// The spec to modify the URL of the request, prior to forwarding the request to
	// the matched service
	// Structure is documented below.
	URLRewrite []RouteRulesRouteActionURLRewriteObservation `json:"urlRewrite,omitempty" tf:"url_rewrite,omitempty"`

	// A list of weighted backend services to send traffic to when a route match
	// occurs. The weights determine the fraction of traffic that flows to their
	// corresponding backend service. If all traffic needs to go to a single backend
	// service, there must be one  weightedBackendService with weight set to a non 0
	// number. Once a backendService is identified and before forwarding the request to
	// the backend service, advanced routing actions like Url rewrites and header
	// transformations are applied depending on additional settings specified in this
	// HttpRouteAction.
	// Structure is documented below.
	WeightedBackendServices []RouteRulesRouteActionWeightedBackendServicesObservation `json:"weightedBackendServices,omitempty" tf:"weighted_backend_services,omitempty"`
}

type RouteRulesRouteActionParameters struct {

	// The specification for allowing client side cross-origin requests. Please see W3C
	// Recommendation for Cross Origin Resource Sharing
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	CorsPolicy []RouteRulesRouteActionCorsPolicyParameters `json:"corsPolicy,omitempty" tf:"cors_policy,omitempty"`

	// The specification for fault injection introduced into traffic to test the
	// resiliency of clients to backend service failure. As part of fault injection,
	// when clients send requests to a backend service, delays can be introduced by
	// Loadbalancer on a percentage of requests before sending those request to the
	// backend service. Similarly requests from clients can be aborted by the
	// Loadbalancer for a percentage of requests. timeout and retry_policy will be
	// ignored by clients that are configured with a fault_injection_policy.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	FaultInjectionPolicy []RouteRulesRouteActionFaultInjectionPolicyParameters `json:"faultInjectionPolicy,omitempty" tf:"fault_injection_policy,omitempty"`

	// Specifies the policy on how requests intended for the route's backends are
	// shadowed to a separate mirrored backend service. Loadbalancer does not wait for
	// responses from the shadow service. Prior to sending traffic to the shadow
	// service, the host / authority header is suffixed with -shadow.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	RequestMirrorPolicy []RouteRulesRouteActionRequestMirrorPolicyParameters `json:"requestMirrorPolicy,omitempty" tf:"request_mirror_policy,omitempty"`

	// Specifies the retry policy associated with this route.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	RetryPolicy []RouteRulesRouteActionRetryPolicyParameters `json:"retryPolicy,omitempty" tf:"retry_policy,omitempty"`

	// Specifies the timeout for the selected route. Timeout is computed from the time
	// the request is has been fully processed (i.e. end-of-stream) up until the
	// response has been completely processed. Timeout includes all retries. If not
	// specified, the default value is 15 seconds.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Timeout []RouteRulesRouteActionTimeoutParameters `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// The spec to modify the URL of the request, prior to forwarding the request to
	// the matched service
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	URLRewrite []RouteRulesRouteActionURLRewriteParameters `json:"urlRewrite,omitempty" tf:"url_rewrite,omitempty"`

	// A list of weighted backend services to send traffic to when a route match
	// occurs. The weights determine the fraction of traffic that flows to their
	// corresponding backend service. If all traffic needs to go to a single backend
	// service, there must be one  weightedBackendService with weight set to a non 0
	// number. Once a backendService is identified and before forwarding the request to
	// the backend service, advanced routing actions like Url rewrites and header
	// transformations are applied depending on additional settings specified in this
	// HttpRouteAction.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	WeightedBackendServices []RouteRulesRouteActionWeightedBackendServicesParameters `json:"weightedBackendServices,omitempty" tf:"weighted_backend_services,omitempty"`
}

type RouteRulesRouteActionRequestMirrorPolicyInitParameters struct {

	// The default RegionBackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	BackendService *string `json:"backendService,omitempty" tf:"backend_service,omitempty"`
}

type RouteRulesRouteActionRequestMirrorPolicyObservation struct {

	// The default RegionBackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	BackendService *string `json:"backendService,omitempty" tf:"backend_service,omitempty"`
}

type RouteRulesRouteActionRequestMirrorPolicyParameters struct {

	// The default RegionBackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	// +kubebuilder:validation:Optional
	BackendService *string `json:"backendService" tf:"backend_service,omitempty"`
}

type RouteRulesRouteActionRetryPolicyInitParameters struct {

	// Specifies the allowed number retries. This number must be > 0.
	NumRetries *float64 `json:"numRetries,omitempty" tf:"num_retries,omitempty"`

	// Specifies a non-zero timeout per retry attempt.
	// Structure is documented below.
	PerTryTimeout []RouteActionRetryPolicyPerTryTimeoutInitParameters `json:"perTryTimeout,omitempty" tf:"per_try_timeout,omitempty"`

	// Specifies one or more conditions when this retry rule applies. Valid values are:
	RetryConditions []*string `json:"retryConditions,omitempty" tf:"retry_conditions,omitempty"`
}

type RouteRulesRouteActionRetryPolicyObservation struct {

	// Specifies the allowed number retries. This number must be > 0.
	NumRetries *float64 `json:"numRetries,omitempty" tf:"num_retries,omitempty"`

	// Specifies a non-zero timeout per retry attempt.
	// Structure is documented below.
	PerTryTimeout []RouteActionRetryPolicyPerTryTimeoutObservation `json:"perTryTimeout,omitempty" tf:"per_try_timeout,omitempty"`

	// Specifies one or more conditions when this retry rule applies. Valid values are:
	RetryConditions []*string `json:"retryConditions,omitempty" tf:"retry_conditions,omitempty"`
}

type RouteRulesRouteActionRetryPolicyParameters struct {

	// Specifies the allowed number retries. This number must be > 0.
	// +kubebuilder:validation:Optional
	NumRetries *float64 `json:"numRetries" tf:"num_retries,omitempty"`

	// Specifies a non-zero timeout per retry attempt.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	PerTryTimeout []RouteActionRetryPolicyPerTryTimeoutParameters `json:"perTryTimeout,omitempty" tf:"per_try_timeout,omitempty"`

	// Specifies one or more conditions when this retry rule applies. Valid values are:
	// +kubebuilder:validation:Optional
	RetryConditions []*string `json:"retryConditions,omitempty" tf:"retry_conditions,omitempty"`
}

type RouteRulesRouteActionTimeoutInitParameters struct {

	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	Nanos *float64 `json:"nanos,omitempty" tf:"nanos,omitempty"`

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds *string `json:"seconds,omitempty" tf:"seconds,omitempty"`
}

type RouteRulesRouteActionTimeoutObservation struct {

	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	Nanos *float64 `json:"nanos,omitempty" tf:"nanos,omitempty"`

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds *string `json:"seconds,omitempty" tf:"seconds,omitempty"`
}

type RouteRulesRouteActionTimeoutParameters struct {

	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	// +kubebuilder:validation:Optional
	Nanos *float64 `json:"nanos,omitempty" tf:"nanos,omitempty"`

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	// +kubebuilder:validation:Optional
	Seconds *string `json:"seconds" tf:"seconds,omitempty"`
}

type RouteRulesRouteActionURLRewriteInitParameters struct {

	// Prior to forwarding the request to the selected service, the request's host
	// header is replaced with contents of hostRewrite. The value must be between 1 and
	// 255 characters.
	HostRewrite *string `json:"hostRewrite,omitempty" tf:"host_rewrite,omitempty"`

	// Prior to forwarding the request to the selected backend service, the matching
	// portion of the request's path is replaced by pathPrefixRewrite. The value must
	// be between 1 and 1024 characters.
	PathPrefixRewrite *string `json:"pathPrefixRewrite,omitempty" tf:"path_prefix_rewrite,omitempty"`
}

type RouteRulesRouteActionURLRewriteObservation struct {

	// Prior to forwarding the request to the selected service, the request's host
	// header is replaced with contents of hostRewrite. The value must be between 1 and
	// 255 characters.
	HostRewrite *string `json:"hostRewrite,omitempty" tf:"host_rewrite,omitempty"`

	// Prior to forwarding the request to the selected backend service, the matching
	// portion of the request's path is replaced by pathPrefixRewrite. The value must
	// be between 1 and 1024 characters.
	PathPrefixRewrite *string `json:"pathPrefixRewrite,omitempty" tf:"path_prefix_rewrite,omitempty"`
}

type RouteRulesRouteActionURLRewriteParameters struct {

	// Prior to forwarding the request to the selected service, the request's host
	// header is replaced with contents of hostRewrite. The value must be between 1 and
	// 255 characters.
	// +kubebuilder:validation:Optional
	HostRewrite *string `json:"hostRewrite,omitempty" tf:"host_rewrite,omitempty"`

	// Prior to forwarding the request to the selected backend service, the matching
	// portion of the request's path is replaced by pathPrefixRewrite. The value must
	// be between 1 and 1024 characters.
	// +kubebuilder:validation:Optional
	PathPrefixRewrite *string `json:"pathPrefixRewrite,omitempty" tf:"path_prefix_rewrite,omitempty"`
}

type RouteRulesRouteActionWeightedBackendServicesInitParameters struct {

	// The default RegionBackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	BackendService *string `json:"backendService,omitempty" tf:"backend_service,omitempty"`

	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.
	// Structure is documented below.
	HeaderAction []RouteActionWeightedBackendServicesHeaderActionInitParameters `json:"headerAction,omitempty" tf:"header_action,omitempty"`

	// Specifies the fraction of traffic sent to backendService, computed as weight /
	// (sum of all weightedBackendService weights in routeAction) . The selection of a
	// backend service is determined only for new traffic. Once a user's request has
	// been directed to a backendService, subsequent requests will be sent to the same
	// backendService as determined by the BackendService's session affinity policy.
	// The value must be between 0 and 1000
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type RouteRulesRouteActionWeightedBackendServicesObservation struct {

	// The default RegionBackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	BackendService *string `json:"backendService,omitempty" tf:"backend_service,omitempty"`

	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.
	// Structure is documented below.
	HeaderAction []RouteActionWeightedBackendServicesHeaderActionObservation `json:"headerAction,omitempty" tf:"header_action,omitempty"`

	// Specifies the fraction of traffic sent to backendService, computed as weight /
	// (sum of all weightedBackendService weights in routeAction) . The selection of a
	// backend service is determined only for new traffic. Once a user's request has
	// been directed to a backendService, subsequent requests will be sent to the same
	// backendService as determined by the BackendService's session affinity policy.
	// The value must be between 0 and 1000
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type RouteRulesRouteActionWeightedBackendServicesParameters struct {

	// The default RegionBackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	// +kubebuilder:validation:Optional
	BackendService *string `json:"backendService" tf:"backend_service,omitempty"`

	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	HeaderAction []RouteActionWeightedBackendServicesHeaderActionParameters `json:"headerAction,omitempty" tf:"header_action,omitempty"`

	// Specifies the fraction of traffic sent to backendService, computed as weight /
	// (sum of all weightedBackendService weights in routeAction) . The selection of a
	// backend service is determined only for new traffic. Once a user's request has
	// been directed to a backendService, subsequent requests will be sent to the same
	// backendService as determined by the BackendService's session affinity policy.
	// The value must be between 0 and 1000
	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight" tf:"weight,omitempty"`
}

type RouteRulesURLRedirectInitParameters struct {

	// If set to true, the URL scheme in the redirected request is set to https.
	// If set to false, the URL scheme of the redirected request will remain the
	// same as that of the request. This must only be set for UrlMaps used in
	// TargetHttpProxys. Setting this true for TargetHttpsProxy is not
	// permitted. The default is set to false.
	HTTPSRedirect *bool `json:"httpsRedirect,omitempty" tf:"https_redirect,omitempty"`

	// The host that will be used in the redirect response instead of the one
	// that was supplied in the request. The value must be between 1 and 255
	// characters.
	HostRedirect *string `json:"hostRedirect,omitempty" tf:"host_redirect,omitempty"`

	// The path that will be used in the redirect response instead of the one
	// that was supplied in the request. pathRedirect cannot be supplied
	// together with prefixRedirect. Supply one alone or neither. If neither is
	// supplied, the path of the original request will be used for the redirect.
	// The value must be between 1 and 1024 characters.
	PathRedirect *string `json:"pathRedirect,omitempty" tf:"path_redirect,omitempty"`

	// The prefix that replaces the prefixMatch specified in the
	// HttpRouteRuleMatch, retaining the remaining portion of the URL before
	// redirecting the request. prefixRedirect cannot be supplied together with
	// pathRedirect. Supply one alone or neither. If neither is supplied, the
	// path of the original request will be used for the redirect. The value
	// must be between 1 and 1024 characters.
	PrefixRedirect *string `json:"prefixRedirect,omitempty" tf:"prefix_redirect,omitempty"`

	// The HTTP Status code to use for this RedirectAction. Supported values are:
	RedirectResponseCode *string `json:"redirectResponseCode,omitempty" tf:"redirect_response_code,omitempty"`

	// If set to true, any accompanying query portion of the original URL is
	// removed prior to redirecting the request. If set to false, the query
	// portion of the original URL is retained. The default value is false.
	StripQuery *bool `json:"stripQuery,omitempty" tf:"strip_query,omitempty"`
}

type RouteRulesURLRedirectObservation struct {

	// If set to true, the URL scheme in the redirected request is set to https.
	// If set to false, the URL scheme of the redirected request will remain the
	// same as that of the request. This must only be set for UrlMaps used in
	// TargetHttpProxys. Setting this true for TargetHttpsProxy is not
	// permitted. The default is set to false.
	HTTPSRedirect *bool `json:"httpsRedirect,omitempty" tf:"https_redirect,omitempty"`

	// The host that will be used in the redirect response instead of the one
	// that was supplied in the request. The value must be between 1 and 255
	// characters.
	HostRedirect *string `json:"hostRedirect,omitempty" tf:"host_redirect,omitempty"`

	// The path that will be used in the redirect response instead of the one
	// that was supplied in the request. pathRedirect cannot be supplied
	// together with prefixRedirect. Supply one alone or neither. If neither is
	// supplied, the path of the original request will be used for the redirect.
	// The value must be between 1 and 1024 characters.
	PathRedirect *string `json:"pathRedirect,omitempty" tf:"path_redirect,omitempty"`

	// The prefix that replaces the prefixMatch specified in the
	// HttpRouteRuleMatch, retaining the remaining portion of the URL before
	// redirecting the request. prefixRedirect cannot be supplied together with
	// pathRedirect. Supply one alone or neither. If neither is supplied, the
	// path of the original request will be used for the redirect. The value
	// must be between 1 and 1024 characters.
	PrefixRedirect *string `json:"prefixRedirect,omitempty" tf:"prefix_redirect,omitempty"`

	// The HTTP Status code to use for this RedirectAction. Supported values are:
	RedirectResponseCode *string `json:"redirectResponseCode,omitempty" tf:"redirect_response_code,omitempty"`

	// If set to true, any accompanying query portion of the original URL is
	// removed prior to redirecting the request. If set to false, the query
	// portion of the original URL is retained. The default value is false.
	StripQuery *bool `json:"stripQuery,omitempty" tf:"strip_query,omitempty"`
}

type RouteRulesURLRedirectParameters struct {

	// If set to true, the URL scheme in the redirected request is set to https.
	// If set to false, the URL scheme of the redirected request will remain the
	// same as that of the request. This must only be set for UrlMaps used in
	// TargetHttpProxys. Setting this true for TargetHttpsProxy is not
	// permitted. The default is set to false.
	// +kubebuilder:validation:Optional
	HTTPSRedirect *bool `json:"httpsRedirect,omitempty" tf:"https_redirect,omitempty"`

	// The host that will be used in the redirect response instead of the one
	// that was supplied in the request. The value must be between 1 and 255
	// characters.
	// +kubebuilder:validation:Optional
	HostRedirect *string `json:"hostRedirect,omitempty" tf:"host_redirect,omitempty"`

	// The path that will be used in the redirect response instead of the one
	// that was supplied in the request. pathRedirect cannot be supplied
	// together with prefixRedirect. Supply one alone or neither. If neither is
	// supplied, the path of the original request will be used for the redirect.
	// The value must be between 1 and 1024 characters.
	// +kubebuilder:validation:Optional
	PathRedirect *string `json:"pathRedirect,omitempty" tf:"path_redirect,omitempty"`

	// The prefix that replaces the prefixMatch specified in the
	// HttpRouteRuleMatch, retaining the remaining portion of the URL before
	// redirecting the request. prefixRedirect cannot be supplied together with
	// pathRedirect. Supply one alone or neither. If neither is supplied, the
	// path of the original request will be used for the redirect. The value
	// must be between 1 and 1024 characters.
	// +kubebuilder:validation:Optional
	PrefixRedirect *string `json:"prefixRedirect,omitempty" tf:"prefix_redirect,omitempty"`

	// The HTTP Status code to use for this RedirectAction. Supported values are:
	// +kubebuilder:validation:Optional
	RedirectResponseCode *string `json:"redirectResponseCode,omitempty" tf:"redirect_response_code,omitempty"`

	// If set to true, any accompanying query portion of the original URL is
	// removed prior to redirecting the request. If set to false, the query
	// portion of the original URL is retained. The default value is false.
	// +kubebuilder:validation:Optional
	StripQuery *bool `json:"stripQuery,omitempty" tf:"strip_query,omitempty"`
}

type TestInitParameters struct {

	// Description of this test case.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Host portion of the URL.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// Path portion of the URL.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// A reference to expected RegionBackendService resource the given URL should be mapped to.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.RegionBackendService
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// Reference to a RegionBackendService in compute to populate service.
	// +kubebuilder:validation:Optional
	ServiceRef *v1.Reference `json:"serviceRef,omitempty" tf:"-"`

	// Selector for a RegionBackendService in compute to populate service.
	// +kubebuilder:validation:Optional
	ServiceSelector *v1.Selector `json:"serviceSelector,omitempty" tf:"-"`
}

type TestObservation struct {

	// Description of this test case.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Host portion of the URL.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// Path portion of the URL.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// A reference to expected RegionBackendService resource the given URL should be mapped to.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`
}

type TestParameters struct {

	// Description of this test case.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Host portion of the URL.
	// +kubebuilder:validation:Optional
	Host *string `json:"host" tf:"host,omitempty"`

	// Path portion of the URL.
	// +kubebuilder:validation:Optional
	Path *string `json:"path" tf:"path,omitempty"`

	// A reference to expected RegionBackendService resource the given URL should be mapped to.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.RegionBackendService
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// Reference to a RegionBackendService in compute to populate service.
	// +kubebuilder:validation:Optional
	ServiceRef *v1.Reference `json:"serviceRef,omitempty" tf:"-"`

	// Selector for a RegionBackendService in compute to populate service.
	// +kubebuilder:validation:Optional
	ServiceSelector *v1.Selector `json:"serviceSelector,omitempty" tf:"-"`
}

type TimeoutInitParameters struct {

	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	Nanos *float64 `json:"nanos,omitempty" tf:"nanos,omitempty"`

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds *string `json:"seconds,omitempty" tf:"seconds,omitempty"`
}

type TimeoutObservation struct {

	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	Nanos *float64 `json:"nanos,omitempty" tf:"nanos,omitempty"`

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds *string `json:"seconds,omitempty" tf:"seconds,omitempty"`
}

type TimeoutParameters struct {

	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 seconds field and a positive
	// nanos field. Must be from 0 to 999,999,999 inclusive.
	// +kubebuilder:validation:Optional
	Nanos *float64 `json:"nanos,omitempty" tf:"nanos,omitempty"`

	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	// +kubebuilder:validation:Optional
	Seconds *string `json:"seconds,omitempty" tf:"seconds,omitempty"`
}

type URLRedirectInitParameters struct {

	// If set to true, the URL scheme in the redirected request is set to https.
	// If set to false, the URL scheme of the redirected request will remain the
	// same as that of the request. This must only be set for UrlMaps used in
	// TargetHttpProxys. Setting this true for TargetHttpsProxy is not
	// permitted. The default is set to false.
	HTTPSRedirect *bool `json:"httpsRedirect,omitempty" tf:"https_redirect,omitempty"`

	// The host that will be used in the redirect response instead of the one
	// that was supplied in the request. The value must be between 1 and 255
	// characters.
	HostRedirect *string `json:"hostRedirect,omitempty" tf:"host_redirect,omitempty"`

	// The path that will be used in the redirect response instead of the one
	// that was supplied in the request. pathRedirect cannot be supplied
	// together with prefixRedirect. Supply one alone or neither. If neither is
	// supplied, the path of the original request will be used for the redirect.
	// The value must be between 1 and 1024 characters.
	PathRedirect *string `json:"pathRedirect,omitempty" tf:"path_redirect,omitempty"`

	// The prefix that replaces the prefixMatch specified in the
	// HttpRouteRuleMatch, retaining the remaining portion of the URL before
	// redirecting the request. prefixRedirect cannot be supplied together with
	// pathRedirect. Supply one alone or neither. If neither is supplied, the
	// path of the original request will be used for the redirect. The value
	// must be between 1 and 1024 characters.
	PrefixRedirect *string `json:"prefixRedirect,omitempty" tf:"prefix_redirect,omitempty"`

	// The HTTP Status code to use for this RedirectAction. Supported values are:
	RedirectResponseCode *string `json:"redirectResponseCode,omitempty" tf:"redirect_response_code,omitempty"`

	// If set to true, any accompanying query portion of the original URL is
	// removed prior to redirecting the request. If set to false, the query
	// portion of the original URL is retained. The default value is false.
	StripQuery *bool `json:"stripQuery,omitempty" tf:"strip_query,omitempty"`
}

type URLRedirectObservation struct {

	// If set to true, the URL scheme in the redirected request is set to https.
	// If set to false, the URL scheme of the redirected request will remain the
	// same as that of the request. This must only be set for UrlMaps used in
	// TargetHttpProxys. Setting this true for TargetHttpsProxy is not
	// permitted. The default is set to false.
	HTTPSRedirect *bool `json:"httpsRedirect,omitempty" tf:"https_redirect,omitempty"`

	// The host that will be used in the redirect response instead of the one
	// that was supplied in the request. The value must be between 1 and 255
	// characters.
	HostRedirect *string `json:"hostRedirect,omitempty" tf:"host_redirect,omitempty"`

	// The path that will be used in the redirect response instead of the one
	// that was supplied in the request. pathRedirect cannot be supplied
	// together with prefixRedirect. Supply one alone or neither. If neither is
	// supplied, the path of the original request will be used for the redirect.
	// The value must be between 1 and 1024 characters.
	PathRedirect *string `json:"pathRedirect,omitempty" tf:"path_redirect,omitempty"`

	// The prefix that replaces the prefixMatch specified in the
	// HttpRouteRuleMatch, retaining the remaining portion of the URL before
	// redirecting the request. prefixRedirect cannot be supplied together with
	// pathRedirect. Supply one alone or neither. If neither is supplied, the
	// path of the original request will be used for the redirect. The value
	// must be between 1 and 1024 characters.
	PrefixRedirect *string `json:"prefixRedirect,omitempty" tf:"prefix_redirect,omitempty"`

	// The HTTP Status code to use for this RedirectAction. Supported values are:
	RedirectResponseCode *string `json:"redirectResponseCode,omitempty" tf:"redirect_response_code,omitempty"`

	// If set to true, any accompanying query portion of the original URL is
	// removed prior to redirecting the request. If set to false, the query
	// portion of the original URL is retained. The default value is false.
	StripQuery *bool `json:"stripQuery,omitempty" tf:"strip_query,omitempty"`
}

type URLRedirectParameters struct {

	// If set to true, the URL scheme in the redirected request is set to https.
	// If set to false, the URL scheme of the redirected request will remain the
	// same as that of the request. This must only be set for UrlMaps used in
	// TargetHttpProxys. Setting this true for TargetHttpsProxy is not
	// permitted. The default is set to false.
	// +kubebuilder:validation:Optional
	HTTPSRedirect *bool `json:"httpsRedirect,omitempty" tf:"https_redirect,omitempty"`

	// The host that will be used in the redirect response instead of the one
	// that was supplied in the request. The value must be between 1 and 255
	// characters.
	// +kubebuilder:validation:Optional
	HostRedirect *string `json:"hostRedirect,omitempty" tf:"host_redirect,omitempty"`

	// The path that will be used in the redirect response instead of the one
	// that was supplied in the request. pathRedirect cannot be supplied
	// together with prefixRedirect. Supply one alone or neither. If neither is
	// supplied, the path of the original request will be used for the redirect.
	// The value must be between 1 and 1024 characters.
	// +kubebuilder:validation:Optional
	PathRedirect *string `json:"pathRedirect,omitempty" tf:"path_redirect,omitempty"`

	// The prefix that replaces the prefixMatch specified in the
	// HttpRouteRuleMatch, retaining the remaining portion of the URL before
	// redirecting the request. prefixRedirect cannot be supplied together with
	// pathRedirect. Supply one alone or neither. If neither is supplied, the
	// path of the original request will be used for the redirect. The value
	// must be between 1 and 1024 characters.
	// +kubebuilder:validation:Optional
	PrefixRedirect *string `json:"prefixRedirect,omitempty" tf:"prefix_redirect,omitempty"`

	// The HTTP Status code to use for this RedirectAction. Supported values are:
	// +kubebuilder:validation:Optional
	RedirectResponseCode *string `json:"redirectResponseCode,omitempty" tf:"redirect_response_code,omitempty"`

	// If set to true, any accompanying query portion of the original URL is
	// removed prior to redirecting the request. If set to false, the query
	// portion of the original URL is retained. The default value is false.
	// +kubebuilder:validation:Optional
	StripQuery *bool `json:"stripQuery" tf:"strip_query,omitempty"`
}

type URLRewriteInitParameters struct {

	// Prior to forwarding the request to the selected service, the request's host
	// header is replaced with contents of hostRewrite. The value must be between 1 and
	// 255 characters.
	HostRewrite *string `json:"hostRewrite,omitempty" tf:"host_rewrite,omitempty"`

	// Prior to forwarding the request to the selected backend service, the matching
	// portion of the request's path is replaced by pathPrefixRewrite. The value must
	// be between 1 and 1024 characters.
	PathPrefixRewrite *string `json:"pathPrefixRewrite,omitempty" tf:"path_prefix_rewrite,omitempty"`
}

type URLRewriteObservation struct {

	// Prior to forwarding the request to the selected service, the request's host
	// header is replaced with contents of hostRewrite. The value must be between 1 and
	// 255 characters.
	HostRewrite *string `json:"hostRewrite,omitempty" tf:"host_rewrite,omitempty"`

	// Prior to forwarding the request to the selected backend service, the matching
	// portion of the request's path is replaced by pathPrefixRewrite. The value must
	// be between 1 and 1024 characters.
	PathPrefixRewrite *string `json:"pathPrefixRewrite,omitempty" tf:"path_prefix_rewrite,omitempty"`
}

type URLRewriteParameters struct {

	// Prior to forwarding the request to the selected service, the request's host
	// header is replaced with contents of hostRewrite. The value must be between 1 and
	// 255 characters.
	// +kubebuilder:validation:Optional
	HostRewrite *string `json:"hostRewrite,omitempty" tf:"host_rewrite,omitempty"`

	// Prior to forwarding the request to the selected backend service, the matching
	// portion of the request's path is replaced by pathPrefixRewrite. The value must
	// be between 1 and 1024 characters.
	// +kubebuilder:validation:Optional
	PathPrefixRewrite *string `json:"pathPrefixRewrite,omitempty" tf:"path_prefix_rewrite,omitempty"`
}

type WeightedBackendServicesHeaderActionInitParameters struct {

	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.
	// Structure is documented below.
	RequestHeadersToAdd []HeaderActionRequestHeadersToAddInitParameters `json:"requestHeadersToAdd,omitempty" tf:"request_headers_to_add,omitempty"`

	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	RequestHeadersToRemove []*string `json:"requestHeadersToRemove,omitempty" tf:"request_headers_to_remove,omitempty"`

	// Headers to add the response prior to sending the response back to the client.
	// Structure is documented below.
	ResponseHeadersToAdd []HeaderActionResponseHeadersToAddInitParameters `json:"responseHeadersToAdd,omitempty" tf:"response_headers_to_add,omitempty"`

	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	ResponseHeadersToRemove []*string `json:"responseHeadersToRemove,omitempty" tf:"response_headers_to_remove,omitempty"`
}

type WeightedBackendServicesHeaderActionObservation struct {

	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.
	// Structure is documented below.
	RequestHeadersToAdd []HeaderActionRequestHeadersToAddObservation `json:"requestHeadersToAdd,omitempty" tf:"request_headers_to_add,omitempty"`

	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	RequestHeadersToRemove []*string `json:"requestHeadersToRemove,omitempty" tf:"request_headers_to_remove,omitempty"`

	// Headers to add the response prior to sending the response back to the client.
	// Structure is documented below.
	ResponseHeadersToAdd []HeaderActionResponseHeadersToAddObservation `json:"responseHeadersToAdd,omitempty" tf:"response_headers_to_add,omitempty"`

	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	ResponseHeadersToRemove []*string `json:"responseHeadersToRemove,omitempty" tf:"response_headers_to_remove,omitempty"`
}

type WeightedBackendServicesHeaderActionParameters struct {

	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	RequestHeadersToAdd []HeaderActionRequestHeadersToAddParameters `json:"requestHeadersToAdd,omitempty" tf:"request_headers_to_add,omitempty"`

	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	// +kubebuilder:validation:Optional
	RequestHeadersToRemove []*string `json:"requestHeadersToRemove,omitempty" tf:"request_headers_to_remove,omitempty"`

	// Headers to add the response prior to sending the response back to the client.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	ResponseHeadersToAdd []HeaderActionResponseHeadersToAddParameters `json:"responseHeadersToAdd,omitempty" tf:"response_headers_to_add,omitempty"`

	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	// +kubebuilder:validation:Optional
	ResponseHeadersToRemove []*string `json:"responseHeadersToRemove,omitempty" tf:"response_headers_to_remove,omitempty"`
}

type WeightedBackendServicesHeaderActionRequestHeadersToAddInitParameters struct {

	// The name of the header.
	HeaderName *string `json:"headerName,omitempty" tf:"header_name,omitempty"`

	// The value of the header to add.
	HeaderValue *string `json:"headerValue,omitempty" tf:"header_value,omitempty"`

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace *bool `json:"replace,omitempty" tf:"replace,omitempty"`
}

type WeightedBackendServicesHeaderActionRequestHeadersToAddObservation struct {

	// The name of the header.
	HeaderName *string `json:"headerName,omitempty" tf:"header_name,omitempty"`

	// The value of the header to add.
	HeaderValue *string `json:"headerValue,omitempty" tf:"header_value,omitempty"`

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace *bool `json:"replace,omitempty" tf:"replace,omitempty"`
}

type WeightedBackendServicesHeaderActionRequestHeadersToAddParameters struct {

	// The name of the header.
	// +kubebuilder:validation:Optional
	HeaderName *string `json:"headerName" tf:"header_name,omitempty"`

	// The value of the header to add.
	// +kubebuilder:validation:Optional
	HeaderValue *string `json:"headerValue" tf:"header_value,omitempty"`

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	// +kubebuilder:validation:Optional
	Replace *bool `json:"replace" tf:"replace,omitempty"`
}

type WeightedBackendServicesHeaderActionResponseHeadersToAddInitParameters struct {

	// The name of the header.
	HeaderName *string `json:"headerName,omitempty" tf:"header_name,omitempty"`

	// The value of the header to add.
	HeaderValue *string `json:"headerValue,omitempty" tf:"header_value,omitempty"`

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace *bool `json:"replace,omitempty" tf:"replace,omitempty"`
}

type WeightedBackendServicesHeaderActionResponseHeadersToAddObservation struct {

	// The name of the header.
	HeaderName *string `json:"headerName,omitempty" tf:"header_name,omitempty"`

	// The value of the header to add.
	HeaderValue *string `json:"headerValue,omitempty" tf:"header_value,omitempty"`

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace *bool `json:"replace,omitempty" tf:"replace,omitempty"`
}

type WeightedBackendServicesHeaderActionResponseHeadersToAddParameters struct {

	// The name of the header.
	// +kubebuilder:validation:Optional
	HeaderName *string `json:"headerName" tf:"header_name,omitempty"`

	// The value of the header to add.
	// +kubebuilder:validation:Optional
	HeaderValue *string `json:"headerValue" tf:"header_value,omitempty"`

	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	// +kubebuilder:validation:Optional
	Replace *bool `json:"replace" tf:"replace,omitempty"`
}

type WeightedBackendServicesInitParameters struct {

	// The default RegionBackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.RegionBackendService
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	BackendService *string `json:"backendService,omitempty" tf:"backend_service,omitempty"`

	// Reference to a RegionBackendService in compute to populate backendService.
	// +kubebuilder:validation:Optional
	BackendServiceRef *v1.Reference `json:"backendServiceRef,omitempty" tf:"-"`

	// Selector for a RegionBackendService in compute to populate backendService.
	// +kubebuilder:validation:Optional
	BackendServiceSelector *v1.Selector `json:"backendServiceSelector,omitempty" tf:"-"`

	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.
	// Structure is documented below.
	HeaderAction []HeaderActionInitParameters `json:"headerAction,omitempty" tf:"header_action,omitempty"`

	// Specifies the fraction of traffic sent to backendService, computed as weight /
	// (sum of all weightedBackendService weights in routeAction) . The selection of a
	// backend service is determined only for new traffic. Once a user's request has
	// been directed to a backendService, subsequent requests will be sent to the same
	// backendService as determined by the BackendService's session affinity policy.
	// The value must be between 0 and 1000
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type WeightedBackendServicesObservation struct {

	// The default RegionBackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	BackendService *string `json:"backendService,omitempty" tf:"backend_service,omitempty"`

	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.
	// Structure is documented below.
	HeaderAction []HeaderActionObservation `json:"headerAction,omitempty" tf:"header_action,omitempty"`

	// Specifies the fraction of traffic sent to backendService, computed as weight /
	// (sum of all weightedBackendService weights in routeAction) . The selection of a
	// backend service is determined only for new traffic. Once a user's request has
	// been directed to a backendService, subsequent requests will be sent to the same
	// backendService as determined by the BackendService's session affinity policy.
	// The value must be between 0 and 1000
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type WeightedBackendServicesParameters struct {

	// The default RegionBackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.RegionBackendService
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	BackendService *string `json:"backendService,omitempty" tf:"backend_service,omitempty"`

	// Reference to a RegionBackendService in compute to populate backendService.
	// +kubebuilder:validation:Optional
	BackendServiceRef *v1.Reference `json:"backendServiceRef,omitempty" tf:"-"`

	// Selector for a RegionBackendService in compute to populate backendService.
	// +kubebuilder:validation:Optional
	BackendServiceSelector *v1.Selector `json:"backendServiceSelector,omitempty" tf:"-"`

	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	HeaderAction []HeaderActionParameters `json:"headerAction,omitempty" tf:"header_action,omitempty"`

	// Specifies the fraction of traffic sent to backendService, computed as weight /
	// (sum of all weightedBackendService weights in routeAction) . The selection of a
	// backend service is determined only for new traffic. Once a user's request has
	// been directed to a backendService, subsequent requests will be sent to the same
	// backendService as determined by the BackendService's session affinity policy.
	// The value must be between 0 and 1000
	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

// RegionURLMapSpec defines the desired state of RegionURLMap
type RegionURLMapSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RegionURLMapParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RegionURLMapInitParameters `json:"initProvider,omitempty"`
}

// RegionURLMapStatus defines the observed state of RegionURLMap.
type RegionURLMapStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RegionURLMapObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// RegionURLMap is the Schema for the RegionURLMaps API. UrlMaps are used to route requests to a backend service based on rules that you define for the host and path of an incoming URL.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type RegionURLMap struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RegionURLMapSpec   `json:"spec"`
	Status            RegionURLMapStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RegionURLMapList contains a list of RegionURLMaps
type RegionURLMapList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RegionURLMap `json:"items"`
}

// Repository type metadata.
var (
	RegionURLMap_Kind             = "RegionURLMap"
	RegionURLMap_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RegionURLMap_Kind}.String()
	RegionURLMap_KindAPIVersion   = RegionURLMap_Kind + "." + CRDGroupVersion.String()
	RegionURLMap_GroupVersionKind = CRDGroupVersion.WithKind(RegionURLMap_Kind)
)

func init() {
	SchemeBuilder.Register(&RegionURLMap{}, &RegionURLMapList{})
}
