// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RegionNetworkFirewallPolicyAssociationInitParameters struct {

	// The target that the firewall policy is attached to.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.Network
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	AttachmentTarget *string `json:"attachmentTarget,omitempty" tf:"attachment_target,omitempty"`

	// Reference to a Network in compute to populate attachmentTarget.
	// +kubebuilder:validation:Optional
	AttachmentTargetRef *v1.Reference `json:"attachmentTargetRef,omitempty" tf:"-"`

	// Selector for a Network in compute to populate attachmentTarget.
	// +kubebuilder:validation:Optional
	AttachmentTargetSelector *v1.Selector `json:"attachmentTargetSelector,omitempty" tf:"-"`

	// The project for the resource
	Project *string `json:"project,omitempty" tf:"project,omitempty"`
}

type RegionNetworkFirewallPolicyAssociationObservation struct {

	// The target that the firewall policy is attached to.
	AttachmentTarget *string `json:"attachmentTarget,omitempty" tf:"attachment_target,omitempty"`

	// The firewall policy ID of the association.
	FirewallPolicy *string `json:"firewallPolicy,omitempty" tf:"firewall_policy,omitempty"`

	// an identifier for the resource with format projects/{{project}}/regions/{{region}}/firewallPolicies/{{firewall_policy}}/associations/{{name}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The project for the resource
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The location of this resource.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The short name of the firewall policy of the association.
	ShortName *string `json:"shortName,omitempty" tf:"short_name,omitempty"`
}

type RegionNetworkFirewallPolicyAssociationParameters struct {

	// The target that the firewall policy is attached to.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.Network
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	AttachmentTarget *string `json:"attachmentTarget,omitempty" tf:"attachment_target,omitempty"`

	// Reference to a Network in compute to populate attachmentTarget.
	// +kubebuilder:validation:Optional
	AttachmentTargetRef *v1.Reference `json:"attachmentTargetRef,omitempty" tf:"-"`

	// Selector for a Network in compute to populate attachmentTarget.
	// +kubebuilder:validation:Optional
	AttachmentTargetSelector *v1.Selector `json:"attachmentTargetSelector,omitempty" tf:"-"`

	// The firewall policy ID of the association.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.RegionNetworkFirewallPolicy
	// +kubebuilder:validation:Optional
	FirewallPolicy *string `json:"firewallPolicy,omitempty" tf:"firewall_policy,omitempty"`

	// Reference to a RegionNetworkFirewallPolicy in compute to populate firewallPolicy.
	// +kubebuilder:validation:Optional
	FirewallPolicyRef *v1.Reference `json:"firewallPolicyRef,omitempty" tf:"-"`

	// Selector for a RegionNetworkFirewallPolicy in compute to populate firewallPolicy.
	// +kubebuilder:validation:Optional
	FirewallPolicySelector *v1.Selector `json:"firewallPolicySelector,omitempty" tf:"-"`

	// The project for the resource
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The location of this resource.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

// RegionNetworkFirewallPolicyAssociationSpec defines the desired state of RegionNetworkFirewallPolicyAssociation
type RegionNetworkFirewallPolicyAssociationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RegionNetworkFirewallPolicyAssociationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RegionNetworkFirewallPolicyAssociationInitParameters `json:"initProvider,omitempty"`
}

// RegionNetworkFirewallPolicyAssociationStatus defines the observed state of RegionNetworkFirewallPolicyAssociation.
type RegionNetworkFirewallPolicyAssociationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RegionNetworkFirewallPolicyAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// RegionNetworkFirewallPolicyAssociation is the Schema for the RegionNetworkFirewallPolicyAssociations API. The Compute NetworkFirewallPolicyAssociation resource
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type RegionNetworkFirewallPolicyAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RegionNetworkFirewallPolicyAssociationSpec   `json:"spec"`
	Status            RegionNetworkFirewallPolicyAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RegionNetworkFirewallPolicyAssociationList contains a list of RegionNetworkFirewallPolicyAssociations
type RegionNetworkFirewallPolicyAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RegionNetworkFirewallPolicyAssociation `json:"items"`
}

// Repository type metadata.
var (
	RegionNetworkFirewallPolicyAssociation_Kind             = "RegionNetworkFirewallPolicyAssociation"
	RegionNetworkFirewallPolicyAssociation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RegionNetworkFirewallPolicyAssociation_Kind}.String()
	RegionNetworkFirewallPolicyAssociation_KindAPIVersion   = RegionNetworkFirewallPolicyAssociation_Kind + "." + CRDGroupVersion.String()
	RegionNetworkFirewallPolicyAssociation_GroupVersionKind = CRDGroupVersion.WithKind(RegionNetworkFirewallPolicyAssociation_Kind)
)

func init() {
	SchemeBuilder.Register(&RegionNetworkFirewallPolicyAssociation{}, &RegionNetworkFirewallPolicyAssociationList{})
}
