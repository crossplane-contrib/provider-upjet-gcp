// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	common "github.com/upbound/provider-gcp/config/common"
	compute "github.com/upbound/provider-gcp/config/compute"
	client "sigs.k8s.io/controller-runtime/pkg/client"

	// ResolveReferences of this Address.
	apisresolver "github.com/upbound/provider-gcp/internal/apis"
)

func (mg *Address) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Network),
			Extract:      common.SelfLinkExtractor(),
			Reference:    mg.Spec.ForProvider.NetworkRef,
			Selector:     mg.Spec.ForProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Network")
	}
	mg.Spec.ForProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Subnetwork", "SubnetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Subnetwork),
			Extract:      common.SelfLinkExtractor(),
			Reference:    mg.Spec.ForProvider.SubnetworkRef,
			Selector:     mg.Spec.ForProvider.SubnetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Subnetwork")
	}
	mg.Spec.ForProvider.Subnetwork = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SubnetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Network),
			Extract:      common.SelfLinkExtractor(),
			Reference:    mg.Spec.InitProvider.NetworkRef,
			Selector:     mg.Spec.InitProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Network")
	}
	mg.Spec.InitProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Subnetwork", "SubnetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Subnetwork),
			Extract:      common.SelfLinkExtractor(),
			Reference:    mg.Spec.InitProvider.SubnetworkRef,
			Selector:     mg.Spec.InitProvider.SubnetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Subnetwork")
	}
	mg.Spec.InitProvider.Subnetwork = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SubnetworkRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this AttachedDisk.
func (mg *AttachedDisk) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Disk", "DiskList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Disk),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DiskRef,
			Selector:     mg.Spec.ForProvider.DiskSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Disk")
	}
	mg.Spec.ForProvider.Disk = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DiskRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Instance", "InstanceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Instance),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.InstanceRef,
			Selector:     mg.Spec.ForProvider.InstanceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Instance")
	}
	mg.Spec.ForProvider.Instance = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.InstanceRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Disk", "DiskList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Disk),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.DiskRef,
			Selector:     mg.Spec.InitProvider.DiskSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Disk")
	}
	mg.Spec.InitProvider.Disk = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DiskRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Instance", "InstanceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Instance),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.InstanceRef,
			Selector:     mg.Spec.InitProvider.InstanceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Instance")
	}
	mg.Spec.InitProvider.Instance = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.InstanceRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Autoscaler.
func (mg *Autoscaler) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "InstanceGroupManager", "InstanceGroupManagerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Target),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.TargetRef,
			Selector:     mg.Spec.ForProvider.TargetSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Target")
	}
	mg.Spec.ForProvider.Target = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TargetRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "InstanceGroupManager", "InstanceGroupManagerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Target),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.TargetRef,
			Selector:     mg.Spec.InitProvider.TargetSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Target")
	}
	mg.Spec.InitProvider.Target = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TargetRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this BackendBucket.
func (mg *BackendBucket) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("storage.gcp.upbound.io", "v1beta1", "Bucket", "BucketList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BucketName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.BucketNameRef,
			Selector:     mg.Spec.ForProvider.BucketNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.BucketName")
	}
	mg.Spec.ForProvider.BucketName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.BucketNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "SecurityPolicy", "SecurityPolicyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EdgeSecurityPolicy),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.EdgeSecurityPolicyRef,
			Selector:     mg.Spec.ForProvider.EdgeSecurityPolicySelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.EdgeSecurityPolicy")
	}
	mg.Spec.ForProvider.EdgeSecurityPolicy = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.EdgeSecurityPolicyRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.gcp.upbound.io", "v1beta1", "Bucket", "BucketList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BucketName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.BucketNameRef,
			Selector:     mg.Spec.InitProvider.BucketNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.BucketName")
	}
	mg.Spec.InitProvider.BucketName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.BucketNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "SecurityPolicy", "SecurityPolicyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.EdgeSecurityPolicy),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.EdgeSecurityPolicyRef,
			Selector:     mg.Spec.InitProvider.EdgeSecurityPolicySelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.EdgeSecurityPolicy")
	}
	mg.Spec.InitProvider.EdgeSecurityPolicy = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.EdgeSecurityPolicyRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this BackendBucketSignedURLKey.
func (mg *BackendBucketSignedURLKey) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "BackendBucket", "BackendBucketList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BackendBucket),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.BackendBucketRef,
			Selector:     mg.Spec.ForProvider.BackendBucketSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.BackendBucket")
	}
	mg.Spec.ForProvider.BackendBucket = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.BackendBucketRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "BackendBucket", "BackendBucketList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BackendBucket),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.BackendBucketRef,
			Selector:     mg.Spec.InitProvider.BackendBucketSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.BackendBucket")
	}
	mg.Spec.InitProvider.BackendBucket = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.BackendBucketRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this BackendService.
func (mg *BackendService) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Backend); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "InstanceGroupManager", "InstanceGroupManagerList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Backend[i3].Group),
				Extract:      compute.InstanceGroupExtractor(),
				Reference:    mg.Spec.ForProvider.Backend[i3].GroupRef,
				Selector:     mg.Spec.ForProvider.Backend[i3].GroupSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Backend[i3].Group")
		}
		mg.Spec.ForProvider.Backend[i3].Group = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Backend[i3].GroupRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "HealthCheck", "HealthCheckList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.HealthChecks),
			Extract:       common.SelfLinkExtractor(),
			References:    mg.Spec.ForProvider.HealthChecksRefs,
			Selector:      mg.Spec.ForProvider.HealthChecksSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.HealthChecks")
	}
	mg.Spec.ForProvider.HealthChecks = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.HealthChecksRefs = mrsp.ResolvedReferences

	for i3 := 0; i3 < len(mg.Spec.InitProvider.Backend); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "InstanceGroupManager", "InstanceGroupManagerList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Backend[i3].Group),
				Extract:      compute.InstanceGroupExtractor(),
				Reference:    mg.Spec.InitProvider.Backend[i3].GroupRef,
				Selector:     mg.Spec.InitProvider.Backend[i3].GroupSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Backend[i3].Group")
		}
		mg.Spec.InitProvider.Backend[i3].Group = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Backend[i3].GroupRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "HealthCheck", "HealthCheckList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.HealthChecks),
			Extract:       common.SelfLinkExtractor(),
			References:    mg.Spec.InitProvider.HealthChecksRefs,
			Selector:      mg.Spec.InitProvider.HealthChecksSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.HealthChecks")
	}
	mg.Spec.InitProvider.HealthChecks = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.HealthChecksRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this BackendServiceSignedURLKey.
func (mg *BackendServiceSignedURLKey) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "BackendService", "BackendServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BackendService),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.BackendServiceRef,
			Selector:     mg.Spec.ForProvider.BackendServiceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.BackendService")
	}
	mg.Spec.ForProvider.BackendService = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.BackendServiceRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "BackendService", "BackendServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BackendService),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.BackendServiceRef,
			Selector:     mg.Spec.InitProvider.BackendServiceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.BackendService")
	}
	mg.Spec.InitProvider.BackendService = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.BackendServiceRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Disk.
func (mg *Disk) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.AsyncPrimaryDisk); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Disk", "DiskList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AsyncPrimaryDisk[i3].Disk),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.AsyncPrimaryDisk[i3].DiskRef,
				Selector:     mg.Spec.ForProvider.AsyncPrimaryDisk[i3].DiskSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.AsyncPrimaryDisk[i3].Disk")
		}
		mg.Spec.ForProvider.AsyncPrimaryDisk[i3].Disk = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.AsyncPrimaryDisk[i3].DiskRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.AsyncPrimaryDisk); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Disk", "DiskList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.AsyncPrimaryDisk[i3].Disk),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.AsyncPrimaryDisk[i3].DiskRef,
				Selector:     mg.Spec.InitProvider.AsyncPrimaryDisk[i3].DiskSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.AsyncPrimaryDisk[i3].Disk")
		}
		mg.Spec.InitProvider.AsyncPrimaryDisk[i3].Disk = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.AsyncPrimaryDisk[i3].DiskRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this DiskIAMMember.
func (mg *DiskIAMMember) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Disk", "DiskList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Name),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.NameRef,
			Selector:     mg.Spec.ForProvider.NameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Name")
	}
	mg.Spec.ForProvider.Name = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Disk", "DiskList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Name),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.NameRef,
			Selector:     mg.Spec.InitProvider.NameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Name")
	}
	mg.Spec.InitProvider.Name = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DiskResourcePolicyAttachment.
func (mg *DiskResourcePolicyAttachment) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Disk", "DiskList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Disk),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.DiskRef,
			Selector:     mg.Spec.ForProvider.DiskSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Disk")
	}
	mg.Spec.ForProvider.Disk = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DiskRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "ResourcePolicy", "ResourcePolicyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Name),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.NameRef,
			Selector:     mg.Spec.ForProvider.NameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Name")
	}
	mg.Spec.ForProvider.Name = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Disk", "DiskList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Disk),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.DiskRef,
			Selector:     mg.Spec.InitProvider.DiskSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Disk")
	}
	mg.Spec.InitProvider.Disk = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DiskRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "ResourcePolicy", "ResourcePolicyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Name),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.NameRef,
			Selector:     mg.Spec.InitProvider.NameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Name")
	}
	mg.Spec.InitProvider.Name = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Firewall.
func (mg *Firewall) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Network),
			Extract:      common.SelfLinkExtractor(),
			Reference:    mg.Spec.ForProvider.NetworkRef,
			Selector:     mg.Spec.ForProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Network")
	}
	mg.Spec.ForProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Network),
			Extract:      common.SelfLinkExtractor(),
			Reference:    mg.Spec.InitProvider.NetworkRef,
			Selector:     mg.Spec.InitProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Network")
	}
	mg.Spec.InitProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NetworkRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this FirewallPolicyAssociation.
func (mg *FirewallPolicyAssociation) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "Folder", "FolderList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AttachmentTarget),
			Extract:      resource.ExtractParamPath("name", true),
			Reference:    mg.Spec.ForProvider.AttachmentTargetRef,
			Selector:     mg.Spec.ForProvider.AttachmentTargetSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AttachmentTarget")
	}
	mg.Spec.ForProvider.AttachmentTarget = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AttachmentTargetRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "FirewallPolicy", "FirewallPolicyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.FirewallPolicy),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.FirewallPolicyRef,
			Selector:     mg.Spec.ForProvider.FirewallPolicySelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.FirewallPolicy")
	}
	mg.Spec.ForProvider.FirewallPolicy = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.FirewallPolicyRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "Folder", "FolderList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.AttachmentTarget),
			Extract:      resource.ExtractParamPath("name", true),
			Reference:    mg.Spec.InitProvider.AttachmentTargetRef,
			Selector:     mg.Spec.InitProvider.AttachmentTargetSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.AttachmentTarget")
	}
	mg.Spec.InitProvider.AttachmentTarget = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.AttachmentTargetRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "FirewallPolicy", "FirewallPolicyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.FirewallPolicy),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.FirewallPolicyRef,
			Selector:     mg.Spec.InitProvider.FirewallPolicySelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.FirewallPolicy")
	}
	mg.Spec.InitProvider.FirewallPolicy = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.FirewallPolicyRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this FirewallPolicyRule.
func (mg *FirewallPolicyRule) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "FirewallPolicy", "FirewallPolicyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.FirewallPolicy),
			Extract:      resource.ExtractParamPath("name", true),
			Reference:    mg.Spec.ForProvider.FirewallPolicyRef,
			Selector:     mg.Spec.ForProvider.FirewallPolicySelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.FirewallPolicy")
	}
	mg.Spec.ForProvider.FirewallPolicy = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.FirewallPolicyRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "FirewallPolicy", "FirewallPolicyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.FirewallPolicy),
			Extract:      resource.ExtractParamPath("name", true),
			Reference:    mg.Spec.InitProvider.FirewallPolicyRef,
			Selector:     mg.Spec.InitProvider.FirewallPolicySelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.FirewallPolicy")
	}
	mg.Spec.InitProvider.FirewallPolicy = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.FirewallPolicyRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ForwardingRule.
func (mg *ForwardingRule) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RegionBackendService", "RegionBackendServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BackendService),
			Extract:      common.SelfLinkExtractor(),
			Reference:    mg.Spec.ForProvider.BackendServiceRef,
			Selector:     mg.Spec.ForProvider.BackendServiceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.BackendService")
	}
	mg.Spec.ForProvider.BackendService = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.BackendServiceRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Address", "AddressList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IPAddress),
			Extract:      common.SelfLinkExtractor(),
			Reference:    mg.Spec.ForProvider.IPAddressRef,
			Selector:     mg.Spec.ForProvider.IPAddressSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.IPAddress")
	}
	mg.Spec.ForProvider.IPAddress = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.IPAddressRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Network),
			Extract:      common.SelfLinkExtractor(),
			Reference:    mg.Spec.ForProvider.NetworkRef,
			Selector:     mg.Spec.ForProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Network")
	}
	mg.Spec.ForProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Subnetwork", "SubnetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Subnetwork),
			Extract:      common.SelfLinkExtractor(),
			Reference:    mg.Spec.ForProvider.SubnetworkRef,
			Selector:     mg.Spec.ForProvider.SubnetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Subnetwork")
	}
	mg.Spec.ForProvider.Subnetwork = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SubnetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RegionTargetHTTPProxy", "RegionTargetHTTPProxyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Target),
			Extract:      common.SelfLinkExtractor(),
			Reference:    mg.Spec.ForProvider.TargetRef,
			Selector:     mg.Spec.ForProvider.TargetSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Target")
	}
	mg.Spec.ForProvider.Target = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TargetRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RegionBackendService", "RegionBackendServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BackendService),
			Extract:      common.SelfLinkExtractor(),
			Reference:    mg.Spec.InitProvider.BackendServiceRef,
			Selector:     mg.Spec.InitProvider.BackendServiceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.BackendService")
	}
	mg.Spec.InitProvider.BackendService = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.BackendServiceRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Address", "AddressList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.IPAddress),
			Extract:      common.SelfLinkExtractor(),
			Reference:    mg.Spec.InitProvider.IPAddressRef,
			Selector:     mg.Spec.InitProvider.IPAddressSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.IPAddress")
	}
	mg.Spec.InitProvider.IPAddress = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.IPAddressRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Network),
			Extract:      common.SelfLinkExtractor(),
			Reference:    mg.Spec.InitProvider.NetworkRef,
			Selector:     mg.Spec.InitProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Network")
	}
	mg.Spec.InitProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Subnetwork", "SubnetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Subnetwork),
			Extract:      common.SelfLinkExtractor(),
			Reference:    mg.Spec.InitProvider.SubnetworkRef,
			Selector:     mg.Spec.InitProvider.SubnetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Subnetwork")
	}
	mg.Spec.InitProvider.Subnetwork = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SubnetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RegionTargetHTTPProxy", "RegionTargetHTTPProxyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Target),
			Extract:      common.SelfLinkExtractor(),
			Reference:    mg.Spec.InitProvider.TargetRef,
			Selector:     mg.Spec.InitProvider.TargetSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Target")
	}
	mg.Spec.InitProvider.Target = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TargetRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this GlobalAddress.
func (mg *GlobalAddress) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Network),
			Extract:      common.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.NetworkRef,
			Selector:     mg.Spec.ForProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Network")
	}
	mg.Spec.ForProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Network),
			Extract:      common.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.NetworkRef,
			Selector:     mg.Spec.InitProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Network")
	}
	mg.Spec.InitProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NetworkRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this GlobalForwardingRule.
func (mg *GlobalForwardingRule) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "GlobalAddress", "GlobalAddressList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IPAddress),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.IPAddressRef,
			Selector:     mg.Spec.ForProvider.IPAddressSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.IPAddress")
	}
	mg.Spec.ForProvider.IPAddress = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.IPAddressRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Network),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.NetworkRef,
			Selector:     mg.Spec.ForProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Network")
	}
	mg.Spec.ForProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Project),
			Extract:      resource.ExtractParamPath("project", false),
			Reference:    mg.Spec.ForProvider.ProjectRef,
			Selector:     mg.Spec.ForProvider.ProjectSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Project")
	}
	mg.Spec.ForProvider.Project = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Subnetwork", "SubnetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Subnetwork),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SubnetworkRef,
			Selector:     mg.Spec.ForProvider.SubnetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Subnetwork")
	}
	mg.Spec.ForProvider.Subnetwork = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SubnetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "TargetSSLProxy", "TargetSSLProxyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Target),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.TargetRef,
			Selector:     mg.Spec.ForProvider.TargetSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Target")
	}
	mg.Spec.ForProvider.Target = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TargetRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "GlobalAddress", "GlobalAddressList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.IPAddress),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.IPAddressRef,
			Selector:     mg.Spec.InitProvider.IPAddressSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.IPAddress")
	}
	mg.Spec.InitProvider.IPAddress = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.IPAddressRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Network),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.NetworkRef,
			Selector:     mg.Spec.InitProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Network")
	}
	mg.Spec.InitProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Project),
			Extract:      resource.ExtractParamPath("project", false),
			Reference:    mg.Spec.InitProvider.ProjectRef,
			Selector:     mg.Spec.InitProvider.ProjectSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Project")
	}
	mg.Spec.InitProvider.Project = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Subnetwork", "SubnetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Subnetwork),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.SubnetworkRef,
			Selector:     mg.Spec.InitProvider.SubnetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Subnetwork")
	}
	mg.Spec.InitProvider.Subnetwork = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SubnetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "TargetSSLProxy", "TargetSSLProxyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Target),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.TargetRef,
			Selector:     mg.Spec.InitProvider.TargetSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Target")
	}
	mg.Spec.InitProvider.Target = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TargetRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this GlobalNetworkEndpoint.
func (mg *GlobalNetworkEndpoint) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "GlobalNetworkEndpointGroup", "GlobalNetworkEndpointGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GlobalNetworkEndpointGroup),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.GlobalNetworkEndpointGroupRef,
			Selector:     mg.Spec.ForProvider.GlobalNetworkEndpointGroupSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.GlobalNetworkEndpointGroup")
	}
	mg.Spec.ForProvider.GlobalNetworkEndpointGroup = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.GlobalNetworkEndpointGroupRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "GlobalNetworkEndpointGroup", "GlobalNetworkEndpointGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.GlobalNetworkEndpointGroup),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.GlobalNetworkEndpointGroupRef,
			Selector:     mg.Spec.InitProvider.GlobalNetworkEndpointGroupSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.GlobalNetworkEndpointGroup")
	}
	mg.Spec.InitProvider.GlobalNetworkEndpointGroup = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.GlobalNetworkEndpointGroupRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this HaVPNGateway.
func (mg *HaVPNGateway) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Network),
			Extract:      common.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.NetworkRef,
			Selector:     mg.Spec.ForProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Network")
	}
	mg.Spec.ForProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.VPNInterfaces); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "InterconnectAttachment", "InterconnectAttachmentList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPNInterfaces[i3].InterconnectAttachment),
				Extract:      resource.ExtractParamPath("self_link", true),
				Reference:    mg.Spec.ForProvider.VPNInterfaces[i3].InterconnectAttachmentRef,
				Selector:     mg.Spec.ForProvider.VPNInterfaces[i3].InterconnectAttachmentSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.VPNInterfaces[i3].InterconnectAttachment")
		}
		mg.Spec.ForProvider.VPNInterfaces[i3].InterconnectAttachment = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.VPNInterfaces[i3].InterconnectAttachmentRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Network),
			Extract:      common.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.NetworkRef,
			Selector:     mg.Spec.InitProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Network")
	}
	mg.Spec.InitProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NetworkRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.VPNInterfaces); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "InterconnectAttachment", "InterconnectAttachmentList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VPNInterfaces[i3].InterconnectAttachment),
				Extract:      resource.ExtractParamPath("self_link", true),
				Reference:    mg.Spec.InitProvider.VPNInterfaces[i3].InterconnectAttachmentRef,
				Selector:     mg.Spec.InitProvider.VPNInterfaces[i3].InterconnectAttachmentSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.VPNInterfaces[i3].InterconnectAttachment")
		}
		mg.Spec.InitProvider.VPNInterfaces[i3].InterconnectAttachment = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.VPNInterfaces[i3].InterconnectAttachmentRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this ImageIAMMember.
func (mg *ImageIAMMember) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Image", "ImageList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Image),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ImageRef,
			Selector:     mg.Spec.ForProvider.ImageSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Image")
	}
	mg.Spec.ForProvider.Image = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ImageRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Image", "ImageList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Image),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ImageRef,
			Selector:     mg.Spec.InitProvider.ImageSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Image")
	}
	mg.Spec.InitProvider.Image = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ImageRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Instance.
func (mg *Instance) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.BootDisk); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.BootDisk[i3].InitializeParams); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Image", "ImageList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BootDisk[i3].InitializeParams[i4].Image),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.ForProvider.BootDisk[i3].InitializeParams[i4].ImageRef,
					Selector:     mg.Spec.ForProvider.BootDisk[i3].InitializeParams[i4].ImageSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.BootDisk[i3].InitializeParams[i4].Image")
			}
			mg.Spec.ForProvider.BootDisk[i3].InitializeParams[i4].Image = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.BootDisk[i3].InitializeParams[i4].ImageRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.NetworkInterface); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkInterface[i3].Network),
				Extract:      common.SelfLinkExtractor(),
				Reference:    mg.Spec.ForProvider.NetworkInterface[i3].NetworkRef,
				Selector:     mg.Spec.ForProvider.NetworkInterface[i3].NetworkSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.NetworkInterface[i3].Network")
		}
		mg.Spec.ForProvider.NetworkInterface[i3].Network = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.NetworkInterface[i3].NetworkRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.NetworkInterface); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Subnetwork", "SubnetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkInterface[i3].Subnetwork),
				Extract:      common.SelfLinkExtractor(),
				Reference:    mg.Spec.ForProvider.NetworkInterface[i3].SubnetworkRef,
				Selector:     mg.Spec.ForProvider.NetworkInterface[i3].SubnetworkSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.NetworkInterface[i3].Subnetwork")
		}
		mg.Spec.ForProvider.NetworkInterface[i3].Subnetwork = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.NetworkInterface[i3].SubnetworkRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.ServiceAccount); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "ServiceAccount", "ServiceAccountList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServiceAccount[i3].Email),
				Extract:      resource.ExtractParamPath("email", true),
				Reference:    mg.Spec.ForProvider.ServiceAccount[i3].EmailRef,
				Selector:     mg.Spec.ForProvider.ServiceAccount[i3].EmailSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ServiceAccount[i3].Email")
		}
		mg.Spec.ForProvider.ServiceAccount[i3].Email = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ServiceAccount[i3].EmailRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.BootDisk); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.BootDisk[i3].InitializeParams); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Image", "ImageList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BootDisk[i3].InitializeParams[i4].Image),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.InitProvider.BootDisk[i3].InitializeParams[i4].ImageRef,
					Selector:     mg.Spec.InitProvider.BootDisk[i3].InitializeParams[i4].ImageSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.BootDisk[i3].InitializeParams[i4].Image")
			}
			mg.Spec.InitProvider.BootDisk[i3].InitializeParams[i4].Image = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.BootDisk[i3].InitializeParams[i4].ImageRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.NetworkInterface); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NetworkInterface[i3].Network),
				Extract:      common.SelfLinkExtractor(),
				Reference:    mg.Spec.InitProvider.NetworkInterface[i3].NetworkRef,
				Selector:     mg.Spec.InitProvider.NetworkInterface[i3].NetworkSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.NetworkInterface[i3].Network")
		}
		mg.Spec.InitProvider.NetworkInterface[i3].Network = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.NetworkInterface[i3].NetworkRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.NetworkInterface); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Subnetwork", "SubnetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NetworkInterface[i3].Subnetwork),
				Extract:      common.SelfLinkExtractor(),
				Reference:    mg.Spec.InitProvider.NetworkInterface[i3].SubnetworkRef,
				Selector:     mg.Spec.InitProvider.NetworkInterface[i3].SubnetworkSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.NetworkInterface[i3].Subnetwork")
		}
		mg.Spec.InitProvider.NetworkInterface[i3].Subnetwork = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.NetworkInterface[i3].SubnetworkRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.ServiceAccount); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "ServiceAccount", "ServiceAccountList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ServiceAccount[i3].Email),
				Extract:      resource.ExtractParamPath("email", true),
				Reference:    mg.Spec.InitProvider.ServiceAccount[i3].EmailRef,
				Selector:     mg.Spec.InitProvider.ServiceAccount[i3].EmailSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ServiceAccount[i3].Email")
		}
		mg.Spec.InitProvider.ServiceAccount[i3].Email = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ServiceAccount[i3].EmailRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this InstanceFromTemplate.
func (mg *InstanceFromTemplate) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.NetworkInterface); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkInterface[i3].Network),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.NetworkInterface[i3].NetworkRef,
				Selector:     mg.Spec.ForProvider.NetworkInterface[i3].NetworkSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.NetworkInterface[i3].Network")
		}
		mg.Spec.ForProvider.NetworkInterface[i3].Network = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.NetworkInterface[i3].NetworkRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.NetworkInterface); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Subnetwork", "SubnetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkInterface[i3].Subnetwork),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.NetworkInterface[i3].SubnetworkRef,
				Selector:     mg.Spec.ForProvider.NetworkInterface[i3].SubnetworkSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.NetworkInterface[i3].Subnetwork")
		}
		mg.Spec.ForProvider.NetworkInterface[i3].Subnetwork = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.NetworkInterface[i3].SubnetworkRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "InstanceTemplate", "InstanceTemplateList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SourceInstanceTemplate),
			Extract:      common.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SourceInstanceTemplateRef,
			Selector:     mg.Spec.ForProvider.SourceInstanceTemplateSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SourceInstanceTemplate")
	}
	mg.Spec.ForProvider.SourceInstanceTemplate = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SourceInstanceTemplateRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.NetworkInterface); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NetworkInterface[i3].Network),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.NetworkInterface[i3].NetworkRef,
				Selector:     mg.Spec.InitProvider.NetworkInterface[i3].NetworkSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.NetworkInterface[i3].Network")
		}
		mg.Spec.InitProvider.NetworkInterface[i3].Network = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.NetworkInterface[i3].NetworkRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.NetworkInterface); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Subnetwork", "SubnetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NetworkInterface[i3].Subnetwork),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.NetworkInterface[i3].SubnetworkRef,
				Selector:     mg.Spec.InitProvider.NetworkInterface[i3].SubnetworkSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.NetworkInterface[i3].Subnetwork")
		}
		mg.Spec.InitProvider.NetworkInterface[i3].Subnetwork = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.NetworkInterface[i3].SubnetworkRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "InstanceTemplate", "InstanceTemplateList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SourceInstanceTemplate),
			Extract:      common.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.SourceInstanceTemplateRef,
			Selector:     mg.Spec.InitProvider.SourceInstanceTemplateSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SourceInstanceTemplate")
	}
	mg.Spec.InitProvider.SourceInstanceTemplate = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SourceInstanceTemplateRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this InstanceGroup.
func (mg *InstanceGroup) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Instance", "InstanceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.Instances),
			Extract:       resource.ExtractResourceID(),
			References:    mg.Spec.ForProvider.InstancesRefs,
			Selector:      mg.Spec.ForProvider.InstancesSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Instances")
	}
	mg.Spec.ForProvider.Instances = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.InstancesRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Network),
			Extract:      common.SelfLinkExtractor(),
			Reference:    mg.Spec.ForProvider.NetworkRef,
			Selector:     mg.Spec.ForProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Network")
	}
	mg.Spec.ForProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Instance", "InstanceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.Instances),
			Extract:       resource.ExtractResourceID(),
			References:    mg.Spec.InitProvider.InstancesRefs,
			Selector:      mg.Spec.InitProvider.InstancesSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Instances")
	}
	mg.Spec.InitProvider.Instances = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.InstancesRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Network),
			Extract:      common.SelfLinkExtractor(),
			Reference:    mg.Spec.InitProvider.NetworkRef,
			Selector:     mg.Spec.InitProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Network")
	}
	mg.Spec.InitProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NetworkRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this InstanceGroupManager.
func (mg *InstanceGroupManager) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.AutoHealingPolicies); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "HealthCheck", "HealthCheckList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AutoHealingPolicies[i3].HealthCheck),
				Extract:      common.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.AutoHealingPolicies[i3].HealthCheckRef,
				Selector:     mg.Spec.ForProvider.AutoHealingPolicies[i3].HealthCheckSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.AutoHealingPolicies[i3].HealthCheck")
		}
		mg.Spec.ForProvider.AutoHealingPolicies[i3].HealthCheck = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.AutoHealingPolicies[i3].HealthCheckRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "TargetPool", "TargetPoolList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.TargetPools),
			Extract:       common.SelfLinkExtractor(),
			References:    mg.Spec.ForProvider.TargetPoolsRefs,
			Selector:      mg.Spec.ForProvider.TargetPoolsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TargetPools")
	}
	mg.Spec.ForProvider.TargetPools = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.TargetPoolsRefs = mrsp.ResolvedReferences

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Version); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "InstanceTemplate", "InstanceTemplateList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Version[i3].InstanceTemplate),
				Extract:      common.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.Version[i3].InstanceTemplateRef,
				Selector:     mg.Spec.ForProvider.Version[i3].InstanceTemplateSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Version[i3].InstanceTemplate")
		}
		mg.Spec.ForProvider.Version[i3].InstanceTemplate = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Version[i3].InstanceTemplateRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.AutoHealingPolicies); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "HealthCheck", "HealthCheckList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.AutoHealingPolicies[i3].HealthCheck),
				Extract:      common.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.AutoHealingPolicies[i3].HealthCheckRef,
				Selector:     mg.Spec.InitProvider.AutoHealingPolicies[i3].HealthCheckSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.AutoHealingPolicies[i3].HealthCheck")
		}
		mg.Spec.InitProvider.AutoHealingPolicies[i3].HealthCheck = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.AutoHealingPolicies[i3].HealthCheckRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "TargetPool", "TargetPoolList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.TargetPools),
			Extract:       common.SelfLinkExtractor(),
			References:    mg.Spec.InitProvider.TargetPoolsRefs,
			Selector:      mg.Spec.InitProvider.TargetPoolsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.TargetPools")
	}
	mg.Spec.InitProvider.TargetPools = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.TargetPoolsRefs = mrsp.ResolvedReferences

	for i3 := 0; i3 < len(mg.Spec.InitProvider.Version); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "InstanceTemplate", "InstanceTemplateList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Version[i3].InstanceTemplate),
				Extract:      common.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.Version[i3].InstanceTemplateRef,
				Selector:     mg.Spec.InitProvider.Version[i3].InstanceTemplateSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Version[i3].InstanceTemplate")
		}
		mg.Spec.InitProvider.Version[i3].InstanceTemplate = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Version[i3].InstanceTemplateRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this InstanceIAMMember.
func (mg *InstanceIAMMember) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Instance", "InstanceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.InstanceName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.InstanceNameRef,
			Selector:     mg.Spec.ForProvider.InstanceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.InstanceName")
	}
	mg.Spec.ForProvider.InstanceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.InstanceNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Instance", "InstanceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.InstanceName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.InstanceNameRef,
			Selector:     mg.Spec.InitProvider.InstanceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.InstanceName")
	}
	mg.Spec.InitProvider.InstanceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.InstanceNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this InstanceTemplate.
func (mg *InstanceTemplate) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Disk); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Disk", "DiskList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Disk[i3].Source),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.Disk[i3].SourceRef,
				Selector:     mg.Spec.ForProvider.Disk[i3].SourceSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Disk[i3].Source")
		}
		mg.Spec.ForProvider.Disk[i3].Source = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Disk[i3].SourceRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.NetworkInterface); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkInterface[i3].Network),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.NetworkInterface[i3].NetworkRef,
				Selector:     mg.Spec.ForProvider.NetworkInterface[i3].NetworkSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.NetworkInterface[i3].Network")
		}
		mg.Spec.ForProvider.NetworkInterface[i3].Network = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.NetworkInterface[i3].NetworkRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.NetworkInterface); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Subnetwork", "SubnetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkInterface[i3].Subnetwork),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.NetworkInterface[i3].SubnetworkRef,
				Selector:     mg.Spec.ForProvider.NetworkInterface[i3].SubnetworkSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.NetworkInterface[i3].Subnetwork")
		}
		mg.Spec.ForProvider.NetworkInterface[i3].Subnetwork = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.NetworkInterface[i3].SubnetworkRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.ServiceAccount); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "ServiceAccount", "ServiceAccountList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServiceAccount[i3].Email),
				Extract:      resource.ExtractParamPath("email", true),
				Reference:    mg.Spec.ForProvider.ServiceAccount[i3].EmailRef,
				Selector:     mg.Spec.ForProvider.ServiceAccount[i3].EmailSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ServiceAccount[i3].Email")
		}
		mg.Spec.ForProvider.ServiceAccount[i3].Email = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ServiceAccount[i3].EmailRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Disk); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Disk", "DiskList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Disk[i3].Source),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.Disk[i3].SourceRef,
				Selector:     mg.Spec.InitProvider.Disk[i3].SourceSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Disk[i3].Source")
		}
		mg.Spec.InitProvider.Disk[i3].Source = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Disk[i3].SourceRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.NetworkInterface); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NetworkInterface[i3].Network),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.NetworkInterface[i3].NetworkRef,
				Selector:     mg.Spec.InitProvider.NetworkInterface[i3].NetworkSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.NetworkInterface[i3].Network")
		}
		mg.Spec.InitProvider.NetworkInterface[i3].Network = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.NetworkInterface[i3].NetworkRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.NetworkInterface); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Subnetwork", "SubnetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NetworkInterface[i3].Subnetwork),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.NetworkInterface[i3].SubnetworkRef,
				Selector:     mg.Spec.InitProvider.NetworkInterface[i3].SubnetworkSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.NetworkInterface[i3].Subnetwork")
		}
		mg.Spec.InitProvider.NetworkInterface[i3].Subnetwork = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.NetworkInterface[i3].SubnetworkRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.ServiceAccount); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "ServiceAccount", "ServiceAccountList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ServiceAccount[i3].Email),
				Extract:      resource.ExtractParamPath("email", true),
				Reference:    mg.Spec.InitProvider.ServiceAccount[i3].EmailRef,
				Selector:     mg.Spec.InitProvider.ServiceAccount[i3].EmailSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ServiceAccount[i3].Email")
		}
		mg.Spec.InitProvider.ServiceAccount[i3].Email = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ServiceAccount[i3].EmailRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this InterconnectAttachment.
func (mg *InterconnectAttachment) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Address", "AddressList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.IpsecInternalAddresses),
			Extract:       resource.ExtractParamPath("self_link", true),
			References:    mg.Spec.ForProvider.IpsecInternalAddressesRefs,
			Selector:      mg.Spec.ForProvider.IpsecInternalAddressesSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.IpsecInternalAddresses")
	}
	mg.Spec.ForProvider.IpsecInternalAddresses = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.IpsecInternalAddressesRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Router", "RouterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Router),
			Extract:      common.SelfLinkExtractor(),
			Reference:    mg.Spec.ForProvider.RouterRef,
			Selector:     mg.Spec.ForProvider.RouterSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Router")
	}
	mg.Spec.ForProvider.Router = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RouterRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Address", "AddressList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.IpsecInternalAddresses),
			Extract:       resource.ExtractParamPath("self_link", true),
			References:    mg.Spec.InitProvider.IpsecInternalAddressesRefs,
			Selector:      mg.Spec.InitProvider.IpsecInternalAddressesSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.IpsecInternalAddresses")
	}
	mg.Spec.InitProvider.IpsecInternalAddresses = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.IpsecInternalAddressesRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Router", "RouterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Router),
			Extract:      common.SelfLinkExtractor(),
			Reference:    mg.Spec.InitProvider.RouterRef,
			Selector:     mg.Spec.InitProvider.RouterSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Router")
	}
	mg.Spec.InitProvider.Router = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RouterRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this NetworkEndpoint.
func (mg *NetworkEndpoint) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Instance", "InstanceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Instance),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.InstanceRef,
			Selector:     mg.Spec.ForProvider.InstanceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Instance")
	}
	mg.Spec.ForProvider.Instance = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.InstanceRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "NetworkEndpointGroup", "NetworkEndpointGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkEndpointGroup),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.NetworkEndpointGroupRef,
			Selector:     mg.Spec.ForProvider.NetworkEndpointGroupSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NetworkEndpointGroup")
	}
	mg.Spec.ForProvider.NetworkEndpointGroup = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkEndpointGroupRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Instance", "InstanceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Instance),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.InstanceRef,
			Selector:     mg.Spec.InitProvider.InstanceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Instance")
	}
	mg.Spec.InitProvider.Instance = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.InstanceRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "NetworkEndpointGroup", "NetworkEndpointGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NetworkEndpointGroup),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.NetworkEndpointGroupRef,
			Selector:     mg.Spec.InitProvider.NetworkEndpointGroupSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.NetworkEndpointGroup")
	}
	mg.Spec.InitProvider.NetworkEndpointGroup = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NetworkEndpointGroupRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this NetworkEndpointGroup.
func (mg *NetworkEndpointGroup) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Network),
			Extract:      common.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.NetworkRef,
			Selector:     mg.Spec.ForProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Network")
	}
	mg.Spec.ForProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Subnetwork", "SubnetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Subnetwork),
			Extract:      common.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SubnetworkRef,
			Selector:     mg.Spec.ForProvider.SubnetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Subnetwork")
	}
	mg.Spec.ForProvider.Subnetwork = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SubnetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Network),
			Extract:      common.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.NetworkRef,
			Selector:     mg.Spec.InitProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Network")
	}
	mg.Spec.InitProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Subnetwork", "SubnetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Subnetwork),
			Extract:      common.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.SubnetworkRef,
			Selector:     mg.Spec.InitProvider.SubnetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Subnetwork")
	}
	mg.Spec.InitProvider.Subnetwork = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SubnetworkRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this NetworkFirewallPolicyAssociation.
func (mg *NetworkFirewallPolicyAssociation) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AttachmentTarget),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.AttachmentTargetRef,
			Selector:     mg.Spec.ForProvider.AttachmentTargetSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AttachmentTarget")
	}
	mg.Spec.ForProvider.AttachmentTarget = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AttachmentTargetRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "NetworkFirewallPolicy", "NetworkFirewallPolicyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.FirewallPolicy),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.FirewallPolicyRef,
			Selector:     mg.Spec.ForProvider.FirewallPolicySelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.FirewallPolicy")
	}
	mg.Spec.ForProvider.FirewallPolicy = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.FirewallPolicyRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.AttachmentTarget),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.AttachmentTargetRef,
			Selector:     mg.Spec.InitProvider.AttachmentTargetSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.AttachmentTarget")
	}
	mg.Spec.InitProvider.AttachmentTarget = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.AttachmentTargetRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this NetworkPeering.
func (mg *NetworkPeering) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Network),
			Extract:      resource.ExtractParamPath("self_link", true),
			Reference:    mg.Spec.ForProvider.NetworkRef,
			Selector:     mg.Spec.ForProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Network")
	}
	mg.Spec.ForProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PeerNetwork),
			Extract:      resource.ExtractParamPath("self_link", true),
			Reference:    mg.Spec.ForProvider.PeerNetworkRef,
			Selector:     mg.Spec.ForProvider.PeerNetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PeerNetwork")
	}
	mg.Spec.ForProvider.PeerNetwork = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PeerNetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PeerNetwork),
			Extract:      resource.ExtractParamPath("self_link", true),
			Reference:    mg.Spec.InitProvider.PeerNetworkRef,
			Selector:     mg.Spec.InitProvider.PeerNetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.PeerNetwork")
	}
	mg.Spec.InitProvider.PeerNetwork = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PeerNetworkRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this NetworkPeeringRoutesConfig.
func (mg *NetworkPeeringRoutesConfig) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Network),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.NetworkRef,
			Selector:     mg.Spec.ForProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Network")
	}
	mg.Spec.ForProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "NetworkPeering", "NetworkPeeringList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Peering),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.PeeringRef,
			Selector:     mg.Spec.ForProvider.PeeringSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Peering")
	}
	mg.Spec.ForProvider.Peering = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PeeringRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Network),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.NetworkRef,
			Selector:     mg.Spec.InitProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Network")
	}
	mg.Spec.InitProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "NetworkPeering", "NetworkPeeringList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Peering),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.PeeringRef,
			Selector:     mg.Spec.InitProvider.PeeringSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Peering")
	}
	mg.Spec.InitProvider.Peering = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PeeringRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this NodeGroup.
func (mg *NodeGroup) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "NodeTemplate", "NodeTemplateList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NodeTemplate),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.NodeTemplateRef,
			Selector:     mg.Spec.ForProvider.NodeTemplateSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NodeTemplate")
	}
	mg.Spec.ForProvider.NodeTemplate = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NodeTemplateRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.ShareSettings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.ShareSettings[i3].ProjectMap); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "Project", "ProjectList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ShareSettings[i3].ProjectMap[i4].ID),
					Extract:      resource.ExtractParamPath("project_id", false),
					Reference:    mg.Spec.ForProvider.ShareSettings[i3].ProjectMap[i4].IDRef,
					Selector:     mg.Spec.ForProvider.ShareSettings[i3].ProjectMap[i4].IDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.ShareSettings[i3].ProjectMap[i4].ID")
			}
			mg.Spec.ForProvider.ShareSettings[i3].ProjectMap[i4].ID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.ShareSettings[i3].ProjectMap[i4].IDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.ShareSettings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.ShareSettings[i3].ProjectMap); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "Project", "ProjectList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ShareSettings[i3].ProjectMap[i4].ProjectID),
					Extract:      resource.ExtractParamPath("project_id", false),
					Reference:    mg.Spec.ForProvider.ShareSettings[i3].ProjectMap[i4].ProjectIDRef,
					Selector:     mg.Spec.ForProvider.ShareSettings[i3].ProjectMap[i4].ProjectIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.ShareSettings[i3].ProjectMap[i4].ProjectID")
			}
			mg.Spec.ForProvider.ShareSettings[i3].ProjectMap[i4].ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.ShareSettings[i3].ProjectMap[i4].ProjectIDRef = rsp.ResolvedReference

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "NodeTemplate", "NodeTemplateList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NodeTemplate),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.NodeTemplateRef,
			Selector:     mg.Spec.InitProvider.NodeTemplateSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.NodeTemplate")
	}
	mg.Spec.InitProvider.NodeTemplate = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NodeTemplateRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.ShareSettings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.ShareSettings[i3].ProjectMap); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "Project", "ProjectList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ShareSettings[i3].ProjectMap[i4].ID),
					Extract:      resource.ExtractParamPath("project_id", false),
					Reference:    mg.Spec.InitProvider.ShareSettings[i3].ProjectMap[i4].IDRef,
					Selector:     mg.Spec.InitProvider.ShareSettings[i3].ProjectMap[i4].IDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.ShareSettings[i3].ProjectMap[i4].ID")
			}
			mg.Spec.InitProvider.ShareSettings[i3].ProjectMap[i4].ID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.ShareSettings[i3].ProjectMap[i4].IDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.ShareSettings); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.ShareSettings[i3].ProjectMap); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "Project", "ProjectList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ShareSettings[i3].ProjectMap[i4].ProjectID),
					Extract:      resource.ExtractParamPath("project_id", false),
					Reference:    mg.Spec.InitProvider.ShareSettings[i3].ProjectMap[i4].ProjectIDRef,
					Selector:     mg.Spec.InitProvider.ShareSettings[i3].ProjectMap[i4].ProjectIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.ShareSettings[i3].ProjectMap[i4].ProjectID")
			}
			mg.Spec.InitProvider.ShareSettings[i3].ProjectMap[i4].ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.ShareSettings[i3].ProjectMap[i4].ProjectIDRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this PacketMirroring.
func (mg *PacketMirroring) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.CollectorIlb); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "ForwardingRule", "ForwardingRuleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CollectorIlb[i3].URL),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.CollectorIlb[i3].URLRef,
				Selector:     mg.Spec.ForProvider.CollectorIlb[i3].URLSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.CollectorIlb[i3].URL")
		}
		mg.Spec.ForProvider.CollectorIlb[i3].URL = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.CollectorIlb[i3].URLRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.MirroredResources); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.MirroredResources[i3].Instances); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Instance", "InstanceList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.MirroredResources[i3].Instances[i4].URL),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.ForProvider.MirroredResources[i3].Instances[i4].URLRef,
					Selector:     mg.Spec.ForProvider.MirroredResources[i3].Instances[i4].URLSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.MirroredResources[i3].Instances[i4].URL")
			}
			mg.Spec.ForProvider.MirroredResources[i3].Instances[i4].URL = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.MirroredResources[i3].Instances[i4].URLRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Network); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Network[i3].URL),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.Network[i3].URLRef,
				Selector:     mg.Spec.ForProvider.Network[i3].URLSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Network[i3].URL")
		}
		mg.Spec.ForProvider.Network[i3].URL = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Network[i3].URLRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.CollectorIlb); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "ForwardingRule", "ForwardingRuleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CollectorIlb[i3].URL),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.CollectorIlb[i3].URLRef,
				Selector:     mg.Spec.InitProvider.CollectorIlb[i3].URLSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.CollectorIlb[i3].URL")
		}
		mg.Spec.InitProvider.CollectorIlb[i3].URL = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.CollectorIlb[i3].URLRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.MirroredResources); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.MirroredResources[i3].Instances); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Instance", "InstanceList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.MirroredResources[i3].Instances[i4].URL),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.InitProvider.MirroredResources[i3].Instances[i4].URLRef,
					Selector:     mg.Spec.InitProvider.MirroredResources[i3].Instances[i4].URLSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.MirroredResources[i3].Instances[i4].URL")
			}
			mg.Spec.InitProvider.MirroredResources[i3].Instances[i4].URL = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.MirroredResources[i3].Instances[i4].URLRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Network); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Network[i3].URL),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.Network[i3].URLRef,
				Selector:     mg.Spec.InitProvider.Network[i3].URLSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Network[i3].URL")
		}
		mg.Spec.InitProvider.Network[i3].URL = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Network[i3].URLRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this PerInstanceConfig.
func (mg *PerInstanceConfig) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "InstanceGroupManager", "InstanceGroupManagerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.InstanceGroupManager),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.InstanceGroupManagerRef,
			Selector:     mg.Spec.ForProvider.InstanceGroupManagerSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.InstanceGroupManager")
	}
	mg.Spec.ForProvider.InstanceGroupManager = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.InstanceGroupManagerRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.PreservedState); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.PreservedState[i3].Disk); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Disk", "DiskList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PreservedState[i3].Disk[i4].Source),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.ForProvider.PreservedState[i3].Disk[i4].SourceRef,
					Selector:     mg.Spec.ForProvider.PreservedState[i3].Disk[i4].SourceSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.PreservedState[i3].Disk[i4].Source")
			}
			mg.Spec.ForProvider.PreservedState[i3].Disk[i4].Source = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.PreservedState[i3].Disk[i4].SourceRef = rsp.ResolvedReference

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "InstanceGroupManager", "InstanceGroupManagerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Zone),
			Extract:      resource.ExtractParamPath("zone", false),
			Reference:    mg.Spec.ForProvider.ZoneRef,
			Selector:     mg.Spec.ForProvider.ZoneSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Zone")
	}
	mg.Spec.ForProvider.Zone = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ZoneRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "InstanceGroupManager", "InstanceGroupManagerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.InstanceGroupManager),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.InstanceGroupManagerRef,
			Selector:     mg.Spec.InitProvider.InstanceGroupManagerSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.InstanceGroupManager")
	}
	mg.Spec.InitProvider.InstanceGroupManager = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.InstanceGroupManagerRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.PreservedState); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.PreservedState[i3].Disk); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Disk", "DiskList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PreservedState[i3].Disk[i4].Source),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.InitProvider.PreservedState[i3].Disk[i4].SourceRef,
					Selector:     mg.Spec.InitProvider.PreservedState[i3].Disk[i4].SourceSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.PreservedState[i3].Disk[i4].Source")
			}
			mg.Spec.InitProvider.PreservedState[i3].Disk[i4].Source = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.PreservedState[i3].Disk[i4].SourceRef = rsp.ResolvedReference

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "InstanceGroupManager", "InstanceGroupManagerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Zone),
			Extract:      resource.ExtractParamPath("zone", false),
			Reference:    mg.Spec.InitProvider.ZoneRef,
			Selector:     mg.Spec.InitProvider.ZoneSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Zone")
	}
	mg.Spec.InitProvider.Zone = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ZoneRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RegionAutoscaler.
func (mg *RegionAutoscaler) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RegionInstanceGroupManager", "RegionInstanceGroupManagerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Target),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.TargetRef,
			Selector:     mg.Spec.ForProvider.TargetSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Target")
	}
	mg.Spec.ForProvider.Target = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TargetRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RegionInstanceGroupManager", "RegionInstanceGroupManagerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Target),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.TargetRef,
			Selector:     mg.Spec.InitProvider.TargetSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Target")
	}
	mg.Spec.InitProvider.Target = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TargetRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RegionBackendService.
func (mg *RegionBackendService) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Backend); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RegionInstanceGroupManager", "RegionInstanceGroupManagerList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Backend[i3].Group),
				Extract:      compute.InstanceGroupExtractor(),
				Reference:    mg.Spec.ForProvider.Backend[i3].GroupRef,
				Selector:     mg.Spec.ForProvider.Backend[i3].GroupSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Backend[i3].Group")
		}
		mg.Spec.ForProvider.Backend[i3].Group = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Backend[i3].GroupRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RegionHealthCheck", "RegionHealthCheckList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.HealthChecks),
			Extract:       common.SelfLinkExtractor(),
			References:    mg.Spec.ForProvider.HealthChecksRefs,
			Selector:      mg.Spec.ForProvider.HealthChecksSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.HealthChecks")
	}
	mg.Spec.ForProvider.HealthChecks = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.HealthChecksRefs = mrsp.ResolvedReferences

	for i3 := 0; i3 < len(mg.Spec.InitProvider.Backend); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RegionInstanceGroupManager", "RegionInstanceGroupManagerList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Backend[i3].Group),
				Extract:      compute.InstanceGroupExtractor(),
				Reference:    mg.Spec.InitProvider.Backend[i3].GroupRef,
				Selector:     mg.Spec.InitProvider.Backend[i3].GroupSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Backend[i3].Group")
		}
		mg.Spec.InitProvider.Backend[i3].Group = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Backend[i3].GroupRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RegionHealthCheck", "RegionHealthCheckList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.HealthChecks),
			Extract:       common.SelfLinkExtractor(),
			References:    mg.Spec.InitProvider.HealthChecksRefs,
			Selector:      mg.Spec.InitProvider.HealthChecksSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.HealthChecks")
	}
	mg.Spec.InitProvider.HealthChecks = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.HealthChecksRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this RegionDisk.
func (mg *RegionDisk) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.AsyncPrimaryDisk); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RegionDisk", "RegionDiskList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AsyncPrimaryDisk[i3].Disk),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.AsyncPrimaryDisk[i3].DiskRef,
				Selector:     mg.Spec.ForProvider.AsyncPrimaryDisk[i3].DiskSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.AsyncPrimaryDisk[i3].Disk")
		}
		mg.Spec.ForProvider.AsyncPrimaryDisk[i3].Disk = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.AsyncPrimaryDisk[i3].DiskRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Snapshot", "SnapshotList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Snapshot),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SnapshotRef,
			Selector:     mg.Spec.ForProvider.SnapshotSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Snapshot")
	}
	mg.Spec.ForProvider.Snapshot = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SnapshotRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.AsyncPrimaryDisk); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RegionDisk", "RegionDiskList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.AsyncPrimaryDisk[i3].Disk),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.AsyncPrimaryDisk[i3].DiskRef,
				Selector:     mg.Spec.InitProvider.AsyncPrimaryDisk[i3].DiskSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.AsyncPrimaryDisk[i3].Disk")
		}
		mg.Spec.InitProvider.AsyncPrimaryDisk[i3].Disk = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.AsyncPrimaryDisk[i3].DiskRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Snapshot", "SnapshotList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Snapshot),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.SnapshotRef,
			Selector:     mg.Spec.InitProvider.SnapshotSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Snapshot")
	}
	mg.Spec.InitProvider.Snapshot = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SnapshotRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RegionDiskIAMMember.
func (mg *RegionDiskIAMMember) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RegionDisk", "RegionDiskList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Name),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.NameRef,
			Selector:     mg.Spec.ForProvider.NameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Name")
	}
	mg.Spec.ForProvider.Name = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RegionDisk", "RegionDiskList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Name),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.NameRef,
			Selector:     mg.Spec.InitProvider.NameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Name")
	}
	mg.Spec.InitProvider.Name = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RegionDiskResourcePolicyAttachment.
func (mg *RegionDiskResourcePolicyAttachment) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionDisk", "RegionDiskList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Disk),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.DiskRef,
			Selector:     mg.Spec.ForProvider.DiskSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Disk")
	}
	mg.Spec.ForProvider.Disk = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DiskRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "ResourcePolicy", "ResourcePolicyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Name),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.NameRef,
			Selector:     mg.Spec.ForProvider.NameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Name")
	}
	mg.Spec.ForProvider.Name = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionDisk", "RegionDiskList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Disk),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.DiskRef,
			Selector:     mg.Spec.InitProvider.DiskSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Disk")
	}
	mg.Spec.InitProvider.Disk = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DiskRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "ResourcePolicy", "ResourcePolicyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Name),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.NameRef,
			Selector:     mg.Spec.InitProvider.NameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Name")
	}
	mg.Spec.InitProvider.Name = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RegionInstanceGroupManager.
func (mg *RegionInstanceGroupManager) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.AutoHealingPolicies); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "HealthCheck", "HealthCheckList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AutoHealingPolicies[i3].HealthCheck),
				Extract:      common.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.AutoHealingPolicies[i3].HealthCheckRef,
				Selector:     mg.Spec.ForProvider.AutoHealingPolicies[i3].HealthCheckSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.AutoHealingPolicies[i3].HealthCheck")
		}
		mg.Spec.ForProvider.AutoHealingPolicies[i3].HealthCheck = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.AutoHealingPolicies[i3].HealthCheckRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "TargetPool", "TargetPoolList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.TargetPools),
			Extract:       common.SelfLinkExtractor(),
			References:    mg.Spec.ForProvider.TargetPoolsRefs,
			Selector:      mg.Spec.ForProvider.TargetPoolsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TargetPools")
	}
	mg.Spec.ForProvider.TargetPools = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.TargetPoolsRefs = mrsp.ResolvedReferences

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Version); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "InstanceTemplate", "InstanceTemplateList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Version[i3].InstanceTemplate),
				Extract:      common.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.Version[i3].InstanceTemplateRef,
				Selector:     mg.Spec.ForProvider.Version[i3].InstanceTemplateSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Version[i3].InstanceTemplate")
		}
		mg.Spec.ForProvider.Version[i3].InstanceTemplate = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Version[i3].InstanceTemplateRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.AutoHealingPolicies); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "HealthCheck", "HealthCheckList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.AutoHealingPolicies[i3].HealthCheck),
				Extract:      common.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.AutoHealingPolicies[i3].HealthCheckRef,
				Selector:     mg.Spec.InitProvider.AutoHealingPolicies[i3].HealthCheckSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.AutoHealingPolicies[i3].HealthCheck")
		}
		mg.Spec.InitProvider.AutoHealingPolicies[i3].HealthCheck = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.AutoHealingPolicies[i3].HealthCheckRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "TargetPool", "TargetPoolList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.TargetPools),
			Extract:       common.SelfLinkExtractor(),
			References:    mg.Spec.InitProvider.TargetPoolsRefs,
			Selector:      mg.Spec.InitProvider.TargetPoolsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.TargetPools")
	}
	mg.Spec.InitProvider.TargetPools = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.TargetPoolsRefs = mrsp.ResolvedReferences

	for i3 := 0; i3 < len(mg.Spec.InitProvider.Version); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "InstanceTemplate", "InstanceTemplateList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Version[i3].InstanceTemplate),
				Extract:      common.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.Version[i3].InstanceTemplateRef,
				Selector:     mg.Spec.InitProvider.Version[i3].InstanceTemplateSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Version[i3].InstanceTemplate")
		}
		mg.Spec.InitProvider.Version[i3].InstanceTemplate = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Version[i3].InstanceTemplateRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this RegionNetworkEndpoint.
func (mg *RegionNetworkEndpoint) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionNetworkEndpointGroup", "RegionNetworkEndpointGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RegionNetworkEndpointGroup),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.RegionNetworkEndpointGroupRef,
			Selector:     mg.Spec.ForProvider.RegionNetworkEndpointGroupSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RegionNetworkEndpointGroup")
	}
	mg.Spec.ForProvider.RegionNetworkEndpointGroup = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RegionNetworkEndpointGroupRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionNetworkEndpointGroup", "RegionNetworkEndpointGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RegionNetworkEndpointGroup),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.RegionNetworkEndpointGroupRef,
			Selector:     mg.Spec.InitProvider.RegionNetworkEndpointGroupSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.RegionNetworkEndpointGroup")
	}
	mg.Spec.InitProvider.RegionNetworkEndpointGroup = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RegionNetworkEndpointGroupRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RegionNetworkEndpointGroup.
func (mg *RegionNetworkEndpointGroup) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.CloudFunction); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("cloudfunctions.gcp.upbound.io", "v1beta1", "Function", "FunctionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CloudFunction[i3].Function),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.CloudFunction[i3].FunctionRef,
				Selector:     mg.Spec.ForProvider.CloudFunction[i3].FunctionSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.CloudFunction[i3].Function")
		}
		mg.Spec.ForProvider.CloudFunction[i3].Function = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.CloudFunction[i3].FunctionRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.CloudRun); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("cloudrun.gcp.upbound.io", "v1beta1", "Service", "ServiceList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CloudRun[i3].Service),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.CloudRun[i3].ServiceRef,
				Selector:     mg.Spec.ForProvider.CloudRun[i3].ServiceSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.CloudRun[i3].Service")
		}
		mg.Spec.ForProvider.CloudRun[i3].Service = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.CloudRun[i3].ServiceRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Network),
			Extract:      resource.ExtractParamPath("self_link", true),
			Reference:    mg.Spec.ForProvider.NetworkRef,
			Selector:     mg.Spec.ForProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Network")
	}
	mg.Spec.ForProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "ServiceAttachment", "ServiceAttachmentList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PscTargetService),
			Extract:      resource.ExtractParamPath("self_link", true),
			Reference:    mg.Spec.ForProvider.PscTargetServiceRef,
			Selector:     mg.Spec.ForProvider.PscTargetServiceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PscTargetService")
	}
	mg.Spec.ForProvider.PscTargetService = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PscTargetServiceRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Subnetwork", "SubnetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Subnetwork),
			Extract:      resource.ExtractParamPath("self_link", true),
			Reference:    mg.Spec.ForProvider.SubnetworkRef,
			Selector:     mg.Spec.ForProvider.SubnetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Subnetwork")
	}
	mg.Spec.ForProvider.Subnetwork = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SubnetworkRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.CloudFunction); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("cloudfunctions.gcp.upbound.io", "v1beta1", "Function", "FunctionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CloudFunction[i3].Function),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.CloudFunction[i3].FunctionRef,
				Selector:     mg.Spec.InitProvider.CloudFunction[i3].FunctionSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.CloudFunction[i3].Function")
		}
		mg.Spec.InitProvider.CloudFunction[i3].Function = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.CloudFunction[i3].FunctionRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.CloudRun); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("cloudrun.gcp.upbound.io", "v1beta1", "Service", "ServiceList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CloudRun[i3].Service),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.CloudRun[i3].ServiceRef,
				Selector:     mg.Spec.InitProvider.CloudRun[i3].ServiceSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.CloudRun[i3].Service")
		}
		mg.Spec.InitProvider.CloudRun[i3].Service = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.CloudRun[i3].ServiceRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Network),
			Extract:      resource.ExtractParamPath("self_link", true),
			Reference:    mg.Spec.InitProvider.NetworkRef,
			Selector:     mg.Spec.InitProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Network")
	}
	mg.Spec.InitProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "ServiceAttachment", "ServiceAttachmentList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PscTargetService),
			Extract:      resource.ExtractParamPath("self_link", true),
			Reference:    mg.Spec.InitProvider.PscTargetServiceRef,
			Selector:     mg.Spec.InitProvider.PscTargetServiceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.PscTargetService")
	}
	mg.Spec.InitProvider.PscTargetService = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PscTargetServiceRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Subnetwork", "SubnetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Subnetwork),
			Extract:      resource.ExtractParamPath("self_link", true),
			Reference:    mg.Spec.InitProvider.SubnetworkRef,
			Selector:     mg.Spec.InitProvider.SubnetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Subnetwork")
	}
	mg.Spec.InitProvider.Subnetwork = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SubnetworkRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RegionNetworkFirewallPolicyAssociation.
func (mg *RegionNetworkFirewallPolicyAssociation) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AttachmentTarget),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.AttachmentTargetRef,
			Selector:     mg.Spec.ForProvider.AttachmentTargetSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AttachmentTarget")
	}
	mg.Spec.ForProvider.AttachmentTarget = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AttachmentTargetRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RegionNetworkFirewallPolicy", "RegionNetworkFirewallPolicyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.FirewallPolicy),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.FirewallPolicyRef,
			Selector:     mg.Spec.ForProvider.FirewallPolicySelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.FirewallPolicy")
	}
	mg.Spec.ForProvider.FirewallPolicy = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.FirewallPolicyRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.AttachmentTarget),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.AttachmentTargetRef,
			Selector:     mg.Spec.InitProvider.AttachmentTargetSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.AttachmentTarget")
	}
	mg.Spec.InitProvider.AttachmentTarget = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.AttachmentTargetRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RegionPerInstanceConfig.
func (mg *RegionPerInstanceConfig) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.PreservedState); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.PreservedState[i3].Disk); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Disk", "DiskList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PreservedState[i3].Disk[i4].Source),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.ForProvider.PreservedState[i3].Disk[i4].SourceRef,
					Selector:     mg.Spec.ForProvider.PreservedState[i3].Disk[i4].SourceSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.PreservedState[i3].Disk[i4].Source")
			}
			mg.Spec.ForProvider.PreservedState[i3].Disk[i4].Source = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.PreservedState[i3].Disk[i4].SourceRef = rsp.ResolvedReference

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RegionInstanceGroupManager", "RegionInstanceGroupManagerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Region),
			Extract:      resource.ExtractParamPath("region", false),
			Reference:    mg.Spec.ForProvider.RegionRef,
			Selector:     mg.Spec.ForProvider.RegionSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Region")
	}
	mg.Spec.ForProvider.Region = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RegionRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RegionInstanceGroupManager", "RegionInstanceGroupManagerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RegionInstanceGroupManager),
			Extract:      resource.ExtractParamPath("name", false),
			Reference:    mg.Spec.ForProvider.RegionInstanceGroupManagerRef,
			Selector:     mg.Spec.ForProvider.RegionInstanceGroupManagerSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RegionInstanceGroupManager")
	}
	mg.Spec.ForProvider.RegionInstanceGroupManager = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RegionInstanceGroupManagerRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.PreservedState); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.PreservedState[i3].Disk); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Disk", "DiskList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PreservedState[i3].Disk[i4].Source),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.InitProvider.PreservedState[i3].Disk[i4].SourceRef,
					Selector:     mg.Spec.InitProvider.PreservedState[i3].Disk[i4].SourceSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.PreservedState[i3].Disk[i4].Source")
			}
			mg.Spec.InitProvider.PreservedState[i3].Disk[i4].Source = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.PreservedState[i3].Disk[i4].SourceRef = rsp.ResolvedReference

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RegionInstanceGroupManager", "RegionInstanceGroupManagerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Region),
			Extract:      resource.ExtractParamPath("region", false),
			Reference:    mg.Spec.InitProvider.RegionRef,
			Selector:     mg.Spec.InitProvider.RegionSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Region")
	}
	mg.Spec.InitProvider.Region = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RegionRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RegionInstanceGroupManager", "RegionInstanceGroupManagerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RegionInstanceGroupManager),
			Extract:      resource.ExtractParamPath("name", false),
			Reference:    mg.Spec.InitProvider.RegionInstanceGroupManagerRef,
			Selector:     mg.Spec.InitProvider.RegionInstanceGroupManagerSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.RegionInstanceGroupManager")
	}
	mg.Spec.InitProvider.RegionInstanceGroupManager = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RegionInstanceGroupManagerRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RegionTargetHTTPProxy.
func (mg *RegionTargetHTTPProxy) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionURLMap", "RegionURLMapList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.URLMap),
			Extract:      common.SelfLinkExtractor(),
			Reference:    mg.Spec.ForProvider.URLMapRef,
			Selector:     mg.Spec.ForProvider.URLMapSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.URLMap")
	}
	mg.Spec.ForProvider.URLMap = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.URLMapRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionURLMap", "RegionURLMapList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.URLMap),
			Extract:      common.SelfLinkExtractor(),
			Reference:    mg.Spec.InitProvider.URLMapRef,
			Selector:     mg.Spec.InitProvider.URLMapSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.URLMap")
	}
	mg.Spec.InitProvider.URLMap = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.URLMapRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RegionTargetHTTPSProxy.
func (mg *RegionTargetHTTPSProxy) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RegionSSLCertificate", "RegionSSLCertificateList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.SSLCertificates),
			Extract:       reference.ExternalName(),
			References:    mg.Spec.ForProvider.SSLCertificatesRefs,
			Selector:      mg.Spec.ForProvider.SSLCertificatesSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SSLCertificates")
	}
	mg.Spec.ForProvider.SSLCertificates = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.SSLCertificatesRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionURLMap", "RegionURLMapList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.URLMap),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.URLMapRef,
			Selector:     mg.Spec.ForProvider.URLMapSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.URLMap")
	}
	mg.Spec.ForProvider.URLMap = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.URLMapRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RegionSSLCertificate", "RegionSSLCertificateList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.SSLCertificates),
			Extract:       reference.ExternalName(),
			References:    mg.Spec.InitProvider.SSLCertificatesRefs,
			Selector:      mg.Spec.InitProvider.SSLCertificatesSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SSLCertificates")
	}
	mg.Spec.InitProvider.SSLCertificates = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.SSLCertificatesRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionURLMap", "RegionURLMapList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.URLMap),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.URLMapRef,
			Selector:     mg.Spec.InitProvider.URLMapSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.URLMap")
	}
	mg.Spec.InitProvider.URLMap = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.URLMapRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RegionTargetTCPProxy.
func (mg *RegionTargetTCPProxy) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionBackendService", "RegionBackendServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BackendService),
			Extract:      common.SelfLinkExtractor(),
			Reference:    mg.Spec.ForProvider.BackendServiceRef,
			Selector:     mg.Spec.ForProvider.BackendServiceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.BackendService")
	}
	mg.Spec.ForProvider.BackendService = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.BackendServiceRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionBackendService", "RegionBackendServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BackendService),
			Extract:      common.SelfLinkExtractor(),
			Reference:    mg.Spec.InitProvider.BackendServiceRef,
			Selector:     mg.Spec.InitProvider.BackendServiceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.BackendService")
	}
	mg.Spec.InitProvider.BackendService = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.BackendServiceRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RegionURLMap.
func (mg *RegionURLMap) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.DefaultRouteAction); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.DefaultRouteAction[i3].RequestMirrorPolicy); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RegionBackendService", "RegionBackendServiceList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DefaultRouteAction[i3].RequestMirrorPolicy[i4].BackendService),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.ForProvider.DefaultRouteAction[i3].RequestMirrorPolicy[i4].BackendServiceRef,
					Selector:     mg.Spec.ForProvider.DefaultRouteAction[i3].RequestMirrorPolicy[i4].BackendServiceSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.DefaultRouteAction[i3].RequestMirrorPolicy[i4].BackendService")
			}
			mg.Spec.ForProvider.DefaultRouteAction[i3].RequestMirrorPolicy[i4].BackendService = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.DefaultRouteAction[i3].RequestMirrorPolicy[i4].BackendServiceRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.DefaultRouteAction); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.DefaultRouteAction[i3].WeightedBackendServices); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RegionBackendService", "RegionBackendServiceList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DefaultRouteAction[i3].WeightedBackendServices[i4].BackendService),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.ForProvider.DefaultRouteAction[i3].WeightedBackendServices[i4].BackendServiceRef,
					Selector:     mg.Spec.ForProvider.DefaultRouteAction[i3].WeightedBackendServices[i4].BackendServiceSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.DefaultRouteAction[i3].WeightedBackendServices[i4].BackendService")
			}
			mg.Spec.ForProvider.DefaultRouteAction[i3].WeightedBackendServices[i4].BackendService = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.DefaultRouteAction[i3].WeightedBackendServices[i4].BackendServiceRef = rsp.ResolvedReference

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RegionBackendService", "RegionBackendServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DefaultService),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DefaultServiceRef,
			Selector:     mg.Spec.ForProvider.DefaultServiceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DefaultService")
	}
	mg.Spec.ForProvider.DefaultService = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DefaultServiceRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.PathMatcher); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RegionBackendService", "RegionBackendServiceList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PathMatcher[i3].DefaultService),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.PathMatcher[i3].DefaultServiceRef,
				Selector:     mg.Spec.ForProvider.PathMatcher[i3].DefaultServiceSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.PathMatcher[i3].DefaultService")
		}
		mg.Spec.ForProvider.PathMatcher[i3].DefaultService = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.PathMatcher[i3].DefaultServiceRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.PathMatcher); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.PathMatcher[i3].PathRule); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction); i5++ {
				for i6 := 0; i6 < len(mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].RequestMirrorPolicy); i6++ {
					{
						m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RegionBackendService", "RegionBackendServiceList")
						if err != nil {
							return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
						}
						rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
							CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].RequestMirrorPolicy[i6].BackendService),
							Extract:      resource.ExtractResourceID(),
							Reference:    mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].RequestMirrorPolicy[i6].BackendServiceRef,
							Selector:     mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].RequestMirrorPolicy[i6].BackendServiceSelector,
							To:           reference.To{List: l, Managed: m},
						})
					}
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].RequestMirrorPolicy[i6].BackendService")
					}
					mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].RequestMirrorPolicy[i6].BackendService = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].RequestMirrorPolicy[i6].BackendServiceRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.PathMatcher); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.PathMatcher[i3].PathRule); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction); i5++ {
				for i6 := 0; i6 < len(mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].WeightedBackendServices); i6++ {
					{
						m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RegionBackendService", "RegionBackendServiceList")
						if err != nil {
							return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
						}
						rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
							CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].WeightedBackendServices[i6].BackendService),
							Extract:      resource.ExtractResourceID(),
							Reference:    mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].WeightedBackendServices[i6].BackendServiceRef,
							Selector:     mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].WeightedBackendServices[i6].BackendServiceSelector,
							To:           reference.To{List: l, Managed: m},
						})
					}
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].WeightedBackendServices[i6].BackendService")
					}
					mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].WeightedBackendServices[i6].BackendService = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].WeightedBackendServices[i6].BackendServiceRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.PathMatcher); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.PathMatcher[i3].PathRule); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RegionBackendService", "RegionBackendServiceList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].Service),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].ServiceRef,
					Selector:     mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].ServiceSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].Service")
			}
			mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].Service = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].ServiceRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.PathMatcher); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.PathMatcher[i3].RouteRules); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RegionBackendService", "RegionBackendServiceList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PathMatcher[i3].RouteRules[i4].Service),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.ForProvider.PathMatcher[i3].RouteRules[i4].ServiceRef,
					Selector:     mg.Spec.ForProvider.PathMatcher[i3].RouteRules[i4].ServiceSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.PathMatcher[i3].RouteRules[i4].Service")
			}
			mg.Spec.ForProvider.PathMatcher[i3].RouteRules[i4].Service = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.PathMatcher[i3].RouteRules[i4].ServiceRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Test); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RegionBackendService", "RegionBackendServiceList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Test[i3].Service),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.Test[i3].ServiceRef,
				Selector:     mg.Spec.ForProvider.Test[i3].ServiceSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Test[i3].Service")
		}
		mg.Spec.ForProvider.Test[i3].Service = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Test[i3].ServiceRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.DefaultRouteAction); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.DefaultRouteAction[i3].RequestMirrorPolicy); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RegionBackendService", "RegionBackendServiceList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DefaultRouteAction[i3].RequestMirrorPolicy[i4].BackendService),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.InitProvider.DefaultRouteAction[i3].RequestMirrorPolicy[i4].BackendServiceRef,
					Selector:     mg.Spec.InitProvider.DefaultRouteAction[i3].RequestMirrorPolicy[i4].BackendServiceSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.DefaultRouteAction[i3].RequestMirrorPolicy[i4].BackendService")
			}
			mg.Spec.InitProvider.DefaultRouteAction[i3].RequestMirrorPolicy[i4].BackendService = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.DefaultRouteAction[i3].RequestMirrorPolicy[i4].BackendServiceRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.DefaultRouteAction); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.DefaultRouteAction[i3].WeightedBackendServices); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RegionBackendService", "RegionBackendServiceList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DefaultRouteAction[i3].WeightedBackendServices[i4].BackendService),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.InitProvider.DefaultRouteAction[i3].WeightedBackendServices[i4].BackendServiceRef,
					Selector:     mg.Spec.InitProvider.DefaultRouteAction[i3].WeightedBackendServices[i4].BackendServiceSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.DefaultRouteAction[i3].WeightedBackendServices[i4].BackendService")
			}
			mg.Spec.InitProvider.DefaultRouteAction[i3].WeightedBackendServices[i4].BackendService = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.DefaultRouteAction[i3].WeightedBackendServices[i4].BackendServiceRef = rsp.ResolvedReference

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RegionBackendService", "RegionBackendServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DefaultService),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.DefaultServiceRef,
			Selector:     mg.Spec.InitProvider.DefaultServiceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DefaultService")
	}
	mg.Spec.InitProvider.DefaultService = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DefaultServiceRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.PathMatcher); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RegionBackendService", "RegionBackendServiceList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PathMatcher[i3].DefaultService),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.PathMatcher[i3].DefaultServiceRef,
				Selector:     mg.Spec.InitProvider.PathMatcher[i3].DefaultServiceSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.PathMatcher[i3].DefaultService")
		}
		mg.Spec.InitProvider.PathMatcher[i3].DefaultService = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.PathMatcher[i3].DefaultServiceRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.PathMatcher); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.PathMatcher[i3].PathRule); i4++ {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction); i5++ {
				for i6 := 0; i6 < len(mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].RequestMirrorPolicy); i6++ {
					{
						m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RegionBackendService", "RegionBackendServiceList")
						if err != nil {
							return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
						}
						rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
							CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].RequestMirrorPolicy[i6].BackendService),
							Extract:      resource.ExtractResourceID(),
							Reference:    mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].RequestMirrorPolicy[i6].BackendServiceRef,
							Selector:     mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].RequestMirrorPolicy[i6].BackendServiceSelector,
							To:           reference.To{List: l, Managed: m},
						})
					}
					if err != nil {
						return errors.Wrap(err, "mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].RequestMirrorPolicy[i6].BackendService")
					}
					mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].RequestMirrorPolicy[i6].BackendService = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].RequestMirrorPolicy[i6].BackendServiceRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.PathMatcher); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.PathMatcher[i3].PathRule); i4++ {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction); i5++ {
				for i6 := 0; i6 < len(mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].WeightedBackendServices); i6++ {
					{
						m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RegionBackendService", "RegionBackendServiceList")
						if err != nil {
							return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
						}
						rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
							CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].WeightedBackendServices[i6].BackendService),
							Extract:      resource.ExtractResourceID(),
							Reference:    mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].WeightedBackendServices[i6].BackendServiceRef,
							Selector:     mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].WeightedBackendServices[i6].BackendServiceSelector,
							To:           reference.To{List: l, Managed: m},
						})
					}
					if err != nil {
						return errors.Wrap(err, "mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].WeightedBackendServices[i6].BackendService")
					}
					mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].WeightedBackendServices[i6].BackendService = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].WeightedBackendServices[i6].BackendServiceRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.PathMatcher); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.PathMatcher[i3].PathRule); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RegionBackendService", "RegionBackendServiceList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].Service),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].ServiceRef,
					Selector:     mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].ServiceSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].Service")
			}
			mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].Service = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].ServiceRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.PathMatcher); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.PathMatcher[i3].RouteRules); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RegionBackendService", "RegionBackendServiceList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PathMatcher[i3].RouteRules[i4].Service),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.InitProvider.PathMatcher[i3].RouteRules[i4].ServiceRef,
					Selector:     mg.Spec.InitProvider.PathMatcher[i3].RouteRules[i4].ServiceSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.PathMatcher[i3].RouteRules[i4].Service")
			}
			mg.Spec.InitProvider.PathMatcher[i3].RouteRules[i4].Service = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.PathMatcher[i3].RouteRules[i4].ServiceRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Test); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RegionBackendService", "RegionBackendServiceList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Test[i3].Service),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.Test[i3].ServiceRef,
				Selector:     mg.Spec.InitProvider.Test[i3].ServiceSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Test[i3].Service")
		}
		mg.Spec.InitProvider.Test[i3].Service = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Test[i3].ServiceRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this Route.
func (mg *Route) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Network),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.NetworkRef,
			Selector:     mg.Spec.ForProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Network")
	}
	mg.Spec.ForProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "ForwardingRule", "ForwardingRuleList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NextHopIlb),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.NextHopIlbRef,
			Selector:     mg.Spec.ForProvider.NextHopIlbSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NextHopIlb")
	}
	mg.Spec.ForProvider.NextHopIlb = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NextHopIlbRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "VPNTunnel", "VPNTunnelList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NextHopVPNTunnel),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.NextHopVPNTunnelRef,
			Selector:     mg.Spec.ForProvider.NextHopVPNTunnelSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NextHopVPNTunnel")
	}
	mg.Spec.ForProvider.NextHopVPNTunnel = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NextHopVPNTunnelRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Network),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.NetworkRef,
			Selector:     mg.Spec.InitProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Network")
	}
	mg.Spec.InitProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "ForwardingRule", "ForwardingRuleList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NextHopIlb),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.NextHopIlbRef,
			Selector:     mg.Spec.InitProvider.NextHopIlbSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.NextHopIlb")
	}
	mg.Spec.InitProvider.NextHopIlb = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NextHopIlbRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "VPNTunnel", "VPNTunnelList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NextHopVPNTunnel),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.NextHopVPNTunnelRef,
			Selector:     mg.Spec.InitProvider.NextHopVPNTunnelSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.NextHopVPNTunnel")
	}
	mg.Spec.InitProvider.NextHopVPNTunnel = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NextHopVPNTunnelRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Router.
func (mg *Router) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Network),
			Extract:      common.SelfLinkExtractor(),
			Reference:    mg.Spec.ForProvider.NetworkRef,
			Selector:     mg.Spec.ForProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Network")
	}
	mg.Spec.ForProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Network),
			Extract:      common.SelfLinkExtractor(),
			Reference:    mg.Spec.InitProvider.NetworkRef,
			Selector:     mg.Spec.InitProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Network")
	}
	mg.Spec.InitProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NetworkRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RouterInterface.
func (mg *RouterInterface) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Router", "RouterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Router),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.RouterRef,
			Selector:     mg.Spec.ForProvider.RouterSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Router")
	}
	mg.Spec.ForProvider.Router = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RouterRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "VPNTunnel", "VPNTunnelList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPNTunnel),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.VPNTunnelRef,
			Selector:     mg.Spec.ForProvider.VPNTunnelSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPNTunnel")
	}
	mg.Spec.ForProvider.VPNTunnel = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPNTunnelRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Router", "RouterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Router),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.RouterRef,
			Selector:     mg.Spec.InitProvider.RouterSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Router")
	}
	mg.Spec.InitProvider.Router = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RouterRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "VPNTunnel", "VPNTunnelList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VPNTunnel),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.VPNTunnelRef,
			Selector:     mg.Spec.InitProvider.VPNTunnelSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VPNTunnel")
	}
	mg.Spec.InitProvider.VPNTunnel = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VPNTunnelRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RouterNAT.
func (mg *RouterNAT) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Router", "RouterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Router),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.RouterRef,
			Selector:     mg.Spec.ForProvider.RouterSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Router")
	}
	mg.Spec.ForProvider.Router = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RouterRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Subnetwork); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Subnetwork", "SubnetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Subnetwork[i3].Name),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.Subnetwork[i3].NameRef,
				Selector:     mg.Spec.ForProvider.Subnetwork[i3].NameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Subnetwork[i3].Name")
		}
		mg.Spec.ForProvider.Subnetwork[i3].Name = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Subnetwork[i3].NameRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Subnetwork); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Subnetwork", "SubnetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Subnetwork[i3].Name),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.Subnetwork[i3].NameRef,
				Selector:     mg.Spec.InitProvider.Subnetwork[i3].NameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Subnetwork[i3].Name")
		}
		mg.Spec.InitProvider.Subnetwork[i3].Name = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Subnetwork[i3].NameRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this RouterPeer.
func (mg *RouterPeer) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RouterInterface", "RouterInterfaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Interface),
			Extract:      resource.ExtractParamPath("name", false),
			Reference:    mg.Spec.ForProvider.InterfaceRef,
			Selector:     mg.Spec.ForProvider.InterfaceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Interface")
	}
	mg.Spec.ForProvider.Interface = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.InterfaceRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Address", "AddressList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PeerIPAddress),
			Extract:      resource.ExtractParamPath("address", false),
			Reference:    mg.Spec.ForProvider.PeerIPAddressRef,
			Selector:     mg.Spec.ForProvider.PeerIPAddressSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PeerIPAddress")
	}
	mg.Spec.ForProvider.PeerIPAddress = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PeerIPAddressRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Router", "RouterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Region),
			Extract:      resource.ExtractParamPath("region", false),
			Reference:    mg.Spec.ForProvider.RegionRef,
			Selector:     mg.Spec.ForProvider.RegionSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Region")
	}
	mg.Spec.ForProvider.Region = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RegionRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Router", "RouterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Router),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.RouterRef,
			Selector:     mg.Spec.ForProvider.RouterSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Router")
	}
	mg.Spec.ForProvider.Router = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RouterRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Instance", "InstanceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RouterApplianceInstance),
			Extract:      resource.ExtractParamPath("self_link", true),
			Reference:    mg.Spec.ForProvider.RouterApplianceInstanceRef,
			Selector:     mg.Spec.ForProvider.RouterApplianceInstanceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RouterApplianceInstance")
	}
	mg.Spec.ForProvider.RouterApplianceInstance = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RouterApplianceInstanceRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RouterInterface", "RouterInterfaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Interface),
			Extract:      resource.ExtractParamPath("name", false),
			Reference:    mg.Spec.InitProvider.InterfaceRef,
			Selector:     mg.Spec.InitProvider.InterfaceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Interface")
	}
	mg.Spec.InitProvider.Interface = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.InterfaceRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Address", "AddressList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PeerIPAddress),
			Extract:      resource.ExtractParamPath("address", false),
			Reference:    mg.Spec.InitProvider.PeerIPAddressRef,
			Selector:     mg.Spec.InitProvider.PeerIPAddressSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.PeerIPAddress")
	}
	mg.Spec.InitProvider.PeerIPAddress = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PeerIPAddressRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Router", "RouterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Region),
			Extract:      resource.ExtractParamPath("region", false),
			Reference:    mg.Spec.InitProvider.RegionRef,
			Selector:     mg.Spec.InitProvider.RegionSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Region")
	}
	mg.Spec.InitProvider.Region = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RegionRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Instance", "InstanceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RouterApplianceInstance),
			Extract:      resource.ExtractParamPath("self_link", true),
			Reference:    mg.Spec.InitProvider.RouterApplianceInstanceRef,
			Selector:     mg.Spec.InitProvider.RouterApplianceInstanceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.RouterApplianceInstance")
	}
	mg.Spec.InitProvider.RouterApplianceInstance = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RouterApplianceInstanceRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ServiceAttachment.
func (mg *ServiceAttachment) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.ConsumerAcceptLists); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ConsumerAcceptLists[i3].NetworkURL),
				Extract:      resource.ExtractParamPath("self_link", true),
				Reference:    mg.Spec.ForProvider.ConsumerAcceptLists[i3].NetworkURLRef,
				Selector:     mg.Spec.ForProvider.ConsumerAcceptLists[i3].NetworkURLSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ConsumerAcceptLists[i3].NetworkURL")
		}
		mg.Spec.ForProvider.ConsumerAcceptLists[i3].NetworkURL = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ConsumerAcceptLists[i3].NetworkURLRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Subnetwork", "SubnetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.NATSubnets),
			Extract:       reference.ExternalName(),
			References:    mg.Spec.ForProvider.NATSubnetsRefs,
			Selector:      mg.Spec.ForProvider.NATSubnetsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NATSubnets")
	}
	mg.Spec.ForProvider.NATSubnets = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.NATSubnetsRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "ForwardingRule", "ForwardingRuleList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TargetService),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.TargetServiceRef,
			Selector:     mg.Spec.ForProvider.TargetServiceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TargetService")
	}
	mg.Spec.ForProvider.TargetService = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TargetServiceRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.ConsumerAcceptLists); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ConsumerAcceptLists[i3].NetworkURL),
				Extract:      resource.ExtractParamPath("self_link", true),
				Reference:    mg.Spec.InitProvider.ConsumerAcceptLists[i3].NetworkURLRef,
				Selector:     mg.Spec.InitProvider.ConsumerAcceptLists[i3].NetworkURLSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ConsumerAcceptLists[i3].NetworkURL")
		}
		mg.Spec.InitProvider.ConsumerAcceptLists[i3].NetworkURL = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ConsumerAcceptLists[i3].NetworkURLRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Subnetwork", "SubnetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.NATSubnets),
			Extract:       reference.ExternalName(),
			References:    mg.Spec.InitProvider.NATSubnetsRefs,
			Selector:      mg.Spec.InitProvider.NATSubnetsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.NATSubnets")
	}
	mg.Spec.InitProvider.NATSubnets = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.NATSubnetsRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "ForwardingRule", "ForwardingRuleList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.TargetService),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.TargetServiceRef,
			Selector:     mg.Spec.InitProvider.TargetServiceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.TargetService")
	}
	mg.Spec.InitProvider.TargetService = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TargetServiceRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SharedVPCHostProject.
func (mg *SharedVPCHostProject) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Project),
			Extract:      common.ExtractProjectID(),
			Reference:    mg.Spec.ForProvider.ProjectRef,
			Selector:     mg.Spec.ForProvider.ProjectSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Project")
	}
	mg.Spec.ForProvider.Project = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Project),
			Extract:      common.ExtractProjectID(),
			Reference:    mg.Spec.InitProvider.ProjectRef,
			Selector:     mg.Spec.InitProvider.ProjectSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Project")
	}
	mg.Spec.InitProvider.Project = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SharedVPCServiceProject.
func (mg *SharedVPCServiceProject) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.HostProject),
			Extract:      common.ExtractProjectID(),
			Reference:    mg.Spec.ForProvider.HostProjectRef,
			Selector:     mg.Spec.ForProvider.HostProjectSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.HostProject")
	}
	mg.Spec.ForProvider.HostProject = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.HostProjectRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServiceProject),
			Extract:      common.ExtractProjectID(),
			Reference:    mg.Spec.ForProvider.ServiceProjectRef,
			Selector:     mg.Spec.ForProvider.ServiceProjectSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServiceProject")
	}
	mg.Spec.ForProvider.ServiceProject = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServiceProjectRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.HostProject),
			Extract:      common.ExtractProjectID(),
			Reference:    mg.Spec.InitProvider.HostProjectRef,
			Selector:     mg.Spec.InitProvider.HostProjectSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.HostProject")
	}
	mg.Spec.InitProvider.HostProject = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.HostProjectRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ServiceProject),
			Extract:      common.ExtractProjectID(),
			Reference:    mg.Spec.InitProvider.ServiceProjectRef,
			Selector:     mg.Spec.InitProvider.ServiceProjectSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ServiceProject")
	}
	mg.Spec.InitProvider.ServiceProject = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ServiceProjectRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Snapshot.
func (mg *Snapshot) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Disk", "DiskList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SourceDisk),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SourceDiskRef,
			Selector:     mg.Spec.ForProvider.SourceDiskSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SourceDisk")
	}
	mg.Spec.ForProvider.SourceDisk = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SourceDiskRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Disk", "DiskList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SourceDisk),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.SourceDiskRef,
			Selector:     mg.Spec.InitProvider.SourceDiskSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SourceDisk")
	}
	mg.Spec.InitProvider.SourceDisk = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SourceDiskRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Subnetwork.
func (mg *Subnetwork) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Network),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.NetworkRef,
			Selector:     mg.Spec.ForProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Network")
	}
	mg.Spec.ForProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Network),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.NetworkRef,
			Selector:     mg.Spec.InitProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Network")
	}
	mg.Spec.InitProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NetworkRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SubnetworkIAMMember.
func (mg *SubnetworkIAMMember) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Subnetwork", "SubnetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Subnetwork),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.SubnetworkRef,
			Selector:     mg.Spec.ForProvider.SubnetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Subnetwork")
	}
	mg.Spec.ForProvider.Subnetwork = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SubnetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Subnetwork", "SubnetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Subnetwork),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.SubnetworkRef,
			Selector:     mg.Spec.InitProvider.SubnetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Subnetwork")
	}
	mg.Spec.InitProvider.Subnetwork = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SubnetworkRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TargetGRPCProxy.
func (mg *TargetGRPCProxy) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "URLMap", "URLMapList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.URLMap),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.URLMapRef,
			Selector:     mg.Spec.ForProvider.URLMapSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.URLMap")
	}
	mg.Spec.ForProvider.URLMap = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.URLMapRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "URLMap", "URLMapList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.URLMap),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.URLMapRef,
			Selector:     mg.Spec.InitProvider.URLMapSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.URLMap")
	}
	mg.Spec.InitProvider.URLMap = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.URLMapRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TargetHTTPProxy.
func (mg *TargetHTTPProxy) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "URLMap", "URLMapList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.URLMap),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.URLMapRef,
			Selector:     mg.Spec.ForProvider.URLMapSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.URLMap")
	}
	mg.Spec.ForProvider.URLMap = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.URLMapRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "URLMap", "URLMapList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.URLMap),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.URLMapRef,
			Selector:     mg.Spec.InitProvider.URLMapSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.URLMap")
	}
	mg.Spec.InitProvider.URLMap = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.URLMapRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TargetHTTPSProxy.
func (mg *TargetHTTPSProxy) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "SSLCertificate", "SSLCertificateList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.SSLCertificates),
			Extract:       reference.ExternalName(),
			References:    mg.Spec.ForProvider.SSLCertificatesRefs,
			Selector:      mg.Spec.ForProvider.SSLCertificatesSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SSLCertificates")
	}
	mg.Spec.ForProvider.SSLCertificates = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.SSLCertificatesRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "URLMap", "URLMapList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.URLMap),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.URLMapRef,
			Selector:     mg.Spec.ForProvider.URLMapSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.URLMap")
	}
	mg.Spec.ForProvider.URLMap = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.URLMapRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "SSLCertificate", "SSLCertificateList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.SSLCertificates),
			Extract:       reference.ExternalName(),
			References:    mg.Spec.InitProvider.SSLCertificatesRefs,
			Selector:      mg.Spec.InitProvider.SSLCertificatesSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SSLCertificates")
	}
	mg.Spec.InitProvider.SSLCertificates = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.SSLCertificatesRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "URLMap", "URLMapList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.URLMap),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.URLMapRef,
			Selector:     mg.Spec.InitProvider.URLMapSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.URLMap")
	}
	mg.Spec.InitProvider.URLMap = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.URLMapRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TargetInstance.
func (mg *TargetInstance) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Instance", "InstanceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Instance),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.InstanceRef,
			Selector:     mg.Spec.ForProvider.InstanceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Instance")
	}
	mg.Spec.ForProvider.Instance = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.InstanceRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Instance", "InstanceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Instance),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.InstanceRef,
			Selector:     mg.Spec.InitProvider.InstanceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Instance")
	}
	mg.Spec.InitProvider.Instance = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.InstanceRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TargetPool.
func (mg *TargetPool) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var mrsp reference.MultiResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "HTTPHealthCheck", "HTTPHealthCheckList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.HealthChecks),
			Extract:       reference.ExternalName(),
			References:    mg.Spec.ForProvider.HealthChecksRefs,
			Selector:      mg.Spec.ForProvider.HealthChecksSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.HealthChecks")
	}
	mg.Spec.ForProvider.HealthChecks = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.HealthChecksRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "HTTPHealthCheck", "HTTPHealthCheckList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.HealthChecks),
			Extract:       reference.ExternalName(),
			References:    mg.Spec.InitProvider.HealthChecksRefs,
			Selector:      mg.Spec.InitProvider.HealthChecksSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.HealthChecks")
	}
	mg.Spec.InitProvider.HealthChecks = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.HealthChecksRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this TargetSSLProxy.
func (mg *TargetSSLProxy) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "BackendService", "BackendServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BackendService),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.BackendServiceRef,
			Selector:     mg.Spec.ForProvider.BackendServiceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.BackendService")
	}
	mg.Spec.ForProvider.BackendService = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.BackendServiceRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "SSLCertificate", "SSLCertificateList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.SSLCertificates),
			Extract:       reference.ExternalName(),
			References:    mg.Spec.ForProvider.SSLCertificatesRefs,
			Selector:      mg.Spec.ForProvider.SSLCertificatesSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SSLCertificates")
	}
	mg.Spec.ForProvider.SSLCertificates = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.SSLCertificatesRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "BackendService", "BackendServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BackendService),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.BackendServiceRef,
			Selector:     mg.Spec.InitProvider.BackendServiceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.BackendService")
	}
	mg.Spec.InitProvider.BackendService = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.BackendServiceRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "SSLCertificate", "SSLCertificateList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.SSLCertificates),
			Extract:       reference.ExternalName(),
			References:    mg.Spec.InitProvider.SSLCertificatesRefs,
			Selector:      mg.Spec.InitProvider.SSLCertificatesSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SSLCertificates")
	}
	mg.Spec.InitProvider.SSLCertificates = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.SSLCertificatesRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this TargetTCPProxy.
func (mg *TargetTCPProxy) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "BackendService", "BackendServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BackendService),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.BackendServiceRef,
			Selector:     mg.Spec.ForProvider.BackendServiceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.BackendService")
	}
	mg.Spec.ForProvider.BackendService = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.BackendServiceRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "BackendService", "BackendServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BackendService),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.BackendServiceRef,
			Selector:     mg.Spec.InitProvider.BackendServiceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.BackendService")
	}
	mg.Spec.InitProvider.BackendService = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.BackendServiceRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this URLMap.
func (mg *URLMap) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "BackendBucket", "BackendBucketList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DefaultService),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DefaultServiceRef,
			Selector:     mg.Spec.ForProvider.DefaultServiceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DefaultService")
	}
	mg.Spec.ForProvider.DefaultService = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DefaultServiceRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.PathMatcher); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "BackendBucket", "BackendBucketList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PathMatcher[i3].DefaultService),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.PathMatcher[i3].DefaultServiceRef,
				Selector:     mg.Spec.ForProvider.PathMatcher[i3].DefaultServiceSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.PathMatcher[i3].DefaultService")
		}
		mg.Spec.ForProvider.PathMatcher[i3].DefaultService = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.PathMatcher[i3].DefaultServiceRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.PathMatcher); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.PathMatcher[i3].PathRule); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction); i5++ {
				for i6 := 0; i6 < len(mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].RequestMirrorPolicy); i6++ {
					{
						m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "BackendService", "BackendServiceList")
						if err != nil {
							return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
						}
						rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
							CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].RequestMirrorPolicy[i6].BackendService),
							Extract:      resource.ExtractResourceID(),
							Reference:    mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].RequestMirrorPolicy[i6].BackendServiceRef,
							Selector:     mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].RequestMirrorPolicy[i6].BackendServiceSelector,
							To:           reference.To{List: l, Managed: m},
						})
					}
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].RequestMirrorPolicy[i6].BackendService")
					}
					mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].RequestMirrorPolicy[i6].BackendService = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].RequestMirrorPolicy[i6].BackendServiceRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.PathMatcher); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.PathMatcher[i3].PathRule); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction); i5++ {
				for i6 := 0; i6 < len(mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].WeightedBackendServices); i6++ {
					{
						m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "BackendService", "BackendServiceList")
						if err != nil {
							return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
						}
						rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
							CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].WeightedBackendServices[i6].BackendService),
							Extract:      resource.ExtractResourceID(),
							Reference:    mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].WeightedBackendServices[i6].BackendServiceRef,
							Selector:     mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].WeightedBackendServices[i6].BackendServiceSelector,
							To:           reference.To{List: l, Managed: m},
						})
					}
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].WeightedBackendServices[i6].BackendService")
					}
					mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].WeightedBackendServices[i6].BackendService = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].WeightedBackendServices[i6].BackendServiceRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.PathMatcher); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.PathMatcher[i3].PathRule); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "BackendBucket", "BackendBucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].Service),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].ServiceRef,
					Selector:     mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].ServiceSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].Service")
			}
			mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].Service = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].ServiceRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.PathMatcher); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.PathMatcher[i3].RouteRules); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "BackendService", "BackendServiceList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PathMatcher[i3].RouteRules[i4].Service),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.ForProvider.PathMatcher[i3].RouteRules[i4].ServiceRef,
					Selector:     mg.Spec.ForProvider.PathMatcher[i3].RouteRules[i4].ServiceSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.PathMatcher[i3].RouteRules[i4].Service")
			}
			mg.Spec.ForProvider.PathMatcher[i3].RouteRules[i4].Service = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.PathMatcher[i3].RouteRules[i4].ServiceRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Test); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "BackendBucket", "BackendBucketList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Test[i3].Service),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.Test[i3].ServiceRef,
				Selector:     mg.Spec.ForProvider.Test[i3].ServiceSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Test[i3].Service")
		}
		mg.Spec.ForProvider.Test[i3].Service = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Test[i3].ServiceRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "BackendBucket", "BackendBucketList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DefaultService),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.DefaultServiceRef,
			Selector:     mg.Spec.InitProvider.DefaultServiceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DefaultService")
	}
	mg.Spec.InitProvider.DefaultService = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DefaultServiceRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.PathMatcher); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "BackendBucket", "BackendBucketList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PathMatcher[i3].DefaultService),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.PathMatcher[i3].DefaultServiceRef,
				Selector:     mg.Spec.InitProvider.PathMatcher[i3].DefaultServiceSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.PathMatcher[i3].DefaultService")
		}
		mg.Spec.InitProvider.PathMatcher[i3].DefaultService = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.PathMatcher[i3].DefaultServiceRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.PathMatcher); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.PathMatcher[i3].PathRule); i4++ {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction); i5++ {
				for i6 := 0; i6 < len(mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].RequestMirrorPolicy); i6++ {
					{
						m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "BackendService", "BackendServiceList")
						if err != nil {
							return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
						}
						rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
							CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].RequestMirrorPolicy[i6].BackendService),
							Extract:      resource.ExtractResourceID(),
							Reference:    mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].RequestMirrorPolicy[i6].BackendServiceRef,
							Selector:     mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].RequestMirrorPolicy[i6].BackendServiceSelector,
							To:           reference.To{List: l, Managed: m},
						})
					}
					if err != nil {
						return errors.Wrap(err, "mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].RequestMirrorPolicy[i6].BackendService")
					}
					mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].RequestMirrorPolicy[i6].BackendService = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].RequestMirrorPolicy[i6].BackendServiceRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.PathMatcher); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.PathMatcher[i3].PathRule); i4++ {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction); i5++ {
				for i6 := 0; i6 < len(mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].WeightedBackendServices); i6++ {
					{
						m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "BackendService", "BackendServiceList")
						if err != nil {
							return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
						}
						rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
							CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].WeightedBackendServices[i6].BackendService),
							Extract:      resource.ExtractResourceID(),
							Reference:    mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].WeightedBackendServices[i6].BackendServiceRef,
							Selector:     mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].WeightedBackendServices[i6].BackendServiceSelector,
							To:           reference.To{List: l, Managed: m},
						})
					}
					if err != nil {
						return errors.Wrap(err, "mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].WeightedBackendServices[i6].BackendService")
					}
					mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].WeightedBackendServices[i6].BackendService = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction[i5].WeightedBackendServices[i6].BackendServiceRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.PathMatcher); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.PathMatcher[i3].PathRule); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "BackendBucket", "BackendBucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].Service),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].ServiceRef,
					Selector:     mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].ServiceSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].Service")
			}
			mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].Service = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].ServiceRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.PathMatcher); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.PathMatcher[i3].RouteRules); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "BackendService", "BackendServiceList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PathMatcher[i3].RouteRules[i4].Service),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.InitProvider.PathMatcher[i3].RouteRules[i4].ServiceRef,
					Selector:     mg.Spec.InitProvider.PathMatcher[i3].RouteRules[i4].ServiceSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.PathMatcher[i3].RouteRules[i4].Service")
			}
			mg.Spec.InitProvider.PathMatcher[i3].RouteRules[i4].Service = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.PathMatcher[i3].RouteRules[i4].ServiceRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Test); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "BackendBucket", "BackendBucketList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Test[i3].Service),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.Test[i3].ServiceRef,
				Selector:     mg.Spec.InitProvider.Test[i3].ServiceSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Test[i3].Service")
		}
		mg.Spec.InitProvider.Test[i3].Service = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Test[i3].ServiceRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this VPNGateway.
func (mg *VPNGateway) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Network),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.NetworkRef,
			Selector:     mg.Spec.ForProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Network")
	}
	mg.Spec.ForProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Network),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.NetworkRef,
			Selector:     mg.Spec.InitProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Network")
	}
	mg.Spec.InitProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NetworkRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VPNTunnel.
func (mg *VPNTunnel) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "ExternalVPNGateway", "ExternalVPNGatewayList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PeerExternalGateway),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.PeerExternalGatewayRef,
			Selector:     mg.Spec.ForProvider.PeerExternalGatewaySelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PeerExternalGateway")
	}
	mg.Spec.ForProvider.PeerExternalGateway = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PeerExternalGatewayRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Router", "RouterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Router),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.RouterRef,
			Selector:     mg.Spec.ForProvider.RouterSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Router")
	}
	mg.Spec.ForProvider.Router = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RouterRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "VPNGateway", "VPNGatewayList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TargetVPNGateway),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.TargetVPNGatewayRef,
			Selector:     mg.Spec.ForProvider.TargetVPNGatewaySelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TargetVPNGateway")
	}
	mg.Spec.ForProvider.TargetVPNGateway = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TargetVPNGatewayRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "HaVPNGateway", "HaVPNGatewayList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPNGateway),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.VPNGatewayRef,
			Selector:     mg.Spec.ForProvider.VPNGatewaySelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPNGateway")
	}
	mg.Spec.ForProvider.VPNGateway = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPNGatewayRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "ExternalVPNGateway", "ExternalVPNGatewayList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PeerExternalGateway),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.PeerExternalGatewayRef,
			Selector:     mg.Spec.InitProvider.PeerExternalGatewaySelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.PeerExternalGateway")
	}
	mg.Spec.InitProvider.PeerExternalGateway = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PeerExternalGatewayRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Router", "RouterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Router),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.RouterRef,
			Selector:     mg.Spec.InitProvider.RouterSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Router")
	}
	mg.Spec.InitProvider.Router = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RouterRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "VPNGateway", "VPNGatewayList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.TargetVPNGateway),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.TargetVPNGatewayRef,
			Selector:     mg.Spec.InitProvider.TargetVPNGatewaySelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.TargetVPNGateway")
	}
	mg.Spec.InitProvider.TargetVPNGateway = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TargetVPNGatewayRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "HaVPNGateway", "HaVPNGatewayList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VPNGateway),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.VPNGatewayRef,
			Selector:     mg.Spec.InitProvider.VPNGatewaySelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VPNGateway")
	}
	mg.Spec.InitProvider.VPNGateway = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VPNGatewayRef = rsp.ResolvedReference

	return nil
}
