// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta2

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	common "github.com/upbound/provider-gcp/config/common"
	compute "github.com/upbound/provider-gcp/config/compute"
	apisresolver "github.com/upbound/provider-gcp/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *Autoscaler) ResolveReferences( // ResolveReferences of this Autoscaler.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "InstanceGroupManager", "InstanceGroupManagerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Target),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.TargetRef,
			Selector:     mg.Spec.ForProvider.TargetSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Target")
	}
	mg.Spec.ForProvider.Target = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TargetRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "InstanceGroupManager", "InstanceGroupManagerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Target),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.TargetRef,
			Selector:     mg.Spec.InitProvider.TargetSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Target")
	}
	mg.Spec.InitProvider.Target = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TargetRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this BackendBucket.
func (mg *BackendBucket) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("storage.gcp.upbound.io", "v1beta2", "Bucket", "BucketList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BucketName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.BucketNameRef,
			Selector:     mg.Spec.ForProvider.BucketNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.BucketName")
	}
	mg.Spec.ForProvider.BucketName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.BucketNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "SecurityPolicy", "SecurityPolicyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EdgeSecurityPolicy),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.EdgeSecurityPolicyRef,
			Selector:     mg.Spec.ForProvider.EdgeSecurityPolicySelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.EdgeSecurityPolicy")
	}
	mg.Spec.ForProvider.EdgeSecurityPolicy = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.EdgeSecurityPolicyRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.gcp.upbound.io", "v1beta2", "Bucket", "BucketList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BucketName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.BucketNameRef,
			Selector:     mg.Spec.InitProvider.BucketNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.BucketName")
	}
	mg.Spec.InitProvider.BucketName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.BucketNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "SecurityPolicy", "SecurityPolicyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.EdgeSecurityPolicy),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.EdgeSecurityPolicyRef,
			Selector:     mg.Spec.InitProvider.EdgeSecurityPolicySelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.EdgeSecurityPolicy")
	}
	mg.Spec.InitProvider.EdgeSecurityPolicy = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.EdgeSecurityPolicyRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this BackendService.
func (mg *BackendService) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Backend); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "InstanceGroupManager", "InstanceGroupManagerList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Backend[i3].Group),
				Extract:      compute.InstanceGroupExtractor(),
				Reference:    mg.Spec.ForProvider.Backend[i3].GroupRef,
				Selector:     mg.Spec.ForProvider.Backend[i3].GroupSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Backend[i3].Group")
		}
		mg.Spec.ForProvider.Backend[i3].Group = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Backend[i3].GroupRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "HealthCheck", "HealthCheckList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.HealthChecks),
			Extract:       common.SelfLinkExtractor(),
			References:    mg.Spec.ForProvider.HealthChecksRefs,
			Selector:      mg.Spec.ForProvider.HealthChecksSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.HealthChecks")
	}
	mg.Spec.ForProvider.HealthChecks = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.HealthChecksRefs = mrsp.ResolvedReferences

	for i3 := 0; i3 < len(mg.Spec.InitProvider.Backend); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "InstanceGroupManager", "InstanceGroupManagerList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Backend[i3].Group),
				Extract:      compute.InstanceGroupExtractor(),
				Reference:    mg.Spec.InitProvider.Backend[i3].GroupRef,
				Selector:     mg.Spec.InitProvider.Backend[i3].GroupSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Backend[i3].Group")
		}
		mg.Spec.InitProvider.Backend[i3].Group = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Backend[i3].GroupRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "HealthCheck", "HealthCheckList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.HealthChecks),
			Extract:       common.SelfLinkExtractor(),
			References:    mg.Spec.InitProvider.HealthChecksRefs,
			Selector:      mg.Spec.InitProvider.HealthChecksSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.HealthChecks")
	}
	mg.Spec.InitProvider.HealthChecks = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.HealthChecksRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this Disk.
func (mg *Disk) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	if mg.Spec.ForProvider.AsyncPrimaryDisk != nil {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Disk", "DiskList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AsyncPrimaryDisk.Disk),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.AsyncPrimaryDisk.DiskRef,
				Selector:     mg.Spec.ForProvider.AsyncPrimaryDisk.DiskSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.AsyncPrimaryDisk.Disk")
		}
		mg.Spec.ForProvider.AsyncPrimaryDisk.Disk = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.AsyncPrimaryDisk.DiskRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.AsyncPrimaryDisk != nil {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Disk", "DiskList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.AsyncPrimaryDisk.Disk),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.AsyncPrimaryDisk.DiskRef,
				Selector:     mg.Spec.InitProvider.AsyncPrimaryDisk.DiskSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.AsyncPrimaryDisk.Disk")
		}
		mg.Spec.InitProvider.AsyncPrimaryDisk.Disk = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.AsyncPrimaryDisk.DiskRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this DiskIAMMember.
func (mg *DiskIAMMember) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Disk", "DiskList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Name),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.NameRef,
			Selector:     mg.Spec.ForProvider.NameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Name")
	}
	mg.Spec.ForProvider.Name = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Disk", "DiskList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Name),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.NameRef,
			Selector:     mg.Spec.InitProvider.NameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Name")
	}
	mg.Spec.InitProvider.Name = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Firewall.
func (mg *Firewall) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Network),
			Extract:      common.SelfLinkExtractor(),
			Reference:    mg.Spec.ForProvider.NetworkRef,
			Selector:     mg.Spec.ForProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Network")
	}
	mg.Spec.ForProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Network),
			Extract:      common.SelfLinkExtractor(),
			Reference:    mg.Spec.InitProvider.NetworkRef,
			Selector:     mg.Spec.InitProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Network")
	}
	mg.Spec.InitProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NetworkRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this FirewallPolicyRule.
func (mg *FirewallPolicyRule) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "FirewallPolicy", "FirewallPolicyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.FirewallPolicy),
			Extract:      resource.ExtractParamPath("name", true),
			Reference:    mg.Spec.ForProvider.FirewallPolicyRef,
			Selector:     mg.Spec.ForProvider.FirewallPolicySelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.FirewallPolicy")
	}
	mg.Spec.ForProvider.FirewallPolicy = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.FirewallPolicyRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "FirewallPolicy", "FirewallPolicyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.FirewallPolicy),
			Extract:      resource.ExtractParamPath("name", true),
			Reference:    mg.Spec.InitProvider.FirewallPolicyRef,
			Selector:     mg.Spec.InitProvider.FirewallPolicySelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.FirewallPolicy")
	}
	mg.Spec.InitProvider.FirewallPolicy = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.FirewallPolicyRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ForwardingRule.
func (mg *ForwardingRule) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionBackendService", "RegionBackendServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BackendService),
			Extract:      common.SelfLinkExtractor(),
			Reference:    mg.Spec.ForProvider.BackendServiceRef,
			Selector:     mg.Spec.ForProvider.BackendServiceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.BackendService")
	}
	mg.Spec.ForProvider.BackendService = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.BackendServiceRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Address", "AddressList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IPAddress),
			Extract:      common.SelfLinkExtractor(),
			Reference:    mg.Spec.ForProvider.IPAddressRef,
			Selector:     mg.Spec.ForProvider.IPAddressSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.IPAddress")
	}
	mg.Spec.ForProvider.IPAddress = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.IPAddressRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Network),
			Extract:      common.SelfLinkExtractor(),
			Reference:    mg.Spec.ForProvider.NetworkRef,
			Selector:     mg.Spec.ForProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Network")
	}
	mg.Spec.ForProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Subnetwork", "SubnetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Subnetwork),
			Extract:      common.SelfLinkExtractor(),
			Reference:    mg.Spec.ForProvider.SubnetworkRef,
			Selector:     mg.Spec.ForProvider.SubnetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Subnetwork")
	}
	mg.Spec.ForProvider.Subnetwork = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SubnetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RegionTargetHTTPProxy", "RegionTargetHTTPProxyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Target),
			Extract:      common.SelfLinkExtractor(),
			Reference:    mg.Spec.ForProvider.TargetRef,
			Selector:     mg.Spec.ForProvider.TargetSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Target")
	}
	mg.Spec.ForProvider.Target = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TargetRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionBackendService", "RegionBackendServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BackendService),
			Extract:      common.SelfLinkExtractor(),
			Reference:    mg.Spec.InitProvider.BackendServiceRef,
			Selector:     mg.Spec.InitProvider.BackendServiceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.BackendService")
	}
	mg.Spec.InitProvider.BackendService = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.BackendServiceRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Address", "AddressList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.IPAddress),
			Extract:      common.SelfLinkExtractor(),
			Reference:    mg.Spec.InitProvider.IPAddressRef,
			Selector:     mg.Spec.InitProvider.IPAddressSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.IPAddress")
	}
	mg.Spec.InitProvider.IPAddress = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.IPAddressRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Network),
			Extract:      common.SelfLinkExtractor(),
			Reference:    mg.Spec.InitProvider.NetworkRef,
			Selector:     mg.Spec.InitProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Network")
	}
	mg.Spec.InitProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Subnetwork", "SubnetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Subnetwork),
			Extract:      common.SelfLinkExtractor(),
			Reference:    mg.Spec.InitProvider.SubnetworkRef,
			Selector:     mg.Spec.InitProvider.SubnetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Subnetwork")
	}
	mg.Spec.InitProvider.Subnetwork = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SubnetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RegionTargetHTTPProxy", "RegionTargetHTTPProxyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Target),
			Extract:      common.SelfLinkExtractor(),
			Reference:    mg.Spec.InitProvider.TargetRef,
			Selector:     mg.Spec.InitProvider.TargetSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Target")
	}
	mg.Spec.InitProvider.Target = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TargetRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this GlobalForwardingRule.
func (mg *GlobalForwardingRule) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "GlobalAddress", "GlobalAddressList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IPAddress),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.IPAddressRef,
			Selector:     mg.Spec.ForProvider.IPAddressSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.IPAddress")
	}
	mg.Spec.ForProvider.IPAddress = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.IPAddressRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Network),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.NetworkRef,
			Selector:     mg.Spec.ForProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Network")
	}
	mg.Spec.ForProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Project),
			Extract:      resource.ExtractParamPath("project", false),
			Reference:    mg.Spec.ForProvider.ProjectRef,
			Selector:     mg.Spec.ForProvider.ProjectSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Project")
	}
	mg.Spec.ForProvider.Project = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Subnetwork", "SubnetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Subnetwork),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SubnetworkRef,
			Selector:     mg.Spec.ForProvider.SubnetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Subnetwork")
	}
	mg.Spec.ForProvider.Subnetwork = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SubnetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "TargetSSLProxy", "TargetSSLProxyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Target),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.TargetRef,
			Selector:     mg.Spec.ForProvider.TargetSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Target")
	}
	mg.Spec.ForProvider.Target = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TargetRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "GlobalAddress", "GlobalAddressList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.IPAddress),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.IPAddressRef,
			Selector:     mg.Spec.InitProvider.IPAddressSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.IPAddress")
	}
	mg.Spec.InitProvider.IPAddress = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.IPAddressRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Network),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.NetworkRef,
			Selector:     mg.Spec.InitProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Network")
	}
	mg.Spec.InitProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Project),
			Extract:      resource.ExtractParamPath("project", false),
			Reference:    mg.Spec.InitProvider.ProjectRef,
			Selector:     mg.Spec.InitProvider.ProjectSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Project")
	}
	mg.Spec.InitProvider.Project = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Subnetwork", "SubnetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Subnetwork),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.SubnetworkRef,
			Selector:     mg.Spec.InitProvider.SubnetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Subnetwork")
	}
	mg.Spec.InitProvider.Subnetwork = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SubnetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "TargetSSLProxy", "TargetSSLProxyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Target),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.TargetRef,
			Selector:     mg.Spec.InitProvider.TargetSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Target")
	}
	mg.Spec.InitProvider.Target = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TargetRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ImageIAMMember.
func (mg *ImageIAMMember) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Image", "ImageList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Image),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ImageRef,
			Selector:     mg.Spec.ForProvider.ImageSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Image")
	}
	mg.Spec.ForProvider.Image = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ImageRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Image", "ImageList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Image),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ImageRef,
			Selector:     mg.Spec.InitProvider.ImageSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Image")
	}
	mg.Spec.InitProvider.Image = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ImageRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Instance.
func (mg *Instance) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	if mg.Spec.ForProvider.BootDisk != nil {
		if mg.Spec.ForProvider.BootDisk.InitializeParams != nil {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Image", "ImageList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BootDisk.InitializeParams.Image),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.ForProvider.BootDisk.InitializeParams.ImageRef,
					Selector:     mg.Spec.ForProvider.BootDisk.InitializeParams.ImageSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.BootDisk.InitializeParams.Image")
			}
			mg.Spec.ForProvider.BootDisk.InitializeParams.Image = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.BootDisk.InitializeParams.ImageRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.NetworkInterface); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkInterface[i3].Network),
				Extract:      common.SelfLinkExtractor(),
				Reference:    mg.Spec.ForProvider.NetworkInterface[i3].NetworkRef,
				Selector:     mg.Spec.ForProvider.NetworkInterface[i3].NetworkSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.NetworkInterface[i3].Network")
		}
		mg.Spec.ForProvider.NetworkInterface[i3].Network = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.NetworkInterface[i3].NetworkRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.NetworkInterface); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Subnetwork", "SubnetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkInterface[i3].Subnetwork),
				Extract:      common.SelfLinkExtractor(),
				Reference:    mg.Spec.ForProvider.NetworkInterface[i3].SubnetworkRef,
				Selector:     mg.Spec.ForProvider.NetworkInterface[i3].SubnetworkSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.NetworkInterface[i3].Subnetwork")
		}
		mg.Spec.ForProvider.NetworkInterface[i3].Subnetwork = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.NetworkInterface[i3].SubnetworkRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.ServiceAccount != nil {
		{
			m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "ServiceAccount", "ServiceAccountList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServiceAccount.Email),
				Extract:      resource.ExtractParamPath("email", true),
				Reference:    mg.Spec.ForProvider.ServiceAccount.EmailRef,
				Selector:     mg.Spec.ForProvider.ServiceAccount.EmailSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ServiceAccount.Email")
		}
		mg.Spec.ForProvider.ServiceAccount.Email = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ServiceAccount.EmailRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.BootDisk != nil {
		if mg.Spec.InitProvider.BootDisk.InitializeParams != nil {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Image", "ImageList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BootDisk.InitializeParams.Image),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.InitProvider.BootDisk.InitializeParams.ImageRef,
					Selector:     mg.Spec.InitProvider.BootDisk.InitializeParams.ImageSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.BootDisk.InitializeParams.Image")
			}
			mg.Spec.InitProvider.BootDisk.InitializeParams.Image = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.BootDisk.InitializeParams.ImageRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.NetworkInterface); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NetworkInterface[i3].Network),
				Extract:      common.SelfLinkExtractor(),
				Reference:    mg.Spec.InitProvider.NetworkInterface[i3].NetworkRef,
				Selector:     mg.Spec.InitProvider.NetworkInterface[i3].NetworkSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.NetworkInterface[i3].Network")
		}
		mg.Spec.InitProvider.NetworkInterface[i3].Network = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.NetworkInterface[i3].NetworkRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.NetworkInterface); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Subnetwork", "SubnetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NetworkInterface[i3].Subnetwork),
				Extract:      common.SelfLinkExtractor(),
				Reference:    mg.Spec.InitProvider.NetworkInterface[i3].SubnetworkRef,
				Selector:     mg.Spec.InitProvider.NetworkInterface[i3].SubnetworkSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.NetworkInterface[i3].Subnetwork")
		}
		mg.Spec.InitProvider.NetworkInterface[i3].Subnetwork = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.NetworkInterface[i3].SubnetworkRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.ServiceAccount != nil {
		{
			m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "ServiceAccount", "ServiceAccountList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ServiceAccount.Email),
				Extract:      resource.ExtractParamPath("email", true),
				Reference:    mg.Spec.InitProvider.ServiceAccount.EmailRef,
				Selector:     mg.Spec.InitProvider.ServiceAccount.EmailSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ServiceAccount.Email")
		}
		mg.Spec.InitProvider.ServiceAccount.Email = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ServiceAccount.EmailRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this InstanceFromTemplate.
func (mg *InstanceFromTemplate) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.NetworkInterface); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkInterface[i3].Network),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.NetworkInterface[i3].NetworkRef,
				Selector:     mg.Spec.ForProvider.NetworkInterface[i3].NetworkSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.NetworkInterface[i3].Network")
		}
		mg.Spec.ForProvider.NetworkInterface[i3].Network = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.NetworkInterface[i3].NetworkRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.NetworkInterface); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Subnetwork", "SubnetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkInterface[i3].Subnetwork),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.NetworkInterface[i3].SubnetworkRef,
				Selector:     mg.Spec.ForProvider.NetworkInterface[i3].SubnetworkSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.NetworkInterface[i3].Subnetwork")
		}
		mg.Spec.ForProvider.NetworkInterface[i3].Subnetwork = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.NetworkInterface[i3].SubnetworkRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "InstanceTemplate", "InstanceTemplateList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SourceInstanceTemplate),
			Extract:      common.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SourceInstanceTemplateRef,
			Selector:     mg.Spec.ForProvider.SourceInstanceTemplateSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SourceInstanceTemplate")
	}
	mg.Spec.ForProvider.SourceInstanceTemplate = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SourceInstanceTemplateRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.NetworkInterface); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NetworkInterface[i3].Network),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.NetworkInterface[i3].NetworkRef,
				Selector:     mg.Spec.InitProvider.NetworkInterface[i3].NetworkSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.NetworkInterface[i3].Network")
		}
		mg.Spec.InitProvider.NetworkInterface[i3].Network = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.NetworkInterface[i3].NetworkRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.NetworkInterface); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Subnetwork", "SubnetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NetworkInterface[i3].Subnetwork),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.NetworkInterface[i3].SubnetworkRef,
				Selector:     mg.Spec.InitProvider.NetworkInterface[i3].SubnetworkSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.NetworkInterface[i3].Subnetwork")
		}
		mg.Spec.InitProvider.NetworkInterface[i3].Subnetwork = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.NetworkInterface[i3].SubnetworkRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "InstanceTemplate", "InstanceTemplateList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SourceInstanceTemplate),
			Extract:      common.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.SourceInstanceTemplateRef,
			Selector:     mg.Spec.InitProvider.SourceInstanceTemplateSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SourceInstanceTemplate")
	}
	mg.Spec.InitProvider.SourceInstanceTemplate = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SourceInstanceTemplateRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this InstanceGroupManager.
func (mg *InstanceGroupManager) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	if mg.Spec.ForProvider.AutoHealingPolicies != nil {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "HealthCheck", "HealthCheckList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AutoHealingPolicies.HealthCheck),
				Extract:      common.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.AutoHealingPolicies.HealthCheckRef,
				Selector:     mg.Spec.ForProvider.AutoHealingPolicies.HealthCheckSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.AutoHealingPolicies.HealthCheck")
		}
		mg.Spec.ForProvider.AutoHealingPolicies.HealthCheck = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.AutoHealingPolicies.HealthCheckRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "TargetPool", "TargetPoolList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.TargetPools),
			Extract:       common.SelfLinkExtractor(),
			References:    mg.Spec.ForProvider.TargetPoolsRefs,
			Selector:      mg.Spec.ForProvider.TargetPoolsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TargetPools")
	}
	mg.Spec.ForProvider.TargetPools = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.TargetPoolsRefs = mrsp.ResolvedReferences

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Version); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "InstanceTemplate", "InstanceTemplateList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Version[i3].InstanceTemplate),
				Extract:      common.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.Version[i3].InstanceTemplateRef,
				Selector:     mg.Spec.ForProvider.Version[i3].InstanceTemplateSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Version[i3].InstanceTemplate")
		}
		mg.Spec.ForProvider.Version[i3].InstanceTemplate = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Version[i3].InstanceTemplateRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.AutoHealingPolicies != nil {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "HealthCheck", "HealthCheckList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.AutoHealingPolicies.HealthCheck),
				Extract:      common.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.AutoHealingPolicies.HealthCheckRef,
				Selector:     mg.Spec.InitProvider.AutoHealingPolicies.HealthCheckSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.AutoHealingPolicies.HealthCheck")
		}
		mg.Spec.InitProvider.AutoHealingPolicies.HealthCheck = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.AutoHealingPolicies.HealthCheckRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "TargetPool", "TargetPoolList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.TargetPools),
			Extract:       common.SelfLinkExtractor(),
			References:    mg.Spec.InitProvider.TargetPoolsRefs,
			Selector:      mg.Spec.InitProvider.TargetPoolsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.TargetPools")
	}
	mg.Spec.InitProvider.TargetPools = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.TargetPoolsRefs = mrsp.ResolvedReferences

	for i3 := 0; i3 < len(mg.Spec.InitProvider.Version); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "InstanceTemplate", "InstanceTemplateList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Version[i3].InstanceTemplate),
				Extract:      common.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.Version[i3].InstanceTemplateRef,
				Selector:     mg.Spec.InitProvider.Version[i3].InstanceTemplateSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Version[i3].InstanceTemplate")
		}
		mg.Spec.InitProvider.Version[i3].InstanceTemplate = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Version[i3].InstanceTemplateRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this InstanceIAMMember.
func (mg *InstanceIAMMember) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Instance", "InstanceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.InstanceName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.InstanceNameRef,
			Selector:     mg.Spec.ForProvider.InstanceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.InstanceName")
	}
	mg.Spec.ForProvider.InstanceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.InstanceNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Instance", "InstanceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.InstanceName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.InstanceNameRef,
			Selector:     mg.Spec.InitProvider.InstanceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.InstanceName")
	}
	mg.Spec.InitProvider.InstanceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.InstanceNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this InstanceTemplate.
func (mg *InstanceTemplate) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Disk); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "ResourcePolicy", "ResourcePolicyList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.Disk[i3].ResourcePolicies),
				Extract:       resource.ExtractResourceID(),
				References:    mg.Spec.ForProvider.Disk[i3].ResourcePoliciesRefs,
				Selector:      mg.Spec.ForProvider.Disk[i3].ResourcePoliciesSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Disk[i3].ResourcePolicies")
		}
		mg.Spec.ForProvider.Disk[i3].ResourcePolicies = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.Disk[i3].ResourcePoliciesRefs = mrsp.ResolvedReferences

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Disk); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Disk", "DiskList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Disk[i3].Source),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.Disk[i3].SourceRef,
				Selector:     mg.Spec.ForProvider.Disk[i3].SourceSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Disk[i3].Source")
		}
		mg.Spec.ForProvider.Disk[i3].Source = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Disk[i3].SourceRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.NetworkInterface); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkInterface[i3].Network),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.NetworkInterface[i3].NetworkRef,
				Selector:     mg.Spec.ForProvider.NetworkInterface[i3].NetworkSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.NetworkInterface[i3].Network")
		}
		mg.Spec.ForProvider.NetworkInterface[i3].Network = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.NetworkInterface[i3].NetworkRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.NetworkInterface); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Subnetwork", "SubnetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkInterface[i3].Subnetwork),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.NetworkInterface[i3].SubnetworkRef,
				Selector:     mg.Spec.ForProvider.NetworkInterface[i3].SubnetworkSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.NetworkInterface[i3].Subnetwork")
		}
		mg.Spec.ForProvider.NetworkInterface[i3].Subnetwork = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.NetworkInterface[i3].SubnetworkRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.ServiceAccount != nil {
		{
			m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "ServiceAccount", "ServiceAccountList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServiceAccount.Email),
				Extract:      resource.ExtractParamPath("email", true),
				Reference:    mg.Spec.ForProvider.ServiceAccount.EmailRef,
				Selector:     mg.Spec.ForProvider.ServiceAccount.EmailSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ServiceAccount.Email")
		}
		mg.Spec.ForProvider.ServiceAccount.Email = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ServiceAccount.EmailRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Disk); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "ResourcePolicy", "ResourcePolicyList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.Disk[i3].ResourcePolicies),
				Extract:       resource.ExtractResourceID(),
				References:    mg.Spec.InitProvider.Disk[i3].ResourcePoliciesRefs,
				Selector:      mg.Spec.InitProvider.Disk[i3].ResourcePoliciesSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Disk[i3].ResourcePolicies")
		}
		mg.Spec.InitProvider.Disk[i3].ResourcePolicies = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.InitProvider.Disk[i3].ResourcePoliciesRefs = mrsp.ResolvedReferences

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Disk); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Disk", "DiskList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Disk[i3].Source),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.Disk[i3].SourceRef,
				Selector:     mg.Spec.InitProvider.Disk[i3].SourceSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Disk[i3].Source")
		}
		mg.Spec.InitProvider.Disk[i3].Source = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Disk[i3].SourceRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.NetworkInterface); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NetworkInterface[i3].Network),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.NetworkInterface[i3].NetworkRef,
				Selector:     mg.Spec.InitProvider.NetworkInterface[i3].NetworkSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.NetworkInterface[i3].Network")
		}
		mg.Spec.InitProvider.NetworkInterface[i3].Network = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.NetworkInterface[i3].NetworkRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.NetworkInterface); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Subnetwork", "SubnetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NetworkInterface[i3].Subnetwork),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.NetworkInterface[i3].SubnetworkRef,
				Selector:     mg.Spec.InitProvider.NetworkInterface[i3].SubnetworkSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.NetworkInterface[i3].Subnetwork")
		}
		mg.Spec.InitProvider.NetworkInterface[i3].Subnetwork = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.NetworkInterface[i3].SubnetworkRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.ServiceAccount != nil {
		{
			m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "ServiceAccount", "ServiceAccountList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ServiceAccount.Email),
				Extract:      resource.ExtractParamPath("email", true),
				Reference:    mg.Spec.InitProvider.ServiceAccount.EmailRef,
				Selector:     mg.Spec.InitProvider.ServiceAccount.EmailSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ServiceAccount.Email")
		}
		mg.Spec.InitProvider.ServiceAccount.Email = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ServiceAccount.EmailRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this NodeGroup.
func (mg *NodeGroup) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "NodeTemplate", "NodeTemplateList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NodeTemplate),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.NodeTemplateRef,
			Selector:     mg.Spec.ForProvider.NodeTemplateSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NodeTemplate")
	}
	mg.Spec.ForProvider.NodeTemplate = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NodeTemplateRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.ShareSettings != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.ShareSettings.ProjectMap); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "Project", "ProjectList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ShareSettings.ProjectMap[i4].ID),
					Extract:      resource.ExtractParamPath("project_id", false),
					Reference:    mg.Spec.ForProvider.ShareSettings.ProjectMap[i4].IDRef,
					Selector:     mg.Spec.ForProvider.ShareSettings.ProjectMap[i4].IDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.ShareSettings.ProjectMap[i4].ID")
			}
			mg.Spec.ForProvider.ShareSettings.ProjectMap[i4].ID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.ShareSettings.ProjectMap[i4].IDRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.ShareSettings != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.ShareSettings.ProjectMap); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "Project", "ProjectList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ShareSettings.ProjectMap[i4].ProjectID),
					Extract:      resource.ExtractParamPath("project_id", false),
					Reference:    mg.Spec.ForProvider.ShareSettings.ProjectMap[i4].ProjectIDRef,
					Selector:     mg.Spec.ForProvider.ShareSettings.ProjectMap[i4].ProjectIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.ShareSettings.ProjectMap[i4].ProjectID")
			}
			mg.Spec.ForProvider.ShareSettings.ProjectMap[i4].ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.ShareSettings.ProjectMap[i4].ProjectIDRef = rsp.ResolvedReference

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "NodeTemplate", "NodeTemplateList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NodeTemplate),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.NodeTemplateRef,
			Selector:     mg.Spec.InitProvider.NodeTemplateSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.NodeTemplate")
	}
	mg.Spec.InitProvider.NodeTemplate = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NodeTemplateRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.ShareSettings != nil {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.ShareSettings.ProjectMap); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "Project", "ProjectList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ShareSettings.ProjectMap[i4].ID),
					Extract:      resource.ExtractParamPath("project_id", false),
					Reference:    mg.Spec.InitProvider.ShareSettings.ProjectMap[i4].IDRef,
					Selector:     mg.Spec.InitProvider.ShareSettings.ProjectMap[i4].IDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.ShareSettings.ProjectMap[i4].ID")
			}
			mg.Spec.InitProvider.ShareSettings.ProjectMap[i4].ID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.ShareSettings.ProjectMap[i4].IDRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.ShareSettings != nil {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.ShareSettings.ProjectMap); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "Project", "ProjectList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ShareSettings.ProjectMap[i4].ProjectID),
					Extract:      resource.ExtractParamPath("project_id", false),
					Reference:    mg.Spec.InitProvider.ShareSettings.ProjectMap[i4].ProjectIDRef,
					Selector:     mg.Spec.InitProvider.ShareSettings.ProjectMap[i4].ProjectIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.ShareSettings.ProjectMap[i4].ProjectID")
			}
			mg.Spec.InitProvider.ShareSettings.ProjectMap[i4].ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.ShareSettings.ProjectMap[i4].ProjectIDRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this PacketMirroring.
func (mg *PacketMirroring) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	if mg.Spec.ForProvider.CollectorIlb != nil {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "ForwardingRule", "ForwardingRuleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CollectorIlb.URL),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.CollectorIlb.URLRef,
				Selector:     mg.Spec.ForProvider.CollectorIlb.URLSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.CollectorIlb.URL")
		}
		mg.Spec.ForProvider.CollectorIlb.URL = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.CollectorIlb.URLRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.MirroredResources != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.MirroredResources.Instances); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Instance", "InstanceList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.MirroredResources.Instances[i4].URL),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.ForProvider.MirroredResources.Instances[i4].URLRef,
					Selector:     mg.Spec.ForProvider.MirroredResources.Instances[i4].URLSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.MirroredResources.Instances[i4].URL")
			}
			mg.Spec.ForProvider.MirroredResources.Instances[i4].URL = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.MirroredResources.Instances[i4].URLRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.Network != nil {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Network.URL),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.Network.URLRef,
				Selector:     mg.Spec.ForProvider.Network.URLSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Network.URL")
		}
		mg.Spec.ForProvider.Network.URL = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Network.URLRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.CollectorIlb != nil {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "ForwardingRule", "ForwardingRuleList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CollectorIlb.URL),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.CollectorIlb.URLRef,
				Selector:     mg.Spec.InitProvider.CollectorIlb.URLSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.CollectorIlb.URL")
		}
		mg.Spec.InitProvider.CollectorIlb.URL = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.CollectorIlb.URLRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.MirroredResources != nil {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.MirroredResources.Instances); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Instance", "InstanceList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.MirroredResources.Instances[i4].URL),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.InitProvider.MirroredResources.Instances[i4].URLRef,
					Selector:     mg.Spec.InitProvider.MirroredResources.Instances[i4].URLSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.MirroredResources.Instances[i4].URL")
			}
			mg.Spec.InitProvider.MirroredResources.Instances[i4].URL = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.MirroredResources.Instances[i4].URLRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.Network != nil {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Network.URL),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.Network.URLRef,
				Selector:     mg.Spec.InitProvider.Network.URLSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Network.URL")
		}
		mg.Spec.InitProvider.Network.URL = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Network.URLRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this PerInstanceConfig.
func (mg *PerInstanceConfig) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "InstanceGroupManager", "InstanceGroupManagerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.InstanceGroupManager),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.InstanceGroupManagerRef,
			Selector:     mg.Spec.ForProvider.InstanceGroupManagerSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.InstanceGroupManager")
	}
	mg.Spec.ForProvider.InstanceGroupManager = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.InstanceGroupManagerRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.PreservedState != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.PreservedState.Disk); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Disk", "DiskList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PreservedState.Disk[i4].Source),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.ForProvider.PreservedState.Disk[i4].SourceRef,
					Selector:     mg.Spec.ForProvider.PreservedState.Disk[i4].SourceSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.PreservedState.Disk[i4].Source")
			}
			mg.Spec.ForProvider.PreservedState.Disk[i4].Source = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.PreservedState.Disk[i4].SourceRef = rsp.ResolvedReference

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "InstanceGroupManager", "InstanceGroupManagerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Zone),
			Extract:      resource.ExtractParamPath("zone", false),
			Reference:    mg.Spec.ForProvider.ZoneRef,
			Selector:     mg.Spec.ForProvider.ZoneSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Zone")
	}
	mg.Spec.ForProvider.Zone = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ZoneRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "InstanceGroupManager", "InstanceGroupManagerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.InstanceGroupManager),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.InstanceGroupManagerRef,
			Selector:     mg.Spec.InitProvider.InstanceGroupManagerSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.InstanceGroupManager")
	}
	mg.Spec.InitProvider.InstanceGroupManager = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.InstanceGroupManagerRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.PreservedState != nil {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.PreservedState.Disk); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Disk", "DiskList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PreservedState.Disk[i4].Source),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.InitProvider.PreservedState.Disk[i4].SourceRef,
					Selector:     mg.Spec.InitProvider.PreservedState.Disk[i4].SourceSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.PreservedState.Disk[i4].Source")
			}
			mg.Spec.InitProvider.PreservedState.Disk[i4].Source = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.PreservedState.Disk[i4].SourceRef = rsp.ResolvedReference

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "InstanceGroupManager", "InstanceGroupManagerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Zone),
			Extract:      resource.ExtractParamPath("zone", false),
			Reference:    mg.Spec.InitProvider.ZoneRef,
			Selector:     mg.Spec.InitProvider.ZoneSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Zone")
	}
	mg.Spec.InitProvider.Zone = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ZoneRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RegionAutoscaler.
func (mg *RegionAutoscaler) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionInstanceGroupManager", "RegionInstanceGroupManagerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Target),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.TargetRef,
			Selector:     mg.Spec.ForProvider.TargetSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Target")
	}
	mg.Spec.ForProvider.Target = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TargetRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionInstanceGroupManager", "RegionInstanceGroupManagerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Target),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.TargetRef,
			Selector:     mg.Spec.InitProvider.TargetSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Target")
	}
	mg.Spec.InitProvider.Target = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TargetRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RegionBackendService.
func (mg *RegionBackendService) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Backend); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionInstanceGroupManager", "RegionInstanceGroupManagerList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Backend[i3].Group),
				Extract:      compute.InstanceGroupExtractor(),
				Reference:    mg.Spec.ForProvider.Backend[i3].GroupRef,
				Selector:     mg.Spec.ForProvider.Backend[i3].GroupSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Backend[i3].Group")
		}
		mg.Spec.ForProvider.Backend[i3].Group = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Backend[i3].GroupRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionHealthCheck", "RegionHealthCheckList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.HealthChecks),
			Extract:       common.SelfLinkExtractor(),
			References:    mg.Spec.ForProvider.HealthChecksRefs,
			Selector:      mg.Spec.ForProvider.HealthChecksSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.HealthChecks")
	}
	mg.Spec.ForProvider.HealthChecks = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.HealthChecksRefs = mrsp.ResolvedReferences

	for i3 := 0; i3 < len(mg.Spec.InitProvider.Backend); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionInstanceGroupManager", "RegionInstanceGroupManagerList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Backend[i3].Group),
				Extract:      compute.InstanceGroupExtractor(),
				Reference:    mg.Spec.InitProvider.Backend[i3].GroupRef,
				Selector:     mg.Spec.InitProvider.Backend[i3].GroupSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Backend[i3].Group")
		}
		mg.Spec.InitProvider.Backend[i3].Group = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Backend[i3].GroupRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionHealthCheck", "RegionHealthCheckList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.HealthChecks),
			Extract:       common.SelfLinkExtractor(),
			References:    mg.Spec.InitProvider.HealthChecksRefs,
			Selector:      mg.Spec.InitProvider.HealthChecksSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.HealthChecks")
	}
	mg.Spec.InitProvider.HealthChecks = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.HealthChecksRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this RegionDisk.
func (mg *RegionDisk) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	if mg.Spec.ForProvider.AsyncPrimaryDisk != nil {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionDisk", "RegionDiskList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AsyncPrimaryDisk.Disk),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.AsyncPrimaryDisk.DiskRef,
				Selector:     mg.Spec.ForProvider.AsyncPrimaryDisk.DiskSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.AsyncPrimaryDisk.Disk")
		}
		mg.Spec.ForProvider.AsyncPrimaryDisk.Disk = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.AsyncPrimaryDisk.DiskRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Snapshot", "SnapshotList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Snapshot),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SnapshotRef,
			Selector:     mg.Spec.ForProvider.SnapshotSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Snapshot")
	}
	mg.Spec.ForProvider.Snapshot = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SnapshotRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.AsyncPrimaryDisk != nil {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionDisk", "RegionDiskList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.AsyncPrimaryDisk.Disk),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.AsyncPrimaryDisk.DiskRef,
				Selector:     mg.Spec.InitProvider.AsyncPrimaryDisk.DiskSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.AsyncPrimaryDisk.Disk")
		}
		mg.Spec.InitProvider.AsyncPrimaryDisk.Disk = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.AsyncPrimaryDisk.DiskRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Snapshot", "SnapshotList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Snapshot),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.SnapshotRef,
			Selector:     mg.Spec.InitProvider.SnapshotSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Snapshot")
	}
	mg.Spec.InitProvider.Snapshot = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SnapshotRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RegionDiskIAMMember.
func (mg *RegionDiskIAMMember) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionDisk", "RegionDiskList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Name),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.NameRef,
			Selector:     mg.Spec.ForProvider.NameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Name")
	}
	mg.Spec.ForProvider.Name = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionDisk", "RegionDiskList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Name),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.NameRef,
			Selector:     mg.Spec.InitProvider.NameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Name")
	}
	mg.Spec.InitProvider.Name = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RegionInstanceGroupManager.
func (mg *RegionInstanceGroupManager) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	if mg.Spec.ForProvider.AutoHealingPolicies != nil {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "HealthCheck", "HealthCheckList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AutoHealingPolicies.HealthCheck),
				Extract:      common.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.AutoHealingPolicies.HealthCheckRef,
				Selector:     mg.Spec.ForProvider.AutoHealingPolicies.HealthCheckSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.AutoHealingPolicies.HealthCheck")
		}
		mg.Spec.ForProvider.AutoHealingPolicies.HealthCheck = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.AutoHealingPolicies.HealthCheckRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "TargetPool", "TargetPoolList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.TargetPools),
			Extract:       common.SelfLinkExtractor(),
			References:    mg.Spec.ForProvider.TargetPoolsRefs,
			Selector:      mg.Spec.ForProvider.TargetPoolsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TargetPools")
	}
	mg.Spec.ForProvider.TargetPools = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.TargetPoolsRefs = mrsp.ResolvedReferences

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Version); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "InstanceTemplate", "InstanceTemplateList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Version[i3].InstanceTemplate),
				Extract:      common.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.Version[i3].InstanceTemplateRef,
				Selector:     mg.Spec.ForProvider.Version[i3].InstanceTemplateSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Version[i3].InstanceTemplate")
		}
		mg.Spec.ForProvider.Version[i3].InstanceTemplate = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Version[i3].InstanceTemplateRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.AutoHealingPolicies != nil {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "HealthCheck", "HealthCheckList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.AutoHealingPolicies.HealthCheck),
				Extract:      common.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.AutoHealingPolicies.HealthCheckRef,
				Selector:     mg.Spec.InitProvider.AutoHealingPolicies.HealthCheckSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.AutoHealingPolicies.HealthCheck")
		}
		mg.Spec.InitProvider.AutoHealingPolicies.HealthCheck = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.AutoHealingPolicies.HealthCheckRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "TargetPool", "TargetPoolList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.TargetPools),
			Extract:       common.SelfLinkExtractor(),
			References:    mg.Spec.InitProvider.TargetPoolsRefs,
			Selector:      mg.Spec.InitProvider.TargetPoolsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.TargetPools")
	}
	mg.Spec.InitProvider.TargetPools = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.TargetPoolsRefs = mrsp.ResolvedReferences

	for i3 := 0; i3 < len(mg.Spec.InitProvider.Version); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "InstanceTemplate", "InstanceTemplateList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Version[i3].InstanceTemplate),
				Extract:      common.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.Version[i3].InstanceTemplateRef,
				Selector:     mg.Spec.InitProvider.Version[i3].InstanceTemplateSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Version[i3].InstanceTemplate")
		}
		mg.Spec.InitProvider.Version[i3].InstanceTemplate = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Version[i3].InstanceTemplateRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this RegionNetworkEndpointGroup.
func (mg *RegionNetworkEndpointGroup) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	if mg.Spec.ForProvider.CloudFunction != nil {
		{
			m, l, err = apisresolver.GetManagedResource("cloudfunctions.gcp.upbound.io", "v1beta2", "Function", "FunctionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CloudFunction.Function),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.CloudFunction.FunctionRef,
				Selector:     mg.Spec.ForProvider.CloudFunction.FunctionSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.CloudFunction.Function")
		}
		mg.Spec.ForProvider.CloudFunction.Function = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.CloudFunction.FunctionRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.CloudRun != nil {
		{
			m, l, err = apisresolver.GetManagedResource("cloudrun.gcp.upbound.io", "v1beta2", "Service", "ServiceList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CloudRun.Service),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.CloudRun.ServiceRef,
				Selector:     mg.Spec.ForProvider.CloudRun.ServiceSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.CloudRun.Service")
		}
		mg.Spec.ForProvider.CloudRun.Service = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.CloudRun.ServiceRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Network),
			Extract:      resource.ExtractParamPath("self_link", true),
			Reference:    mg.Spec.ForProvider.NetworkRef,
			Selector:     mg.Spec.ForProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Network")
	}
	mg.Spec.ForProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "ServiceAttachment", "ServiceAttachmentList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PscTargetService),
			Extract:      resource.ExtractParamPath("self_link", true),
			Reference:    mg.Spec.ForProvider.PscTargetServiceRef,
			Selector:     mg.Spec.ForProvider.PscTargetServiceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PscTargetService")
	}
	mg.Spec.ForProvider.PscTargetService = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PscTargetServiceRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Subnetwork", "SubnetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Subnetwork),
			Extract:      resource.ExtractParamPath("self_link", true),
			Reference:    mg.Spec.ForProvider.SubnetworkRef,
			Selector:     mg.Spec.ForProvider.SubnetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Subnetwork")
	}
	mg.Spec.ForProvider.Subnetwork = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SubnetworkRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.CloudFunction != nil {
		{
			m, l, err = apisresolver.GetManagedResource("cloudfunctions.gcp.upbound.io", "v1beta2", "Function", "FunctionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CloudFunction.Function),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.CloudFunction.FunctionRef,
				Selector:     mg.Spec.InitProvider.CloudFunction.FunctionSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.CloudFunction.Function")
		}
		mg.Spec.InitProvider.CloudFunction.Function = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.CloudFunction.FunctionRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.CloudRun != nil {
		{
			m, l, err = apisresolver.GetManagedResource("cloudrun.gcp.upbound.io", "v1beta2", "Service", "ServiceList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CloudRun.Service),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.CloudRun.ServiceRef,
				Selector:     mg.Spec.InitProvider.CloudRun.ServiceSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.CloudRun.Service")
		}
		mg.Spec.InitProvider.CloudRun.Service = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.CloudRun.ServiceRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Network),
			Extract:      resource.ExtractParamPath("self_link", true),
			Reference:    mg.Spec.InitProvider.NetworkRef,
			Selector:     mg.Spec.InitProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Network")
	}
	mg.Spec.InitProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "ServiceAttachment", "ServiceAttachmentList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PscTargetService),
			Extract:      resource.ExtractParamPath("self_link", true),
			Reference:    mg.Spec.InitProvider.PscTargetServiceRef,
			Selector:     mg.Spec.InitProvider.PscTargetServiceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.PscTargetService")
	}
	mg.Spec.InitProvider.PscTargetService = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PscTargetServiceRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Subnetwork", "SubnetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Subnetwork),
			Extract:      resource.ExtractParamPath("self_link", true),
			Reference:    mg.Spec.InitProvider.SubnetworkRef,
			Selector:     mg.Spec.InitProvider.SubnetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Subnetwork")
	}
	mg.Spec.InitProvider.Subnetwork = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SubnetworkRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RegionPerInstanceConfig.
func (mg *RegionPerInstanceConfig) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	if mg.Spec.ForProvider.PreservedState != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.PreservedState.Disk); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Disk", "DiskList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PreservedState.Disk[i4].Source),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.ForProvider.PreservedState.Disk[i4].SourceRef,
					Selector:     mg.Spec.ForProvider.PreservedState.Disk[i4].SourceSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.PreservedState.Disk[i4].Source")
			}
			mg.Spec.ForProvider.PreservedState.Disk[i4].Source = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.PreservedState.Disk[i4].SourceRef = rsp.ResolvedReference

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionInstanceGroupManager", "RegionInstanceGroupManagerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Region),
			Extract:      resource.ExtractParamPath("region", false),
			Reference:    mg.Spec.ForProvider.RegionRef,
			Selector:     mg.Spec.ForProvider.RegionSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Region")
	}
	mg.Spec.ForProvider.Region = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RegionRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionInstanceGroupManager", "RegionInstanceGroupManagerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RegionInstanceGroupManager),
			Extract:      resource.ExtractParamPath("name", false),
			Reference:    mg.Spec.ForProvider.RegionInstanceGroupManagerRef,
			Selector:     mg.Spec.ForProvider.RegionInstanceGroupManagerSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RegionInstanceGroupManager")
	}
	mg.Spec.ForProvider.RegionInstanceGroupManager = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RegionInstanceGroupManagerRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.PreservedState != nil {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.PreservedState.Disk); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Disk", "DiskList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PreservedState.Disk[i4].Source),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.InitProvider.PreservedState.Disk[i4].SourceRef,
					Selector:     mg.Spec.InitProvider.PreservedState.Disk[i4].SourceSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.PreservedState.Disk[i4].Source")
			}
			mg.Spec.InitProvider.PreservedState.Disk[i4].Source = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.PreservedState.Disk[i4].SourceRef = rsp.ResolvedReference

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionInstanceGroupManager", "RegionInstanceGroupManagerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Region),
			Extract:      resource.ExtractParamPath("region", false),
			Reference:    mg.Spec.InitProvider.RegionRef,
			Selector:     mg.Spec.InitProvider.RegionSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Region")
	}
	mg.Spec.InitProvider.Region = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RegionRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionInstanceGroupManager", "RegionInstanceGroupManagerList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RegionInstanceGroupManager),
			Extract:      resource.ExtractParamPath("name", false),
			Reference:    mg.Spec.InitProvider.RegionInstanceGroupManagerRef,
			Selector:     mg.Spec.InitProvider.RegionInstanceGroupManagerSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.RegionInstanceGroupManager")
	}
	mg.Spec.InitProvider.RegionInstanceGroupManager = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RegionInstanceGroupManagerRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RegionURLMap.
func (mg *RegionURLMap) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	if mg.Spec.ForProvider.DefaultRouteAction != nil {
		if mg.Spec.ForProvider.DefaultRouteAction.RequestMirrorPolicy != nil {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionBackendService", "RegionBackendServiceList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DefaultRouteAction.RequestMirrorPolicy.BackendService),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.ForProvider.DefaultRouteAction.RequestMirrorPolicy.BackendServiceRef,
					Selector:     mg.Spec.ForProvider.DefaultRouteAction.RequestMirrorPolicy.BackendServiceSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.DefaultRouteAction.RequestMirrorPolicy.BackendService")
			}
			mg.Spec.ForProvider.DefaultRouteAction.RequestMirrorPolicy.BackendService = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.DefaultRouteAction.RequestMirrorPolicy.BackendServiceRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.DefaultRouteAction != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.DefaultRouteAction.WeightedBackendServices); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionBackendService", "RegionBackendServiceList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DefaultRouteAction.WeightedBackendServices[i4].BackendService),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.ForProvider.DefaultRouteAction.WeightedBackendServices[i4].BackendServiceRef,
					Selector:     mg.Spec.ForProvider.DefaultRouteAction.WeightedBackendServices[i4].BackendServiceSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.DefaultRouteAction.WeightedBackendServices[i4].BackendService")
			}
			mg.Spec.ForProvider.DefaultRouteAction.WeightedBackendServices[i4].BackendService = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.DefaultRouteAction.WeightedBackendServices[i4].BackendServiceRef = rsp.ResolvedReference

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionBackendService", "RegionBackendServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DefaultService),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DefaultServiceRef,
			Selector:     mg.Spec.ForProvider.DefaultServiceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DefaultService")
	}
	mg.Spec.ForProvider.DefaultService = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DefaultServiceRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.PathMatcher); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionBackendService", "RegionBackendServiceList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PathMatcher[i3].DefaultService),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.PathMatcher[i3].DefaultServiceRef,
				Selector:     mg.Spec.ForProvider.PathMatcher[i3].DefaultServiceSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.PathMatcher[i3].DefaultService")
		}
		mg.Spec.ForProvider.PathMatcher[i3].DefaultService = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.PathMatcher[i3].DefaultServiceRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.PathMatcher); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.PathMatcher[i3].PathRule); i4++ {
			if mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction != nil {
				if mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction.RequestMirrorPolicy != nil {
					{
						m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionBackendService", "RegionBackendServiceList")
						if err != nil {
							return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
						}
						rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
							CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction.RequestMirrorPolicy.BackendService),
							Extract:      resource.ExtractResourceID(),
							Reference:    mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction.RequestMirrorPolicy.BackendServiceRef,
							Selector:     mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction.RequestMirrorPolicy.BackendServiceSelector,
							To:           reference.To{List: l, Managed: m},
						})
					}
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction.RequestMirrorPolicy.BackendService")
					}
					mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction.RequestMirrorPolicy.BackendService = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction.RequestMirrorPolicy.BackendServiceRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.PathMatcher); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.PathMatcher[i3].PathRule); i4++ {
			if mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction != nil {
				for i6 := 0; i6 < len(mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction.WeightedBackendServices); i6++ {
					{
						m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionBackendService", "RegionBackendServiceList")
						if err != nil {
							return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
						}
						rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
							CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction.WeightedBackendServices[i6].BackendService),
							Extract:      resource.ExtractResourceID(),
							Reference:    mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction.WeightedBackendServices[i6].BackendServiceRef,
							Selector:     mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction.WeightedBackendServices[i6].BackendServiceSelector,
							To:           reference.To{List: l, Managed: m},
						})
					}
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction.WeightedBackendServices[i6].BackendService")
					}
					mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction.WeightedBackendServices[i6].BackendService = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction.WeightedBackendServices[i6].BackendServiceRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.PathMatcher); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.PathMatcher[i3].PathRule); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionBackendService", "RegionBackendServiceList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].Service),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].ServiceRef,
					Selector:     mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].ServiceSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].Service")
			}
			mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].Service = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].ServiceRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.PathMatcher); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.PathMatcher[i3].RouteRules); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionBackendService", "RegionBackendServiceList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PathMatcher[i3].RouteRules[i4].Service),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.ForProvider.PathMatcher[i3].RouteRules[i4].ServiceRef,
					Selector:     mg.Spec.ForProvider.PathMatcher[i3].RouteRules[i4].ServiceSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.PathMatcher[i3].RouteRules[i4].Service")
			}
			mg.Spec.ForProvider.PathMatcher[i3].RouteRules[i4].Service = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.PathMatcher[i3].RouteRules[i4].ServiceRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Test); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionBackendService", "RegionBackendServiceList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Test[i3].Service),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.Test[i3].ServiceRef,
				Selector:     mg.Spec.ForProvider.Test[i3].ServiceSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Test[i3].Service")
		}
		mg.Spec.ForProvider.Test[i3].Service = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Test[i3].ServiceRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.DefaultRouteAction != nil {
		if mg.Spec.InitProvider.DefaultRouteAction.RequestMirrorPolicy != nil {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionBackendService", "RegionBackendServiceList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DefaultRouteAction.RequestMirrorPolicy.BackendService),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.InitProvider.DefaultRouteAction.RequestMirrorPolicy.BackendServiceRef,
					Selector:     mg.Spec.InitProvider.DefaultRouteAction.RequestMirrorPolicy.BackendServiceSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.DefaultRouteAction.RequestMirrorPolicy.BackendService")
			}
			mg.Spec.InitProvider.DefaultRouteAction.RequestMirrorPolicy.BackendService = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.DefaultRouteAction.RequestMirrorPolicy.BackendServiceRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.DefaultRouteAction != nil {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.DefaultRouteAction.WeightedBackendServices); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionBackendService", "RegionBackendServiceList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DefaultRouteAction.WeightedBackendServices[i4].BackendService),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.InitProvider.DefaultRouteAction.WeightedBackendServices[i4].BackendServiceRef,
					Selector:     mg.Spec.InitProvider.DefaultRouteAction.WeightedBackendServices[i4].BackendServiceSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.DefaultRouteAction.WeightedBackendServices[i4].BackendService")
			}
			mg.Spec.InitProvider.DefaultRouteAction.WeightedBackendServices[i4].BackendService = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.DefaultRouteAction.WeightedBackendServices[i4].BackendServiceRef = rsp.ResolvedReference

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionBackendService", "RegionBackendServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DefaultService),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.DefaultServiceRef,
			Selector:     mg.Spec.InitProvider.DefaultServiceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DefaultService")
	}
	mg.Spec.InitProvider.DefaultService = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DefaultServiceRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.PathMatcher); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionBackendService", "RegionBackendServiceList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PathMatcher[i3].DefaultService),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.PathMatcher[i3].DefaultServiceRef,
				Selector:     mg.Spec.InitProvider.PathMatcher[i3].DefaultServiceSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.PathMatcher[i3].DefaultService")
		}
		mg.Spec.InitProvider.PathMatcher[i3].DefaultService = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.PathMatcher[i3].DefaultServiceRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.PathMatcher); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.PathMatcher[i3].PathRule); i4++ {
			if mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction != nil {
				if mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction.RequestMirrorPolicy != nil {
					{
						m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionBackendService", "RegionBackendServiceList")
						if err != nil {
							return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
						}
						rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
							CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction.RequestMirrorPolicy.BackendService),
							Extract:      resource.ExtractResourceID(),
							Reference:    mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction.RequestMirrorPolicy.BackendServiceRef,
							Selector:     mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction.RequestMirrorPolicy.BackendServiceSelector,
							To:           reference.To{List: l, Managed: m},
						})
					}
					if err != nil {
						return errors.Wrap(err, "mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction.RequestMirrorPolicy.BackendService")
					}
					mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction.RequestMirrorPolicy.BackendService = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction.RequestMirrorPolicy.BackendServiceRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.PathMatcher); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.PathMatcher[i3].PathRule); i4++ {
			if mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction != nil {
				for i6 := 0; i6 < len(mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction.WeightedBackendServices); i6++ {
					{
						m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionBackendService", "RegionBackendServiceList")
						if err != nil {
							return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
						}
						rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
							CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction.WeightedBackendServices[i6].BackendService),
							Extract:      resource.ExtractResourceID(),
							Reference:    mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction.WeightedBackendServices[i6].BackendServiceRef,
							Selector:     mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction.WeightedBackendServices[i6].BackendServiceSelector,
							To:           reference.To{List: l, Managed: m},
						})
					}
					if err != nil {
						return errors.Wrap(err, "mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction.WeightedBackendServices[i6].BackendService")
					}
					mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction.WeightedBackendServices[i6].BackendService = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction.WeightedBackendServices[i6].BackendServiceRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.PathMatcher); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.PathMatcher[i3].PathRule); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionBackendService", "RegionBackendServiceList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].Service),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].ServiceRef,
					Selector:     mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].ServiceSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].Service")
			}
			mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].Service = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].ServiceRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.PathMatcher); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.PathMatcher[i3].RouteRules); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionBackendService", "RegionBackendServiceList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PathMatcher[i3].RouteRules[i4].Service),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.InitProvider.PathMatcher[i3].RouteRules[i4].ServiceRef,
					Selector:     mg.Spec.InitProvider.PathMatcher[i3].RouteRules[i4].ServiceSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.PathMatcher[i3].RouteRules[i4].Service")
			}
			mg.Spec.InitProvider.PathMatcher[i3].RouteRules[i4].Service = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.PathMatcher[i3].RouteRules[i4].ServiceRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Test); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "RegionBackendService", "RegionBackendServiceList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Test[i3].Service),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.Test[i3].ServiceRef,
				Selector:     mg.Spec.InitProvider.Test[i3].ServiceSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Test[i3].Service")
		}
		mg.Spec.InitProvider.Test[i3].Service = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Test[i3].ServiceRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this Router.
func (mg *Router) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Network),
			Extract:      common.SelfLinkExtractor(),
			Reference:    mg.Spec.ForProvider.NetworkRef,
			Selector:     mg.Spec.ForProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Network")
	}
	mg.Spec.ForProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Network),
			Extract:      common.SelfLinkExtractor(),
			Reference:    mg.Spec.InitProvider.NetworkRef,
			Selector:     mg.Spec.InitProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Network")
	}
	mg.Spec.InitProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NetworkRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RouterNAT.
func (mg *RouterNAT) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Address", "AddressList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.NATIps),
			Extract:       resource.ExtractParamPath("self_link", true),
			References:    mg.Spec.ForProvider.NATIpsRefs,
			Selector:      mg.Spec.ForProvider.NATIpsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NATIps")
	}
	mg.Spec.ForProvider.NATIps = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.NATIpsRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Router", "RouterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Router),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.RouterRef,
			Selector:     mg.Spec.ForProvider.RouterSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Router")
	}
	mg.Spec.ForProvider.Router = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RouterRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Rules); i3++ {
		if mg.Spec.ForProvider.Rules[i3].Action != nil {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Address", "AddressList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
					CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.Rules[i3].Action.SourceNATActiveIps),
					Extract:       resource.ExtractParamPath("self_link", true),
					References:    mg.Spec.ForProvider.Rules[i3].Action.SourceNATActiveIpsRefs,
					Selector:      mg.Spec.ForProvider.Rules[i3].Action.SourceNATActiveIpsSelector,
					To:            reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Rules[i3].Action.SourceNATActiveIps")
			}
			mg.Spec.ForProvider.Rules[i3].Action.SourceNATActiveIps = reference.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.ForProvider.Rules[i3].Action.SourceNATActiveIpsRefs = mrsp.ResolvedReferences

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Subnetwork); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Subnetwork", "SubnetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Subnetwork[i3].Name),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.Subnetwork[i3].NameRef,
				Selector:     mg.Spec.ForProvider.Subnetwork[i3].NameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Subnetwork[i3].Name")
		}
		mg.Spec.ForProvider.Subnetwork[i3].Name = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Subnetwork[i3].NameRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Address", "AddressList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.NATIps),
			Extract:       resource.ExtractParamPath("self_link", true),
			References:    mg.Spec.InitProvider.NATIpsRefs,
			Selector:      mg.Spec.InitProvider.NATIpsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.NATIps")
	}
	mg.Spec.InitProvider.NATIps = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.NATIpsRefs = mrsp.ResolvedReferences

	for i3 := 0; i3 < len(mg.Spec.InitProvider.Rules); i3++ {
		if mg.Spec.InitProvider.Rules[i3].Action != nil {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Address", "AddressList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
					CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.Rules[i3].Action.SourceNATActiveIps),
					Extract:       resource.ExtractParamPath("self_link", true),
					References:    mg.Spec.InitProvider.Rules[i3].Action.SourceNATActiveIpsRefs,
					Selector:      mg.Spec.InitProvider.Rules[i3].Action.SourceNATActiveIpsSelector,
					To:            reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Rules[i3].Action.SourceNATActiveIps")
			}
			mg.Spec.InitProvider.Rules[i3].Action.SourceNATActiveIps = reference.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.InitProvider.Rules[i3].Action.SourceNATActiveIpsRefs = mrsp.ResolvedReferences

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Subnetwork); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Subnetwork", "SubnetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Subnetwork[i3].Name),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.Subnetwork[i3].NameRef,
				Selector:     mg.Spec.InitProvider.Subnetwork[i3].NameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Subnetwork[i3].Name")
		}
		mg.Spec.InitProvider.Subnetwork[i3].Name = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Subnetwork[i3].NameRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this RouterPeer.
func (mg *RouterPeer) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RouterInterface", "RouterInterfaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Interface),
			Extract:      resource.ExtractParamPath("name", false),
			Reference:    mg.Spec.ForProvider.InterfaceRef,
			Selector:     mg.Spec.ForProvider.InterfaceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Interface")
	}
	mg.Spec.ForProvider.Interface = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.InterfaceRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Address", "AddressList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PeerIPAddress),
			Extract:      resource.ExtractParamPath("address", false),
			Reference:    mg.Spec.ForProvider.PeerIPAddressRef,
			Selector:     mg.Spec.ForProvider.PeerIPAddressSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PeerIPAddress")
	}
	mg.Spec.ForProvider.PeerIPAddress = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PeerIPAddressRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Router", "RouterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Region),
			Extract:      resource.ExtractParamPath("region", false),
			Reference:    mg.Spec.ForProvider.RegionRef,
			Selector:     mg.Spec.ForProvider.RegionSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Region")
	}
	mg.Spec.ForProvider.Region = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RegionRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Router", "RouterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Router),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.RouterRef,
			Selector:     mg.Spec.ForProvider.RouterSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Router")
	}
	mg.Spec.ForProvider.Router = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RouterRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Instance", "InstanceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RouterApplianceInstance),
			Extract:      resource.ExtractParamPath("self_link", true),
			Reference:    mg.Spec.ForProvider.RouterApplianceInstanceRef,
			Selector:     mg.Spec.ForProvider.RouterApplianceInstanceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RouterApplianceInstance")
	}
	mg.Spec.ForProvider.RouterApplianceInstance = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RouterApplianceInstanceRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "RouterInterface", "RouterInterfaceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Interface),
			Extract:      resource.ExtractParamPath("name", false),
			Reference:    mg.Spec.InitProvider.InterfaceRef,
			Selector:     mg.Spec.InitProvider.InterfaceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Interface")
	}
	mg.Spec.InitProvider.Interface = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.InterfaceRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Address", "AddressList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PeerIPAddress),
			Extract:      resource.ExtractParamPath("address", false),
			Reference:    mg.Spec.InitProvider.PeerIPAddressRef,
			Selector:     mg.Spec.InitProvider.PeerIPAddressSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.PeerIPAddress")
	}
	mg.Spec.InitProvider.PeerIPAddress = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PeerIPAddressRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Router", "RouterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Region),
			Extract:      resource.ExtractParamPath("region", false),
			Reference:    mg.Spec.InitProvider.RegionRef,
			Selector:     mg.Spec.InitProvider.RegionSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Region")
	}
	mg.Spec.InitProvider.Region = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RegionRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Instance", "InstanceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RouterApplianceInstance),
			Extract:      resource.ExtractParamPath("self_link", true),
			Reference:    mg.Spec.InitProvider.RouterApplianceInstanceRef,
			Selector:     mg.Spec.InitProvider.RouterApplianceInstanceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.RouterApplianceInstance")
	}
	mg.Spec.InitProvider.RouterApplianceInstance = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RouterApplianceInstanceRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Snapshot.
func (mg *Snapshot) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Disk", "DiskList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SourceDisk),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.SourceDiskRef,
			Selector:     mg.Spec.ForProvider.SourceDiskSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SourceDisk")
	}
	mg.Spec.ForProvider.SourceDisk = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SourceDiskRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Disk", "DiskList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SourceDisk),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.SourceDiskRef,
			Selector:     mg.Spec.InitProvider.SourceDiskSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SourceDisk")
	}
	mg.Spec.InitProvider.SourceDisk = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SourceDiskRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Subnetwork.
func (mg *Subnetwork) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Network),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.NetworkRef,
			Selector:     mg.Spec.ForProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Network")
	}
	mg.Spec.ForProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Network),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.NetworkRef,
			Selector:     mg.Spec.InitProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Network")
	}
	mg.Spec.InitProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NetworkRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SubnetworkIAMMember.
func (mg *SubnetworkIAMMember) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Subnetwork", "SubnetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Subnetwork),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.SubnetworkRef,
			Selector:     mg.Spec.ForProvider.SubnetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Subnetwork")
	}
	mg.Spec.ForProvider.Subnetwork = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SubnetworkRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Subnetwork", "SubnetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Subnetwork),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.SubnetworkRef,
			Selector:     mg.Spec.InitProvider.SubnetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Subnetwork")
	}
	mg.Spec.InitProvider.Subnetwork = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SubnetworkRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this URLMap.
func (mg *URLMap) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "BackendBucket", "BackendBucketList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DefaultService),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.DefaultServiceRef,
			Selector:     mg.Spec.ForProvider.DefaultServiceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DefaultService")
	}
	mg.Spec.ForProvider.DefaultService = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DefaultServiceRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.PathMatcher); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "BackendBucket", "BackendBucketList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PathMatcher[i3].DefaultService),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.PathMatcher[i3].DefaultServiceRef,
				Selector:     mg.Spec.ForProvider.PathMatcher[i3].DefaultServiceSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.PathMatcher[i3].DefaultService")
		}
		mg.Spec.ForProvider.PathMatcher[i3].DefaultService = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.PathMatcher[i3].DefaultServiceRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.PathMatcher); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.PathMatcher[i3].PathRule); i4++ {
			if mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction != nil {
				if mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction.RequestMirrorPolicy != nil {
					{
						m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "BackendService", "BackendServiceList")
						if err != nil {
							return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
						}
						rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
							CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction.RequestMirrorPolicy.BackendService),
							Extract:      resource.ExtractResourceID(),
							Reference:    mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction.RequestMirrorPolicy.BackendServiceRef,
							Selector:     mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction.RequestMirrorPolicy.BackendServiceSelector,
							To:           reference.To{List: l, Managed: m},
						})
					}
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction.RequestMirrorPolicy.BackendService")
					}
					mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction.RequestMirrorPolicy.BackendService = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction.RequestMirrorPolicy.BackendServiceRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.PathMatcher); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.PathMatcher[i3].PathRule); i4++ {
			if mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction != nil {
				for i6 := 0; i6 < len(mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction.WeightedBackendServices); i6++ {
					{
						m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "BackendService", "BackendServiceList")
						if err != nil {
							return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
						}
						rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
							CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction.WeightedBackendServices[i6].BackendService),
							Extract:      resource.ExtractResourceID(),
							Reference:    mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction.WeightedBackendServices[i6].BackendServiceRef,
							Selector:     mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction.WeightedBackendServices[i6].BackendServiceSelector,
							To:           reference.To{List: l, Managed: m},
						})
					}
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction.WeightedBackendServices[i6].BackendService")
					}
					mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction.WeightedBackendServices[i6].BackendService = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].RouteAction.WeightedBackendServices[i6].BackendServiceRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.PathMatcher); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.PathMatcher[i3].PathRule); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "BackendBucket", "BackendBucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].Service),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].ServiceRef,
					Selector:     mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].ServiceSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].Service")
			}
			mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].Service = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.PathMatcher[i3].PathRule[i4].ServiceRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.PathMatcher); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.PathMatcher[i3].RouteRules); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "BackendService", "BackendServiceList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PathMatcher[i3].RouteRules[i4].Service),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.ForProvider.PathMatcher[i3].RouteRules[i4].ServiceRef,
					Selector:     mg.Spec.ForProvider.PathMatcher[i3].RouteRules[i4].ServiceSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.PathMatcher[i3].RouteRules[i4].Service")
			}
			mg.Spec.ForProvider.PathMatcher[i3].RouteRules[i4].Service = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.PathMatcher[i3].RouteRules[i4].ServiceRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Test); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "BackendBucket", "BackendBucketList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Test[i3].Service),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.Test[i3].ServiceRef,
				Selector:     mg.Spec.ForProvider.Test[i3].ServiceSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Test[i3].Service")
		}
		mg.Spec.ForProvider.Test[i3].Service = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Test[i3].ServiceRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "BackendBucket", "BackendBucketList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DefaultService),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.DefaultServiceRef,
			Selector:     mg.Spec.InitProvider.DefaultServiceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DefaultService")
	}
	mg.Spec.InitProvider.DefaultService = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DefaultServiceRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.PathMatcher); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "BackendBucket", "BackendBucketList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PathMatcher[i3].DefaultService),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.PathMatcher[i3].DefaultServiceRef,
				Selector:     mg.Spec.InitProvider.PathMatcher[i3].DefaultServiceSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.PathMatcher[i3].DefaultService")
		}
		mg.Spec.InitProvider.PathMatcher[i3].DefaultService = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.PathMatcher[i3].DefaultServiceRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.PathMatcher); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.PathMatcher[i3].PathRule); i4++ {
			if mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction != nil {
				if mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction.RequestMirrorPolicy != nil {
					{
						m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "BackendService", "BackendServiceList")
						if err != nil {
							return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
						}
						rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
							CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction.RequestMirrorPolicy.BackendService),
							Extract:      resource.ExtractResourceID(),
							Reference:    mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction.RequestMirrorPolicy.BackendServiceRef,
							Selector:     mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction.RequestMirrorPolicy.BackendServiceSelector,
							To:           reference.To{List: l, Managed: m},
						})
					}
					if err != nil {
						return errors.Wrap(err, "mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction.RequestMirrorPolicy.BackendService")
					}
					mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction.RequestMirrorPolicy.BackendService = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction.RequestMirrorPolicy.BackendServiceRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.PathMatcher); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.PathMatcher[i3].PathRule); i4++ {
			if mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction != nil {
				for i6 := 0; i6 < len(mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction.WeightedBackendServices); i6++ {
					{
						m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "BackendService", "BackendServiceList")
						if err != nil {
							return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
						}
						rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
							CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction.WeightedBackendServices[i6].BackendService),
							Extract:      resource.ExtractResourceID(),
							Reference:    mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction.WeightedBackendServices[i6].BackendServiceRef,
							Selector:     mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction.WeightedBackendServices[i6].BackendServiceSelector,
							To:           reference.To{List: l, Managed: m},
						})
					}
					if err != nil {
						return errors.Wrap(err, "mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction.WeightedBackendServices[i6].BackendService")
					}
					mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction.WeightedBackendServices[i6].BackendService = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].RouteAction.WeightedBackendServices[i6].BackendServiceRef = rsp.ResolvedReference

				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.PathMatcher); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.PathMatcher[i3].PathRule); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "BackendBucket", "BackendBucketList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].Service),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].ServiceRef,
					Selector:     mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].ServiceSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].Service")
			}
			mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].Service = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.PathMatcher[i3].PathRule[i4].ServiceRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.PathMatcher); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.PathMatcher[i3].RouteRules); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "BackendService", "BackendServiceList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PathMatcher[i3].RouteRules[i4].Service),
					Extract:      resource.ExtractResourceID(),
					Reference:    mg.Spec.InitProvider.PathMatcher[i3].RouteRules[i4].ServiceRef,
					Selector:     mg.Spec.InitProvider.PathMatcher[i3].RouteRules[i4].ServiceSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.PathMatcher[i3].RouteRules[i4].Service")
			}
			mg.Spec.InitProvider.PathMatcher[i3].RouteRules[i4].Service = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.PathMatcher[i3].RouteRules[i4].ServiceRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Test); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "BackendBucket", "BackendBucketList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Test[i3].Service),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.Test[i3].ServiceRef,
				Selector:     mg.Spec.InitProvider.Test[i3].ServiceSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Test[i3].Service")
		}
		mg.Spec.InitProvider.Test[i3].Service = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Test[i3].ServiceRef = rsp.ResolvedReference

	}

	return nil
}
