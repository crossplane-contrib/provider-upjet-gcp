// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SSLPolicyInitParameters struct {

	// Profile specifies the set of SSL features that can be used by the
	// load balancer when negotiating SSL with clients. This can be one of
	// COMPATIBLE, MODERN, RESTRICTED, or CUSTOM. If using CUSTOM,
	// the set of SSL features to enable must be specified in the
	// customFeatures field.
	// See the official documentation
	// for which ciphers are available to use. Note: this argument
	// must be present when using the CUSTOM profile. This argument
	// must not be present when using any other profile.
	// +listType=set
	CustomFeatures []*string `json:"customFeatures,omitempty" tf:"custom_features,omitempty"`

	// An optional description of this resource.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The minimum version of SSL protocol that can be used by the clients
	// to establish a connection with the load balancer.
	// Default value is TLS_1_0.
	// Possible values are: TLS_1_0, TLS_1_1, TLS_1_2.
	MinTLSVersion *string `json:"minTlsVersion,omitempty" tf:"min_tls_version,omitempty"`

	// Profile specifies the set of SSL features that can be used by the
	// load balancer when negotiating SSL with clients. If using CUSTOM,
	// the set of SSL features to enable must be specified in the
	// customFeatures field.
	// See the official documentation
	// for information on what cipher suites each profile provides. If
	// CUSTOM is used, the custom_features attribute must be set.
	// Default value is COMPATIBLE.
	// Possible values are: COMPATIBLE, MODERN, RESTRICTED, CUSTOM.
	Profile *string `json:"profile,omitempty" tf:"profile,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`
}

type SSLPolicyObservation struct {

	// Creation timestamp in RFC3339 text format.
	CreationTimestamp *string `json:"creationTimestamp,omitempty" tf:"creation_timestamp,omitempty"`

	// Profile specifies the set of SSL features that can be used by the
	// load balancer when negotiating SSL with clients. This can be one of
	// COMPATIBLE, MODERN, RESTRICTED, or CUSTOM. If using CUSTOM,
	// the set of SSL features to enable must be specified in the
	// customFeatures field.
	// See the official documentation
	// for which ciphers are available to use. Note: this argument
	// must be present when using the CUSTOM profile. This argument
	// must not be present when using any other profile.
	// +listType=set
	CustomFeatures []*string `json:"customFeatures,omitempty" tf:"custom_features,omitempty"`

	// An optional description of this resource.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The list of features enabled in the SSL policy.
	// +listType=set
	EnabledFeatures []*string `json:"enabledFeatures,omitempty" tf:"enabled_features,omitempty"`

	// Fingerprint of this resource. A hash of the contents stored in this
	// object. This field is used in optimistic locking.
	Fingerprint *string `json:"fingerprint,omitempty" tf:"fingerprint,omitempty"`

	// an identifier for the resource with format projects/{{project}}/global/sslPolicies/{{name}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The minimum version of SSL protocol that can be used by the clients
	// to establish a connection with the load balancer.
	// Default value is TLS_1_0.
	// Possible values are: TLS_1_0, TLS_1_1, TLS_1_2.
	MinTLSVersion *string `json:"minTlsVersion,omitempty" tf:"min_tls_version,omitempty"`

	// Profile specifies the set of SSL features that can be used by the
	// load balancer when negotiating SSL with clients. If using CUSTOM,
	// the set of SSL features to enable must be specified in the
	// customFeatures field.
	// See the official documentation
	// for information on what cipher suites each profile provides. If
	// CUSTOM is used, the custom_features attribute must be set.
	// Default value is COMPATIBLE.
	// Possible values are: COMPATIBLE, MODERN, RESTRICTED, CUSTOM.
	Profile *string `json:"profile,omitempty" tf:"profile,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The URI of the created resource.
	SelfLink *string `json:"selfLink,omitempty" tf:"self_link,omitempty"`
}

type SSLPolicyParameters struct {

	// Profile specifies the set of SSL features that can be used by the
	// load balancer when negotiating SSL with clients. This can be one of
	// COMPATIBLE, MODERN, RESTRICTED, or CUSTOM. If using CUSTOM,
	// the set of SSL features to enable must be specified in the
	// customFeatures field.
	// See the official documentation
	// for which ciphers are available to use. Note: this argument
	// must be present when using the CUSTOM profile. This argument
	// must not be present when using any other profile.
	// +kubebuilder:validation:Optional
	// +listType=set
	CustomFeatures []*string `json:"customFeatures,omitempty" tf:"custom_features,omitempty"`

	// An optional description of this resource.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The minimum version of SSL protocol that can be used by the clients
	// to establish a connection with the load balancer.
	// Default value is TLS_1_0.
	// Possible values are: TLS_1_0, TLS_1_1, TLS_1_2.
	// +kubebuilder:validation:Optional
	MinTLSVersion *string `json:"minTlsVersion,omitempty" tf:"min_tls_version,omitempty"`

	// Profile specifies the set of SSL features that can be used by the
	// load balancer when negotiating SSL with clients. If using CUSTOM,
	// the set of SSL features to enable must be specified in the
	// customFeatures field.
	// See the official documentation
	// for information on what cipher suites each profile provides. If
	// CUSTOM is used, the custom_features attribute must be set.
	// Default value is COMPATIBLE.
	// Possible values are: COMPATIBLE, MODERN, RESTRICTED, CUSTOM.
	// +kubebuilder:validation:Optional
	Profile *string `json:"profile,omitempty" tf:"profile,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`
}

// SSLPolicySpec defines the desired state of SSLPolicy
type SSLPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SSLPolicyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SSLPolicyInitParameters `json:"initProvider,omitempty"`
}

// SSLPolicyStatus defines the observed state of SSLPolicy.
type SSLPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SSLPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SSLPolicy is the Schema for the SSLPolicys API. Represents a SSL policy.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type SSLPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SSLPolicySpec   `json:"spec"`
	Status            SSLPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SSLPolicyList contains a list of SSLPolicys
type SSLPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SSLPolicy `json:"items"`
}

// Repository type metadata.
var (
	SSLPolicy_Kind             = "SSLPolicy"
	SSLPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SSLPolicy_Kind}.String()
	SSLPolicy_KindAPIVersion   = SSLPolicy_Kind + "." + CRDGroupVersion.String()
	SSLPolicy_GroupVersionKind = CRDGroupVersion.WithKind(SSLPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&SSLPolicy{}, &SSLPolicyList{})
}
