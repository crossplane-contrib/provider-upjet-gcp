// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta2

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	apisresolver "github.com/upbound/provider-gcp/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *ConnectivityTest) ResolveReferences( // ResolveReferences of this ConnectivityTest.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	if mg.Spec.ForProvider.Destination != nil {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Address", "AddressList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Destination.IPAddress),
				Extract:      resource.ExtractParamPath("address", false),
				Reference:    mg.Spec.ForProvider.Destination.IPAddressRef,
				Selector:     mg.Spec.ForProvider.Destination.IPAddressSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Destination.IPAddress")
		}
		mg.Spec.ForProvider.Destination.IPAddress = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Destination.IPAddressRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.Destination != nil {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Instance", "InstanceList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Destination.Instance),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.Destination.InstanceRef,
				Selector:     mg.Spec.ForProvider.Destination.InstanceSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Destination.Instance")
		}
		mg.Spec.ForProvider.Destination.Instance = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Destination.InstanceRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.Destination != nil {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Destination.Network),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.Destination.NetworkRef,
				Selector:     mg.Spec.ForProvider.Destination.NetworkSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Destination.Network")
		}
		mg.Spec.ForProvider.Destination.Network = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Destination.NetworkRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.Destination != nil {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Address", "AddressList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Destination.ProjectID),
				Extract:      resource.ExtractParamPath("project", false),
				Reference:    mg.Spec.ForProvider.Destination.ProjectIDRef,
				Selector:     mg.Spec.ForProvider.Destination.ProjectIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Destination.ProjectID")
		}
		mg.Spec.ForProvider.Destination.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Destination.ProjectIDRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.Source != nil {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Address", "AddressList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Source.IPAddress),
				Extract:      resource.ExtractParamPath("address", false),
				Reference:    mg.Spec.ForProvider.Source.IPAddressRef,
				Selector:     mg.Spec.ForProvider.Source.IPAddressSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Source.IPAddress")
		}
		mg.Spec.ForProvider.Source.IPAddress = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Source.IPAddressRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.Source != nil {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Instance", "InstanceList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Source.Instance),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.Source.InstanceRef,
				Selector:     mg.Spec.ForProvider.Source.InstanceSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Source.Instance")
		}
		mg.Spec.ForProvider.Source.Instance = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Source.InstanceRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.Source != nil {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Source.Network),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.Source.NetworkRef,
				Selector:     mg.Spec.ForProvider.Source.NetworkSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Source.Network")
		}
		mg.Spec.ForProvider.Source.Network = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Source.NetworkRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.Source != nil {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Address", "AddressList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Source.ProjectID),
				Extract:      resource.ExtractParamPath("project", false),
				Reference:    mg.Spec.ForProvider.Source.ProjectIDRef,
				Selector:     mg.Spec.ForProvider.Source.ProjectIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Source.ProjectID")
		}
		mg.Spec.ForProvider.Source.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Source.ProjectIDRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.Destination != nil {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Address", "AddressList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Destination.IPAddress),
				Extract:      resource.ExtractParamPath("address", false),
				Reference:    mg.Spec.InitProvider.Destination.IPAddressRef,
				Selector:     mg.Spec.InitProvider.Destination.IPAddressSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Destination.IPAddress")
		}
		mg.Spec.InitProvider.Destination.IPAddress = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Destination.IPAddressRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.Destination != nil {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Instance", "InstanceList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Destination.Instance),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.Destination.InstanceRef,
				Selector:     mg.Spec.InitProvider.Destination.InstanceSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Destination.Instance")
		}
		mg.Spec.InitProvider.Destination.Instance = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Destination.InstanceRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.Destination != nil {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Destination.Network),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.Destination.NetworkRef,
				Selector:     mg.Spec.InitProvider.Destination.NetworkSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Destination.Network")
		}
		mg.Spec.InitProvider.Destination.Network = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Destination.NetworkRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.Destination != nil {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Address", "AddressList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Destination.ProjectID),
				Extract:      resource.ExtractParamPath("project", false),
				Reference:    mg.Spec.InitProvider.Destination.ProjectIDRef,
				Selector:     mg.Spec.InitProvider.Destination.ProjectIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Destination.ProjectID")
		}
		mg.Spec.InitProvider.Destination.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Destination.ProjectIDRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.Source != nil {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Address", "AddressList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Source.IPAddress),
				Extract:      resource.ExtractParamPath("address", false),
				Reference:    mg.Spec.InitProvider.Source.IPAddressRef,
				Selector:     mg.Spec.InitProvider.Source.IPAddressSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Source.IPAddress")
		}
		mg.Spec.InitProvider.Source.IPAddress = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Source.IPAddressRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.Source != nil {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Instance", "InstanceList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Source.Instance),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.Source.InstanceRef,
				Selector:     mg.Spec.InitProvider.Source.InstanceSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Source.Instance")
		}
		mg.Spec.InitProvider.Source.Instance = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Source.InstanceRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.Source != nil {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Source.Network),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.Source.NetworkRef,
				Selector:     mg.Spec.InitProvider.Source.NetworkSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Source.Network")
		}
		mg.Spec.InitProvider.Source.Network = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Source.NetworkRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.Source != nil {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Address", "AddressList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Source.ProjectID),
				Extract:      resource.ExtractParamPath("project", false),
				Reference:    mg.Spec.InitProvider.Source.ProjectIDRef,
				Selector:     mg.Spec.InitProvider.Source.ProjectIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Source.ProjectID")
		}
		mg.Spec.InitProvider.Source.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Source.ProjectIDRef = rsp.ResolvedReference

	}

	return nil
}
