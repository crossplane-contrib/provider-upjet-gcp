// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta2

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	client "sigs.k8s.io/controller-runtime/pkg/client"

	// ResolveReferences of this Trigger.
	apisresolver "github.com/upbound/provider-gcp/internal/apis"
)

func (mg *Trigger) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	if mg.Spec.ForProvider.PubsubConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("pubsub.gcp.upbound.io", "v1beta2", "Topic", "TopicList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PubsubConfig.Topic),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.PubsubConfig.TopicRef,
				Selector:     mg.Spec.ForProvider.PubsubConfig.TopicSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.PubsubConfig.Topic")
		}
		mg.Spec.ForProvider.PubsubConfig.Topic = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.PubsubConfig.TopicRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "ServiceAccount", "ServiceAccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServiceAccount),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.ServiceAccountRef,
			Selector:     mg.Spec.ForProvider.ServiceAccountSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServiceAccount")
	}
	mg.Spec.ForProvider.ServiceAccount = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServiceAccountRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.WebhookConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("secretmanager.gcp.upbound.io", "v1beta1", "SecretVersion", "SecretVersionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.WebhookConfig.Secret),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.WebhookConfig.SecretRef,
				Selector:     mg.Spec.ForProvider.WebhookConfig.SecretSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.WebhookConfig.Secret")
		}
		mg.Spec.ForProvider.WebhookConfig.Secret = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.WebhookConfig.SecretRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.PubsubConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("pubsub.gcp.upbound.io", "v1beta2", "Topic", "TopicList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PubsubConfig.Topic),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.PubsubConfig.TopicRef,
				Selector:     mg.Spec.InitProvider.PubsubConfig.TopicSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.PubsubConfig.Topic")
		}
		mg.Spec.InitProvider.PubsubConfig.Topic = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.PubsubConfig.TopicRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "ServiceAccount", "ServiceAccountList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ServiceAccount),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.ServiceAccountRef,
			Selector:     mg.Spec.InitProvider.ServiceAccountSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ServiceAccount")
	}
	mg.Spec.InitProvider.ServiceAccount = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ServiceAccountRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.WebhookConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("secretmanager.gcp.upbound.io", "v1beta1", "SecretVersion", "SecretVersionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.WebhookConfig.Secret),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.WebhookConfig.SecretRef,
				Selector:     mg.Spec.InitProvider.WebhookConfig.SecretSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.WebhookConfig.Secret")
		}
		mg.Spec.InitProvider.WebhookConfig.Secret = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.WebhookConfig.SecretRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this WorkerPool.
func (mg *WorkerPool) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	if mg.Spec.ForProvider.NetworkConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkConfig.PeeredNetwork),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.NetworkConfig.PeeredNetworkRef,
				Selector:     mg.Spec.ForProvider.NetworkConfig.PeeredNetworkSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.NetworkConfig.PeeredNetwork")
		}
		mg.Spec.ForProvider.NetworkConfig.PeeredNetwork = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.NetworkConfig.PeeredNetworkRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.NetworkConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NetworkConfig.PeeredNetwork),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.NetworkConfig.PeeredNetworkRef,
				Selector:     mg.Spec.InitProvider.NetworkConfig.PeeredNetworkSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.NetworkConfig.PeeredNetwork")
		}
		mg.Spec.InitProvider.NetworkConfig.PeeredNetwork = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.NetworkConfig.PeeredNetworkRef = rsp.ResolvedReference

	}

	return nil
}
