// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FilesInitParameters struct {

	// Textual Content.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// Fingerprint (e.g. github sha) associated with the File.
	Fingerprint *string `json:"fingerprint,omitempty" tf:"fingerprint,omitempty"`

	// Output only. Name of the Ruleset. The ruleset_id is auto generated by the service. Format: projects/{project_id}/rulesets/{ruleset_id}
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type FilesObservation struct {

	// Textual Content.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// Fingerprint (e.g. github sha) associated with the File.
	Fingerprint *string `json:"fingerprint,omitempty" tf:"fingerprint,omitempty"`

	// Output only. Name of the Ruleset. The ruleset_id is auto generated by the service. Format: projects/{project_id}/rulesets/{ruleset_id}
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type FilesParameters struct {

	// Textual Content.
	// +kubebuilder:validation:Optional
	Content *string `json:"content" tf:"content,omitempty"`

	// Fingerprint (e.g. github sha) associated with the File.
	// +kubebuilder:validation:Optional
	Fingerprint *string `json:"fingerprint,omitempty" tf:"fingerprint,omitempty"`

	// Output only. Name of the Ruleset. The ruleset_id is auto generated by the service. Format: projects/{project_id}/rulesets/{ruleset_id}
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`
}

type MetadataInitParameters struct {
}

type MetadataObservation struct {
	Services []*string `json:"services,omitempty" tf:"services,omitempty"`
}

type MetadataParameters struct {
}

type RulesetInitParameters struct {

	// The project for the resource
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Source for the Ruleset.
	Source []SourceInitParameters `json:"source,omitempty" tf:"source,omitempty"`
}

type RulesetObservation struct {

	// Output only. Time the Ruleset was created.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// an identifier for the resource with format projects/{{project}}/rulesets/{{name}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Output only. The metadata for this ruleset.
	Metadata []MetadataObservation `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// Output only. Name of the Ruleset. The ruleset_id is auto generated by the service. Format: projects/{project_id}/rulesets/{ruleset_id}
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The project for the resource
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Source for the Ruleset.
	Source []SourceObservation `json:"source,omitempty" tf:"source,omitempty"`
}

type RulesetParameters struct {

	// The project for the resource
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Source for the Ruleset.
	// +kubebuilder:validation:Optional
	Source []SourceParameters `json:"source,omitempty" tf:"source,omitempty"`
}

type SourceInitParameters struct {

	// File set constituting the Source bundle.
	Files []FilesInitParameters `json:"files,omitempty" tf:"files,omitempty"`

	// Language of the Source bundle. If unspecified, the language will default to FIREBASE_RULES. Possible values: LANGUAGE_UNSPECIFIED, FIREBASE_RULES, EVENT_FLOW_TRIGGERS
	Language *string `json:"language,omitempty" tf:"language,omitempty"`
}

type SourceObservation struct {

	// File set constituting the Source bundle.
	Files []FilesObservation `json:"files,omitempty" tf:"files,omitempty"`

	// Language of the Source bundle. If unspecified, the language will default to FIREBASE_RULES. Possible values: LANGUAGE_UNSPECIFIED, FIREBASE_RULES, EVENT_FLOW_TRIGGERS
	Language *string `json:"language,omitempty" tf:"language,omitempty"`
}

type SourceParameters struct {

	// File set constituting the Source bundle.
	// +kubebuilder:validation:Optional
	Files []FilesParameters `json:"files" tf:"files,omitempty"`

	// Language of the Source bundle. If unspecified, the language will default to FIREBASE_RULES. Possible values: LANGUAGE_UNSPECIFIED, FIREBASE_RULES, EVENT_FLOW_TRIGGERS
	// +kubebuilder:validation:Optional
	Language *string `json:"language,omitempty" tf:"language,omitempty"`
}

// RulesetSpec defines the desired state of Ruleset
type RulesetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RulesetParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RulesetInitParameters `json:"initProvider,omitempty"`
}

// RulesetStatus defines the observed state of Ruleset.
type RulesetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RulesetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Ruleset is the Schema for the Rulesets API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type Ruleset struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.source) || (has(self.initProvider) && has(self.initProvider.source))",message="spec.forProvider.source is a required parameter"
	Spec   RulesetSpec   `json:"spec"`
	Status RulesetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RulesetList contains a list of Rulesets
type RulesetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Ruleset `json:"items"`
}

// Repository type metadata.
var (
	Ruleset_Kind             = "Ruleset"
	Ruleset_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Ruleset_Kind}.String()
	Ruleset_KindAPIVersion   = Ruleset_Kind + "." + CRDGroupVersion.String()
	Ruleset_GroupVersionKind = CRDGroupVersion.WithKind(Ruleset_Kind)
)

func init() {
	SchemeBuilder.Register(&Ruleset{}, &RulesetList{})
}
