// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type AddressGroupInitParameters struct {

	// Capacity of the Address Group.
	Capacity *float64 `json:"capacity,omitempty" tf:"capacity,omitempty"`

	// Free-text description of the resource.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// List of items.
	Items []*string `json:"items,omitempty" tf:"items,omitempty"`

	// Set of label tags associated with the AddressGroup resource.
	// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The type of the Address Group. Possible values are "IPV4" or "IPV6".
	// Possible values are: IPV4, IPV6.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type AddressGroupObservation struct {

	// Capacity of the Address Group.
	Capacity *float64 `json:"capacity,omitempty" tf:"capacity,omitempty"`

	// The timestamp when the resource was created.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z"
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Free-text description of the resource.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// for all of the labels present on the resource.
	// +mapType=granular
	EffectiveLabels map[string]*string `json:"effectiveLabels,omitempty" tf:"effective_labels,omitempty"`

	// an identifier for the resource with format {{parent}}/locations/{{location}}/addressGroups/{{name}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// List of items.
	Items []*string `json:"items,omitempty" tf:"items,omitempty"`

	// Set of label tags associated with the AddressGroup resource.
	// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The location of the gateway security policy.
	// The default value is global.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// The name of the parent this address group belongs to. Format: organizations/{organization_id} or projects/{project_id}.
	Parent *string `json:"parent,omitempty" tf:"parent,omitempty"`

	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	// +mapType=granular
	TerraformLabels map[string]*string `json:"terraformLabels,omitempty" tf:"terraform_labels,omitempty"`

	// The type of the Address Group. Possible values are "IPV4" or "IPV6".
	// Possible values are: IPV4, IPV6.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The timestamp when the resource was updated.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type AddressGroupParameters struct {

	// Capacity of the Address Group.
	// +kubebuilder:validation:Optional
	Capacity *float64 `json:"capacity,omitempty" tf:"capacity,omitempty"`

	// Free-text description of the resource.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// List of items.
	// +kubebuilder:validation:Optional
	Items []*string `json:"items,omitempty" tf:"items,omitempty"`

	// Set of label tags associated with the AddressGroup resource.
	// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The location of the gateway security policy.
	// The default value is global.
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// The name of the parent this address group belongs to. Format: organizations/{organization_id} or projects/{project_id}.
	// +kubebuilder:validation:Required
	Parent *string `json:"parent" tf:"parent,omitempty"`

	// The type of the Address Group. Possible values are "IPV4" or "IPV6".
	// Possible values are: IPV4, IPV6.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// AddressGroupSpec defines the desired state of AddressGroup
type AddressGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AddressGroupParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AddressGroupInitParameters `json:"initProvider,omitempty"`
}

// AddressGroupStatus defines the observed state of AddressGroup.
type AddressGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AddressGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AddressGroup is the Schema for the AddressGroups API. AddressGroup is a resource that specifies how a collection of IP/DNS used in Firewall Policy.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type AddressGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.capacity) || (has(self.initProvider) && has(self.initProvider.capacity))",message="spec.forProvider.capacity is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   AddressGroupSpec   `json:"spec"`
	Status AddressGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AddressGroupList contains a list of AddressGroups
type AddressGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AddressGroup `json:"items"`
}

// Repository type metadata.
var (
	AddressGroup_Kind             = "AddressGroup"
	AddressGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AddressGroup_Kind}.String()
	AddressGroup_KindAPIVersion   = AddressGroup_Kind + "." + CRDGroupVersion.String()
	AddressGroup_GroupVersionKind = CRDGroupVersion.WithKind(AddressGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&AddressGroup{}, &AddressGroupList{})
}
