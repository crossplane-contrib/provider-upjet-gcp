// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type URLListsInitParameters struct {

	// Free-text description of the resource.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// FQDNs and URLs.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type URLListsObservation struct {

	// Output only. Time when the security policy was created.
	// A timestamp in RFC3339 UTC 'Zulu' format, with nanosecond resolution and up to nine fractional digits.
	// Examples: '2014-10-02T15:01:23Z' and '2014-10-02T15:01:23.045123456Z'
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Free-text description of the resource.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// an identifier for the resource with format projects/{{project}}/locations/{{location}}/urlLists/{{name}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The location of the url lists.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Output only. Time when the security policy was updated.
	// A timestamp in RFC3339 UTC 'Zulu' format, with nanosecond resolution and up to nine fractional digits.
	// Examples: '2014-10-02T15:01:23Z' and '2014-10-02T15:01:23.045123456Z'.
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`

	// FQDNs and URLs.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type URLListsParameters struct {

	// Free-text description of the resource.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The location of the url lists.
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// FQDNs and URLs.
	// +kubebuilder:validation:Optional
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

// URLListsSpec defines the desired state of URLLists
type URLListsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     URLListsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider URLListsInitParameters `json:"initProvider,omitempty"`
}

// URLListsStatus defines the observed state of URLLists.
type URLListsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        URLListsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// URLLists is the Schema for the URLListss API. UrlList proto helps users to set reusable, independently manageable lists of hosts, host patterns, URLs, URL patterns.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type URLLists struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.values) || (has(self.initProvider) && has(self.initProvider.values))",message="spec.forProvider.values is a required parameter"
	Spec   URLListsSpec   `json:"spec"`
	Status URLListsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// URLListsList contains a list of URLListss
type URLListsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []URLLists `json:"items"`
}

// Repository type metadata.
var (
	URLLists_Kind             = "URLLists"
	URLLists_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: URLLists_Kind}.String()
	URLLists_KindAPIVersion   = URLLists_Kind + "." + CRDGroupVersion.String()
	URLLists_GroupVersionKind = CRDGroupVersion.WithKind(URLLists_Kind)
)

func init() {
	SchemeBuilder.Register(&URLLists{}, &URLListsList{})
}
