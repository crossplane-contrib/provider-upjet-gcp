// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TaxonomyInitParameters struct {

	// A list of policy types that are activated for this taxonomy. If not set,
	// defaults to an empty list.
	// Each value may be one of: POLICY_TYPE_UNSPECIFIED, FINE_GRAINED_ACCESS_CONTROL.
	ActivatedPolicyTypes []*string `json:"activatedPolicyTypes,omitempty" tf:"activated_policy_types,omitempty"`

	// Description of this taxonomy. It must: contain only unicode characters,
	// tabs, newlines, carriage returns and page breaks; and be at most 2000 bytes
	// long when encoded in UTF-8. If not set, defaults to an empty description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// User defined name of this taxonomy.
	// The taxonomy display name must be unique within an organization.
	// It must: contain only unicode letters, numbers, underscores, dashes
	// and spaces; not start or end with spaces; and be at most 200 bytes
	// long when encoded in UTF-8.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Taxonomy location region.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type TaxonomyObservation struct {

	// A list of policy types that are activated for this taxonomy. If not set,
	// defaults to an empty list.
	// Each value may be one of: POLICY_TYPE_UNSPECIFIED, FINE_GRAINED_ACCESS_CONTROL.
	ActivatedPolicyTypes []*string `json:"activatedPolicyTypes,omitempty" tf:"activated_policy_types,omitempty"`

	// Description of this taxonomy. It must: contain only unicode characters,
	// tabs, newlines, carriage returns and page breaks; and be at most 2000 bytes
	// long when encoded in UTF-8. If not set, defaults to an empty description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// User defined name of this taxonomy.
	// The taxonomy display name must be unique within an organization.
	// It must: contain only unicode letters, numbers, underscores, dashes
	// and spaces; not start or end with spaces; and be at most 200 bytes
	// long when encoded in UTF-8.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// an identifier for the resource with format {{name}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Resource name of this taxonomy, whose format is:
	// "projects/{project}/locations/{region}/taxonomies/{taxonomy}".
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Taxonomy location region.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type TaxonomyParameters struct {

	// A list of policy types that are activated for this taxonomy. If not set,
	// defaults to an empty list.
	// Each value may be one of: POLICY_TYPE_UNSPECIFIED, FINE_GRAINED_ACCESS_CONTROL.
	// +kubebuilder:validation:Optional
	ActivatedPolicyTypes []*string `json:"activatedPolicyTypes,omitempty" tf:"activated_policy_types,omitempty"`

	// Description of this taxonomy. It must: contain only unicode characters,
	// tabs, newlines, carriage returns and page breaks; and be at most 2000 bytes
	// long when encoded in UTF-8. If not set, defaults to an empty description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// User defined name of this taxonomy.
	// The taxonomy display name must be unique within an organization.
	// It must: contain only unicode letters, numbers, underscores, dashes
	// and spaces; not start or end with spaces; and be at most 200 bytes
	// long when encoded in UTF-8.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Taxonomy location region.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

// TaxonomySpec defines the desired state of Taxonomy
type TaxonomySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TaxonomyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TaxonomyInitParameters `json:"initProvider,omitempty"`
}

// TaxonomyStatus defines the observed state of Taxonomy.
type TaxonomyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TaxonomyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Taxonomy is the Schema for the Taxonomys API. A collection of policy tags that classify data along a common axis.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type Taxonomy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.displayName) || (has(self.initProvider) && has(self.initProvider.displayName))",message="spec.forProvider.displayName is a required parameter"
	Spec   TaxonomySpec   `json:"spec"`
	Status TaxonomyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TaxonomyList contains a list of Taxonomys
type TaxonomyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Taxonomy `json:"items"`
}

// Repository type metadata.
var (
	Taxonomy_Kind             = "Taxonomy"
	Taxonomy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Taxonomy_Kind}.String()
	Taxonomy_KindAPIVersion   = Taxonomy_Kind + "." + CRDGroupVersion.String()
	Taxonomy_GroupVersionKind = CRDGroupVersion.WithKind(Taxonomy_Kind)
)

func init() {
	SchemeBuilder.Register(&Taxonomy{}, &TaxonomyList{})
}
