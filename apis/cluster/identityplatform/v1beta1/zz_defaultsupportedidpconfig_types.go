// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DefaultSupportedIdPConfigInitParameters struct {

	// OAuth client ID
	ClientIDSecretRef v1.SecretKeySelector `json:"clientIdSecretRef" tf:"-"`

	// OAuth client secret
	ClientSecretSecretRef v1.SecretKeySelector `json:"clientSecretSecretRef" tf:"-"`

	// If this IDP allows the user to sign in
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// ID of the IDP. Possible values include:
	IdPID *string `json:"idpId,omitempty" tf:"idp_id,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`
}

type DefaultSupportedIdPConfigObservation struct {

	// If this IDP allows the user to sign in
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// an identifier for the resource with format projects/{{project}}/defaultSupportedIdpConfigs/{{idp_id}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// ID of the IDP. Possible values include:
	IdPID *string `json:"idpId,omitempty" tf:"idp_id,omitempty"`

	// The name of the DefaultSupportedIdpConfig resource
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`
}

type DefaultSupportedIdPConfigParameters struct {

	// OAuth client ID
	// +kubebuilder:validation:Optional
	ClientIDSecretRef v1.SecretKeySelector `json:"clientIdSecretRef" tf:"-"`

	// OAuth client secret
	// +kubebuilder:validation:Optional
	ClientSecretSecretRef v1.SecretKeySelector `json:"clientSecretSecretRef" tf:"-"`

	// If this IDP allows the user to sign in
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// ID of the IDP. Possible values include:
	// +kubebuilder:validation:Optional
	IdPID *string `json:"idpId,omitempty" tf:"idp_id,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`
}

// DefaultSupportedIdPConfigSpec defines the desired state of DefaultSupportedIdPConfig
type DefaultSupportedIdPConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DefaultSupportedIdPConfigParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DefaultSupportedIdPConfigInitParameters `json:"initProvider,omitempty"`
}

// DefaultSupportedIdPConfigStatus defines the observed state of DefaultSupportedIdPConfig.
type DefaultSupportedIdPConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DefaultSupportedIdPConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DefaultSupportedIdPConfig is the Schema for the DefaultSupportedIdPConfigs API. Configurations options for authenticating with a the standard set of Identity Toolkit-trusted IDPs.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type DefaultSupportedIdPConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.clientIdSecretRef)",message="spec.forProvider.clientIdSecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.clientSecretSecretRef)",message="spec.forProvider.clientSecretSecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.idpId) || (has(self.initProvider) && has(self.initProvider.idpId))",message="spec.forProvider.idpId is a required parameter"
	Spec   DefaultSupportedIdPConfigSpec   `json:"spec"`
	Status DefaultSupportedIdPConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DefaultSupportedIdPConfigList contains a list of DefaultSupportedIdPConfigs
type DefaultSupportedIdPConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DefaultSupportedIdPConfig `json:"items"`
}

// Repository type metadata.
var (
	DefaultSupportedIdPConfig_Kind             = "DefaultSupportedIdPConfig"
	DefaultSupportedIdPConfig_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DefaultSupportedIdPConfig_Kind}.String()
	DefaultSupportedIdPConfig_KindAPIVersion   = DefaultSupportedIdPConfig_Kind + "." + CRDGroupVersion.String()
	DefaultSupportedIdPConfig_GroupVersionKind = CRDGroupVersion.WithKind(DefaultSupportedIdPConfig_Kind)
)

func init() {
	SchemeBuilder.Register(&DefaultSupportedIdPConfig{}, &DefaultSupportedIdPConfigList{})
}
