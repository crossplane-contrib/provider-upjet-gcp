// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AuditLogConfigInitParameters struct {

	// +listType=set
	ExemptedMembers []*string `json:"exemptedMembers,omitempty" tf:"exempted_members,omitempty"`

	LogType *string `json:"logType,omitempty" tf:"log_type,omitempty"`
}

type AuditLogConfigObservation struct {

	// +listType=set
	ExemptedMembers []*string `json:"exemptedMembers,omitempty" tf:"exempted_members,omitempty"`

	LogType *string `json:"logType,omitempty" tf:"log_type,omitempty"`
}

type AuditLogConfigParameters struct {

	// +kubebuilder:validation:Optional
	// +listType=set
	ExemptedMembers []*string `json:"exemptedMembers,omitempty" tf:"exempted_members,omitempty"`

	// +kubebuilder:validation:Optional
	LogType *string `json:"logType" tf:"log_type,omitempty"`
}

type OrganizationIAMAuditConfigInitParameters struct {
	AuditLogConfig []AuditLogConfigInitParameters `json:"auditLogConfig,omitempty" tf:"audit_log_config,omitempty"`

	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	Service *string `json:"service,omitempty" tf:"service,omitempty"`
}

type OrganizationIAMAuditConfigObservation struct {
	AuditLogConfig []AuditLogConfigObservation `json:"auditLogConfig,omitempty" tf:"audit_log_config,omitempty"`

	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	Service *string `json:"service,omitempty" tf:"service,omitempty"`
}

type OrganizationIAMAuditConfigParameters struct {

	// +kubebuilder:validation:Optional
	AuditLogConfig []AuditLogConfigParameters `json:"auditLogConfig,omitempty" tf:"audit_log_config,omitempty"`

	// +kubebuilder:validation:Optional
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// +kubebuilder:validation:Optional
	Service *string `json:"service,omitempty" tf:"service,omitempty"`
}

// OrganizationIAMAuditConfigSpec defines the desired state of OrganizationIAMAuditConfig
type OrganizationIAMAuditConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OrganizationIAMAuditConfigParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider OrganizationIAMAuditConfigInitParameters `json:"initProvider,omitempty"`
}

// OrganizationIAMAuditConfigStatus defines the observed state of OrganizationIAMAuditConfig.
type OrganizationIAMAuditConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OrganizationIAMAuditConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// OrganizationIAMAuditConfig is the Schema for the OrganizationIAMAuditConfigs API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type OrganizationIAMAuditConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.auditLogConfig) || (has(self.initProvider) && has(self.initProvider.auditLogConfig))",message="spec.forProvider.auditLogConfig is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.orgId) || (has(self.initProvider) && has(self.initProvider.orgId))",message="spec.forProvider.orgId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.service) || (has(self.initProvider) && has(self.initProvider.service))",message="spec.forProvider.service is a required parameter"
	Spec   OrganizationIAMAuditConfigSpec   `json:"spec"`
	Status OrganizationIAMAuditConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OrganizationIAMAuditConfigList contains a list of OrganizationIAMAuditConfigs
type OrganizationIAMAuditConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OrganizationIAMAuditConfig `json:"items"`
}

// Repository type metadata.
var (
	OrganizationIAMAuditConfig_Kind             = "OrganizationIAMAuditConfig"
	OrganizationIAMAuditConfig_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OrganizationIAMAuditConfig_Kind}.String()
	OrganizationIAMAuditConfig_KindAPIVersion   = OrganizationIAMAuditConfig_Kind + "." + CRDGroupVersion.String()
	OrganizationIAMAuditConfig_GroupVersionKind = CRDGroupVersion.WithKind(OrganizationIAMAuditConfig_Kind)
)

func init() {
	SchemeBuilder.Register(&OrganizationIAMAuditConfig{}, &OrganizationIAMAuditConfigList{})
}
