// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	xpresource "github.com/crossplane/crossplane-runtime/v2/pkg/resource"
	resource "github.com/crossplane/upjet/v2/pkg/resource"
	errors "github.com/pkg/errors"
	apisresolver "github.com/upbound/provider-gcp/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *ConnectConnection) ResolveReferences( // ResolveReferences of this ConnectConnection.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	if mg.Spec.ForProvider.GithubConfig != nil {
		if mg.Spec.ForProvider.GithubConfig.AuthorizerCredential != nil {
			{
				m, l, err = apisresolver.GetManagedResource("secretmanager.gcp.upbound.io", "v1beta1", "SecretVersion", "SecretVersionList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GithubConfig.AuthorizerCredential.OAuthTokenSecretVersion),
					Extract:      resource.ExtractResourceID(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.ForProvider.GithubConfig.AuthorizerCredential.OAuthTokenSecretVersionRef,
					Selector:     mg.Spec.ForProvider.GithubConfig.AuthorizerCredential.OAuthTokenSecretVersionSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.GithubConfig.AuthorizerCredential.OAuthTokenSecretVersion")
			}
			mg.Spec.ForProvider.GithubConfig.AuthorizerCredential.OAuthTokenSecretVersion = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.GithubConfig.AuthorizerCredential.OAuthTokenSecretVersionRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.GithubEnterpriseConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("secretmanager.gcp.upbound.io", "v1beta1", "SecretVersion", "SecretVersionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GithubEnterpriseConfig.PrivateKeySecretVersion),
				Extract:      resource.ExtractResourceID(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.GithubEnterpriseConfig.PrivateKeySecretVersionRef,
				Selector:     mg.Spec.ForProvider.GithubEnterpriseConfig.PrivateKeySecretVersionSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.GithubEnterpriseConfig.PrivateKeySecretVersion")
		}
		mg.Spec.ForProvider.GithubEnterpriseConfig.PrivateKeySecretVersion = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.GithubEnterpriseConfig.PrivateKeySecretVersionRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.GithubEnterpriseConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("secretmanager.gcp.upbound.io", "v1beta1", "SecretVersion", "SecretVersionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GithubEnterpriseConfig.WebhookSecretSecretVersion),
				Extract:      resource.ExtractResourceID(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.GithubEnterpriseConfig.WebhookSecretSecretVersionRef,
				Selector:     mg.Spec.ForProvider.GithubEnterpriseConfig.WebhookSecretSecretVersionSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.GithubEnterpriseConfig.WebhookSecretSecretVersion")
		}
		mg.Spec.ForProvider.GithubEnterpriseConfig.WebhookSecretSecretVersion = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.GithubEnterpriseConfig.WebhookSecretSecretVersionRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.GithubConfig != nil {
		if mg.Spec.InitProvider.GithubConfig.AuthorizerCredential != nil {
			{
				m, l, err = apisresolver.GetManagedResource("secretmanager.gcp.upbound.io", "v1beta1", "SecretVersion", "SecretVersionList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.GithubConfig.AuthorizerCredential.OAuthTokenSecretVersion),
					Extract:      resource.ExtractResourceID(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.InitProvider.GithubConfig.AuthorizerCredential.OAuthTokenSecretVersionRef,
					Selector:     mg.Spec.InitProvider.GithubConfig.AuthorizerCredential.OAuthTokenSecretVersionSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.GithubConfig.AuthorizerCredential.OAuthTokenSecretVersion")
			}
			mg.Spec.InitProvider.GithubConfig.AuthorizerCredential.OAuthTokenSecretVersion = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.GithubConfig.AuthorizerCredential.OAuthTokenSecretVersionRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.GithubEnterpriseConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("secretmanager.gcp.upbound.io", "v1beta1", "SecretVersion", "SecretVersionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.GithubEnterpriseConfig.PrivateKeySecretVersion),
				Extract:      resource.ExtractResourceID(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.GithubEnterpriseConfig.PrivateKeySecretVersionRef,
				Selector:     mg.Spec.InitProvider.GithubEnterpriseConfig.PrivateKeySecretVersionSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.GithubEnterpriseConfig.PrivateKeySecretVersion")
		}
		mg.Spec.InitProvider.GithubEnterpriseConfig.PrivateKeySecretVersion = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.GithubEnterpriseConfig.PrivateKeySecretVersionRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.GithubEnterpriseConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("secretmanager.gcp.upbound.io", "v1beta1", "SecretVersion", "SecretVersionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.GithubEnterpriseConfig.WebhookSecretSecretVersion),
				Extract:      resource.ExtractResourceID(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.GithubEnterpriseConfig.WebhookSecretSecretVersionRef,
				Selector:     mg.Spec.InitProvider.GithubEnterpriseConfig.WebhookSecretSecretVersionSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.GithubEnterpriseConfig.WebhookSecretSecretVersion")
		}
		mg.Spec.InitProvider.GithubEnterpriseConfig.WebhookSecretSecretVersion = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.GithubEnterpriseConfig.WebhookSecretSecretVersionRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this ConnectGitRepositoryLink.
func (mg *ConnectGitRepositoryLink) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("developerconnect.gcp.upbound.io", "v1beta1", "ConnectConnection", "ConnectConnectionList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ParentConnection),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ParentConnectionRef,
			Selector:     mg.Spec.ForProvider.ParentConnectionSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ParentConnection")
	}
	mg.Spec.ForProvider.ParentConnection = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ParentConnectionRef = rsp.ResolvedReference

	return nil
}
