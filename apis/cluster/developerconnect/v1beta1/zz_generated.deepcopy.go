//go:build !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuthorizerCredentialInitParameters) DeepCopyInto(out *AuthorizerCredentialInitParameters) {
	*out = *in
	if in.UserTokenSecretVersion != nil {
		in, out := &in.UserTokenSecretVersion, &out.UserTokenSecretVersion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuthorizerCredentialInitParameters.
func (in *AuthorizerCredentialInitParameters) DeepCopy() *AuthorizerCredentialInitParameters {
	if in == nil {
		return nil
	}
	out := new(AuthorizerCredentialInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuthorizerCredentialObservation) DeepCopyInto(out *AuthorizerCredentialObservation) {
	*out = *in
	if in.UserTokenSecretVersion != nil {
		in, out := &in.UserTokenSecretVersion, &out.UserTokenSecretVersion
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuthorizerCredentialObservation.
func (in *AuthorizerCredentialObservation) DeepCopy() *AuthorizerCredentialObservation {
	if in == nil {
		return nil
	}
	out := new(AuthorizerCredentialObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuthorizerCredentialParameters) DeepCopyInto(out *AuthorizerCredentialParameters) {
	*out = *in
	if in.UserTokenSecretVersion != nil {
		in, out := &in.UserTokenSecretVersion, &out.UserTokenSecretVersion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuthorizerCredentialParameters.
func (in *AuthorizerCredentialParameters) DeepCopy() *AuthorizerCredentialParameters {
	if in == nil {
		return nil
	}
	out := new(AuthorizerCredentialParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BitbucketCloudConfigInitParameters) DeepCopyInto(out *BitbucketCloudConfigInitParameters) {
	*out = *in
	if in.AuthorizerCredential != nil {
		in, out := &in.AuthorizerCredential, &out.AuthorizerCredential
		*out = new(AuthorizerCredentialInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.ReadAuthorizerCredential != nil {
		in, out := &in.ReadAuthorizerCredential, &out.ReadAuthorizerCredential
		*out = new(ReadAuthorizerCredentialInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.WebhookSecretSecretVersion != nil {
		in, out := &in.WebhookSecretSecretVersion, &out.WebhookSecretSecretVersion
		*out = new(string)
		**out = **in
	}
	if in.Workspace != nil {
		in, out := &in.Workspace, &out.Workspace
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BitbucketCloudConfigInitParameters.
func (in *BitbucketCloudConfigInitParameters) DeepCopy() *BitbucketCloudConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(BitbucketCloudConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BitbucketCloudConfigObservation) DeepCopyInto(out *BitbucketCloudConfigObservation) {
	*out = *in
	if in.AuthorizerCredential != nil {
		in, out := &in.AuthorizerCredential, &out.AuthorizerCredential
		*out = new(AuthorizerCredentialObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.ReadAuthorizerCredential != nil {
		in, out := &in.ReadAuthorizerCredential, &out.ReadAuthorizerCredential
		*out = new(ReadAuthorizerCredentialObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.WebhookSecretSecretVersion != nil {
		in, out := &in.WebhookSecretSecretVersion, &out.WebhookSecretSecretVersion
		*out = new(string)
		**out = **in
	}
	if in.Workspace != nil {
		in, out := &in.Workspace, &out.Workspace
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BitbucketCloudConfigObservation.
func (in *BitbucketCloudConfigObservation) DeepCopy() *BitbucketCloudConfigObservation {
	if in == nil {
		return nil
	}
	out := new(BitbucketCloudConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BitbucketCloudConfigParameters) DeepCopyInto(out *BitbucketCloudConfigParameters) {
	*out = *in
	if in.AuthorizerCredential != nil {
		in, out := &in.AuthorizerCredential, &out.AuthorizerCredential
		*out = new(AuthorizerCredentialParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.ReadAuthorizerCredential != nil {
		in, out := &in.ReadAuthorizerCredential, &out.ReadAuthorizerCredential
		*out = new(ReadAuthorizerCredentialParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.WebhookSecretSecretVersion != nil {
		in, out := &in.WebhookSecretSecretVersion, &out.WebhookSecretSecretVersion
		*out = new(string)
		**out = **in
	}
	if in.Workspace != nil {
		in, out := &in.Workspace, &out.Workspace
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BitbucketCloudConfigParameters.
func (in *BitbucketCloudConfigParameters) DeepCopy() *BitbucketCloudConfigParameters {
	if in == nil {
		return nil
	}
	out := new(BitbucketCloudConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BitbucketDataCenterConfigAuthorizerCredentialInitParameters) DeepCopyInto(out *BitbucketDataCenterConfigAuthorizerCredentialInitParameters) {
	*out = *in
	if in.UserTokenSecretVersion != nil {
		in, out := &in.UserTokenSecretVersion, &out.UserTokenSecretVersion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BitbucketDataCenterConfigAuthorizerCredentialInitParameters.
func (in *BitbucketDataCenterConfigAuthorizerCredentialInitParameters) DeepCopy() *BitbucketDataCenterConfigAuthorizerCredentialInitParameters {
	if in == nil {
		return nil
	}
	out := new(BitbucketDataCenterConfigAuthorizerCredentialInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BitbucketDataCenterConfigAuthorizerCredentialObservation) DeepCopyInto(out *BitbucketDataCenterConfigAuthorizerCredentialObservation) {
	*out = *in
	if in.UserTokenSecretVersion != nil {
		in, out := &in.UserTokenSecretVersion, &out.UserTokenSecretVersion
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BitbucketDataCenterConfigAuthorizerCredentialObservation.
func (in *BitbucketDataCenterConfigAuthorizerCredentialObservation) DeepCopy() *BitbucketDataCenterConfigAuthorizerCredentialObservation {
	if in == nil {
		return nil
	}
	out := new(BitbucketDataCenterConfigAuthorizerCredentialObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BitbucketDataCenterConfigAuthorizerCredentialParameters) DeepCopyInto(out *BitbucketDataCenterConfigAuthorizerCredentialParameters) {
	*out = *in
	if in.UserTokenSecretVersion != nil {
		in, out := &in.UserTokenSecretVersion, &out.UserTokenSecretVersion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BitbucketDataCenterConfigAuthorizerCredentialParameters.
func (in *BitbucketDataCenterConfigAuthorizerCredentialParameters) DeepCopy() *BitbucketDataCenterConfigAuthorizerCredentialParameters {
	if in == nil {
		return nil
	}
	out := new(BitbucketDataCenterConfigAuthorizerCredentialParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BitbucketDataCenterConfigInitParameters) DeepCopyInto(out *BitbucketDataCenterConfigInitParameters) {
	*out = *in
	if in.AuthorizerCredential != nil {
		in, out := &in.AuthorizerCredential, &out.AuthorizerCredential
		*out = new(BitbucketDataCenterConfigAuthorizerCredentialInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.HostURI != nil {
		in, out := &in.HostURI, &out.HostURI
		*out = new(string)
		**out = **in
	}
	if in.ReadAuthorizerCredential != nil {
		in, out := &in.ReadAuthorizerCredential, &out.ReadAuthorizerCredential
		*out = new(BitbucketDataCenterConfigReadAuthorizerCredentialInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.SSLCACertificate != nil {
		in, out := &in.SSLCACertificate, &out.SSLCACertificate
		*out = new(string)
		**out = **in
	}
	if in.ServiceDirectoryConfig != nil {
		in, out := &in.ServiceDirectoryConfig, &out.ServiceDirectoryConfig
		*out = new(ServiceDirectoryConfigInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.WebhookSecretSecretVersion != nil {
		in, out := &in.WebhookSecretSecretVersion, &out.WebhookSecretSecretVersion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BitbucketDataCenterConfigInitParameters.
func (in *BitbucketDataCenterConfigInitParameters) DeepCopy() *BitbucketDataCenterConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(BitbucketDataCenterConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BitbucketDataCenterConfigObservation) DeepCopyInto(out *BitbucketDataCenterConfigObservation) {
	*out = *in
	if in.AuthorizerCredential != nil {
		in, out := &in.AuthorizerCredential, &out.AuthorizerCredential
		*out = new(BitbucketDataCenterConfigAuthorizerCredentialObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.HostURI != nil {
		in, out := &in.HostURI, &out.HostURI
		*out = new(string)
		**out = **in
	}
	if in.ReadAuthorizerCredential != nil {
		in, out := &in.ReadAuthorizerCredential, &out.ReadAuthorizerCredential
		*out = new(BitbucketDataCenterConfigReadAuthorizerCredentialObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.SSLCACertificate != nil {
		in, out := &in.SSLCACertificate, &out.SSLCACertificate
		*out = new(string)
		**out = **in
	}
	if in.ServerVersion != nil {
		in, out := &in.ServerVersion, &out.ServerVersion
		*out = new(string)
		**out = **in
	}
	if in.ServiceDirectoryConfig != nil {
		in, out := &in.ServiceDirectoryConfig, &out.ServiceDirectoryConfig
		*out = new(ServiceDirectoryConfigObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.WebhookSecretSecretVersion != nil {
		in, out := &in.WebhookSecretSecretVersion, &out.WebhookSecretSecretVersion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BitbucketDataCenterConfigObservation.
func (in *BitbucketDataCenterConfigObservation) DeepCopy() *BitbucketDataCenterConfigObservation {
	if in == nil {
		return nil
	}
	out := new(BitbucketDataCenterConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BitbucketDataCenterConfigParameters) DeepCopyInto(out *BitbucketDataCenterConfigParameters) {
	*out = *in
	if in.AuthorizerCredential != nil {
		in, out := &in.AuthorizerCredential, &out.AuthorizerCredential
		*out = new(BitbucketDataCenterConfigAuthorizerCredentialParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.HostURI != nil {
		in, out := &in.HostURI, &out.HostURI
		*out = new(string)
		**out = **in
	}
	if in.ReadAuthorizerCredential != nil {
		in, out := &in.ReadAuthorizerCredential, &out.ReadAuthorizerCredential
		*out = new(BitbucketDataCenterConfigReadAuthorizerCredentialParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.SSLCACertificate != nil {
		in, out := &in.SSLCACertificate, &out.SSLCACertificate
		*out = new(string)
		**out = **in
	}
	if in.ServiceDirectoryConfig != nil {
		in, out := &in.ServiceDirectoryConfig, &out.ServiceDirectoryConfig
		*out = new(ServiceDirectoryConfigParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.WebhookSecretSecretVersion != nil {
		in, out := &in.WebhookSecretSecretVersion, &out.WebhookSecretSecretVersion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BitbucketDataCenterConfigParameters.
func (in *BitbucketDataCenterConfigParameters) DeepCopy() *BitbucketDataCenterConfigParameters {
	if in == nil {
		return nil
	}
	out := new(BitbucketDataCenterConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BitbucketDataCenterConfigReadAuthorizerCredentialInitParameters) DeepCopyInto(out *BitbucketDataCenterConfigReadAuthorizerCredentialInitParameters) {
	*out = *in
	if in.UserTokenSecretVersion != nil {
		in, out := &in.UserTokenSecretVersion, &out.UserTokenSecretVersion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BitbucketDataCenterConfigReadAuthorizerCredentialInitParameters.
func (in *BitbucketDataCenterConfigReadAuthorizerCredentialInitParameters) DeepCopy() *BitbucketDataCenterConfigReadAuthorizerCredentialInitParameters {
	if in == nil {
		return nil
	}
	out := new(BitbucketDataCenterConfigReadAuthorizerCredentialInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BitbucketDataCenterConfigReadAuthorizerCredentialObservation) DeepCopyInto(out *BitbucketDataCenterConfigReadAuthorizerCredentialObservation) {
	*out = *in
	if in.UserTokenSecretVersion != nil {
		in, out := &in.UserTokenSecretVersion, &out.UserTokenSecretVersion
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BitbucketDataCenterConfigReadAuthorizerCredentialObservation.
func (in *BitbucketDataCenterConfigReadAuthorizerCredentialObservation) DeepCopy() *BitbucketDataCenterConfigReadAuthorizerCredentialObservation {
	if in == nil {
		return nil
	}
	out := new(BitbucketDataCenterConfigReadAuthorizerCredentialObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BitbucketDataCenterConfigReadAuthorizerCredentialParameters) DeepCopyInto(out *BitbucketDataCenterConfigReadAuthorizerCredentialParameters) {
	*out = *in
	if in.UserTokenSecretVersion != nil {
		in, out := &in.UserTokenSecretVersion, &out.UserTokenSecretVersion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BitbucketDataCenterConfigReadAuthorizerCredentialParameters.
func (in *BitbucketDataCenterConfigReadAuthorizerCredentialParameters) DeepCopy() *BitbucketDataCenterConfigReadAuthorizerCredentialParameters {
	if in == nil {
		return nil
	}
	out := new(BitbucketDataCenterConfigReadAuthorizerCredentialParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectAccountConnector) DeepCopyInto(out *ConnectAccountConnector) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectAccountConnector.
func (in *ConnectAccountConnector) DeepCopy() *ConnectAccountConnector {
	if in == nil {
		return nil
	}
	out := new(ConnectAccountConnector)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ConnectAccountConnector) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectAccountConnectorInitParameters) DeepCopyInto(out *ConnectAccountConnectorInitParameters) {
	*out = *in
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.ProviderOAuthConfig != nil {
		in, out := &in.ProviderOAuthConfig, &out.ProviderOAuthConfig
		*out = new(ProviderOAuthConfigInitParameters)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectAccountConnectorInitParameters.
func (in *ConnectAccountConnectorInitParameters) DeepCopy() *ConnectAccountConnectorInitParameters {
	if in == nil {
		return nil
	}
	out := new(ConnectAccountConnectorInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectAccountConnectorList) DeepCopyInto(out *ConnectAccountConnectorList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ConnectAccountConnector, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectAccountConnectorList.
func (in *ConnectAccountConnectorList) DeepCopy() *ConnectAccountConnectorList {
	if in == nil {
		return nil
	}
	out := new(ConnectAccountConnectorList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ConnectAccountConnectorList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectAccountConnectorObservation) DeepCopyInto(out *ConnectAccountConnectorObservation) {
	*out = *in
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.CreateTime != nil {
		in, out := &in.CreateTime, &out.CreateTime
		*out = new(string)
		**out = **in
	}
	if in.EffectiveAnnotations != nil {
		in, out := &in.EffectiveAnnotations, &out.EffectiveAnnotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.EffectiveLabels != nil {
		in, out := &in.EffectiveLabels, &out.EffectiveLabels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.OAuthStartURI != nil {
		in, out := &in.OAuthStartURI, &out.OAuthStartURI
		*out = new(string)
		**out = **in
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.ProviderOAuthConfig != nil {
		in, out := &in.ProviderOAuthConfig, &out.ProviderOAuthConfig
		*out = new(ProviderOAuthConfigObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.TerraformLabels != nil {
		in, out := &in.TerraformLabels, &out.TerraformLabels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.UpdateTime != nil {
		in, out := &in.UpdateTime, &out.UpdateTime
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectAccountConnectorObservation.
func (in *ConnectAccountConnectorObservation) DeepCopy() *ConnectAccountConnectorObservation {
	if in == nil {
		return nil
	}
	out := new(ConnectAccountConnectorObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectAccountConnectorParameters) DeepCopyInto(out *ConnectAccountConnectorParameters) {
	*out = *in
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.ProviderOAuthConfig != nil {
		in, out := &in.ProviderOAuthConfig, &out.ProviderOAuthConfig
		*out = new(ProviderOAuthConfigParameters)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectAccountConnectorParameters.
func (in *ConnectAccountConnectorParameters) DeepCopy() *ConnectAccountConnectorParameters {
	if in == nil {
		return nil
	}
	out := new(ConnectAccountConnectorParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectAccountConnectorSpec) DeepCopyInto(out *ConnectAccountConnectorSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectAccountConnectorSpec.
func (in *ConnectAccountConnectorSpec) DeepCopy() *ConnectAccountConnectorSpec {
	if in == nil {
		return nil
	}
	out := new(ConnectAccountConnectorSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectAccountConnectorStatus) DeepCopyInto(out *ConnectAccountConnectorStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectAccountConnectorStatus.
func (in *ConnectAccountConnectorStatus) DeepCopy() *ConnectAccountConnectorStatus {
	if in == nil {
		return nil
	}
	out := new(ConnectAccountConnectorStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectConnection) DeepCopyInto(out *ConnectConnection) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectConnection.
func (in *ConnectConnection) DeepCopy() *ConnectConnection {
	if in == nil {
		return nil
	}
	out := new(ConnectConnection)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ConnectConnection) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectConnectionInitParameters) DeepCopyInto(out *ConnectConnectionInitParameters) {
	*out = *in
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.BitbucketCloudConfig != nil {
		in, out := &in.BitbucketCloudConfig, &out.BitbucketCloudConfig
		*out = new(BitbucketCloudConfigInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.BitbucketDataCenterConfig != nil {
		in, out := &in.BitbucketDataCenterConfig, &out.BitbucketDataCenterConfig
		*out = new(BitbucketDataCenterConfigInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.CryptoKeyConfig != nil {
		in, out := &in.CryptoKeyConfig, &out.CryptoKeyConfig
		*out = new(CryptoKeyConfigInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Disabled != nil {
		in, out := &in.Disabled, &out.Disabled
		*out = new(bool)
		**out = **in
	}
	if in.Etag != nil {
		in, out := &in.Etag, &out.Etag
		*out = new(string)
		**out = **in
	}
	if in.GithubConfig != nil {
		in, out := &in.GithubConfig, &out.GithubConfig
		*out = new(GithubConfigInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.GithubEnterpriseConfig != nil {
		in, out := &in.GithubEnterpriseConfig, &out.GithubEnterpriseConfig
		*out = new(GithubEnterpriseConfigInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.GitlabConfig != nil {
		in, out := &in.GitlabConfig, &out.GitlabConfig
		*out = new(GitlabConfigInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.GitlabEnterpriseConfig != nil {
		in, out := &in.GitlabEnterpriseConfig, &out.GitlabEnterpriseConfig
		*out = new(GitlabEnterpriseConfigInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectConnectionInitParameters.
func (in *ConnectConnectionInitParameters) DeepCopy() *ConnectConnectionInitParameters {
	if in == nil {
		return nil
	}
	out := new(ConnectConnectionInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectConnectionList) DeepCopyInto(out *ConnectConnectionList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ConnectConnection, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectConnectionList.
func (in *ConnectConnectionList) DeepCopy() *ConnectConnectionList {
	if in == nil {
		return nil
	}
	out := new(ConnectConnectionList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ConnectConnectionList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectConnectionObservation) DeepCopyInto(out *ConnectConnectionObservation) {
	*out = *in
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.BitbucketCloudConfig != nil {
		in, out := &in.BitbucketCloudConfig, &out.BitbucketCloudConfig
		*out = new(BitbucketCloudConfigObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.BitbucketDataCenterConfig != nil {
		in, out := &in.BitbucketDataCenterConfig, &out.BitbucketDataCenterConfig
		*out = new(BitbucketDataCenterConfigObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.CreateTime != nil {
		in, out := &in.CreateTime, &out.CreateTime
		*out = new(string)
		**out = **in
	}
	if in.CryptoKeyConfig != nil {
		in, out := &in.CryptoKeyConfig, &out.CryptoKeyConfig
		*out = new(CryptoKeyConfigObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.DeleteTime != nil {
		in, out := &in.DeleteTime, &out.DeleteTime
		*out = new(string)
		**out = **in
	}
	if in.Disabled != nil {
		in, out := &in.Disabled, &out.Disabled
		*out = new(bool)
		**out = **in
	}
	if in.EffectiveAnnotations != nil {
		in, out := &in.EffectiveAnnotations, &out.EffectiveAnnotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.EffectiveLabels != nil {
		in, out := &in.EffectiveLabels, &out.EffectiveLabels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Etag != nil {
		in, out := &in.Etag, &out.Etag
		*out = new(string)
		**out = **in
	}
	if in.GithubConfig != nil {
		in, out := &in.GithubConfig, &out.GithubConfig
		*out = new(GithubConfigObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.GithubEnterpriseConfig != nil {
		in, out := &in.GithubEnterpriseConfig, &out.GithubEnterpriseConfig
		*out = new(GithubEnterpriseConfigObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.GitlabConfig != nil {
		in, out := &in.GitlabConfig, &out.GitlabConfig
		*out = new(GitlabConfigObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.GitlabEnterpriseConfig != nil {
		in, out := &in.GitlabEnterpriseConfig, &out.GitlabEnterpriseConfig
		*out = new(GitlabEnterpriseConfigObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.InstallationState != nil {
		in, out := &in.InstallationState, &out.InstallationState
		*out = make([]InstallationStateObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.Reconciling != nil {
		in, out := &in.Reconciling, &out.Reconciling
		*out = new(bool)
		**out = **in
	}
	if in.TerraformLabels != nil {
		in, out := &in.TerraformLabels, &out.TerraformLabels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.UID != nil {
		in, out := &in.UID, &out.UID
		*out = new(string)
		**out = **in
	}
	if in.UpdateTime != nil {
		in, out := &in.UpdateTime, &out.UpdateTime
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectConnectionObservation.
func (in *ConnectConnectionObservation) DeepCopy() *ConnectConnectionObservation {
	if in == nil {
		return nil
	}
	out := new(ConnectConnectionObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectConnectionParameters) DeepCopyInto(out *ConnectConnectionParameters) {
	*out = *in
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.BitbucketCloudConfig != nil {
		in, out := &in.BitbucketCloudConfig, &out.BitbucketCloudConfig
		*out = new(BitbucketCloudConfigParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.BitbucketDataCenterConfig != nil {
		in, out := &in.BitbucketDataCenterConfig, &out.BitbucketDataCenterConfig
		*out = new(BitbucketDataCenterConfigParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.CryptoKeyConfig != nil {
		in, out := &in.CryptoKeyConfig, &out.CryptoKeyConfig
		*out = new(CryptoKeyConfigParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Disabled != nil {
		in, out := &in.Disabled, &out.Disabled
		*out = new(bool)
		**out = **in
	}
	if in.Etag != nil {
		in, out := &in.Etag, &out.Etag
		*out = new(string)
		**out = **in
	}
	if in.GithubConfig != nil {
		in, out := &in.GithubConfig, &out.GithubConfig
		*out = new(GithubConfigParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.GithubEnterpriseConfig != nil {
		in, out := &in.GithubEnterpriseConfig, &out.GithubEnterpriseConfig
		*out = new(GithubEnterpriseConfigParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.GitlabConfig != nil {
		in, out := &in.GitlabConfig, &out.GitlabConfig
		*out = new(GitlabConfigParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.GitlabEnterpriseConfig != nil {
		in, out := &in.GitlabEnterpriseConfig, &out.GitlabEnterpriseConfig
		*out = new(GitlabEnterpriseConfigParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectConnectionParameters.
func (in *ConnectConnectionParameters) DeepCopy() *ConnectConnectionParameters {
	if in == nil {
		return nil
	}
	out := new(ConnectConnectionParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectConnectionSpec) DeepCopyInto(out *ConnectConnectionSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectConnectionSpec.
func (in *ConnectConnectionSpec) DeepCopy() *ConnectConnectionSpec {
	if in == nil {
		return nil
	}
	out := new(ConnectConnectionSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectConnectionStatus) DeepCopyInto(out *ConnectConnectionStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectConnectionStatus.
func (in *ConnectConnectionStatus) DeepCopy() *ConnectConnectionStatus {
	if in == nil {
		return nil
	}
	out := new(ConnectConnectionStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectGitRepositoryLink) DeepCopyInto(out *ConnectGitRepositoryLink) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectGitRepositoryLink.
func (in *ConnectGitRepositoryLink) DeepCopy() *ConnectGitRepositoryLink {
	if in == nil {
		return nil
	}
	out := new(ConnectGitRepositoryLink)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ConnectGitRepositoryLink) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectGitRepositoryLinkInitParameters) DeepCopyInto(out *ConnectGitRepositoryLinkInitParameters) {
	*out = *in
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.CloneURI != nil {
		in, out := &in.CloneURI, &out.CloneURI
		*out = new(string)
		**out = **in
	}
	if in.Etag != nil {
		in, out := &in.Etag, &out.Etag
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectGitRepositoryLinkInitParameters.
func (in *ConnectGitRepositoryLinkInitParameters) DeepCopy() *ConnectGitRepositoryLinkInitParameters {
	if in == nil {
		return nil
	}
	out := new(ConnectGitRepositoryLinkInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectGitRepositoryLinkList) DeepCopyInto(out *ConnectGitRepositoryLinkList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ConnectGitRepositoryLink, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectGitRepositoryLinkList.
func (in *ConnectGitRepositoryLinkList) DeepCopy() *ConnectGitRepositoryLinkList {
	if in == nil {
		return nil
	}
	out := new(ConnectGitRepositoryLinkList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ConnectGitRepositoryLinkList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectGitRepositoryLinkObservation) DeepCopyInto(out *ConnectGitRepositoryLinkObservation) {
	*out = *in
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.CloneURI != nil {
		in, out := &in.CloneURI, &out.CloneURI
		*out = new(string)
		**out = **in
	}
	if in.CreateTime != nil {
		in, out := &in.CreateTime, &out.CreateTime
		*out = new(string)
		**out = **in
	}
	if in.DeleteTime != nil {
		in, out := &in.DeleteTime, &out.DeleteTime
		*out = new(string)
		**out = **in
	}
	if in.EffectiveAnnotations != nil {
		in, out := &in.EffectiveAnnotations, &out.EffectiveAnnotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.EffectiveLabels != nil {
		in, out := &in.EffectiveLabels, &out.EffectiveLabels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Etag != nil {
		in, out := &in.Etag, &out.Etag
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ParentConnection != nil {
		in, out := &in.ParentConnection, &out.ParentConnection
		*out = new(string)
		**out = **in
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.Reconciling != nil {
		in, out := &in.Reconciling, &out.Reconciling
		*out = new(bool)
		**out = **in
	}
	if in.TerraformLabels != nil {
		in, out := &in.TerraformLabels, &out.TerraformLabels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.UID != nil {
		in, out := &in.UID, &out.UID
		*out = new(string)
		**out = **in
	}
	if in.UpdateTime != nil {
		in, out := &in.UpdateTime, &out.UpdateTime
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectGitRepositoryLinkObservation.
func (in *ConnectGitRepositoryLinkObservation) DeepCopy() *ConnectGitRepositoryLinkObservation {
	if in == nil {
		return nil
	}
	out := new(ConnectGitRepositoryLinkObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectGitRepositoryLinkParameters) DeepCopyInto(out *ConnectGitRepositoryLinkParameters) {
	*out = *in
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.CloneURI != nil {
		in, out := &in.CloneURI, &out.CloneURI
		*out = new(string)
		**out = **in
	}
	if in.Etag != nil {
		in, out := &in.Etag, &out.Etag
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.ParentConnection != nil {
		in, out := &in.ParentConnection, &out.ParentConnection
		*out = new(string)
		**out = **in
	}
	if in.ParentConnectionRef != nil {
		in, out := &in.ParentConnectionRef, &out.ParentConnectionRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ParentConnectionSelector != nil {
		in, out := &in.ParentConnectionSelector, &out.ParentConnectionSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectGitRepositoryLinkParameters.
func (in *ConnectGitRepositoryLinkParameters) DeepCopy() *ConnectGitRepositoryLinkParameters {
	if in == nil {
		return nil
	}
	out := new(ConnectGitRepositoryLinkParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectGitRepositoryLinkSpec) DeepCopyInto(out *ConnectGitRepositoryLinkSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectGitRepositoryLinkSpec.
func (in *ConnectGitRepositoryLinkSpec) DeepCopy() *ConnectGitRepositoryLinkSpec {
	if in == nil {
		return nil
	}
	out := new(ConnectGitRepositoryLinkSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectGitRepositoryLinkStatus) DeepCopyInto(out *ConnectGitRepositoryLinkStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectGitRepositoryLinkStatus.
func (in *ConnectGitRepositoryLinkStatus) DeepCopy() *ConnectGitRepositoryLinkStatus {
	if in == nil {
		return nil
	}
	out := new(ConnectGitRepositoryLinkStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CryptoKeyConfigInitParameters) DeepCopyInto(out *CryptoKeyConfigInitParameters) {
	*out = *in
	if in.KeyReference != nil {
		in, out := &in.KeyReference, &out.KeyReference
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CryptoKeyConfigInitParameters.
func (in *CryptoKeyConfigInitParameters) DeepCopy() *CryptoKeyConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(CryptoKeyConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CryptoKeyConfigObservation) DeepCopyInto(out *CryptoKeyConfigObservation) {
	*out = *in
	if in.KeyReference != nil {
		in, out := &in.KeyReference, &out.KeyReference
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CryptoKeyConfigObservation.
func (in *CryptoKeyConfigObservation) DeepCopy() *CryptoKeyConfigObservation {
	if in == nil {
		return nil
	}
	out := new(CryptoKeyConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CryptoKeyConfigParameters) DeepCopyInto(out *CryptoKeyConfigParameters) {
	*out = *in
	if in.KeyReference != nil {
		in, out := &in.KeyReference, &out.KeyReference
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CryptoKeyConfigParameters.
func (in *CryptoKeyConfigParameters) DeepCopy() *CryptoKeyConfigParameters {
	if in == nil {
		return nil
	}
	out := new(CryptoKeyConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GithubConfigAuthorizerCredentialInitParameters) DeepCopyInto(out *GithubConfigAuthorizerCredentialInitParameters) {
	*out = *in
	if in.OAuthTokenSecretVersion != nil {
		in, out := &in.OAuthTokenSecretVersion, &out.OAuthTokenSecretVersion
		*out = new(string)
		**out = **in
	}
	if in.OAuthTokenSecretVersionRef != nil {
		in, out := &in.OAuthTokenSecretVersionRef, &out.OAuthTokenSecretVersionRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.OAuthTokenSecretVersionSelector != nil {
		in, out := &in.OAuthTokenSecretVersionSelector, &out.OAuthTokenSecretVersionSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GithubConfigAuthorizerCredentialInitParameters.
func (in *GithubConfigAuthorizerCredentialInitParameters) DeepCopy() *GithubConfigAuthorizerCredentialInitParameters {
	if in == nil {
		return nil
	}
	out := new(GithubConfigAuthorizerCredentialInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GithubConfigAuthorizerCredentialObservation) DeepCopyInto(out *GithubConfigAuthorizerCredentialObservation) {
	*out = *in
	if in.OAuthTokenSecretVersion != nil {
		in, out := &in.OAuthTokenSecretVersion, &out.OAuthTokenSecretVersion
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GithubConfigAuthorizerCredentialObservation.
func (in *GithubConfigAuthorizerCredentialObservation) DeepCopy() *GithubConfigAuthorizerCredentialObservation {
	if in == nil {
		return nil
	}
	out := new(GithubConfigAuthorizerCredentialObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GithubConfigAuthorizerCredentialParameters) DeepCopyInto(out *GithubConfigAuthorizerCredentialParameters) {
	*out = *in
	if in.OAuthTokenSecretVersion != nil {
		in, out := &in.OAuthTokenSecretVersion, &out.OAuthTokenSecretVersion
		*out = new(string)
		**out = **in
	}
	if in.OAuthTokenSecretVersionRef != nil {
		in, out := &in.OAuthTokenSecretVersionRef, &out.OAuthTokenSecretVersionRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.OAuthTokenSecretVersionSelector != nil {
		in, out := &in.OAuthTokenSecretVersionSelector, &out.OAuthTokenSecretVersionSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GithubConfigAuthorizerCredentialParameters.
func (in *GithubConfigAuthorizerCredentialParameters) DeepCopy() *GithubConfigAuthorizerCredentialParameters {
	if in == nil {
		return nil
	}
	out := new(GithubConfigAuthorizerCredentialParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GithubConfigInitParameters) DeepCopyInto(out *GithubConfigInitParameters) {
	*out = *in
	if in.AppInstallationID != nil {
		in, out := &in.AppInstallationID, &out.AppInstallationID
		*out = new(string)
		**out = **in
	}
	if in.AuthorizerCredential != nil {
		in, out := &in.AuthorizerCredential, &out.AuthorizerCredential
		*out = new(GithubConfigAuthorizerCredentialInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.GithubApp != nil {
		in, out := &in.GithubApp, &out.GithubApp
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GithubConfigInitParameters.
func (in *GithubConfigInitParameters) DeepCopy() *GithubConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(GithubConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GithubConfigObservation) DeepCopyInto(out *GithubConfigObservation) {
	*out = *in
	if in.AppInstallationID != nil {
		in, out := &in.AppInstallationID, &out.AppInstallationID
		*out = new(string)
		**out = **in
	}
	if in.AuthorizerCredential != nil {
		in, out := &in.AuthorizerCredential, &out.AuthorizerCredential
		*out = new(GithubConfigAuthorizerCredentialObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.GithubApp != nil {
		in, out := &in.GithubApp, &out.GithubApp
		*out = new(string)
		**out = **in
	}
	if in.InstallationURI != nil {
		in, out := &in.InstallationURI, &out.InstallationURI
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GithubConfigObservation.
func (in *GithubConfigObservation) DeepCopy() *GithubConfigObservation {
	if in == nil {
		return nil
	}
	out := new(GithubConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GithubConfigParameters) DeepCopyInto(out *GithubConfigParameters) {
	*out = *in
	if in.AppInstallationID != nil {
		in, out := &in.AppInstallationID, &out.AppInstallationID
		*out = new(string)
		**out = **in
	}
	if in.AuthorizerCredential != nil {
		in, out := &in.AuthorizerCredential, &out.AuthorizerCredential
		*out = new(GithubConfigAuthorizerCredentialParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.GithubApp != nil {
		in, out := &in.GithubApp, &out.GithubApp
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GithubConfigParameters.
func (in *GithubConfigParameters) DeepCopy() *GithubConfigParameters {
	if in == nil {
		return nil
	}
	out := new(GithubConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GithubEnterpriseConfigInitParameters) DeepCopyInto(out *GithubEnterpriseConfigInitParameters) {
	*out = *in
	if in.AppID != nil {
		in, out := &in.AppID, &out.AppID
		*out = new(string)
		**out = **in
	}
	if in.AppInstallationID != nil {
		in, out := &in.AppInstallationID, &out.AppInstallationID
		*out = new(string)
		**out = **in
	}
	if in.HostURI != nil {
		in, out := &in.HostURI, &out.HostURI
		*out = new(string)
		**out = **in
	}
	if in.PrivateKeySecretVersion != nil {
		in, out := &in.PrivateKeySecretVersion, &out.PrivateKeySecretVersion
		*out = new(string)
		**out = **in
	}
	if in.PrivateKeySecretVersionRef != nil {
		in, out := &in.PrivateKeySecretVersionRef, &out.PrivateKeySecretVersionRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.PrivateKeySecretVersionSelector != nil {
		in, out := &in.PrivateKeySecretVersionSelector, &out.PrivateKeySecretVersionSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SSLCACertificate != nil {
		in, out := &in.SSLCACertificate, &out.SSLCACertificate
		*out = new(string)
		**out = **in
	}
	if in.ServiceDirectoryConfig != nil {
		in, out := &in.ServiceDirectoryConfig, &out.ServiceDirectoryConfig
		*out = new(GithubEnterpriseConfigServiceDirectoryConfigInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.WebhookSecretSecretVersion != nil {
		in, out := &in.WebhookSecretSecretVersion, &out.WebhookSecretSecretVersion
		*out = new(string)
		**out = **in
	}
	if in.WebhookSecretSecretVersionRef != nil {
		in, out := &in.WebhookSecretSecretVersionRef, &out.WebhookSecretSecretVersionRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.WebhookSecretSecretVersionSelector != nil {
		in, out := &in.WebhookSecretSecretVersionSelector, &out.WebhookSecretSecretVersionSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GithubEnterpriseConfigInitParameters.
func (in *GithubEnterpriseConfigInitParameters) DeepCopy() *GithubEnterpriseConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(GithubEnterpriseConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GithubEnterpriseConfigObservation) DeepCopyInto(out *GithubEnterpriseConfigObservation) {
	*out = *in
	if in.AppID != nil {
		in, out := &in.AppID, &out.AppID
		*out = new(string)
		**out = **in
	}
	if in.AppInstallationID != nil {
		in, out := &in.AppInstallationID, &out.AppInstallationID
		*out = new(string)
		**out = **in
	}
	if in.AppSlug != nil {
		in, out := &in.AppSlug, &out.AppSlug
		*out = new(string)
		**out = **in
	}
	if in.HostURI != nil {
		in, out := &in.HostURI, &out.HostURI
		*out = new(string)
		**out = **in
	}
	if in.InstallationURI != nil {
		in, out := &in.InstallationURI, &out.InstallationURI
		*out = new(string)
		**out = **in
	}
	if in.PrivateKeySecretVersion != nil {
		in, out := &in.PrivateKeySecretVersion, &out.PrivateKeySecretVersion
		*out = new(string)
		**out = **in
	}
	if in.SSLCACertificate != nil {
		in, out := &in.SSLCACertificate, &out.SSLCACertificate
		*out = new(string)
		**out = **in
	}
	if in.ServerVersion != nil {
		in, out := &in.ServerVersion, &out.ServerVersion
		*out = new(string)
		**out = **in
	}
	if in.ServiceDirectoryConfig != nil {
		in, out := &in.ServiceDirectoryConfig, &out.ServiceDirectoryConfig
		*out = new(GithubEnterpriseConfigServiceDirectoryConfigObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.WebhookSecretSecretVersion != nil {
		in, out := &in.WebhookSecretSecretVersion, &out.WebhookSecretSecretVersion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GithubEnterpriseConfigObservation.
func (in *GithubEnterpriseConfigObservation) DeepCopy() *GithubEnterpriseConfigObservation {
	if in == nil {
		return nil
	}
	out := new(GithubEnterpriseConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GithubEnterpriseConfigParameters) DeepCopyInto(out *GithubEnterpriseConfigParameters) {
	*out = *in
	if in.AppID != nil {
		in, out := &in.AppID, &out.AppID
		*out = new(string)
		**out = **in
	}
	if in.AppInstallationID != nil {
		in, out := &in.AppInstallationID, &out.AppInstallationID
		*out = new(string)
		**out = **in
	}
	if in.HostURI != nil {
		in, out := &in.HostURI, &out.HostURI
		*out = new(string)
		**out = **in
	}
	if in.PrivateKeySecretVersion != nil {
		in, out := &in.PrivateKeySecretVersion, &out.PrivateKeySecretVersion
		*out = new(string)
		**out = **in
	}
	if in.PrivateKeySecretVersionRef != nil {
		in, out := &in.PrivateKeySecretVersionRef, &out.PrivateKeySecretVersionRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.PrivateKeySecretVersionSelector != nil {
		in, out := &in.PrivateKeySecretVersionSelector, &out.PrivateKeySecretVersionSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SSLCACertificate != nil {
		in, out := &in.SSLCACertificate, &out.SSLCACertificate
		*out = new(string)
		**out = **in
	}
	if in.ServiceDirectoryConfig != nil {
		in, out := &in.ServiceDirectoryConfig, &out.ServiceDirectoryConfig
		*out = new(GithubEnterpriseConfigServiceDirectoryConfigParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.WebhookSecretSecretVersion != nil {
		in, out := &in.WebhookSecretSecretVersion, &out.WebhookSecretSecretVersion
		*out = new(string)
		**out = **in
	}
	if in.WebhookSecretSecretVersionRef != nil {
		in, out := &in.WebhookSecretSecretVersionRef, &out.WebhookSecretSecretVersionRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.WebhookSecretSecretVersionSelector != nil {
		in, out := &in.WebhookSecretSecretVersionSelector, &out.WebhookSecretSecretVersionSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GithubEnterpriseConfigParameters.
func (in *GithubEnterpriseConfigParameters) DeepCopy() *GithubEnterpriseConfigParameters {
	if in == nil {
		return nil
	}
	out := new(GithubEnterpriseConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GithubEnterpriseConfigServiceDirectoryConfigInitParameters) DeepCopyInto(out *GithubEnterpriseConfigServiceDirectoryConfigInitParameters) {
	*out = *in
	if in.Service != nil {
		in, out := &in.Service, &out.Service
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GithubEnterpriseConfigServiceDirectoryConfigInitParameters.
func (in *GithubEnterpriseConfigServiceDirectoryConfigInitParameters) DeepCopy() *GithubEnterpriseConfigServiceDirectoryConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(GithubEnterpriseConfigServiceDirectoryConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GithubEnterpriseConfigServiceDirectoryConfigObservation) DeepCopyInto(out *GithubEnterpriseConfigServiceDirectoryConfigObservation) {
	*out = *in
	if in.Service != nil {
		in, out := &in.Service, &out.Service
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GithubEnterpriseConfigServiceDirectoryConfigObservation.
func (in *GithubEnterpriseConfigServiceDirectoryConfigObservation) DeepCopy() *GithubEnterpriseConfigServiceDirectoryConfigObservation {
	if in == nil {
		return nil
	}
	out := new(GithubEnterpriseConfigServiceDirectoryConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GithubEnterpriseConfigServiceDirectoryConfigParameters) DeepCopyInto(out *GithubEnterpriseConfigServiceDirectoryConfigParameters) {
	*out = *in
	if in.Service != nil {
		in, out := &in.Service, &out.Service
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GithubEnterpriseConfigServiceDirectoryConfigParameters.
func (in *GithubEnterpriseConfigServiceDirectoryConfigParameters) DeepCopy() *GithubEnterpriseConfigServiceDirectoryConfigParameters {
	if in == nil {
		return nil
	}
	out := new(GithubEnterpriseConfigServiceDirectoryConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitlabConfigAuthorizerCredentialInitParameters) DeepCopyInto(out *GitlabConfigAuthorizerCredentialInitParameters) {
	*out = *in
	if in.UserTokenSecretVersion != nil {
		in, out := &in.UserTokenSecretVersion, &out.UserTokenSecretVersion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitlabConfigAuthorizerCredentialInitParameters.
func (in *GitlabConfigAuthorizerCredentialInitParameters) DeepCopy() *GitlabConfigAuthorizerCredentialInitParameters {
	if in == nil {
		return nil
	}
	out := new(GitlabConfigAuthorizerCredentialInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitlabConfigAuthorizerCredentialObservation) DeepCopyInto(out *GitlabConfigAuthorizerCredentialObservation) {
	*out = *in
	if in.UserTokenSecretVersion != nil {
		in, out := &in.UserTokenSecretVersion, &out.UserTokenSecretVersion
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitlabConfigAuthorizerCredentialObservation.
func (in *GitlabConfigAuthorizerCredentialObservation) DeepCopy() *GitlabConfigAuthorizerCredentialObservation {
	if in == nil {
		return nil
	}
	out := new(GitlabConfigAuthorizerCredentialObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitlabConfigAuthorizerCredentialParameters) DeepCopyInto(out *GitlabConfigAuthorizerCredentialParameters) {
	*out = *in
	if in.UserTokenSecretVersion != nil {
		in, out := &in.UserTokenSecretVersion, &out.UserTokenSecretVersion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitlabConfigAuthorizerCredentialParameters.
func (in *GitlabConfigAuthorizerCredentialParameters) DeepCopy() *GitlabConfigAuthorizerCredentialParameters {
	if in == nil {
		return nil
	}
	out := new(GitlabConfigAuthorizerCredentialParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitlabConfigInitParameters) DeepCopyInto(out *GitlabConfigInitParameters) {
	*out = *in
	if in.AuthorizerCredential != nil {
		in, out := &in.AuthorizerCredential, &out.AuthorizerCredential
		*out = new(GitlabConfigAuthorizerCredentialInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.ReadAuthorizerCredential != nil {
		in, out := &in.ReadAuthorizerCredential, &out.ReadAuthorizerCredential
		*out = new(GitlabConfigReadAuthorizerCredentialInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.WebhookSecretSecretVersion != nil {
		in, out := &in.WebhookSecretSecretVersion, &out.WebhookSecretSecretVersion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitlabConfigInitParameters.
func (in *GitlabConfigInitParameters) DeepCopy() *GitlabConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(GitlabConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitlabConfigObservation) DeepCopyInto(out *GitlabConfigObservation) {
	*out = *in
	if in.AuthorizerCredential != nil {
		in, out := &in.AuthorizerCredential, &out.AuthorizerCredential
		*out = new(GitlabConfigAuthorizerCredentialObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.ReadAuthorizerCredential != nil {
		in, out := &in.ReadAuthorizerCredential, &out.ReadAuthorizerCredential
		*out = new(GitlabConfigReadAuthorizerCredentialObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.WebhookSecretSecretVersion != nil {
		in, out := &in.WebhookSecretSecretVersion, &out.WebhookSecretSecretVersion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitlabConfigObservation.
func (in *GitlabConfigObservation) DeepCopy() *GitlabConfigObservation {
	if in == nil {
		return nil
	}
	out := new(GitlabConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitlabConfigParameters) DeepCopyInto(out *GitlabConfigParameters) {
	*out = *in
	if in.AuthorizerCredential != nil {
		in, out := &in.AuthorizerCredential, &out.AuthorizerCredential
		*out = new(GitlabConfigAuthorizerCredentialParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.ReadAuthorizerCredential != nil {
		in, out := &in.ReadAuthorizerCredential, &out.ReadAuthorizerCredential
		*out = new(GitlabConfigReadAuthorizerCredentialParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.WebhookSecretSecretVersion != nil {
		in, out := &in.WebhookSecretSecretVersion, &out.WebhookSecretSecretVersion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitlabConfigParameters.
func (in *GitlabConfigParameters) DeepCopy() *GitlabConfigParameters {
	if in == nil {
		return nil
	}
	out := new(GitlabConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitlabConfigReadAuthorizerCredentialInitParameters) DeepCopyInto(out *GitlabConfigReadAuthorizerCredentialInitParameters) {
	*out = *in
	if in.UserTokenSecretVersion != nil {
		in, out := &in.UserTokenSecretVersion, &out.UserTokenSecretVersion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitlabConfigReadAuthorizerCredentialInitParameters.
func (in *GitlabConfigReadAuthorizerCredentialInitParameters) DeepCopy() *GitlabConfigReadAuthorizerCredentialInitParameters {
	if in == nil {
		return nil
	}
	out := new(GitlabConfigReadAuthorizerCredentialInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitlabConfigReadAuthorizerCredentialObservation) DeepCopyInto(out *GitlabConfigReadAuthorizerCredentialObservation) {
	*out = *in
	if in.UserTokenSecretVersion != nil {
		in, out := &in.UserTokenSecretVersion, &out.UserTokenSecretVersion
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitlabConfigReadAuthorizerCredentialObservation.
func (in *GitlabConfigReadAuthorizerCredentialObservation) DeepCopy() *GitlabConfigReadAuthorizerCredentialObservation {
	if in == nil {
		return nil
	}
	out := new(GitlabConfigReadAuthorizerCredentialObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitlabConfigReadAuthorizerCredentialParameters) DeepCopyInto(out *GitlabConfigReadAuthorizerCredentialParameters) {
	*out = *in
	if in.UserTokenSecretVersion != nil {
		in, out := &in.UserTokenSecretVersion, &out.UserTokenSecretVersion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitlabConfigReadAuthorizerCredentialParameters.
func (in *GitlabConfigReadAuthorizerCredentialParameters) DeepCopy() *GitlabConfigReadAuthorizerCredentialParameters {
	if in == nil {
		return nil
	}
	out := new(GitlabConfigReadAuthorizerCredentialParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitlabEnterpriseConfigAuthorizerCredentialInitParameters) DeepCopyInto(out *GitlabEnterpriseConfigAuthorizerCredentialInitParameters) {
	*out = *in
	if in.UserTokenSecretVersion != nil {
		in, out := &in.UserTokenSecretVersion, &out.UserTokenSecretVersion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitlabEnterpriseConfigAuthorizerCredentialInitParameters.
func (in *GitlabEnterpriseConfigAuthorizerCredentialInitParameters) DeepCopy() *GitlabEnterpriseConfigAuthorizerCredentialInitParameters {
	if in == nil {
		return nil
	}
	out := new(GitlabEnterpriseConfigAuthorizerCredentialInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitlabEnterpriseConfigAuthorizerCredentialObservation) DeepCopyInto(out *GitlabEnterpriseConfigAuthorizerCredentialObservation) {
	*out = *in
	if in.UserTokenSecretVersion != nil {
		in, out := &in.UserTokenSecretVersion, &out.UserTokenSecretVersion
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitlabEnterpriseConfigAuthorizerCredentialObservation.
func (in *GitlabEnterpriseConfigAuthorizerCredentialObservation) DeepCopy() *GitlabEnterpriseConfigAuthorizerCredentialObservation {
	if in == nil {
		return nil
	}
	out := new(GitlabEnterpriseConfigAuthorizerCredentialObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitlabEnterpriseConfigAuthorizerCredentialParameters) DeepCopyInto(out *GitlabEnterpriseConfigAuthorizerCredentialParameters) {
	*out = *in
	if in.UserTokenSecretVersion != nil {
		in, out := &in.UserTokenSecretVersion, &out.UserTokenSecretVersion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitlabEnterpriseConfigAuthorizerCredentialParameters.
func (in *GitlabEnterpriseConfigAuthorizerCredentialParameters) DeepCopy() *GitlabEnterpriseConfigAuthorizerCredentialParameters {
	if in == nil {
		return nil
	}
	out := new(GitlabEnterpriseConfigAuthorizerCredentialParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitlabEnterpriseConfigInitParameters) DeepCopyInto(out *GitlabEnterpriseConfigInitParameters) {
	*out = *in
	if in.AuthorizerCredential != nil {
		in, out := &in.AuthorizerCredential, &out.AuthorizerCredential
		*out = new(GitlabEnterpriseConfigAuthorizerCredentialInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.HostURI != nil {
		in, out := &in.HostURI, &out.HostURI
		*out = new(string)
		**out = **in
	}
	if in.ReadAuthorizerCredential != nil {
		in, out := &in.ReadAuthorizerCredential, &out.ReadAuthorizerCredential
		*out = new(GitlabEnterpriseConfigReadAuthorizerCredentialInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.SSLCACertificate != nil {
		in, out := &in.SSLCACertificate, &out.SSLCACertificate
		*out = new(string)
		**out = **in
	}
	if in.ServiceDirectoryConfig != nil {
		in, out := &in.ServiceDirectoryConfig, &out.ServiceDirectoryConfig
		*out = new(GitlabEnterpriseConfigServiceDirectoryConfigInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.WebhookSecretSecretVersion != nil {
		in, out := &in.WebhookSecretSecretVersion, &out.WebhookSecretSecretVersion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitlabEnterpriseConfigInitParameters.
func (in *GitlabEnterpriseConfigInitParameters) DeepCopy() *GitlabEnterpriseConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(GitlabEnterpriseConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitlabEnterpriseConfigObservation) DeepCopyInto(out *GitlabEnterpriseConfigObservation) {
	*out = *in
	if in.AuthorizerCredential != nil {
		in, out := &in.AuthorizerCredential, &out.AuthorizerCredential
		*out = new(GitlabEnterpriseConfigAuthorizerCredentialObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.HostURI != nil {
		in, out := &in.HostURI, &out.HostURI
		*out = new(string)
		**out = **in
	}
	if in.ReadAuthorizerCredential != nil {
		in, out := &in.ReadAuthorizerCredential, &out.ReadAuthorizerCredential
		*out = new(GitlabEnterpriseConfigReadAuthorizerCredentialObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.SSLCACertificate != nil {
		in, out := &in.SSLCACertificate, &out.SSLCACertificate
		*out = new(string)
		**out = **in
	}
	if in.ServerVersion != nil {
		in, out := &in.ServerVersion, &out.ServerVersion
		*out = new(string)
		**out = **in
	}
	if in.ServiceDirectoryConfig != nil {
		in, out := &in.ServiceDirectoryConfig, &out.ServiceDirectoryConfig
		*out = new(GitlabEnterpriseConfigServiceDirectoryConfigObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.WebhookSecretSecretVersion != nil {
		in, out := &in.WebhookSecretSecretVersion, &out.WebhookSecretSecretVersion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitlabEnterpriseConfigObservation.
func (in *GitlabEnterpriseConfigObservation) DeepCopy() *GitlabEnterpriseConfigObservation {
	if in == nil {
		return nil
	}
	out := new(GitlabEnterpriseConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitlabEnterpriseConfigParameters) DeepCopyInto(out *GitlabEnterpriseConfigParameters) {
	*out = *in
	if in.AuthorizerCredential != nil {
		in, out := &in.AuthorizerCredential, &out.AuthorizerCredential
		*out = new(GitlabEnterpriseConfigAuthorizerCredentialParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.HostURI != nil {
		in, out := &in.HostURI, &out.HostURI
		*out = new(string)
		**out = **in
	}
	if in.ReadAuthorizerCredential != nil {
		in, out := &in.ReadAuthorizerCredential, &out.ReadAuthorizerCredential
		*out = new(GitlabEnterpriseConfigReadAuthorizerCredentialParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.SSLCACertificate != nil {
		in, out := &in.SSLCACertificate, &out.SSLCACertificate
		*out = new(string)
		**out = **in
	}
	if in.ServiceDirectoryConfig != nil {
		in, out := &in.ServiceDirectoryConfig, &out.ServiceDirectoryConfig
		*out = new(GitlabEnterpriseConfigServiceDirectoryConfigParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.WebhookSecretSecretVersion != nil {
		in, out := &in.WebhookSecretSecretVersion, &out.WebhookSecretSecretVersion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitlabEnterpriseConfigParameters.
func (in *GitlabEnterpriseConfigParameters) DeepCopy() *GitlabEnterpriseConfigParameters {
	if in == nil {
		return nil
	}
	out := new(GitlabEnterpriseConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitlabEnterpriseConfigReadAuthorizerCredentialInitParameters) DeepCopyInto(out *GitlabEnterpriseConfigReadAuthorizerCredentialInitParameters) {
	*out = *in
	if in.UserTokenSecretVersion != nil {
		in, out := &in.UserTokenSecretVersion, &out.UserTokenSecretVersion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitlabEnterpriseConfigReadAuthorizerCredentialInitParameters.
func (in *GitlabEnterpriseConfigReadAuthorizerCredentialInitParameters) DeepCopy() *GitlabEnterpriseConfigReadAuthorizerCredentialInitParameters {
	if in == nil {
		return nil
	}
	out := new(GitlabEnterpriseConfigReadAuthorizerCredentialInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitlabEnterpriseConfigReadAuthorizerCredentialObservation) DeepCopyInto(out *GitlabEnterpriseConfigReadAuthorizerCredentialObservation) {
	*out = *in
	if in.UserTokenSecretVersion != nil {
		in, out := &in.UserTokenSecretVersion, &out.UserTokenSecretVersion
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitlabEnterpriseConfigReadAuthorizerCredentialObservation.
func (in *GitlabEnterpriseConfigReadAuthorizerCredentialObservation) DeepCopy() *GitlabEnterpriseConfigReadAuthorizerCredentialObservation {
	if in == nil {
		return nil
	}
	out := new(GitlabEnterpriseConfigReadAuthorizerCredentialObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitlabEnterpriseConfigReadAuthorizerCredentialParameters) DeepCopyInto(out *GitlabEnterpriseConfigReadAuthorizerCredentialParameters) {
	*out = *in
	if in.UserTokenSecretVersion != nil {
		in, out := &in.UserTokenSecretVersion, &out.UserTokenSecretVersion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitlabEnterpriseConfigReadAuthorizerCredentialParameters.
func (in *GitlabEnterpriseConfigReadAuthorizerCredentialParameters) DeepCopy() *GitlabEnterpriseConfigReadAuthorizerCredentialParameters {
	if in == nil {
		return nil
	}
	out := new(GitlabEnterpriseConfigReadAuthorizerCredentialParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitlabEnterpriseConfigServiceDirectoryConfigInitParameters) DeepCopyInto(out *GitlabEnterpriseConfigServiceDirectoryConfigInitParameters) {
	*out = *in
	if in.Service != nil {
		in, out := &in.Service, &out.Service
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitlabEnterpriseConfigServiceDirectoryConfigInitParameters.
func (in *GitlabEnterpriseConfigServiceDirectoryConfigInitParameters) DeepCopy() *GitlabEnterpriseConfigServiceDirectoryConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(GitlabEnterpriseConfigServiceDirectoryConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitlabEnterpriseConfigServiceDirectoryConfigObservation) DeepCopyInto(out *GitlabEnterpriseConfigServiceDirectoryConfigObservation) {
	*out = *in
	if in.Service != nil {
		in, out := &in.Service, &out.Service
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitlabEnterpriseConfigServiceDirectoryConfigObservation.
func (in *GitlabEnterpriseConfigServiceDirectoryConfigObservation) DeepCopy() *GitlabEnterpriseConfigServiceDirectoryConfigObservation {
	if in == nil {
		return nil
	}
	out := new(GitlabEnterpriseConfigServiceDirectoryConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitlabEnterpriseConfigServiceDirectoryConfigParameters) DeepCopyInto(out *GitlabEnterpriseConfigServiceDirectoryConfigParameters) {
	*out = *in
	if in.Service != nil {
		in, out := &in.Service, &out.Service
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitlabEnterpriseConfigServiceDirectoryConfigParameters.
func (in *GitlabEnterpriseConfigServiceDirectoryConfigParameters) DeepCopy() *GitlabEnterpriseConfigServiceDirectoryConfigParameters {
	if in == nil {
		return nil
	}
	out := new(GitlabEnterpriseConfigServiceDirectoryConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstallationStateInitParameters) DeepCopyInto(out *InstallationStateInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstallationStateInitParameters.
func (in *InstallationStateInitParameters) DeepCopy() *InstallationStateInitParameters {
	if in == nil {
		return nil
	}
	out := new(InstallationStateInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstallationStateObservation) DeepCopyInto(out *InstallationStateObservation) {
	*out = *in
	if in.ActionURI != nil {
		in, out := &in.ActionURI, &out.ActionURI
		*out = new(string)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.Stage != nil {
		in, out := &in.Stage, &out.Stage
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstallationStateObservation.
func (in *InstallationStateObservation) DeepCopy() *InstallationStateObservation {
	if in == nil {
		return nil
	}
	out := new(InstallationStateObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstallationStateParameters) DeepCopyInto(out *InstallationStateParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstallationStateParameters.
func (in *InstallationStateParameters) DeepCopy() *InstallationStateParameters {
	if in == nil {
		return nil
	}
	out := new(InstallationStateParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProviderOAuthConfigInitParameters) DeepCopyInto(out *ProviderOAuthConfigInitParameters) {
	*out = *in
	if in.Scopes != nil {
		in, out := &in.Scopes, &out.Scopes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SystemProviderID != nil {
		in, out := &in.SystemProviderID, &out.SystemProviderID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProviderOAuthConfigInitParameters.
func (in *ProviderOAuthConfigInitParameters) DeepCopy() *ProviderOAuthConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(ProviderOAuthConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProviderOAuthConfigObservation) DeepCopyInto(out *ProviderOAuthConfigObservation) {
	*out = *in
	if in.Scopes != nil {
		in, out := &in.Scopes, &out.Scopes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SystemProviderID != nil {
		in, out := &in.SystemProviderID, &out.SystemProviderID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProviderOAuthConfigObservation.
func (in *ProviderOAuthConfigObservation) DeepCopy() *ProviderOAuthConfigObservation {
	if in == nil {
		return nil
	}
	out := new(ProviderOAuthConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProviderOAuthConfigParameters) DeepCopyInto(out *ProviderOAuthConfigParameters) {
	*out = *in
	if in.Scopes != nil {
		in, out := &in.Scopes, &out.Scopes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SystemProviderID != nil {
		in, out := &in.SystemProviderID, &out.SystemProviderID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProviderOAuthConfigParameters.
func (in *ProviderOAuthConfigParameters) DeepCopy() *ProviderOAuthConfigParameters {
	if in == nil {
		return nil
	}
	out := new(ProviderOAuthConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReadAuthorizerCredentialInitParameters) DeepCopyInto(out *ReadAuthorizerCredentialInitParameters) {
	*out = *in
	if in.UserTokenSecretVersion != nil {
		in, out := &in.UserTokenSecretVersion, &out.UserTokenSecretVersion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReadAuthorizerCredentialInitParameters.
func (in *ReadAuthorizerCredentialInitParameters) DeepCopy() *ReadAuthorizerCredentialInitParameters {
	if in == nil {
		return nil
	}
	out := new(ReadAuthorizerCredentialInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReadAuthorizerCredentialObservation) DeepCopyInto(out *ReadAuthorizerCredentialObservation) {
	*out = *in
	if in.UserTokenSecretVersion != nil {
		in, out := &in.UserTokenSecretVersion, &out.UserTokenSecretVersion
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReadAuthorizerCredentialObservation.
func (in *ReadAuthorizerCredentialObservation) DeepCopy() *ReadAuthorizerCredentialObservation {
	if in == nil {
		return nil
	}
	out := new(ReadAuthorizerCredentialObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReadAuthorizerCredentialParameters) DeepCopyInto(out *ReadAuthorizerCredentialParameters) {
	*out = *in
	if in.UserTokenSecretVersion != nil {
		in, out := &in.UserTokenSecretVersion, &out.UserTokenSecretVersion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReadAuthorizerCredentialParameters.
func (in *ReadAuthorizerCredentialParameters) DeepCopy() *ReadAuthorizerCredentialParameters {
	if in == nil {
		return nil
	}
	out := new(ReadAuthorizerCredentialParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServiceDirectoryConfigInitParameters) DeepCopyInto(out *ServiceDirectoryConfigInitParameters) {
	*out = *in
	if in.Service != nil {
		in, out := &in.Service, &out.Service
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceDirectoryConfigInitParameters.
func (in *ServiceDirectoryConfigInitParameters) DeepCopy() *ServiceDirectoryConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(ServiceDirectoryConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServiceDirectoryConfigObservation) DeepCopyInto(out *ServiceDirectoryConfigObservation) {
	*out = *in
	if in.Service != nil {
		in, out := &in.Service, &out.Service
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceDirectoryConfigObservation.
func (in *ServiceDirectoryConfigObservation) DeepCopy() *ServiceDirectoryConfigObservation {
	if in == nil {
		return nil
	}
	out := new(ServiceDirectoryConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServiceDirectoryConfigParameters) DeepCopyInto(out *ServiceDirectoryConfigParameters) {
	*out = *in
	if in.Service != nil {
		in, out := &in.Service, &out.Service
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceDirectoryConfigParameters.
func (in *ServiceDirectoryConfigParameters) DeepCopy() *ServiceDirectoryConfigParameters {
	if in == nil {
		return nil
	}
	out := new(ServiceDirectoryConfigParameters)
	in.DeepCopyInto(out)
	return out
}
