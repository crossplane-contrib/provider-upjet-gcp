// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type ConnectAccountConnectorInitParameters struct {

	// Optional. Allows users to store small amounts of arbitrary data.
	// Note: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field effective_annotations for all of the annotations present on the resource.
	// +mapType=granular
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Optional. Labels as key value pairs
	// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field effective_labels for all of the labels present on the resource.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// ProviderOAuthConfig is the OAuth config for a provider.
	// Structure is documented below.
	ProviderOAuthConfig *ProviderOAuthConfigInitParameters `json:"providerOauthConfig,omitempty" tf:"provider_oauth_config,omitempty"`
}

type ConnectAccountConnectorObservation struct {

	// Optional. Allows users to store small amounts of arbitrary data.
	// Note: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field effective_annotations for all of the annotations present on the resource.
	// +mapType=granular
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Output only. The timestamp when the userConnection was created.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// +mapType=granular
	EffectiveAnnotations map[string]*string `json:"effectiveAnnotations,omitempty" tf:"effective_annotations,omitempty"`

	// +mapType=granular
	EffectiveLabels map[string]*string `json:"effectiveLabels,omitempty" tf:"effective_labels,omitempty"`

	// an identifier for the resource with format projects/{{project}}/locations/{{location}}/accountConnectors/{{account_connector_id}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Optional. Labels as key value pairs
	// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field effective_labels for all of the labels present on the resource.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The location of the resource.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// Identifier. The resource name of the userConnection, in the format
	// projects/{project}/locations/{location}/accountConnectors/{account_connector_id}.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Output only. Start OAuth flow by clicking on this URL.
	OAuthStartURI *string `json:"oauthStartUri,omitempty" tf:"oauth_start_uri,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// ProviderOAuthConfig is the OAuth config for a provider.
	// Structure is documented below.
	ProviderOAuthConfig *ProviderOAuthConfigObservation `json:"providerOauthConfig,omitempty" tf:"provider_oauth_config,omitempty"`

	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	// +mapType=granular
	TerraformLabels map[string]*string `json:"terraformLabels,omitempty" tf:"terraform_labels,omitempty"`

	// Output only. The timestamp when the userConnection was updated.
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type ConnectAccountConnectorParameters struct {

	// Optional. Allows users to store small amounts of arbitrary data.
	// Note: This field is non-authoritative, and will only manage the annotations present in your configuration.
	// Please refer to the field effective_annotations for all of the annotations present on the resource.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Optional. Labels as key value pairs
	// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field effective_labels for all of the labels present on the resource.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The location of the resource.
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// ProviderOAuthConfig is the OAuth config for a provider.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	ProviderOAuthConfig *ProviderOAuthConfigParameters `json:"providerOauthConfig,omitempty" tf:"provider_oauth_config,omitempty"`
}

type ProviderOAuthConfigInitParameters struct {

	// Required. User selected scopes to apply to the Oauth config
	// In the event of changing scopes, user records under AccountConnector will
	// be deleted and users will re-auth again.
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// List of providers that are owned by Developer Connect.
	// Possible values:
	// GITHUB
	// GITLAB
	// GOOGLE
	// SENTRY
	// ROVO
	// NEW_RELIC
	// DATASTAX
	SystemProviderID *string `json:"systemProviderId,omitempty" tf:"system_provider_id,omitempty"`
}

type ProviderOAuthConfigObservation struct {

	// Required. User selected scopes to apply to the Oauth config
	// In the event of changing scopes, user records under AccountConnector will
	// be deleted and users will re-auth again.
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// List of providers that are owned by Developer Connect.
	// Possible values:
	// GITHUB
	// GITLAB
	// GOOGLE
	// SENTRY
	// ROVO
	// NEW_RELIC
	// DATASTAX
	SystemProviderID *string `json:"systemProviderId,omitempty" tf:"system_provider_id,omitempty"`
}

type ProviderOAuthConfigParameters struct {

	// Required. User selected scopes to apply to the Oauth config
	// In the event of changing scopes, user records under AccountConnector will
	// be deleted and users will re-auth again.
	// +kubebuilder:validation:Optional
	Scopes []*string `json:"scopes" tf:"scopes,omitempty"`

	// List of providers that are owned by Developer Connect.
	// Possible values:
	// GITHUB
	// GITLAB
	// GOOGLE
	// SENTRY
	// ROVO
	// NEW_RELIC
	// DATASTAX
	// +kubebuilder:validation:Optional
	SystemProviderID *string `json:"systemProviderId,omitempty" tf:"system_provider_id,omitempty"`
}

// ConnectAccountConnectorSpec defines the desired state of ConnectAccountConnector
type ConnectAccountConnectorSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConnectAccountConnectorParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ConnectAccountConnectorInitParameters `json:"initProvider,omitempty"`
}

// ConnectAccountConnectorStatus defines the observed state of ConnectAccountConnector.
type ConnectAccountConnectorStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConnectAccountConnectorObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ConnectAccountConnector is the Schema for the ConnectAccountConnectors API. Description
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type ConnectAccountConnector struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConnectAccountConnectorSpec   `json:"spec"`
	Status            ConnectAccountConnectorStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConnectAccountConnectorList contains a list of ConnectAccountConnectors
type ConnectAccountConnectorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConnectAccountConnector `json:"items"`
}

// Repository type metadata.
var (
	ConnectAccountConnector_Kind             = "ConnectAccountConnector"
	ConnectAccountConnector_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ConnectAccountConnector_Kind}.String()
	ConnectAccountConnector_KindAPIVersion   = ConnectAccountConnector_Kind + "." + CRDGroupVersion.String()
	ConnectAccountConnector_GroupVersionKind = CRDGroupVersion.WithKind(ConnectAccountConnector_Kind)
)

func init() {
	SchemeBuilder.Register(&ConnectAccountConnector{}, &ConnectAccountConnectorList{})
}
