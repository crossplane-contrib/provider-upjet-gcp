// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta2

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	apisresolver "github.com/upbound/provider-gcp/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *AppProfile) ResolveReferences( // ResolveReferences of this AppProfile.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("bigtable.gcp.upbound.io", "v1beta2", "Instance", "InstanceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Instance),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.InstanceRef,
			Selector:     mg.Spec.ForProvider.InstanceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Instance")
	}
	mg.Spec.ForProvider.Instance = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.InstanceRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this GarbageCollectionPolicy.
func (mg *GarbageCollectionPolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("bigtable.gcp.upbound.io", "v1beta2", "Instance", "InstanceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.InstanceName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.InstanceNameRef,
			Selector:     mg.Spec.ForProvider.InstanceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.InstanceName")
	}
	mg.Spec.ForProvider.InstanceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.InstanceNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("bigtable.gcp.upbound.io", "v1beta1", "Table", "TableList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Table),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.TableRef,
			Selector:     mg.Spec.ForProvider.TableSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Table")
	}
	mg.Spec.ForProvider.Table = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TableRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("bigtable.gcp.upbound.io", "v1beta2", "Instance", "InstanceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.InstanceName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.InstanceNameRef,
			Selector:     mg.Spec.InitProvider.InstanceNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.InstanceName")
	}
	mg.Spec.InitProvider.InstanceName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.InstanceNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("bigtable.gcp.upbound.io", "v1beta1", "Table", "TableList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Table),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.TableRef,
			Selector:     mg.Spec.InitProvider.TableSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Table")
	}
	mg.Spec.InitProvider.Table = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TableRef = rsp.ResolvedReference

	return nil
}
