// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta2

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	apisresolver "github.com/upbound/provider-gcp/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *AppConnection) ResolveReferences( // ResolveReferences of this AppConnection.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("beyondcorp.gcp.upbound.io", "v1beta2", "AppConnector", "AppConnectorList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.Connectors),
			Extract:       resource.ExtractResourceID(),
			References:    mg.Spec.ForProvider.ConnectorsRefs,
			Selector:      mg.Spec.ForProvider.ConnectorsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Connectors")
	}
	mg.Spec.ForProvider.Connectors = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.ConnectorsRefs = mrsp.ResolvedReferences

	if mg.Spec.ForProvider.Gateway != nil {
		{
			m, l, err = apisresolver.GetManagedResource("beyondcorp.gcp.upbound.io", "v1beta1", "AppGateway", "AppGatewayList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Gateway.AppGateway),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.Gateway.AppGatewayRef,
				Selector:     mg.Spec.ForProvider.Gateway.AppGatewaySelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Gateway.AppGateway")
		}
		mg.Spec.ForProvider.Gateway.AppGateway = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Gateway.AppGatewayRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("beyondcorp.gcp.upbound.io", "v1beta2", "AppConnector", "AppConnectorList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.Connectors),
			Extract:       resource.ExtractResourceID(),
			References:    mg.Spec.InitProvider.ConnectorsRefs,
			Selector:      mg.Spec.InitProvider.ConnectorsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Connectors")
	}
	mg.Spec.InitProvider.Connectors = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.ConnectorsRefs = mrsp.ResolvedReferences

	if mg.Spec.InitProvider.Gateway != nil {
		{
			m, l, err = apisresolver.GetManagedResource("beyondcorp.gcp.upbound.io", "v1beta1", "AppGateway", "AppGatewayList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Gateway.AppGateway),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.InitProvider.Gateway.AppGatewayRef,
				Selector:     mg.Spec.InitProvider.Gateway.AppGatewaySelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Gateway.AppGateway")
		}
		mg.Spec.InitProvider.Gateway.AppGateway = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Gateway.AppGatewayRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this AppConnector.
func (mg *AppConnector) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	if mg.Spec.ForProvider.PrincipalInfo != nil {
		if mg.Spec.ForProvider.PrincipalInfo.ServiceAccount != nil {
			{
				m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "ServiceAccount", "ServiceAccountList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PrincipalInfo.ServiceAccount.Email),
					Extract:      resource.ExtractParamPath("email", true),
					Reference:    mg.Spec.ForProvider.PrincipalInfo.ServiceAccount.EmailRef,
					Selector:     mg.Spec.ForProvider.PrincipalInfo.ServiceAccount.EmailSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.PrincipalInfo.ServiceAccount.Email")
			}
			mg.Spec.ForProvider.PrincipalInfo.ServiceAccount.Email = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.PrincipalInfo.ServiceAccount.EmailRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.PrincipalInfo != nil {
		if mg.Spec.InitProvider.PrincipalInfo.ServiceAccount != nil {
			{
				m, l, err = apisresolver.GetManagedResource("cloudplatform.gcp.upbound.io", "v1beta1", "ServiceAccount", "ServiceAccountList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PrincipalInfo.ServiceAccount.Email),
					Extract:      resource.ExtractParamPath("email", true),
					Reference:    mg.Spec.InitProvider.PrincipalInfo.ServiceAccount.EmailRef,
					Selector:     mg.Spec.InitProvider.PrincipalInfo.ServiceAccount.EmailSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.PrincipalInfo.ServiceAccount.Email")
			}
			mg.Spec.InitProvider.PrincipalInfo.ServiceAccount.Email = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.PrincipalInfo.ServiceAccount.EmailRef = rsp.ResolvedReference

		}
	}

	return nil
}
