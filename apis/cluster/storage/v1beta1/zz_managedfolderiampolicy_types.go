// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type ManagedFolderIAMPolicyInitParameters struct {

	// The name of the bucket that contains the managed folder. Used to find the parent resource to bind the IAM policy to
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/cluster/storage/v1beta1.ManagedFolder
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("bucket",false)
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Reference to a ManagedFolder in storage to populate bucket.
	// +kubebuilder:validation:Optional
	BucketRef *v1.Reference `json:"bucketRef,omitempty" tf:"-"`

	// Selector for a ManagedFolder in storage to populate bucket.
	// +kubebuilder:validation:Optional
	BucketSelector *v1.Selector `json:"bucketSelector,omitempty" tf:"-"`

	// Used to find the parent resource to bind the IAM policy to
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/cluster/storage/v1beta1.ManagedFolder
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("name",false)
	ManagedFolder *string `json:"managedFolder,omitempty" tf:"managed_folder,omitempty"`

	// Reference to a ManagedFolder in storage to populate managedFolder.
	// +kubebuilder:validation:Optional
	ManagedFolderRef *v1.Reference `json:"managedFolderRef,omitempty" tf:"-"`

	// Selector for a ManagedFolder in storage to populate managedFolder.
	// +kubebuilder:validation:Optional
	ManagedFolderSelector *v1.Selector `json:"managedFolderSelector,omitempty" tf:"-"`

	// The policy data generated by
	// a google_iam_policy data source.
	PolicyData *string `json:"policyData,omitempty" tf:"policy_data,omitempty"`
}

type ManagedFolderIAMPolicyObservation struct {

	// The name of the bucket that contains the managed folder. Used to find the parent resource to bind the IAM policy to
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// (Computed) The etag of the IAM policy.
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Used to find the parent resource to bind the IAM policy to
	ManagedFolder *string `json:"managedFolder,omitempty" tf:"managed_folder,omitempty"`

	// The policy data generated by
	// a google_iam_policy data source.
	PolicyData *string `json:"policyData,omitempty" tf:"policy_data,omitempty"`
}

type ManagedFolderIAMPolicyParameters struct {

	// The name of the bucket that contains the managed folder. Used to find the parent resource to bind the IAM policy to
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/cluster/storage/v1beta1.ManagedFolder
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("bucket",false)
	// +kubebuilder:validation:Optional
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Reference to a ManagedFolder in storage to populate bucket.
	// +kubebuilder:validation:Optional
	BucketRef *v1.Reference `json:"bucketRef,omitempty" tf:"-"`

	// Selector for a ManagedFolder in storage to populate bucket.
	// +kubebuilder:validation:Optional
	BucketSelector *v1.Selector `json:"bucketSelector,omitempty" tf:"-"`

	// Used to find the parent resource to bind the IAM policy to
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/cluster/storage/v1beta1.ManagedFolder
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("name",false)
	// +kubebuilder:validation:Optional
	ManagedFolder *string `json:"managedFolder,omitempty" tf:"managed_folder,omitempty"`

	// Reference to a ManagedFolder in storage to populate managedFolder.
	// +kubebuilder:validation:Optional
	ManagedFolderRef *v1.Reference `json:"managedFolderRef,omitempty" tf:"-"`

	// Selector for a ManagedFolder in storage to populate managedFolder.
	// +kubebuilder:validation:Optional
	ManagedFolderSelector *v1.Selector `json:"managedFolderSelector,omitempty" tf:"-"`

	// The policy data generated by
	// a google_iam_policy data source.
	// +kubebuilder:validation:Optional
	PolicyData *string `json:"policyData,omitempty" tf:"policy_data,omitempty"`
}

// ManagedFolderIAMPolicySpec defines the desired state of ManagedFolderIAMPolicy
type ManagedFolderIAMPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagedFolderIAMPolicyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ManagedFolderIAMPolicyInitParameters `json:"initProvider,omitempty"`
}

// ManagedFolderIAMPolicyStatus defines the observed state of ManagedFolderIAMPolicy.
type ManagedFolderIAMPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagedFolderIAMPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ManagedFolderIAMPolicy is the Schema for the ManagedFolderIAMPolicys API. Collection of resources to manage IAM policy for Cloud Storage ManagedFolder
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type ManagedFolderIAMPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.policyData) || (has(self.initProvider) && has(self.initProvider.policyData))",message="spec.forProvider.policyData is a required parameter"
	Spec   ManagedFolderIAMPolicySpec   `json:"spec"`
	Status ManagedFolderIAMPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagedFolderIAMPolicyList contains a list of ManagedFolderIAMPolicys
type ManagedFolderIAMPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagedFolderIAMPolicy `json:"items"`
}

// Repository type metadata.
var (
	ManagedFolderIAMPolicy_Kind             = "ManagedFolderIAMPolicy"
	ManagedFolderIAMPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagedFolderIAMPolicy_Kind}.String()
	ManagedFolderIAMPolicy_KindAPIVersion   = ManagedFolderIAMPolicy_Kind + "." + CRDGroupVersion.String()
	ManagedFolderIAMPolicy_GroupVersionKind = CRDGroupVersion.WithKind(ManagedFolderIAMPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagedFolderIAMPolicy{}, &ManagedFolderIAMPolicyList{})
}
