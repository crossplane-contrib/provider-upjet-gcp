// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type ManagedFolderInitParameters struct {

	// The name of the bucket that contains the managed folder.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/cluster/storage/v1beta2.Bucket
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Reference to a Bucket in storage to populate bucket.
	// +kubebuilder:validation:Optional
	BucketRef *v1.Reference `json:"bucketRef,omitempty" tf:"-"`

	// Selector for a Bucket in storage to populate bucket.
	// +kubebuilder:validation:Optional
	BucketSelector *v1.Selector `json:"bucketSelector,omitempty" tf:"-"`

	// Allows the deletion of a managed folder even if contains
	// objects. If a non-empty managed folder is deleted, any objects
	// within the folder will remain in a simulated folder with the
	// same name.
	ForceDestroy *bool `json:"forceDestroy,omitempty" tf:"force_destroy,omitempty"`

	// The name of the managed folder expressed as a path. Must include
	// trailing '/'. For example, example_dir/example_dir2/.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ManagedFolderObservation struct {

	// The name of the bucket that contains the managed folder.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// The timestamp at which this managed folder was created.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Allows the deletion of a managed folder even if contains
	// objects. If a non-empty managed folder is deleted, any objects
	// within the folder will remain in a simulated folder with the
	// same name.
	ForceDestroy *bool `json:"forceDestroy,omitempty" tf:"force_destroy,omitempty"`

	// an identifier for the resource with format {{bucket}}/{{name}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The metadata generation of the managed folder.
	Metageneration *string `json:"metageneration,omitempty" tf:"metageneration,omitempty"`

	// The name of the managed folder expressed as a path. Must include
	// trailing '/'. For example, example_dir/example_dir2/.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The URI of the created resource.
	SelfLink *string `json:"selfLink,omitempty" tf:"self_link,omitempty"`

	// The timestamp at which this managed folder was most recently updated.
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type ManagedFolderParameters struct {

	// The name of the bucket that contains the managed folder.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/cluster/storage/v1beta2.Bucket
	// +kubebuilder:validation:Optional
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Reference to a Bucket in storage to populate bucket.
	// +kubebuilder:validation:Optional
	BucketRef *v1.Reference `json:"bucketRef,omitempty" tf:"-"`

	// Selector for a Bucket in storage to populate bucket.
	// +kubebuilder:validation:Optional
	BucketSelector *v1.Selector `json:"bucketSelector,omitempty" tf:"-"`

	// Allows the deletion of a managed folder even if contains
	// objects. If a non-empty managed folder is deleted, any objects
	// within the folder will remain in a simulated folder with the
	// same name.
	// +kubebuilder:validation:Optional
	ForceDestroy *bool `json:"forceDestroy,omitempty" tf:"force_destroy,omitempty"`

	// The name of the managed folder expressed as a path. Must include
	// trailing '/'. For example, example_dir/example_dir2/.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

// ManagedFolderSpec defines the desired state of ManagedFolder
type ManagedFolderSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagedFolderParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ManagedFolderInitParameters `json:"initProvider,omitempty"`
}

// ManagedFolderStatus defines the observed state of ManagedFolder.
type ManagedFolderStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagedFolderObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ManagedFolder is the Schema for the ManagedFolders API. A Google Cloud Storage Managed Folder.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type ManagedFolder struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   ManagedFolderSpec   `json:"spec"`
	Status ManagedFolderStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagedFolderList contains a list of ManagedFolders
type ManagedFolderList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagedFolder `json:"items"`
}

// Repository type metadata.
var (
	ManagedFolder_Kind             = "ManagedFolder"
	ManagedFolder_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagedFolder_Kind}.String()
	ManagedFolder_KindAPIVersion   = ManagedFolder_Kind + "." + CRDGroupVersion.String()
	ManagedFolder_GroupVersionKind = CRDGroupVersion.WithKind(ManagedFolder_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagedFolder{}, &ManagedFolderList{})
}
