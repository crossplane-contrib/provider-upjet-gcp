// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta2

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	apisresolver "github.com/upbound/provider-gcp/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *WebBackendServiceIAMMember) ResolveReferences( // ResolveReferences of this WebBackendServiceIAMMember.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "BackendService", "BackendServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.WebBackendService),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.WebBackendServiceRef,
			Selector:     mg.Spec.ForProvider.WebBackendServiceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.WebBackendService")
	}
	mg.Spec.ForProvider.WebBackendService = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.WebBackendServiceRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "BackendService", "BackendServiceList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.WebBackendService),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.WebBackendServiceRef,
			Selector:     mg.Spec.InitProvider.WebBackendServiceSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.WebBackendService")
	}
	mg.Spec.InitProvider.WebBackendService = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.WebBackendServiceRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this WebTypeAppEngineIAMMember.
func (mg *WebTypeAppEngineIAMMember) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("appengine.gcp.upbound.io", "v1beta2", "Application", "ApplicationList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AppID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.AppIDRef,
			Selector:     mg.Spec.ForProvider.AppIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AppID")
	}
	mg.Spec.ForProvider.AppID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AppIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("appengine.gcp.upbound.io", "v1beta2", "Application", "ApplicationList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.AppID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.AppIDRef,
			Selector:     mg.Spec.InitProvider.AppIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.AppID")
	}
	mg.Spec.InitProvider.AppID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.AppIDRef = rsp.ResolvedReference

	return nil
}
