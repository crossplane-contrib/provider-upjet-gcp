// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	xpresource "github.com/crossplane/crossplane-runtime/v2/pkg/resource"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"
	apisresolver "github.com/upbound/provider-gcp/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *ServiceConnectionPolicy) ResolveReferences( // ResolveReferences of this ServiceConnectionPolicy.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Network),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.NetworkRef,
			Selector:     mg.Spec.ForProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Network")
	}
	mg.Spec.ForProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.PscConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Subnetwork", "SubnetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.PscConfig.Subnetworks),
				Extract:       resource.ExtractResourceID(),
				Namespace:     mg.GetNamespace(),
				References:    mg.Spec.ForProvider.PscConfig.SubnetworksRefs,
				Selector:      mg.Spec.ForProvider.PscConfig.SubnetworksSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.PscConfig.Subnetworks")
		}
		mg.Spec.ForProvider.PscConfig.Subnetworks = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.PscConfig.SubnetworksRefs = mrsp.ResolvedReferences

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Network),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.NetworkRef,
			Selector:     mg.Spec.InitProvider.NetworkSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Network")
	}
	mg.Spec.InitProvider.Network = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NetworkRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.PscConfig != nil {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta2", "Subnetwork", "SubnetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.PscConfig.Subnetworks),
				Extract:       resource.ExtractResourceID(),
				Namespace:     mg.GetNamespace(),
				References:    mg.Spec.InitProvider.PscConfig.SubnetworksRefs,
				Selector:      mg.Spec.InitProvider.PscConfig.SubnetworksSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.PscConfig.Subnetworks")
		}
		mg.Spec.InitProvider.PscConfig.Subnetworks = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.InitProvider.PscConfig.SubnetworksRefs = mrsp.ResolvedReferences

	}

	return nil
}

// ResolveReferences of this Spoke.
func (mg *Spoke) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("networkconnectivity.gcp.upbound.io", "v1beta1", "Hub", "HubList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Hub),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.HubRef,
			Selector:     mg.Spec.ForProvider.HubSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Hub")
	}
	mg.Spec.ForProvider.Hub = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.HubRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.LinkedInterconnectAttachments); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "InterconnectAttachment", "InterconnectAttachmentList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.LinkedInterconnectAttachments[i3].Uris),
				Extract:       resource.ExtractParamPath("self_link", true),
				Namespace:     mg.GetNamespace(),
				References:    mg.Spec.ForProvider.LinkedInterconnectAttachments[i3].UrisRefs,
				Selector:      mg.Spec.ForProvider.LinkedInterconnectAttachments[i3].UrisSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.LinkedInterconnectAttachments[i3].Uris")
		}
		mg.Spec.ForProvider.LinkedInterconnectAttachments[i3].Uris = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.LinkedInterconnectAttachments[i3].UrisRefs = mrsp.ResolvedReferences

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.LinkedProducerVPCNetwork); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LinkedProducerVPCNetwork[i3].Network),
				Extract:      reference.ExternalName(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.LinkedProducerVPCNetwork[i3].NetworkRef,
				Selector:     mg.Spec.ForProvider.LinkedProducerVPCNetwork[i3].NetworkSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.LinkedProducerVPCNetwork[i3].Network")
		}
		mg.Spec.ForProvider.LinkedProducerVPCNetwork[i3].Network = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.LinkedProducerVPCNetwork[i3].NetworkRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.LinkedProducerVPCNetwork); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("servicenetworking.gcp.upbound.io", "v1beta1", "Connection", "ConnectionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LinkedProducerVPCNetwork[i3].Peering),
				Extract:      resource.ExtractParamPath("peering", true),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.LinkedProducerVPCNetwork[i3].PeeringRef,
				Selector:     mg.Spec.ForProvider.LinkedProducerVPCNetwork[i3].PeeringSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.LinkedProducerVPCNetwork[i3].Peering")
		}
		mg.Spec.ForProvider.LinkedProducerVPCNetwork[i3].Peering = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.LinkedProducerVPCNetwork[i3].PeeringRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.LinkedRouterApplianceInstances); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.LinkedRouterApplianceInstances[i3].Instances); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Instance", "InstanceList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LinkedRouterApplianceInstances[i3].Instances[i4].VirtualMachine),
					Extract:      resource.ExtractParamPath("self_link", true),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.ForProvider.LinkedRouterApplianceInstances[i3].Instances[i4].VirtualMachineRef,
					Selector:     mg.Spec.ForProvider.LinkedRouterApplianceInstances[i3].Instances[i4].VirtualMachineSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.LinkedRouterApplianceInstances[i3].Instances[i4].VirtualMachine")
			}
			mg.Spec.ForProvider.LinkedRouterApplianceInstances[i3].Instances[i4].VirtualMachine = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.LinkedRouterApplianceInstances[i3].Instances[i4].VirtualMachineRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.LinkedVPCNetwork); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LinkedVPCNetwork[i3].URI),
				Extract:      resource.ExtractParamPath("self_link", true),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.LinkedVPCNetwork[i3].URIRef,
				Selector:     mg.Spec.ForProvider.LinkedVPCNetwork[i3].URISelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.LinkedVPCNetwork[i3].URI")
		}
		mg.Spec.ForProvider.LinkedVPCNetwork[i3].URI = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.LinkedVPCNetwork[i3].URIRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.LinkedVPNTunnels); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "VPNTunnel", "VPNTunnelList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.LinkedVPNTunnels[i3].Uris),
				Extract:       resource.ExtractParamPath("self_link", true),
				Namespace:     mg.GetNamespace(),
				References:    mg.Spec.ForProvider.LinkedVPNTunnels[i3].UrisRefs,
				Selector:      mg.Spec.ForProvider.LinkedVPNTunnels[i3].UrisSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.LinkedVPNTunnels[i3].Uris")
		}
		mg.Spec.ForProvider.LinkedVPNTunnels[i3].Uris = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.LinkedVPNTunnels[i3].UrisRefs = mrsp.ResolvedReferences

	}
	{
		m, l, err = apisresolver.GetManagedResource("networkconnectivity.gcp.upbound.io", "v1beta1", "Hub", "HubList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Hub),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.HubRef,
			Selector:     mg.Spec.InitProvider.HubSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Hub")
	}
	mg.Spec.InitProvider.Hub = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.HubRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.LinkedInterconnectAttachments); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "InterconnectAttachment", "InterconnectAttachmentList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.LinkedInterconnectAttachments[i3].Uris),
				Extract:       resource.ExtractParamPath("self_link", true),
				Namespace:     mg.GetNamespace(),
				References:    mg.Spec.InitProvider.LinkedInterconnectAttachments[i3].UrisRefs,
				Selector:      mg.Spec.InitProvider.LinkedInterconnectAttachments[i3].UrisSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.LinkedInterconnectAttachments[i3].Uris")
		}
		mg.Spec.InitProvider.LinkedInterconnectAttachments[i3].Uris = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.InitProvider.LinkedInterconnectAttachments[i3].UrisRefs = mrsp.ResolvedReferences

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.LinkedProducerVPCNetwork); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LinkedProducerVPCNetwork[i3].Network),
				Extract:      reference.ExternalName(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.LinkedProducerVPCNetwork[i3].NetworkRef,
				Selector:     mg.Spec.InitProvider.LinkedProducerVPCNetwork[i3].NetworkSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.LinkedProducerVPCNetwork[i3].Network")
		}
		mg.Spec.InitProvider.LinkedProducerVPCNetwork[i3].Network = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.LinkedProducerVPCNetwork[i3].NetworkRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.LinkedProducerVPCNetwork); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("servicenetworking.gcp.upbound.io", "v1beta1", "Connection", "ConnectionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LinkedProducerVPCNetwork[i3].Peering),
				Extract:      resource.ExtractParamPath("peering", true),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.LinkedProducerVPCNetwork[i3].PeeringRef,
				Selector:     mg.Spec.InitProvider.LinkedProducerVPCNetwork[i3].PeeringSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.LinkedProducerVPCNetwork[i3].Peering")
		}
		mg.Spec.InitProvider.LinkedProducerVPCNetwork[i3].Peering = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.LinkedProducerVPCNetwork[i3].PeeringRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.LinkedRouterApplianceInstances); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.LinkedRouterApplianceInstances[i3].Instances); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Instance", "InstanceList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LinkedRouterApplianceInstances[i3].Instances[i4].VirtualMachine),
					Extract:      resource.ExtractParamPath("self_link", true),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.InitProvider.LinkedRouterApplianceInstances[i3].Instances[i4].VirtualMachineRef,
					Selector:     mg.Spec.InitProvider.LinkedRouterApplianceInstances[i3].Instances[i4].VirtualMachineSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.LinkedRouterApplianceInstances[i3].Instances[i4].VirtualMachine")
			}
			mg.Spec.InitProvider.LinkedRouterApplianceInstances[i3].Instances[i4].VirtualMachine = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.LinkedRouterApplianceInstances[i3].Instances[i4].VirtualMachineRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.LinkedVPCNetwork); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "Network", "NetworkList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LinkedVPCNetwork[i3].URI),
				Extract:      resource.ExtractParamPath("self_link", true),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.LinkedVPCNetwork[i3].URIRef,
				Selector:     mg.Spec.InitProvider.LinkedVPCNetwork[i3].URISelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.LinkedVPCNetwork[i3].URI")
		}
		mg.Spec.InitProvider.LinkedVPCNetwork[i3].URI = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.LinkedVPCNetwork[i3].URIRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.LinkedVPNTunnels); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.gcp.upbound.io", "v1beta1", "VPNTunnel", "VPNTunnelList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.LinkedVPNTunnels[i3].Uris),
				Extract:       resource.ExtractParamPath("self_link", true),
				Namespace:     mg.GetNamespace(),
				References:    mg.Spec.InitProvider.LinkedVPNTunnels[i3].UrisRefs,
				Selector:      mg.Spec.InitProvider.LinkedVPNTunnels[i3].UrisSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.LinkedVPNTunnels[i3].Uris")
		}
		mg.Spec.InitProvider.LinkedVPNTunnels[i3].Uris = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.InitProvider.LinkedVPNTunnels[i3].UrisRefs = mrsp.ResolvedReferences

	}

	return nil
}
