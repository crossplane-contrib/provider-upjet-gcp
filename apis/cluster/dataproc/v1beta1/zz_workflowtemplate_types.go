// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClusterSelectorInitParameters struct {

	// Required. The cluster labels. Cluster must have all labels to match.
	// +mapType=granular
	ClusterLabels map[string]*string `json:"clusterLabels,omitempty" tf:"cluster_labels,omitempty"`

	// The zone where the Compute Engine cluster will be located. On a create request, it is required in the "global" region. If omitted in a non-global Dataproc region, the service will pick a zone in the corresponding Compute Engine region. On a get request, zone will always be present. A full URL, partial URI, or short name are valid. Examples: * https://www.googleapis.com/compute/v1/projects/ * us-central1-f
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type ClusterSelectorObservation struct {

	// Required. The cluster labels. Cluster must have all labels to match.
	// +mapType=granular
	ClusterLabels map[string]*string `json:"clusterLabels,omitempty" tf:"cluster_labels,omitempty"`

	// The zone where the Compute Engine cluster will be located. On a create request, it is required in the "global" region. If omitted in a non-global Dataproc region, the service will pick a zone in the corresponding Compute Engine region. On a get request, zone will always be present. A full URL, partial URI, or short name are valid. Examples: * https://www.googleapis.com/compute/v1/projects/ * us-central1-f
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type ClusterSelectorParameters struct {

	// Required. The cluster labels. Cluster must have all labels to match.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	ClusterLabels map[string]*string `json:"clusterLabels" tf:"cluster_labels,omitempty"`

	// The zone where the Compute Engine cluster will be located. On a create request, it is required in the "global" region. If omitted in a non-global Dataproc region, the service will pick a zone in the corresponding Compute Engine region. On a get request, zone will always be present. A full URL, partial URI, or short name are valid. Examples: * https://www.googleapis.com/compute/v1/projects/ * us-central1-f
	// +kubebuilder:validation:Optional
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type ConfigAutoscalingConfigInitParameters struct {

	// The autoscaling policy used by the cluster. Only resource names including projectid and location (region) are valid. Examples: * https://www.googleapis.com/compute/v1/projects/ Note that the policy must be in the same project and Dataproc region.
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`
}

type ConfigAutoscalingConfigObservation struct {

	// The autoscaling policy used by the cluster. Only resource names including projectid and location (region) are valid. Examples: * https://www.googleapis.com/compute/v1/projects/ Note that the policy must be in the same project and Dataproc region.
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`
}

type ConfigAutoscalingConfigParameters struct {

	// The autoscaling policy used by the cluster. Only resource names including projectid and location (region) are valid. Examples: * https://www.googleapis.com/compute/v1/projects/ Note that the policy must be in the same project and Dataproc region.
	// +kubebuilder:validation:Optional
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`
}

type ConfigEncryptionConfigInitParameters struct {

	// The Cloud KMS key name to use for PD disk encryption for all instances in the cluster.
	GcePdKMSKeyName *string `json:"gcePdKmsKeyName,omitempty" tf:"gce_pd_kms_key_name,omitempty"`
}

type ConfigEncryptionConfigObservation struct {

	// The Cloud KMS key name to use for PD disk encryption for all instances in the cluster.
	GcePdKMSKeyName *string `json:"gcePdKmsKeyName,omitempty" tf:"gce_pd_kms_key_name,omitempty"`
}

type ConfigEncryptionConfigParameters struct {

	// The Cloud KMS key name to use for PD disk encryption for all instances in the cluster.
	// +kubebuilder:validation:Optional
	GcePdKMSKeyName *string `json:"gcePdKmsKeyName,omitempty" tf:"gce_pd_kms_key_name,omitempty"`
}

type ConfigEndpointConfigInitParameters struct {

	// If true, enable http access to specific ports on the cluster from external sources. Defaults to false.
	EnableHTTPPortAccess *bool `json:"enableHttpPortAccess,omitempty" tf:"enable_http_port_access,omitempty"`
}

type ConfigEndpointConfigObservation struct {

	// If true, enable http access to specific ports on the cluster from external sources. Defaults to false.
	EnableHTTPPortAccess *bool `json:"enableHttpPortAccess,omitempty" tf:"enable_http_port_access,omitempty"`

	// Output only. The map of port descriptions to URLs. Will only be populated if enable_http_port_access is true.
	// +mapType=granular
	HTTPPorts map[string]*string `json:"httpPorts,omitempty" tf:"http_ports,omitempty"`
}

type ConfigEndpointConfigParameters struct {

	// If true, enable http access to specific ports on the cluster from external sources. Defaults to false.
	// +kubebuilder:validation:Optional
	EnableHTTPPortAccess *bool `json:"enableHttpPortAccess,omitempty" tf:"enable_http_port_access,omitempty"`
}

type ConfigGceClusterConfigInitParameters struct {

	// If true, all instances in the cluster will only have internal IP addresses. By default, clusters are not restricted to internal IP addresses, and will have ephemeral external IP addresses assigned to each instance. This internal_ip_only restriction can only be enabled for subnetwork enabled networks, and all off-cluster dependencies must be configured to be accessible without external IP addresses.
	InternalIPOnly *bool `json:"internalIpOnly,omitempty" tf:"internal_ip_only,omitempty"`

	// The Compute Engine metadata entries to add to all instances (see (https://cloud.google.com/compute/docs/storing-retrieving-metadata#project_and_instance_metadata)).
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// The Compute Engine network to be used for machine communications. Cannot be specified with subnetwork_uri. If neither network_uri nor subnetwork_uri is specified, the "default" network of the project is used, if it exists. Cannot be a "Custom Subnet Network" (see /regions/global/default*default`
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// Node Group Affinity for sole-tenant clusters.
	NodeGroupAffinity []GceClusterConfigNodeGroupAffinityInitParameters `json:"nodeGroupAffinity,omitempty" tf:"node_group_affinity,omitempty"`

	// The type of IPv6 access for a cluster. Possible values: PRIVATE_IPV6_GOOGLE_ACCESS_UNSPECIFIED, INHERIT_FROM_SUBNETWORK, OUTBOUND, BIDIRECTIONAL
	PrivateIPv6GoogleAccess *string `json:"privateIpv6GoogleAccess,omitempty" tf:"private_ipv6_google_access,omitempty"`

	// Reservation Affinity for consuming Zonal reservation.
	ReservationAffinity []GceClusterConfigReservationAffinityInitParameters `json:"reservationAffinity,omitempty" tf:"reservation_affinity,omitempty"`

	// The (https://cloud.google.com/compute/docs/access/service-accounts#default_service_account) is used.
	ServiceAccount *string `json:"serviceAccount,omitempty" tf:"service_account,omitempty"`

	// The URIs of service account scopes to be included in Compute Engine instances. The following base set of scopes is always included: * https://www.googleapis.com/auth/cloud.useraccounts.readonly * https://www.googleapis.com/auth/devstorage.read_write * https://www.googleapis.com/auth/logging.write If no scopes are specified, the following defaults are also provided: * https://www.googleapis.com/auth/bigquery * https://www.googleapis.com/auth/bigtable.admin.table * https://www.googleapis.com/auth/bigtable.data * https://www.googleapis.com/auth/devstorage.full_control
	ServiceAccountScopes []*string `json:"serviceAccountScopes,omitempty" tf:"service_account_scopes,omitempty"`

	// Shielded Instance Config for clusters using Compute Engine Shielded VMs. Structure defined below.
	ShieldedInstanceConfig []GceClusterConfigShieldedInstanceConfigInitParameters `json:"shieldedInstanceConfig,omitempty" tf:"shielded_instance_config,omitempty"`

	// The Compute Engine subnetwork to be used for machine communications. Cannot be specified with network_uri. A full URL, partial URI, or short name are valid. Examples: * https://www.googleapis.com/compute/v1/projects//regions/us-east1/subnetworks/sub0 * sub0
	Subnetwork *string `json:"subnetwork,omitempty" tf:"subnetwork,omitempty"`

	// The Compute Engine tags to add to all instances (see (https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The zone where the Compute Engine cluster will be located. On a create request, it is required in the "global" region. If omitted in a non-global Dataproc region, the service will pick a zone in the corresponding Compute Engine region. On a get request, zone will always be present. A full URL, partial URI, or short name are valid. Examples: * https://www.googleapis.com/compute/v1/projects/ * us-central1-f
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type ConfigGceClusterConfigObservation struct {

	// If true, all instances in the cluster will only have internal IP addresses. By default, clusters are not restricted to internal IP addresses, and will have ephemeral external IP addresses assigned to each instance. This internal_ip_only restriction can only be enabled for subnetwork enabled networks, and all off-cluster dependencies must be configured to be accessible without external IP addresses.
	InternalIPOnly *bool `json:"internalIpOnly,omitempty" tf:"internal_ip_only,omitempty"`

	// The Compute Engine metadata entries to add to all instances (see (https://cloud.google.com/compute/docs/storing-retrieving-metadata#project_and_instance_metadata)).
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// The Compute Engine network to be used for machine communications. Cannot be specified with subnetwork_uri. If neither network_uri nor subnetwork_uri is specified, the "default" network of the project is used, if it exists. Cannot be a "Custom Subnet Network" (see /regions/global/default*default`
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// Node Group Affinity for sole-tenant clusters.
	NodeGroupAffinity []GceClusterConfigNodeGroupAffinityObservation `json:"nodeGroupAffinity,omitempty" tf:"node_group_affinity,omitempty"`

	// The type of IPv6 access for a cluster. Possible values: PRIVATE_IPV6_GOOGLE_ACCESS_UNSPECIFIED, INHERIT_FROM_SUBNETWORK, OUTBOUND, BIDIRECTIONAL
	PrivateIPv6GoogleAccess *string `json:"privateIpv6GoogleAccess,omitempty" tf:"private_ipv6_google_access,omitempty"`

	// Reservation Affinity for consuming Zonal reservation.
	ReservationAffinity []GceClusterConfigReservationAffinityObservation `json:"reservationAffinity,omitempty" tf:"reservation_affinity,omitempty"`

	// The (https://cloud.google.com/compute/docs/access/service-accounts#default_service_account) is used.
	ServiceAccount *string `json:"serviceAccount,omitempty" tf:"service_account,omitempty"`

	// The URIs of service account scopes to be included in Compute Engine instances. The following base set of scopes is always included: * https://www.googleapis.com/auth/cloud.useraccounts.readonly * https://www.googleapis.com/auth/devstorage.read_write * https://www.googleapis.com/auth/logging.write If no scopes are specified, the following defaults are also provided: * https://www.googleapis.com/auth/bigquery * https://www.googleapis.com/auth/bigtable.admin.table * https://www.googleapis.com/auth/bigtable.data * https://www.googleapis.com/auth/devstorage.full_control
	ServiceAccountScopes []*string `json:"serviceAccountScopes,omitempty" tf:"service_account_scopes,omitempty"`

	// Shielded Instance Config for clusters using Compute Engine Shielded VMs. Structure defined below.
	ShieldedInstanceConfig []GceClusterConfigShieldedInstanceConfigObservation `json:"shieldedInstanceConfig,omitempty" tf:"shielded_instance_config,omitempty"`

	// The Compute Engine subnetwork to be used for machine communications. Cannot be specified with network_uri. A full URL, partial URI, or short name are valid. Examples: * https://www.googleapis.com/compute/v1/projects//regions/us-east1/subnetworks/sub0 * sub0
	Subnetwork *string `json:"subnetwork,omitempty" tf:"subnetwork,omitempty"`

	// The Compute Engine tags to add to all instances (see (https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The zone where the Compute Engine cluster will be located. On a create request, it is required in the "global" region. If omitted in a non-global Dataproc region, the service will pick a zone in the corresponding Compute Engine region. On a get request, zone will always be present. A full URL, partial URI, or short name are valid. Examples: * https://www.googleapis.com/compute/v1/projects/ * us-central1-f
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type ConfigGceClusterConfigParameters struct {

	// If true, all instances in the cluster will only have internal IP addresses. By default, clusters are not restricted to internal IP addresses, and will have ephemeral external IP addresses assigned to each instance. This internal_ip_only restriction can only be enabled for subnetwork enabled networks, and all off-cluster dependencies must be configured to be accessible without external IP addresses.
	// +kubebuilder:validation:Optional
	InternalIPOnly *bool `json:"internalIpOnly,omitempty" tf:"internal_ip_only,omitempty"`

	// The Compute Engine metadata entries to add to all instances (see (https://cloud.google.com/compute/docs/storing-retrieving-metadata#project_and_instance_metadata)).
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// The Compute Engine network to be used for machine communications. Cannot be specified with subnetwork_uri. If neither network_uri nor subnetwork_uri is specified, the "default" network of the project is used, if it exists. Cannot be a "Custom Subnet Network" (see /regions/global/default*default`
	// +kubebuilder:validation:Optional
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// Node Group Affinity for sole-tenant clusters.
	// +kubebuilder:validation:Optional
	NodeGroupAffinity []GceClusterConfigNodeGroupAffinityParameters `json:"nodeGroupAffinity,omitempty" tf:"node_group_affinity,omitempty"`

	// The type of IPv6 access for a cluster. Possible values: PRIVATE_IPV6_GOOGLE_ACCESS_UNSPECIFIED, INHERIT_FROM_SUBNETWORK, OUTBOUND, BIDIRECTIONAL
	// +kubebuilder:validation:Optional
	PrivateIPv6GoogleAccess *string `json:"privateIpv6GoogleAccess,omitempty" tf:"private_ipv6_google_access,omitempty"`

	// Reservation Affinity for consuming Zonal reservation.
	// +kubebuilder:validation:Optional
	ReservationAffinity []GceClusterConfigReservationAffinityParameters `json:"reservationAffinity,omitempty" tf:"reservation_affinity,omitempty"`

	// The (https://cloud.google.com/compute/docs/access/service-accounts#default_service_account) is used.
	// +kubebuilder:validation:Optional
	ServiceAccount *string `json:"serviceAccount,omitempty" tf:"service_account,omitempty"`

	// The URIs of service account scopes to be included in Compute Engine instances. The following base set of scopes is always included: * https://www.googleapis.com/auth/cloud.useraccounts.readonly * https://www.googleapis.com/auth/devstorage.read_write * https://www.googleapis.com/auth/logging.write If no scopes are specified, the following defaults are also provided: * https://www.googleapis.com/auth/bigquery * https://www.googleapis.com/auth/bigtable.admin.table * https://www.googleapis.com/auth/bigtable.data * https://www.googleapis.com/auth/devstorage.full_control
	// +kubebuilder:validation:Optional
	ServiceAccountScopes []*string `json:"serviceAccountScopes,omitempty" tf:"service_account_scopes,omitempty"`

	// Shielded Instance Config for clusters using Compute Engine Shielded VMs. Structure defined below.
	// +kubebuilder:validation:Optional
	ShieldedInstanceConfig []GceClusterConfigShieldedInstanceConfigParameters `json:"shieldedInstanceConfig,omitempty" tf:"shielded_instance_config,omitempty"`

	// The Compute Engine subnetwork to be used for machine communications. Cannot be specified with network_uri. A full URL, partial URI, or short name are valid. Examples: * https://www.googleapis.com/compute/v1/projects//regions/us-east1/subnetworks/sub0 * sub0
	// +kubebuilder:validation:Optional
	Subnetwork *string `json:"subnetwork,omitempty" tf:"subnetwork,omitempty"`

	// The Compute Engine tags to add to all instances (see (https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).
	// +kubebuilder:validation:Optional
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The zone where the Compute Engine cluster will be located. On a create request, it is required in the "global" region. If omitted in a non-global Dataproc region, the service will pick a zone in the corresponding Compute Engine region. On a get request, zone will always be present. A full URL, partial URI, or short name are valid. Examples: * https://www.googleapis.com/compute/v1/projects/ * us-central1-f
	// +kubebuilder:validation:Optional
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type ConfigLifecycleConfigInitParameters struct {

	// The lifetime duration of cluster. The cluster will be auto-deleted at the end of this period. Minimum value is 10 minutes; maximum value is 14 days (see JSON representation of (https://developers.google.com/protocol-buffers/docs/proto3#json)).
	AutoDeleteTTL *string `json:"autoDeleteTtl,omitempty" tf:"auto_delete_ttl,omitempty"`

	// The time when cluster will be auto-deleted (see JSON representation of (https://developers.google.com/protocol-buffers/docs/proto3#json)).
	AutoDeleteTime *string `json:"autoDeleteTime,omitempty" tf:"auto_delete_time,omitempty"`

	// The duration to keep the cluster alive while idling (when no jobs are running). Passing this threshold will cause the cluster to be deleted. Minimum value is 5 minutes; maximum value is 14 days (see JSON representation of (https://developers.google.com/protocol-buffers/docs/proto3#json).
	IdleDeleteTTL *string `json:"idleDeleteTtl,omitempty" tf:"idle_delete_ttl,omitempty"`
}

type ConfigLifecycleConfigObservation struct {

	// The lifetime duration of cluster. The cluster will be auto-deleted at the end of this period. Minimum value is 10 minutes; maximum value is 14 days (see JSON representation of (https://developers.google.com/protocol-buffers/docs/proto3#json)).
	AutoDeleteTTL *string `json:"autoDeleteTtl,omitempty" tf:"auto_delete_ttl,omitempty"`

	// The time when cluster will be auto-deleted (see JSON representation of (https://developers.google.com/protocol-buffers/docs/proto3#json)).
	AutoDeleteTime *string `json:"autoDeleteTime,omitempty" tf:"auto_delete_time,omitempty"`

	// The duration to keep the cluster alive while idling (when no jobs are running). Passing this threshold will cause the cluster to be deleted. Minimum value is 5 minutes; maximum value is 14 days (see JSON representation of (https://developers.google.com/protocol-buffers/docs/proto3#json).
	IdleDeleteTTL *string `json:"idleDeleteTtl,omitempty" tf:"idle_delete_ttl,omitempty"`

	// Output only. The time when cluster became idle (most recent job finished) and became eligible for deletion due to idleness (see JSON representation of (https://developers.google.com/protocol-buffers/docs/proto3#json)).
	IdleStartTime *string `json:"idleStartTime,omitempty" tf:"idle_start_time,omitempty"`
}

type ConfigLifecycleConfigParameters struct {

	// The lifetime duration of cluster. The cluster will be auto-deleted at the end of this period. Minimum value is 10 minutes; maximum value is 14 days (see JSON representation of (https://developers.google.com/protocol-buffers/docs/proto3#json)).
	// +kubebuilder:validation:Optional
	AutoDeleteTTL *string `json:"autoDeleteTtl,omitempty" tf:"auto_delete_ttl,omitempty"`

	// The time when cluster will be auto-deleted (see JSON representation of (https://developers.google.com/protocol-buffers/docs/proto3#json)).
	// +kubebuilder:validation:Optional
	AutoDeleteTime *string `json:"autoDeleteTime,omitempty" tf:"auto_delete_time,omitempty"`

	// The duration to keep the cluster alive while idling (when no jobs are running). Passing this threshold will cause the cluster to be deleted. Minimum value is 5 minutes; maximum value is 14 days (see JSON representation of (https://developers.google.com/protocol-buffers/docs/proto3#json).
	// +kubebuilder:validation:Optional
	IdleDeleteTTL *string `json:"idleDeleteTtl,omitempty" tf:"idle_delete_ttl,omitempty"`
}

type ConfigMasterConfigAcceleratorsInitParameters struct {

	// The number of the accelerator cards of this type exposed to this instance.
	AcceleratorCount *float64 `json:"acceleratorCount,omitempty" tf:"accelerator_count,omitempty"`

	// Full URL, partial URI, or short name of the accelerator type resource to expose to this instance. See (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the accelerator type resource, for example, nvidia-tesla-k80.
	AcceleratorType *string `json:"acceleratorType,omitempty" tf:"accelerator_type,omitempty"`
}

type ConfigMasterConfigAcceleratorsObservation struct {

	// The number of the accelerator cards of this type exposed to this instance.
	AcceleratorCount *float64 `json:"acceleratorCount,omitempty" tf:"accelerator_count,omitempty"`

	// Full URL, partial URI, or short name of the accelerator type resource to expose to this instance. See (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the accelerator type resource, for example, nvidia-tesla-k80.
	AcceleratorType *string `json:"acceleratorType,omitempty" tf:"accelerator_type,omitempty"`
}

type ConfigMasterConfigAcceleratorsParameters struct {

	// The number of the accelerator cards of this type exposed to this instance.
	// +kubebuilder:validation:Optional
	AcceleratorCount *float64 `json:"acceleratorCount,omitempty" tf:"accelerator_count,omitempty"`

	// Full URL, partial URI, or short name of the accelerator type resource to expose to this instance. See (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the accelerator type resource, for example, nvidia-tesla-k80.
	// +kubebuilder:validation:Optional
	AcceleratorType *string `json:"acceleratorType,omitempty" tf:"accelerator_type,omitempty"`
}

type ConfigMasterConfigDiskConfigInitParameters struct {

	// Size in GB of the boot disk (default is 500GB).
	BootDiskSizeGb *float64 `json:"bootDiskSizeGb,omitempty" tf:"boot_disk_size_gb,omitempty"`

	// Type of the boot disk (default is "pd-standard"). Valid values: "pd-ssd" (Persistent Disk Solid State Drive) or "pd-standard" (Persistent Disk Hard Disk Drive).
	BootDiskType *string `json:"bootDiskType,omitempty" tf:"boot_disk_type,omitempty"`

	// Number of attached SSDs, from 0 to 4 (default is 0). If SSDs are not attached, the boot disk is used to store runtime logs and (https://hadoop.apache.org/docs/r1.2.1/hdfs_user_guide.html) data. If one or more SSDs are attached, this runtime bulk data is spread across them, and the boot disk contains only basic config and installed binaries.
	NumLocalSsds *float64 `json:"numLocalSsds,omitempty" tf:"num_local_ssds,omitempty"`
}

type ConfigMasterConfigDiskConfigObservation struct {

	// Size in GB of the boot disk (default is 500GB).
	BootDiskSizeGb *float64 `json:"bootDiskSizeGb,omitempty" tf:"boot_disk_size_gb,omitempty"`

	// Type of the boot disk (default is "pd-standard"). Valid values: "pd-ssd" (Persistent Disk Solid State Drive) or "pd-standard" (Persistent Disk Hard Disk Drive).
	BootDiskType *string `json:"bootDiskType,omitempty" tf:"boot_disk_type,omitempty"`

	// Number of attached SSDs, from 0 to 4 (default is 0). If SSDs are not attached, the boot disk is used to store runtime logs and (https://hadoop.apache.org/docs/r1.2.1/hdfs_user_guide.html) data. If one or more SSDs are attached, this runtime bulk data is spread across them, and the boot disk contains only basic config and installed binaries.
	NumLocalSsds *float64 `json:"numLocalSsds,omitempty" tf:"num_local_ssds,omitempty"`
}

type ConfigMasterConfigDiskConfigParameters struct {

	// Size in GB of the boot disk (default is 500GB).
	// +kubebuilder:validation:Optional
	BootDiskSizeGb *float64 `json:"bootDiskSizeGb,omitempty" tf:"boot_disk_size_gb,omitempty"`

	// Type of the boot disk (default is "pd-standard"). Valid values: "pd-ssd" (Persistent Disk Solid State Drive) or "pd-standard" (Persistent Disk Hard Disk Drive).
	// +kubebuilder:validation:Optional
	BootDiskType *string `json:"bootDiskType,omitempty" tf:"boot_disk_type,omitempty"`

	// Number of attached SSDs, from 0 to 4 (default is 0). If SSDs are not attached, the boot disk is used to store runtime logs and (https://hadoop.apache.org/docs/r1.2.1/hdfs_user_guide.html) data. If one or more SSDs are attached, this runtime bulk data is spread across them, and the boot disk contains only basic config and installed binaries.
	// +kubebuilder:validation:Optional
	NumLocalSsds *float64 `json:"numLocalSsds,omitempty" tf:"num_local_ssds,omitempty"`
}

type ConfigMasterConfigInitParameters struct {

	// The Compute Engine accelerator configuration for these instances.
	Accelerators []ConfigMasterConfigAcceleratorsInitParameters `json:"accelerators,omitempty" tf:"accelerators,omitempty"`

	// Disk option config settings.
	DiskConfig []ConfigMasterConfigDiskConfigInitParameters `json:"diskConfig,omitempty" tf:"disk_config,omitempty"`

	// The Compute Engine image resource used for cluster instances. The URI can represent an image or image family. Image examples: * https://www.googleapis.com/compute/beta/projects/ If the URI is unspecified, it will be inferred from SoftwareConfig.image_version or the system default.
	Image *string `json:"image,omitempty" tf:"image,omitempty"`

	// The Compute Engine machine type used for cluster instances. A full URL, partial URI, or short name are valid. Examples: * https://www.googleapis.com/compute/v1/projects/(https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the machine type resource, for example, n1-standard-2`.
	MachineType *string `json:"machineType,omitempty" tf:"machine_type,omitempty"`

	// Specifies the minimum cpu platform for the Instance Group. See (https://cloud.google.com/dataproc/docs/concepts/compute/dataproc-min-cpu).
	MinCPUPlatform *string `json:"minCpuPlatform,omitempty" tf:"min_cpu_platform,omitempty"`

	// The number of VM instances in the instance group. For master instance groups, must be set to 1.
	NumInstances *float64 `json:"numInstances,omitempty" tf:"num_instances,omitempty"`

	// Specifies the preemptibility of the instance group. The default value for master and worker groups is NON_PREEMPTIBLE. This default cannot be changed. The default value for secondary instances is PREEMPTIBLE. Possible values: PREEMPTIBILITY_UNSPECIFIED, NON_PREEMPTIBLE, PREEMPTIBLE
	Preemptibility *string `json:"preemptibility,omitempty" tf:"preemptibility,omitempty"`
}

type ConfigMasterConfigObservation struct {

	// The Compute Engine accelerator configuration for these instances.
	Accelerators []ConfigMasterConfigAcceleratorsObservation `json:"accelerators,omitempty" tf:"accelerators,omitempty"`

	// Disk option config settings.
	DiskConfig []ConfigMasterConfigDiskConfigObservation `json:"diskConfig,omitempty" tf:"disk_config,omitempty"`

	// The Compute Engine image resource used for cluster instances. The URI can represent an image or image family. Image examples: * https://www.googleapis.com/compute/beta/projects/ If the URI is unspecified, it will be inferred from SoftwareConfig.image_version or the system default.
	Image *string `json:"image,omitempty" tf:"image,omitempty"`

	// Output only. The list of instance names. Dataproc derives the names from cluster_name, num_instances, and the instance group.
	InstanceNames []*string `json:"instanceNames,omitempty" tf:"instance_names,omitempty"`

	// Output only. Specifies that this instance group contains preemptible instances.
	IsPreemptible *bool `json:"isPreemptible,omitempty" tf:"is_preemptible,omitempty"`

	// The Compute Engine machine type used for cluster instances. A full URL, partial URI, or short name are valid. Examples: * https://www.googleapis.com/compute/v1/projects/(https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the machine type resource, for example, n1-standard-2`.
	MachineType *string `json:"machineType,omitempty" tf:"machine_type,omitempty"`

	// Output only. The config for Compute Engine Instance Group Manager that manages this group. This is only used for preemptible instance groups.
	ManagedGroupConfig []ManagedGroupConfigObservation `json:"managedGroupConfig,omitempty" tf:"managed_group_config,omitempty"`

	// Specifies the minimum cpu platform for the Instance Group. See (https://cloud.google.com/dataproc/docs/concepts/compute/dataproc-min-cpu).
	MinCPUPlatform *string `json:"minCpuPlatform,omitempty" tf:"min_cpu_platform,omitempty"`

	// The number of VM instances in the instance group. For master instance groups, must be set to 1.
	NumInstances *float64 `json:"numInstances,omitempty" tf:"num_instances,omitempty"`

	// Specifies the preemptibility of the instance group. The default value for master and worker groups is NON_PREEMPTIBLE. This default cannot be changed. The default value for secondary instances is PREEMPTIBLE. Possible values: PREEMPTIBILITY_UNSPECIFIED, NON_PREEMPTIBLE, PREEMPTIBLE
	Preemptibility *string `json:"preemptibility,omitempty" tf:"preemptibility,omitempty"`
}

type ConfigMasterConfigParameters struct {

	// The Compute Engine accelerator configuration for these instances.
	// +kubebuilder:validation:Optional
	Accelerators []ConfigMasterConfigAcceleratorsParameters `json:"accelerators,omitempty" tf:"accelerators,omitempty"`

	// Disk option config settings.
	// +kubebuilder:validation:Optional
	DiskConfig []ConfigMasterConfigDiskConfigParameters `json:"diskConfig,omitempty" tf:"disk_config,omitempty"`

	// The Compute Engine image resource used for cluster instances. The URI can represent an image or image family. Image examples: * https://www.googleapis.com/compute/beta/projects/ If the URI is unspecified, it will be inferred from SoftwareConfig.image_version or the system default.
	// +kubebuilder:validation:Optional
	Image *string `json:"image,omitempty" tf:"image,omitempty"`

	// The Compute Engine machine type used for cluster instances. A full URL, partial URI, or short name are valid. Examples: * https://www.googleapis.com/compute/v1/projects/(https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the machine type resource, for example, n1-standard-2`.
	// +kubebuilder:validation:Optional
	MachineType *string `json:"machineType,omitempty" tf:"machine_type,omitempty"`

	// Specifies the minimum cpu platform for the Instance Group. See (https://cloud.google.com/dataproc/docs/concepts/compute/dataproc-min-cpu).
	// +kubebuilder:validation:Optional
	MinCPUPlatform *string `json:"minCpuPlatform,omitempty" tf:"min_cpu_platform,omitempty"`

	// The number of VM instances in the instance group. For master instance groups, must be set to 1.
	// +kubebuilder:validation:Optional
	NumInstances *float64 `json:"numInstances,omitempty" tf:"num_instances,omitempty"`

	// Specifies the preemptibility of the instance group. The default value for master and worker groups is NON_PREEMPTIBLE. This default cannot be changed. The default value for secondary instances is PREEMPTIBLE. Possible values: PREEMPTIBILITY_UNSPECIFIED, NON_PREEMPTIBLE, PREEMPTIBLE
	// +kubebuilder:validation:Optional
	Preemptibility *string `json:"preemptibility,omitempty" tf:"preemptibility,omitempty"`
}

type ConfigSecondaryWorkerConfigInitParameters struct {

	// The Compute Engine accelerator configuration for these instances.
	Accelerators []SecondaryWorkerConfigAcceleratorsInitParameters `json:"accelerators,omitempty" tf:"accelerators,omitempty"`

	// Disk option config settings.
	DiskConfig []SecondaryWorkerConfigDiskConfigInitParameters `json:"diskConfig,omitempty" tf:"disk_config,omitempty"`

	// The Compute Engine image resource used for cluster instances. The URI can represent an image or image family. Image examples: * https://www.googleapis.com/compute/beta/projects/ If the URI is unspecified, it will be inferred from SoftwareConfig.image_version or the system default.
	Image *string `json:"image,omitempty" tf:"image,omitempty"`

	// The Compute Engine machine type used for cluster instances. A full URL, partial URI, or short name are valid. Examples: * https://www.googleapis.com/compute/v1/projects/(https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the machine type resource, for example, n1-standard-2`.
	MachineType *string `json:"machineType,omitempty" tf:"machine_type,omitempty"`

	// Specifies the minimum cpu platform for the Instance Group. See (https://cloud.google.com/dataproc/docs/concepts/compute/dataproc-min-cpu).
	MinCPUPlatform *string `json:"minCpuPlatform,omitempty" tf:"min_cpu_platform,omitempty"`

	// The number of VM instances in the instance group. For master instance groups, must be set to 1.
	NumInstances *float64 `json:"numInstances,omitempty" tf:"num_instances,omitempty"`

	// Specifies the preemptibility of the instance group. The default value for master and worker groups is NON_PREEMPTIBLE. This default cannot be changed. The default value for secondary instances is PREEMPTIBLE. Possible values: PREEMPTIBILITY_UNSPECIFIED, NON_PREEMPTIBLE, PREEMPTIBLE
	Preemptibility *string `json:"preemptibility,omitempty" tf:"preemptibility,omitempty"`
}

type ConfigSecondaryWorkerConfigObservation struct {

	// The Compute Engine accelerator configuration for these instances.
	Accelerators []SecondaryWorkerConfigAcceleratorsObservation `json:"accelerators,omitempty" tf:"accelerators,omitempty"`

	// Disk option config settings.
	DiskConfig []SecondaryWorkerConfigDiskConfigObservation `json:"diskConfig,omitempty" tf:"disk_config,omitempty"`

	// The Compute Engine image resource used for cluster instances. The URI can represent an image or image family. Image examples: * https://www.googleapis.com/compute/beta/projects/ If the URI is unspecified, it will be inferred from SoftwareConfig.image_version or the system default.
	Image *string `json:"image,omitempty" tf:"image,omitempty"`

	// Output only. The list of instance names. Dataproc derives the names from cluster_name, num_instances, and the instance group.
	InstanceNames []*string `json:"instanceNames,omitempty" tf:"instance_names,omitempty"`

	// Output only. Specifies that this instance group contains preemptible instances.
	IsPreemptible *bool `json:"isPreemptible,omitempty" tf:"is_preemptible,omitempty"`

	// The Compute Engine machine type used for cluster instances. A full URL, partial URI, or short name are valid. Examples: * https://www.googleapis.com/compute/v1/projects/(https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the machine type resource, for example, n1-standard-2`.
	MachineType *string `json:"machineType,omitempty" tf:"machine_type,omitempty"`

	// Output only. The config for Compute Engine Instance Group Manager that manages this group. This is only used for preemptible instance groups.
	ManagedGroupConfig []SecondaryWorkerConfigManagedGroupConfigObservation `json:"managedGroupConfig,omitempty" tf:"managed_group_config,omitempty"`

	// Specifies the minimum cpu platform for the Instance Group. See (https://cloud.google.com/dataproc/docs/concepts/compute/dataproc-min-cpu).
	MinCPUPlatform *string `json:"minCpuPlatform,omitempty" tf:"min_cpu_platform,omitempty"`

	// The number of VM instances in the instance group. For master instance groups, must be set to 1.
	NumInstances *float64 `json:"numInstances,omitempty" tf:"num_instances,omitempty"`

	// Specifies the preemptibility of the instance group. The default value for master and worker groups is NON_PREEMPTIBLE. This default cannot be changed. The default value for secondary instances is PREEMPTIBLE. Possible values: PREEMPTIBILITY_UNSPECIFIED, NON_PREEMPTIBLE, PREEMPTIBLE
	Preemptibility *string `json:"preemptibility,omitempty" tf:"preemptibility,omitempty"`
}

type ConfigSecondaryWorkerConfigParameters struct {

	// The Compute Engine accelerator configuration for these instances.
	// +kubebuilder:validation:Optional
	Accelerators []SecondaryWorkerConfigAcceleratorsParameters `json:"accelerators,omitempty" tf:"accelerators,omitempty"`

	// Disk option config settings.
	// +kubebuilder:validation:Optional
	DiskConfig []SecondaryWorkerConfigDiskConfigParameters `json:"diskConfig,omitempty" tf:"disk_config,omitempty"`

	// The Compute Engine image resource used for cluster instances. The URI can represent an image or image family. Image examples: * https://www.googleapis.com/compute/beta/projects/ If the URI is unspecified, it will be inferred from SoftwareConfig.image_version or the system default.
	// +kubebuilder:validation:Optional
	Image *string `json:"image,omitempty" tf:"image,omitempty"`

	// The Compute Engine machine type used for cluster instances. A full URL, partial URI, or short name are valid. Examples: * https://www.googleapis.com/compute/v1/projects/(https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the machine type resource, for example, n1-standard-2`.
	// +kubebuilder:validation:Optional
	MachineType *string `json:"machineType,omitempty" tf:"machine_type,omitempty"`

	// Specifies the minimum cpu platform for the Instance Group. See (https://cloud.google.com/dataproc/docs/concepts/compute/dataproc-min-cpu).
	// +kubebuilder:validation:Optional
	MinCPUPlatform *string `json:"minCpuPlatform,omitempty" tf:"min_cpu_platform,omitempty"`

	// The number of VM instances in the instance group. For master instance groups, must be set to 1.
	// +kubebuilder:validation:Optional
	NumInstances *float64 `json:"numInstances,omitempty" tf:"num_instances,omitempty"`

	// Specifies the preemptibility of the instance group. The default value for master and worker groups is NON_PREEMPTIBLE. This default cannot be changed. The default value for secondary instances is PREEMPTIBLE. Possible values: PREEMPTIBILITY_UNSPECIFIED, NON_PREEMPTIBLE, PREEMPTIBLE
	// +kubebuilder:validation:Optional
	Preemptibility *string `json:"preemptibility,omitempty" tf:"preemptibility,omitempty"`
}

type ConfigSecurityConfigInitParameters struct {

	// Kerberos related configuration.
	KerberosConfig []SecurityConfigKerberosConfigInitParameters `json:"kerberosConfig,omitempty" tf:"kerberos_config,omitempty"`
}

type ConfigSecurityConfigObservation struct {

	// Kerberos related configuration.
	KerberosConfig []SecurityConfigKerberosConfigObservation `json:"kerberosConfig,omitempty" tf:"kerberos_config,omitempty"`
}

type ConfigSecurityConfigParameters struct {

	// Kerberos related configuration.
	// +kubebuilder:validation:Optional
	KerberosConfig []SecurityConfigKerberosConfigParameters `json:"kerberosConfig,omitempty" tf:"kerberos_config,omitempty"`
}

type ConfigSoftwareConfigInitParameters struct {

	// The version of software inside the cluster. It must be one of the supported Dataproc Versions, such as "1.2" (including a subminor version, such as "1.2.29"), or the "preview" version. If unspecified, it defaults to the latest Debian version.
	ImageVersion *string `json:"imageVersion,omitempty" tf:"image_version,omitempty"`

	// The set of components to activate on the cluster.
	OptionalComponents []*string `json:"optionalComponents,omitempty" tf:"optional_components,omitempty"`

	// A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`
}

type ConfigSoftwareConfigObservation struct {

	// The version of software inside the cluster. It must be one of the supported Dataproc Versions, such as "1.2" (including a subminor version, such as "1.2.29"), or the "preview" version. If unspecified, it defaults to the latest Debian version.
	ImageVersion *string `json:"imageVersion,omitempty" tf:"image_version,omitempty"`

	// The set of components to activate on the cluster.
	OptionalComponents []*string `json:"optionalComponents,omitempty" tf:"optional_components,omitempty"`

	// A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`
}

type ConfigSoftwareConfigParameters struct {

	// The version of software inside the cluster. It must be one of the supported Dataproc Versions, such as "1.2" (including a subminor version, such as "1.2.29"), or the "preview" version. If unspecified, it defaults to the latest Debian version.
	// +kubebuilder:validation:Optional
	ImageVersion *string `json:"imageVersion,omitempty" tf:"image_version,omitempty"`

	// The set of components to activate on the cluster.
	// +kubebuilder:validation:Optional
	OptionalComponents []*string `json:"optionalComponents,omitempty" tf:"optional_components,omitempty"`

	// A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`
}

type ConfigWorkerConfigAcceleratorsInitParameters struct {

	// The number of the accelerator cards of this type exposed to this instance.
	AcceleratorCount *float64 `json:"acceleratorCount,omitempty" tf:"accelerator_count,omitempty"`

	// Full URL, partial URI, or short name of the accelerator type resource to expose to this instance. See (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the accelerator type resource, for example, nvidia-tesla-k80.
	AcceleratorType *string `json:"acceleratorType,omitempty" tf:"accelerator_type,omitempty"`
}

type ConfigWorkerConfigAcceleratorsObservation struct {

	// The number of the accelerator cards of this type exposed to this instance.
	AcceleratorCount *float64 `json:"acceleratorCount,omitempty" tf:"accelerator_count,omitempty"`

	// Full URL, partial URI, or short name of the accelerator type resource to expose to this instance. See (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the accelerator type resource, for example, nvidia-tesla-k80.
	AcceleratorType *string `json:"acceleratorType,omitempty" tf:"accelerator_type,omitempty"`
}

type ConfigWorkerConfigAcceleratorsParameters struct {

	// The number of the accelerator cards of this type exposed to this instance.
	// +kubebuilder:validation:Optional
	AcceleratorCount *float64 `json:"acceleratorCount,omitempty" tf:"accelerator_count,omitempty"`

	// Full URL, partial URI, or short name of the accelerator type resource to expose to this instance. See (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the accelerator type resource, for example, nvidia-tesla-k80.
	// +kubebuilder:validation:Optional
	AcceleratorType *string `json:"acceleratorType,omitempty" tf:"accelerator_type,omitempty"`
}

type ConfigWorkerConfigDiskConfigInitParameters struct {

	// Size in GB of the boot disk (default is 500GB).
	BootDiskSizeGb *float64 `json:"bootDiskSizeGb,omitempty" tf:"boot_disk_size_gb,omitempty"`

	// Type of the boot disk (default is "pd-standard"). Valid values: "pd-ssd" (Persistent Disk Solid State Drive) or "pd-standard" (Persistent Disk Hard Disk Drive).
	BootDiskType *string `json:"bootDiskType,omitempty" tf:"boot_disk_type,omitempty"`

	// Number of attached SSDs, from 0 to 4 (default is 0). If SSDs are not attached, the boot disk is used to store runtime logs and (https://hadoop.apache.org/docs/r1.2.1/hdfs_user_guide.html) data. If one or more SSDs are attached, this runtime bulk data is spread across them, and the boot disk contains only basic config and installed binaries.
	NumLocalSsds *float64 `json:"numLocalSsds,omitempty" tf:"num_local_ssds,omitempty"`
}

type ConfigWorkerConfigDiskConfigObservation struct {

	// Size in GB of the boot disk (default is 500GB).
	BootDiskSizeGb *float64 `json:"bootDiskSizeGb,omitempty" tf:"boot_disk_size_gb,omitempty"`

	// Type of the boot disk (default is "pd-standard"). Valid values: "pd-ssd" (Persistent Disk Solid State Drive) or "pd-standard" (Persistent Disk Hard Disk Drive).
	BootDiskType *string `json:"bootDiskType,omitempty" tf:"boot_disk_type,omitempty"`

	// Number of attached SSDs, from 0 to 4 (default is 0). If SSDs are not attached, the boot disk is used to store runtime logs and (https://hadoop.apache.org/docs/r1.2.1/hdfs_user_guide.html) data. If one or more SSDs are attached, this runtime bulk data is spread across them, and the boot disk contains only basic config and installed binaries.
	NumLocalSsds *float64 `json:"numLocalSsds,omitempty" tf:"num_local_ssds,omitempty"`
}

type ConfigWorkerConfigDiskConfigParameters struct {

	// Size in GB of the boot disk (default is 500GB).
	// +kubebuilder:validation:Optional
	BootDiskSizeGb *float64 `json:"bootDiskSizeGb,omitempty" tf:"boot_disk_size_gb,omitempty"`

	// Type of the boot disk (default is "pd-standard"). Valid values: "pd-ssd" (Persistent Disk Solid State Drive) or "pd-standard" (Persistent Disk Hard Disk Drive).
	// +kubebuilder:validation:Optional
	BootDiskType *string `json:"bootDiskType,omitempty" tf:"boot_disk_type,omitempty"`

	// Number of attached SSDs, from 0 to 4 (default is 0). If SSDs are not attached, the boot disk is used to store runtime logs and (https://hadoop.apache.org/docs/r1.2.1/hdfs_user_guide.html) data. If one or more SSDs are attached, this runtime bulk data is spread across them, and the boot disk contains only basic config and installed binaries.
	// +kubebuilder:validation:Optional
	NumLocalSsds *float64 `json:"numLocalSsds,omitempty" tf:"num_local_ssds,omitempty"`
}

type ConfigWorkerConfigInitParameters struct {

	// The Compute Engine accelerator configuration for these instances.
	Accelerators []ConfigWorkerConfigAcceleratorsInitParameters `json:"accelerators,omitempty" tf:"accelerators,omitempty"`

	// Disk option config settings.
	DiskConfig []ConfigWorkerConfigDiskConfigInitParameters `json:"diskConfig,omitempty" tf:"disk_config,omitempty"`

	// The Compute Engine image resource used for cluster instances. The URI can represent an image or image family. Image examples: * https://www.googleapis.com/compute/beta/projects/ If the URI is unspecified, it will be inferred from SoftwareConfig.image_version or the system default.
	Image *string `json:"image,omitempty" tf:"image,omitempty"`

	// The Compute Engine machine type used for cluster instances. A full URL, partial URI, or short name are valid. Examples: * https://www.googleapis.com/compute/v1/projects/(https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the machine type resource, for example, n1-standard-2`.
	MachineType *string `json:"machineType,omitempty" tf:"machine_type,omitempty"`

	// Specifies the minimum cpu platform for the Instance Group. See (https://cloud.google.com/dataproc/docs/concepts/compute/dataproc-min-cpu).
	MinCPUPlatform *string `json:"minCpuPlatform,omitempty" tf:"min_cpu_platform,omitempty"`

	// The number of VM instances in the instance group. For master instance groups, must be set to 1.
	NumInstances *float64 `json:"numInstances,omitempty" tf:"num_instances,omitempty"`

	// Specifies the preemptibility of the instance group. The default value for master and worker groups is NON_PREEMPTIBLE. This default cannot be changed. The default value for secondary instances is PREEMPTIBLE. Possible values: PREEMPTIBILITY_UNSPECIFIED, NON_PREEMPTIBLE, PREEMPTIBLE
	Preemptibility *string `json:"preemptibility,omitempty" tf:"preemptibility,omitempty"`
}

type ConfigWorkerConfigObservation struct {

	// The Compute Engine accelerator configuration for these instances.
	Accelerators []ConfigWorkerConfigAcceleratorsObservation `json:"accelerators,omitempty" tf:"accelerators,omitempty"`

	// Disk option config settings.
	DiskConfig []ConfigWorkerConfigDiskConfigObservation `json:"diskConfig,omitempty" tf:"disk_config,omitempty"`

	// The Compute Engine image resource used for cluster instances. The URI can represent an image or image family. Image examples: * https://www.googleapis.com/compute/beta/projects/ If the URI is unspecified, it will be inferred from SoftwareConfig.image_version or the system default.
	Image *string `json:"image,omitempty" tf:"image,omitempty"`

	// Output only. The list of instance names. Dataproc derives the names from cluster_name, num_instances, and the instance group.
	InstanceNames []*string `json:"instanceNames,omitempty" tf:"instance_names,omitempty"`

	// Output only. Specifies that this instance group contains preemptible instances.
	IsPreemptible *bool `json:"isPreemptible,omitempty" tf:"is_preemptible,omitempty"`

	// The Compute Engine machine type used for cluster instances. A full URL, partial URI, or short name are valid. Examples: * https://www.googleapis.com/compute/v1/projects/(https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the machine type resource, for example, n1-standard-2`.
	MachineType *string `json:"machineType,omitempty" tf:"machine_type,omitempty"`

	// Output only. The config for Compute Engine Instance Group Manager that manages this group. This is only used for preemptible instance groups.
	ManagedGroupConfig []WorkerConfigManagedGroupConfigObservation `json:"managedGroupConfig,omitempty" tf:"managed_group_config,omitempty"`

	// Specifies the minimum cpu platform for the Instance Group. See (https://cloud.google.com/dataproc/docs/concepts/compute/dataproc-min-cpu).
	MinCPUPlatform *string `json:"minCpuPlatform,omitempty" tf:"min_cpu_platform,omitempty"`

	// The number of VM instances in the instance group. For master instance groups, must be set to 1.
	NumInstances *float64 `json:"numInstances,omitempty" tf:"num_instances,omitempty"`

	// Specifies the preemptibility of the instance group. The default value for master and worker groups is NON_PREEMPTIBLE. This default cannot be changed. The default value for secondary instances is PREEMPTIBLE. Possible values: PREEMPTIBILITY_UNSPECIFIED, NON_PREEMPTIBLE, PREEMPTIBLE
	Preemptibility *string `json:"preemptibility,omitempty" tf:"preemptibility,omitempty"`
}

type ConfigWorkerConfigParameters struct {

	// The Compute Engine accelerator configuration for these instances.
	// +kubebuilder:validation:Optional
	Accelerators []ConfigWorkerConfigAcceleratorsParameters `json:"accelerators,omitempty" tf:"accelerators,omitempty"`

	// Disk option config settings.
	// +kubebuilder:validation:Optional
	DiskConfig []ConfigWorkerConfigDiskConfigParameters `json:"diskConfig,omitempty" tf:"disk_config,omitempty"`

	// The Compute Engine image resource used for cluster instances. The URI can represent an image or image family. Image examples: * https://www.googleapis.com/compute/beta/projects/ If the URI is unspecified, it will be inferred from SoftwareConfig.image_version or the system default.
	// +kubebuilder:validation:Optional
	Image *string `json:"image,omitempty" tf:"image,omitempty"`

	// The Compute Engine machine type used for cluster instances. A full URL, partial URI, or short name are valid. Examples: * https://www.googleapis.com/compute/v1/projects/(https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the machine type resource, for example, n1-standard-2`.
	// +kubebuilder:validation:Optional
	MachineType *string `json:"machineType,omitempty" tf:"machine_type,omitempty"`

	// Specifies the minimum cpu platform for the Instance Group. See (https://cloud.google.com/dataproc/docs/concepts/compute/dataproc-min-cpu).
	// +kubebuilder:validation:Optional
	MinCPUPlatform *string `json:"minCpuPlatform,omitempty" tf:"min_cpu_platform,omitempty"`

	// The number of VM instances in the instance group. For master instance groups, must be set to 1.
	// +kubebuilder:validation:Optional
	NumInstances *float64 `json:"numInstances,omitempty" tf:"num_instances,omitempty"`

	// Specifies the preemptibility of the instance group. The default value for master and worker groups is NON_PREEMPTIBLE. This default cannot be changed. The default value for secondary instances is PREEMPTIBLE. Possible values: PREEMPTIBILITY_UNSPECIFIED, NON_PREEMPTIBLE, PREEMPTIBLE
	// +kubebuilder:validation:Optional
	Preemptibility *string `json:"preemptibility,omitempty" tf:"preemptibility,omitempty"`
}

type GceClusterConfigNodeGroupAffinityInitParameters struct {

	// Required. The URI of a sole-tenant /zones/us-central1-a/nodeGroups/node-group-1*node-group-1`
	NodeGroup *string `json:"nodeGroup,omitempty" tf:"node_group,omitempty"`
}

type GceClusterConfigNodeGroupAffinityObservation struct {

	// Required. The URI of a sole-tenant /zones/us-central1-a/nodeGroups/node-group-1*node-group-1`
	NodeGroup *string `json:"nodeGroup,omitempty" tf:"node_group,omitempty"`
}

type GceClusterConfigNodeGroupAffinityParameters struct {

	// Required. The URI of a sole-tenant /zones/us-central1-a/nodeGroups/node-group-1*node-group-1`
	// +kubebuilder:validation:Optional
	NodeGroup *string `json:"nodeGroup" tf:"node_group,omitempty"`
}

type GceClusterConfigReservationAffinityInitParameters struct {

	// Type of reservation to consume Possible values: TYPE_UNSPECIFIED, NO_RESERVATION, ANY_RESERVATION, SPECIFIC_RESERVATION
	ConsumeReservationType *string `json:"consumeReservationType,omitempty" tf:"consume_reservation_type,omitempty"`

	// Corresponds to the label key of reservation resource.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Required. List of allowed values for the parameter.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type GceClusterConfigReservationAffinityObservation struct {

	// Type of reservation to consume Possible values: TYPE_UNSPECIFIED, NO_RESERVATION, ANY_RESERVATION, SPECIFIC_RESERVATION
	ConsumeReservationType *string `json:"consumeReservationType,omitempty" tf:"consume_reservation_type,omitempty"`

	// Corresponds to the label key of reservation resource.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Required. List of allowed values for the parameter.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type GceClusterConfigReservationAffinityParameters struct {

	// Type of reservation to consume Possible values: TYPE_UNSPECIFIED, NO_RESERVATION, ANY_RESERVATION, SPECIFIC_RESERVATION
	// +kubebuilder:validation:Optional
	ConsumeReservationType *string `json:"consumeReservationType,omitempty" tf:"consume_reservation_type,omitempty"`

	// Corresponds to the label key of reservation resource.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Required. List of allowed values for the parameter.
	// +kubebuilder:validation:Optional
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type GceClusterConfigShieldedInstanceConfigInitParameters struct {

	// Defines whether instances have Integrity Monitoring enabled.
	EnableIntegrityMonitoring *bool `json:"enableIntegrityMonitoring,omitempty" tf:"enable_integrity_monitoring,omitempty"`

	// Defines whether instances have Secure Boot enabled.
	EnableSecureBoot *bool `json:"enableSecureBoot,omitempty" tf:"enable_secure_boot,omitempty"`

	// Defines whether instances have the vTPM enabled.
	EnableVtpm *bool `json:"enableVtpm,omitempty" tf:"enable_vtpm,omitempty"`
}

type GceClusterConfigShieldedInstanceConfigObservation struct {

	// Defines whether instances have Integrity Monitoring enabled.
	EnableIntegrityMonitoring *bool `json:"enableIntegrityMonitoring,omitempty" tf:"enable_integrity_monitoring,omitempty"`

	// Defines whether instances have Secure Boot enabled.
	EnableSecureBoot *bool `json:"enableSecureBoot,omitempty" tf:"enable_secure_boot,omitempty"`

	// Defines whether instances have the vTPM enabled.
	EnableVtpm *bool `json:"enableVtpm,omitempty" tf:"enable_vtpm,omitempty"`
}

type GceClusterConfigShieldedInstanceConfigParameters struct {

	// Defines whether instances have Integrity Monitoring enabled.
	// +kubebuilder:validation:Optional
	EnableIntegrityMonitoring *bool `json:"enableIntegrityMonitoring,omitempty" tf:"enable_integrity_monitoring,omitempty"`

	// Defines whether instances have Secure Boot enabled.
	// +kubebuilder:validation:Optional
	EnableSecureBoot *bool `json:"enableSecureBoot,omitempty" tf:"enable_secure_boot,omitempty"`

	// Defines whether instances have the vTPM enabled.
	// +kubebuilder:validation:Optional
	EnableVtpm *bool `json:"enableVtpm,omitempty" tf:"enable_vtpm,omitempty"`
}

type HadoopJobInitParameters struct {

	// HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
	ArchiveUris []*string `json:"archiveUris,omitempty" tf:"archive_uris,omitempty"`

	// The arguments to pass to the driver. Do not include arguments, such as --conf, that can be set as job properties, since a collision may occur that causes an incorrect job submission.
	Args []*string `json:"args,omitempty" tf:"args,omitempty"`

	// HCFS URIs of files to be placed in the working directory of each executor. Useful for naively parallel tasks.
	FileUris []*string `json:"fileUris,omitempty" tf:"file_uris,omitempty"`

	// HCFS URIs of jar files to be added to the Spark CLASSPATH.
	JarFileUris []*string `json:"jarFileUris,omitempty" tf:"jar_file_uris,omitempty"`

	// The runtime log config for job execution.
	LoggingConfig []HadoopJobLoggingConfigInitParameters `json:"loggingConfig,omitempty" tf:"logging_config,omitempty"`

	// The name of the driver's main class. The jar file that contains the class must be in the default CLASSPATH or specified in jar_file_uris.
	MainClass *string `json:"mainClass,omitempty" tf:"main_class,omitempty"`

	// The HCFS URI of the jar file that contains the main class.
	MainJarFileURI *string `json:"mainJarFileUri,omitempty" tf:"main_jar_file_uri,omitempty"`

	// A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`
}

type HadoopJobLoggingConfigInitParameters struct {

	// The per-package log levels for the driver. This may include "root" package name to configure rootLogger. Examples: 'com.google = FATAL', 'root = INFO', 'org.apache = DEBUG'
	// +mapType=granular
	DriverLogLevels map[string]*string `json:"driverLogLevels,omitempty" tf:"driver_log_levels,omitempty"`
}

type HadoopJobLoggingConfigObservation struct {

	// The per-package log levels for the driver. This may include "root" package name to configure rootLogger. Examples: 'com.google = FATAL', 'root = INFO', 'org.apache = DEBUG'
	// +mapType=granular
	DriverLogLevels map[string]*string `json:"driverLogLevels,omitempty" tf:"driver_log_levels,omitempty"`
}

type HadoopJobLoggingConfigParameters struct {

	// The per-package log levels for the driver. This may include "root" package name to configure rootLogger. Examples: 'com.google = FATAL', 'root = INFO', 'org.apache = DEBUG'
	// +kubebuilder:validation:Optional
	// +mapType=granular
	DriverLogLevels map[string]*string `json:"driverLogLevels,omitempty" tf:"driver_log_levels,omitempty"`
}

type HadoopJobObservation struct {

	// HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
	ArchiveUris []*string `json:"archiveUris,omitempty" tf:"archive_uris,omitempty"`

	// The arguments to pass to the driver. Do not include arguments, such as --conf, that can be set as job properties, since a collision may occur that causes an incorrect job submission.
	Args []*string `json:"args,omitempty" tf:"args,omitempty"`

	// HCFS URIs of files to be placed in the working directory of each executor. Useful for naively parallel tasks.
	FileUris []*string `json:"fileUris,omitempty" tf:"file_uris,omitempty"`

	// HCFS URIs of jar files to be added to the Spark CLASSPATH.
	JarFileUris []*string `json:"jarFileUris,omitempty" tf:"jar_file_uris,omitempty"`

	// The runtime log config for job execution.
	LoggingConfig []HadoopJobLoggingConfigObservation `json:"loggingConfig,omitempty" tf:"logging_config,omitempty"`

	// The name of the driver's main class. The jar file that contains the class must be in the default CLASSPATH or specified in jar_file_uris.
	MainClass *string `json:"mainClass,omitempty" tf:"main_class,omitempty"`

	// The HCFS URI of the jar file that contains the main class.
	MainJarFileURI *string `json:"mainJarFileUri,omitempty" tf:"main_jar_file_uri,omitempty"`

	// A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`
}

type HadoopJobParameters struct {

	// HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
	// +kubebuilder:validation:Optional
	ArchiveUris []*string `json:"archiveUris,omitempty" tf:"archive_uris,omitempty"`

	// The arguments to pass to the driver. Do not include arguments, such as --conf, that can be set as job properties, since a collision may occur that causes an incorrect job submission.
	// +kubebuilder:validation:Optional
	Args []*string `json:"args,omitempty" tf:"args,omitempty"`

	// HCFS URIs of files to be placed in the working directory of each executor. Useful for naively parallel tasks.
	// +kubebuilder:validation:Optional
	FileUris []*string `json:"fileUris,omitempty" tf:"file_uris,omitempty"`

	// HCFS URIs of jar files to be added to the Spark CLASSPATH.
	// +kubebuilder:validation:Optional
	JarFileUris []*string `json:"jarFileUris,omitempty" tf:"jar_file_uris,omitempty"`

	// The runtime log config for job execution.
	// +kubebuilder:validation:Optional
	LoggingConfig []HadoopJobLoggingConfigParameters `json:"loggingConfig,omitempty" tf:"logging_config,omitempty"`

	// The name of the driver's main class. The jar file that contains the class must be in the default CLASSPATH or specified in jar_file_uris.
	// +kubebuilder:validation:Optional
	MainClass *string `json:"mainClass,omitempty" tf:"main_class,omitempty"`

	// The HCFS URI of the jar file that contains the main class.
	// +kubebuilder:validation:Optional
	MainJarFileURI *string `json:"mainJarFileUri,omitempty" tf:"main_jar_file_uri,omitempty"`

	// A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`
}

type HiveJobInitParameters struct {

	// Whether to continue executing queries if a query fails. The default value is false. Setting to true can be useful when executing independent parallel queries.
	ContinueOnFailure *bool `json:"continueOnFailure,omitempty" tf:"continue_on_failure,omitempty"`

	// HCFS URIs of jar files to be added to the Spark CLASSPATH.
	JarFileUris []*string `json:"jarFileUris,omitempty" tf:"jar_file_uris,omitempty"`

	// A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`

	// The HCFS URI of the script that contains SQL queries.
	QueryFileURI *string `json:"queryFileUri,omitempty" tf:"query_file_uri,omitempty"`

	// A list of queries.
	QueryList []QueryListInitParameters `json:"queryList,omitempty" tf:"query_list,omitempty"`

	// Mapping of query variable names to values (equivalent to the Spark SQL command: SET name="value";).
	// +mapType=granular
	ScriptVariables map[string]*string `json:"scriptVariables,omitempty" tf:"script_variables,omitempty"`
}

type HiveJobObservation struct {

	// Whether to continue executing queries if a query fails. The default value is false. Setting to true can be useful when executing independent parallel queries.
	ContinueOnFailure *bool `json:"continueOnFailure,omitempty" tf:"continue_on_failure,omitempty"`

	// HCFS URIs of jar files to be added to the Spark CLASSPATH.
	JarFileUris []*string `json:"jarFileUris,omitempty" tf:"jar_file_uris,omitempty"`

	// A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`

	// The HCFS URI of the script that contains SQL queries.
	QueryFileURI *string `json:"queryFileUri,omitempty" tf:"query_file_uri,omitempty"`

	// A list of queries.
	QueryList []QueryListObservation `json:"queryList,omitempty" tf:"query_list,omitempty"`

	// Mapping of query variable names to values (equivalent to the Spark SQL command: SET name="value";).
	// +mapType=granular
	ScriptVariables map[string]*string `json:"scriptVariables,omitempty" tf:"script_variables,omitempty"`
}

type HiveJobParameters struct {

	// Whether to continue executing queries if a query fails. The default value is false. Setting to true can be useful when executing independent parallel queries.
	// +kubebuilder:validation:Optional
	ContinueOnFailure *bool `json:"continueOnFailure,omitempty" tf:"continue_on_failure,omitempty"`

	// HCFS URIs of jar files to be added to the Spark CLASSPATH.
	// +kubebuilder:validation:Optional
	JarFileUris []*string `json:"jarFileUris,omitempty" tf:"jar_file_uris,omitempty"`

	// A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`

	// The HCFS URI of the script that contains SQL queries.
	// +kubebuilder:validation:Optional
	QueryFileURI *string `json:"queryFileUri,omitempty" tf:"query_file_uri,omitempty"`

	// A list of queries.
	// +kubebuilder:validation:Optional
	QueryList []QueryListParameters `json:"queryList,omitempty" tf:"query_list,omitempty"`

	// Mapping of query variable names to values (equivalent to the Spark SQL command: SET name="value";).
	// +kubebuilder:validation:Optional
	// +mapType=granular
	ScriptVariables map[string]*string `json:"scriptVariables,omitempty" tf:"script_variables,omitempty"`
}

type InitializationActionsInitParameters struct {

	// Required. Cloud Storage URI of executable file.
	ExecutableFile *string `json:"executableFile,omitempty" tf:"executable_file,omitempty"`

	// Amount of time executable has to complete. Default is 10 minutes (see JSON representation of (https://developers.google.com/protocol-buffers/docs/proto3#json)). Cluster creation fails with an explanatory error message (the name of the executable that caused the error and the exceeded timeout period) if the executable is not completed at end of the timeout period.
	ExecutionTimeout *string `json:"executionTimeout,omitempty" tf:"execution_timeout,omitempty"`
}

type InitializationActionsObservation struct {

	// Required. Cloud Storage URI of executable file.
	ExecutableFile *string `json:"executableFile,omitempty" tf:"executable_file,omitempty"`

	// Amount of time executable has to complete. Default is 10 minutes (see JSON representation of (https://developers.google.com/protocol-buffers/docs/proto3#json)). Cluster creation fails with an explanatory error message (the name of the executable that caused the error and the exceeded timeout period) if the executable is not completed at end of the timeout period.
	ExecutionTimeout *string `json:"executionTimeout,omitempty" tf:"execution_timeout,omitempty"`
}

type InitializationActionsParameters struct {

	// Required. Cloud Storage URI of executable file.
	// +kubebuilder:validation:Optional
	ExecutableFile *string `json:"executableFile,omitempty" tf:"executable_file,omitempty"`

	// Amount of time executable has to complete. Default is 10 minutes (see JSON representation of (https://developers.google.com/protocol-buffers/docs/proto3#json)). Cluster creation fails with an explanatory error message (the name of the executable that caused the error and the exceeded timeout period) if the executable is not completed at end of the timeout period.
	// +kubebuilder:validation:Optional
	ExecutionTimeout *string `json:"executionTimeout,omitempty" tf:"execution_timeout,omitempty"`
}

type JobsInitParameters struct {

	// Job is a Hadoop job.
	HadoopJob []HadoopJobInitParameters `json:"hadoopJob,omitempty" tf:"hadoop_job,omitempty"`

	// Job is a Hive job.
	HiveJob []HiveJobInitParameters `json:"hiveJob,omitempty" tf:"hive_job,omitempty"`

	// The labels to associate with this job. Label keys must be between 1 and 63 characters long, and must conform to the following regular expression: {0,63} No more than 32 labels can be associated with a given job.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Job is a Pig job.
	PigJob []PigJobInitParameters `json:"pigJob,omitempty" tf:"pig_job,omitempty"`

	// The optional list of prerequisite job step_ids. If not specified, the job will start at the beginning of workflow.
	PrerequisiteStepIds []*string `json:"prerequisiteStepIds,omitempty" tf:"prerequisite_step_ids,omitempty"`

	// Job is a Presto job.
	PrestoJob []PrestoJobInitParameters `json:"prestoJob,omitempty" tf:"presto_job,omitempty"`

	// Job is a PySpark job.
	PysparkJob []PysparkJobInitParameters `json:"pysparkJob,omitempty" tf:"pyspark_job,omitempty"`

	// Job scheduling configuration.
	Scheduling []JobsSchedulingInitParameters `json:"scheduling,omitempty" tf:"scheduling,omitempty"`

	// Job is a Spark job.
	SparkJob []SparkJobInitParameters `json:"sparkJob,omitempty" tf:"spark_job,omitempty"`

	// Job is a SparkR job.
	SparkRJob []SparkRJobInitParameters `json:"sparkRJob,omitempty" tf:"spark_r_job,omitempty"`

	// Job is a SparkSql job.
	SparkSQLJob []SparkSQLJobInitParameters `json:"sparkSqlJob,omitempty" tf:"spark_sql_job,omitempty"`

	// Required. The step id. The id must be unique among all jobs within the template. The step id is used as prefix for job id, as job goog-dataproc-workflow-step-id label, and in field from other steps. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between 3 and 50 characters.
	StepID *string `json:"stepId,omitempty" tf:"step_id,omitempty"`
}

type JobsObservation struct {

	// Job is a Hadoop job.
	HadoopJob []HadoopJobObservation `json:"hadoopJob,omitempty" tf:"hadoop_job,omitempty"`

	// Job is a Hive job.
	HiveJob []HiveJobObservation `json:"hiveJob,omitempty" tf:"hive_job,omitempty"`

	// The labels to associate with this job. Label keys must be between 1 and 63 characters long, and must conform to the following regular expression: {0,63} No more than 32 labels can be associated with a given job.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Job is a Pig job.
	PigJob []PigJobObservation `json:"pigJob,omitempty" tf:"pig_job,omitempty"`

	// The optional list of prerequisite job step_ids. If not specified, the job will start at the beginning of workflow.
	PrerequisiteStepIds []*string `json:"prerequisiteStepIds,omitempty" tf:"prerequisite_step_ids,omitempty"`

	// Job is a Presto job.
	PrestoJob []PrestoJobObservation `json:"prestoJob,omitempty" tf:"presto_job,omitempty"`

	// Job is a PySpark job.
	PysparkJob []PysparkJobObservation `json:"pysparkJob,omitempty" tf:"pyspark_job,omitempty"`

	// Job scheduling configuration.
	Scheduling []JobsSchedulingObservation `json:"scheduling,omitempty" tf:"scheduling,omitempty"`

	// Job is a Spark job.
	SparkJob []SparkJobObservation `json:"sparkJob,omitempty" tf:"spark_job,omitempty"`

	// Job is a SparkR job.
	SparkRJob []SparkRJobObservation `json:"sparkRJob,omitempty" tf:"spark_r_job,omitempty"`

	// Job is a SparkSql job.
	SparkSQLJob []SparkSQLJobObservation `json:"sparkSqlJob,omitempty" tf:"spark_sql_job,omitempty"`

	// Required. The step id. The id must be unique among all jobs within the template. The step id is used as prefix for job id, as job goog-dataproc-workflow-step-id label, and in field from other steps. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between 3 and 50 characters.
	StepID *string `json:"stepId,omitempty" tf:"step_id,omitempty"`
}

type JobsParameters struct {

	// Job is a Hadoop job.
	// +kubebuilder:validation:Optional
	HadoopJob []HadoopJobParameters `json:"hadoopJob,omitempty" tf:"hadoop_job,omitempty"`

	// Job is a Hive job.
	// +kubebuilder:validation:Optional
	HiveJob []HiveJobParameters `json:"hiveJob,omitempty" tf:"hive_job,omitempty"`

	// The labels to associate with this job. Label keys must be between 1 and 63 characters long, and must conform to the following regular expression: {0,63} No more than 32 labels can be associated with a given job.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Job is a Pig job.
	// +kubebuilder:validation:Optional
	PigJob []PigJobParameters `json:"pigJob,omitempty" tf:"pig_job,omitempty"`

	// The optional list of prerequisite job step_ids. If not specified, the job will start at the beginning of workflow.
	// +kubebuilder:validation:Optional
	PrerequisiteStepIds []*string `json:"prerequisiteStepIds,omitempty" tf:"prerequisite_step_ids,omitempty"`

	// Job is a Presto job.
	// +kubebuilder:validation:Optional
	PrestoJob []PrestoJobParameters `json:"prestoJob,omitempty" tf:"presto_job,omitempty"`

	// Job is a PySpark job.
	// +kubebuilder:validation:Optional
	PysparkJob []PysparkJobParameters `json:"pysparkJob,omitempty" tf:"pyspark_job,omitempty"`

	// Job scheduling configuration.
	// +kubebuilder:validation:Optional
	Scheduling []JobsSchedulingParameters `json:"scheduling,omitempty" tf:"scheduling,omitempty"`

	// Job is a Spark job.
	// +kubebuilder:validation:Optional
	SparkJob []SparkJobParameters `json:"sparkJob,omitempty" tf:"spark_job,omitempty"`

	// Job is a SparkR job.
	// +kubebuilder:validation:Optional
	SparkRJob []SparkRJobParameters `json:"sparkRJob,omitempty" tf:"spark_r_job,omitempty"`

	// Job is a SparkSql job.
	// +kubebuilder:validation:Optional
	SparkSQLJob []SparkSQLJobParameters `json:"sparkSqlJob,omitempty" tf:"spark_sql_job,omitempty"`

	// Required. The step id. The id must be unique among all jobs within the template. The step id is used as prefix for job id, as job goog-dataproc-workflow-step-id label, and in field from other steps. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between 3 and 50 characters.
	// +kubebuilder:validation:Optional
	StepID *string `json:"stepId" tf:"step_id,omitempty"`
}

type JobsSchedulingInitParameters struct {

	// Maximum number of times per hour a driver may be restarted as a result of driver exiting with non-zero code before job is reported failed. A job may be reported as thrashing if driver exits with non-zero code 4 times within 10 minute window. Maximum value is 10.
	MaxFailuresPerHour *float64 `json:"maxFailuresPerHour,omitempty" tf:"max_failures_per_hour,omitempty"`

	// Maximum number of times in total a driver may be restarted as a result of driver exiting with non-zero code before job is reported failed. Maximum value is 240
	MaxFailuresTotal *float64 `json:"maxFailuresTotal,omitempty" tf:"max_failures_total,omitempty"`
}

type JobsSchedulingObservation struct {

	// Maximum number of times per hour a driver may be restarted as a result of driver exiting with non-zero code before job is reported failed. A job may be reported as thrashing if driver exits with non-zero code 4 times within 10 minute window. Maximum value is 10.
	MaxFailuresPerHour *float64 `json:"maxFailuresPerHour,omitempty" tf:"max_failures_per_hour,omitempty"`

	// Maximum number of times in total a driver may be restarted as a result of driver exiting with non-zero code before job is reported failed. Maximum value is 240
	MaxFailuresTotal *float64 `json:"maxFailuresTotal,omitempty" tf:"max_failures_total,omitempty"`
}

type JobsSchedulingParameters struct {

	// Maximum number of times per hour a driver may be restarted as a result of driver exiting with non-zero code before job is reported failed. A job may be reported as thrashing if driver exits with non-zero code 4 times within 10 minute window. Maximum value is 10.
	// +kubebuilder:validation:Optional
	MaxFailuresPerHour *float64 `json:"maxFailuresPerHour,omitempty" tf:"max_failures_per_hour,omitempty"`

	// Maximum number of times in total a driver may be restarted as a result of driver exiting with non-zero code before job is reported failed. Maximum value is 240
	// +kubebuilder:validation:Optional
	MaxFailuresTotal *float64 `json:"maxFailuresTotal,omitempty" tf:"max_failures_total,omitempty"`
}

type ManagedClusterConfigInitParameters struct {

	// Autoscaling config for the policy associated with the cluster. Cluster does not autoscale if this field is unset.
	AutoscalingConfig []ConfigAutoscalingConfigInitParameters `json:"autoscalingConfig,omitempty" tf:"autoscaling_config,omitempty"`

	// Encryption settings for the cluster.
	EncryptionConfig []ConfigEncryptionConfigInitParameters `json:"encryptionConfig,omitempty" tf:"encryption_config,omitempty"`

	// Port/endpoint configuration for this cluster
	EndpointConfig []ConfigEndpointConfigInitParameters `json:"endpointConfig,omitempty" tf:"endpoint_config,omitempty"`

	// The shared Compute Engine config settings for all instances in a cluster.
	GceClusterConfig []ConfigGceClusterConfigInitParameters `json:"gceClusterConfig,omitempty" tf:"gce_cluster_config,omitempty"`

	// Commands to execute on each node after config is completed. By default, executables are run on master and all worker nodes. You can test a node's role metadata to run an executable on a master or worker node, as shown below using curl (you can also use wget): ROLE=$(curl -H Metadata-Flavor:Google http://metadata/computeMetadata/v1/instance/attributes/dataproc-role) if ; then ... master specific actions ... else ... worker specific actions ... fi
	InitializationActions []InitializationActionsInitParameters `json:"initializationActions,omitempty" tf:"initialization_actions,omitempty"`

	// Lifecycle setting for the cluster.
	LifecycleConfig []ConfigLifecycleConfigInitParameters `json:"lifecycleConfig,omitempty" tf:"lifecycle_config,omitempty"`

	// The Compute Engine config settings for additional worker instances in a cluster.
	MasterConfig []ConfigMasterConfigInitParameters `json:"masterConfig,omitempty" tf:"master_config,omitempty"`

	// The Compute Engine config settings for additional worker instances in a cluster.
	SecondaryWorkerConfig []ConfigSecondaryWorkerConfigInitParameters `json:"secondaryWorkerConfig,omitempty" tf:"secondary_worker_config,omitempty"`

	// Security settings for the cluster.
	SecurityConfig []ConfigSecurityConfigInitParameters `json:"securityConfig,omitempty" tf:"security_config,omitempty"`

	// The config settings for software inside the cluster.
	SoftwareConfig []ConfigSoftwareConfigInitParameters `json:"softwareConfig,omitempty" tf:"software_config,omitempty"`

	// A Cloud Storage bucket used to stage job dependencies, config files, and job driver console output. If you do not specify a staging bucket, Cloud Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's staging bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket (see (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/staging-bucket)).
	StagingBucket *string `json:"stagingBucket,omitempty" tf:"staging_bucket,omitempty"`

	// A Cloud Storage bucket used to store ephemeral cluster and jobs data, such as Spark and MapReduce history files. If you do not specify a temp bucket, Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's temp bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket. The default bucket has a TTL of 90 days, but you can use any TTL (or none) if you specify a bucket.
	TempBucket *string `json:"tempBucket,omitempty" tf:"temp_bucket,omitempty"`

	// The Compute Engine config settings for additional worker instances in a cluster.
	WorkerConfig []ConfigWorkerConfigInitParameters `json:"workerConfig,omitempty" tf:"worker_config,omitempty"`
}

type ManagedClusterConfigObservation struct {

	// Autoscaling config for the policy associated with the cluster. Cluster does not autoscale if this field is unset.
	AutoscalingConfig []ConfigAutoscalingConfigObservation `json:"autoscalingConfig,omitempty" tf:"autoscaling_config,omitempty"`

	// Encryption settings for the cluster.
	EncryptionConfig []ConfigEncryptionConfigObservation `json:"encryptionConfig,omitempty" tf:"encryption_config,omitempty"`

	// Port/endpoint configuration for this cluster
	EndpointConfig []ConfigEndpointConfigObservation `json:"endpointConfig,omitempty" tf:"endpoint_config,omitempty"`

	// The shared Compute Engine config settings for all instances in a cluster.
	GceClusterConfig []ConfigGceClusterConfigObservation `json:"gceClusterConfig,omitempty" tf:"gce_cluster_config,omitempty"`

	// Commands to execute on each node after config is completed. By default, executables are run on master and all worker nodes. You can test a node's role metadata to run an executable on a master or worker node, as shown below using curl (you can also use wget): ROLE=$(curl -H Metadata-Flavor:Google http://metadata/computeMetadata/v1/instance/attributes/dataproc-role) if ; then ... master specific actions ... else ... worker specific actions ... fi
	InitializationActions []InitializationActionsObservation `json:"initializationActions,omitempty" tf:"initialization_actions,omitempty"`

	// Lifecycle setting for the cluster.
	LifecycleConfig []ConfigLifecycleConfigObservation `json:"lifecycleConfig,omitempty" tf:"lifecycle_config,omitempty"`

	// The Compute Engine config settings for additional worker instances in a cluster.
	MasterConfig []ConfigMasterConfigObservation `json:"masterConfig,omitempty" tf:"master_config,omitempty"`

	// The Compute Engine config settings for additional worker instances in a cluster.
	SecondaryWorkerConfig []ConfigSecondaryWorkerConfigObservation `json:"secondaryWorkerConfig,omitempty" tf:"secondary_worker_config,omitempty"`

	// Security settings for the cluster.
	SecurityConfig []ConfigSecurityConfigObservation `json:"securityConfig,omitempty" tf:"security_config,omitempty"`

	// The config settings for software inside the cluster.
	SoftwareConfig []ConfigSoftwareConfigObservation `json:"softwareConfig,omitempty" tf:"software_config,omitempty"`

	// A Cloud Storage bucket used to stage job dependencies, config files, and job driver console output. If you do not specify a staging bucket, Cloud Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's staging bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket (see (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/staging-bucket)).
	StagingBucket *string `json:"stagingBucket,omitempty" tf:"staging_bucket,omitempty"`

	// A Cloud Storage bucket used to store ephemeral cluster and jobs data, such as Spark and MapReduce history files. If you do not specify a temp bucket, Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's temp bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket. The default bucket has a TTL of 90 days, but you can use any TTL (or none) if you specify a bucket.
	TempBucket *string `json:"tempBucket,omitempty" tf:"temp_bucket,omitempty"`

	// The Compute Engine config settings for additional worker instances in a cluster.
	WorkerConfig []ConfigWorkerConfigObservation `json:"workerConfig,omitempty" tf:"worker_config,omitempty"`
}

type ManagedClusterConfigParameters struct {

	// Autoscaling config for the policy associated with the cluster. Cluster does not autoscale if this field is unset.
	// +kubebuilder:validation:Optional
	AutoscalingConfig []ConfigAutoscalingConfigParameters `json:"autoscalingConfig,omitempty" tf:"autoscaling_config,omitempty"`

	// Encryption settings for the cluster.
	// +kubebuilder:validation:Optional
	EncryptionConfig []ConfigEncryptionConfigParameters `json:"encryptionConfig,omitempty" tf:"encryption_config,omitempty"`

	// Port/endpoint configuration for this cluster
	// +kubebuilder:validation:Optional
	EndpointConfig []ConfigEndpointConfigParameters `json:"endpointConfig,omitempty" tf:"endpoint_config,omitempty"`

	// The shared Compute Engine config settings for all instances in a cluster.
	// +kubebuilder:validation:Optional
	GceClusterConfig []ConfigGceClusterConfigParameters `json:"gceClusterConfig,omitempty" tf:"gce_cluster_config,omitempty"`

	// Commands to execute on each node after config is completed. By default, executables are run on master and all worker nodes. You can test a node's role metadata to run an executable on a master or worker node, as shown below using curl (you can also use wget): ROLE=$(curl -H Metadata-Flavor:Google http://metadata/computeMetadata/v1/instance/attributes/dataproc-role) if ; then ... master specific actions ... else ... worker specific actions ... fi
	// +kubebuilder:validation:Optional
	InitializationActions []InitializationActionsParameters `json:"initializationActions,omitempty" tf:"initialization_actions,omitempty"`

	// Lifecycle setting for the cluster.
	// +kubebuilder:validation:Optional
	LifecycleConfig []ConfigLifecycleConfigParameters `json:"lifecycleConfig,omitempty" tf:"lifecycle_config,omitempty"`

	// The Compute Engine config settings for additional worker instances in a cluster.
	// +kubebuilder:validation:Optional
	MasterConfig []ConfigMasterConfigParameters `json:"masterConfig,omitempty" tf:"master_config,omitempty"`

	// The Compute Engine config settings for additional worker instances in a cluster.
	// +kubebuilder:validation:Optional
	SecondaryWorkerConfig []ConfigSecondaryWorkerConfigParameters `json:"secondaryWorkerConfig,omitempty" tf:"secondary_worker_config,omitempty"`

	// Security settings for the cluster.
	// +kubebuilder:validation:Optional
	SecurityConfig []ConfigSecurityConfigParameters `json:"securityConfig,omitempty" tf:"security_config,omitempty"`

	// The config settings for software inside the cluster.
	// +kubebuilder:validation:Optional
	SoftwareConfig []ConfigSoftwareConfigParameters `json:"softwareConfig,omitempty" tf:"software_config,omitempty"`

	// A Cloud Storage bucket used to stage job dependencies, config files, and job driver console output. If you do not specify a staging bucket, Cloud Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's staging bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket (see (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/staging-bucket)).
	// +kubebuilder:validation:Optional
	StagingBucket *string `json:"stagingBucket,omitempty" tf:"staging_bucket,omitempty"`

	// A Cloud Storage bucket used to store ephemeral cluster and jobs data, such as Spark and MapReduce history files. If you do not specify a temp bucket, Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's temp bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket. The default bucket has a TTL of 90 days, but you can use any TTL (or none) if you specify a bucket.
	// +kubebuilder:validation:Optional
	TempBucket *string `json:"tempBucket,omitempty" tf:"temp_bucket,omitempty"`

	// The Compute Engine config settings for additional worker instances in a cluster.
	// +kubebuilder:validation:Optional
	WorkerConfig []ConfigWorkerConfigParameters `json:"workerConfig,omitempty" tf:"worker_config,omitempty"`
}

type ManagedClusterInitParameters struct {

	// Required. The cluster name prefix. A unique cluster name will be formed by appending a random suffix. The name must contain only lower-case letters (a-z), numbers (0-9), and hyphens (-). Must begin with a letter. Cannot begin or end with hyphen. Must consist of between 2 and 35 characters.
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	// Required. The cluster configuration.
	Config []ManagedClusterConfigInitParameters `json:"config,omitempty" tf:"config,omitempty"`

	// The labels to associate with this cluster. Label keys must be between 1 and 63 characters long, and must conform to the following PCRE regular expression: {0,63} No more than 32 labels can be associated with a given cluster.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`
}

type ManagedClusterObservation struct {

	// Required. The cluster name prefix. A unique cluster name will be formed by appending a random suffix. The name must contain only lower-case letters (a-z), numbers (0-9), and hyphens (-). Must begin with a letter. Cannot begin or end with hyphen. Must consist of between 2 and 35 characters.
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	// Required. The cluster configuration.
	Config []ManagedClusterConfigObservation `json:"config,omitempty" tf:"config,omitempty"`

	// The labels to associate with this cluster. Label keys must be between 1 and 63 characters long, and must conform to the following PCRE regular expression: {0,63} No more than 32 labels can be associated with a given cluster.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`
}

type ManagedClusterParameters struct {

	// Required. The cluster name prefix. A unique cluster name will be formed by appending a random suffix. The name must contain only lower-case letters (a-z), numbers (0-9), and hyphens (-). Must begin with a letter. Cannot begin or end with hyphen. Must consist of between 2 and 35 characters.
	// +kubebuilder:validation:Optional
	ClusterName *string `json:"clusterName" tf:"cluster_name,omitempty"`

	// Required. The cluster configuration.
	// +kubebuilder:validation:Optional
	Config []ManagedClusterConfigParameters `json:"config" tf:"config,omitempty"`

	// The labels to associate with this cluster. Label keys must be between 1 and 63 characters long, and must conform to the following PCRE regular expression: {0,63} No more than 32 labels can be associated with a given cluster.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`
}

type ManagedGroupConfigInitParameters struct {
}

type ManagedGroupConfigObservation struct {

	// Output only. The resource name of the workflow template, as described in https://cloud.google.com/apis/design/resource_names. * For projects.regions.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/regions/{region}/workflowTemplates/{template_id} * For projects.locations.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/locations/{location}/workflowTemplates/{template_id}
	InstanceGroupManagerName *string `json:"instanceGroupManagerName,omitempty" tf:"instance_group_manager_name,omitempty"`

	// Output only. The resource name of the workflow template, as described in https://cloud.google.com/apis/design/resource_names. * For projects.regions.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/regions/{region}/workflowTemplates/{template_id} * For projects.locations.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/locations/{location}/workflowTemplates/{template_id}
	InstanceTemplateName *string `json:"instanceTemplateName,omitempty" tf:"instance_template_name,omitempty"`
}

type ManagedGroupConfigParameters struct {
}

type ParametersInitParameters struct {

	// Brief description of the parameter. Must not exceed 1024 characters.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Required. Paths to all fields that the parameter replaces. A field is allowed to appear in at most one parameter's list of field paths. A field path is similar in syntax to a .sparkJob.args
	Fields []*string `json:"fields,omitempty" tf:"fields,omitempty"`

	// Required. Parameter name. The parameter name is used as the key, and paired with the parameter value, which are passed to the template when the template is instantiated. The name must contain only capital letters (A-Z), numbers (0-9), and underscores (_), and must not start with a number. The maximum length is 40 characters.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Validation rules to be applied to this parameter's value.
	Validation []ValidationInitParameters `json:"validation,omitempty" tf:"validation,omitempty"`
}

type ParametersObservation struct {

	// Brief description of the parameter. Must not exceed 1024 characters.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Required. Paths to all fields that the parameter replaces. A field is allowed to appear in at most one parameter's list of field paths. A field path is similar in syntax to a .sparkJob.args
	Fields []*string `json:"fields,omitempty" tf:"fields,omitempty"`

	// Required. Parameter name. The parameter name is used as the key, and paired with the parameter value, which are passed to the template when the template is instantiated. The name must contain only capital letters (A-Z), numbers (0-9), and underscores (_), and must not start with a number. The maximum length is 40 characters.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Validation rules to be applied to this parameter's value.
	Validation []ValidationObservation `json:"validation,omitempty" tf:"validation,omitempty"`
}

type ParametersParameters struct {

	// Brief description of the parameter. Must not exceed 1024 characters.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Required. Paths to all fields that the parameter replaces. A field is allowed to appear in at most one parameter's list of field paths. A field path is similar in syntax to a .sparkJob.args
	// +kubebuilder:validation:Optional
	Fields []*string `json:"fields" tf:"fields,omitempty"`

	// Required. Parameter name. The parameter name is used as the key, and paired with the parameter value, which are passed to the template when the template is instantiated. The name must contain only capital letters (A-Z), numbers (0-9), and underscores (_), and must not start with a number. The maximum length is 40 characters.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Validation rules to be applied to this parameter's value.
	// +kubebuilder:validation:Optional
	Validation []ValidationParameters `json:"validation,omitempty" tf:"validation,omitempty"`
}

type PigJobInitParameters struct {

	// Whether to continue executing queries if a query fails. The default value is false. Setting to true can be useful when executing independent parallel queries.
	ContinueOnFailure *bool `json:"continueOnFailure,omitempty" tf:"continue_on_failure,omitempty"`

	// HCFS URIs of jar files to be added to the Spark CLASSPATH.
	JarFileUris []*string `json:"jarFileUris,omitempty" tf:"jar_file_uris,omitempty"`

	// The runtime log config for job execution.
	LoggingConfig []PigJobLoggingConfigInitParameters `json:"loggingConfig,omitempty" tf:"logging_config,omitempty"`

	// A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`

	// The HCFS URI of the script that contains SQL queries.
	QueryFileURI *string `json:"queryFileUri,omitempty" tf:"query_file_uri,omitempty"`

	// A list of queries.
	QueryList []PigJobQueryListInitParameters `json:"queryList,omitempty" tf:"query_list,omitempty"`

	// Mapping of query variable names to values (equivalent to the Spark SQL command: SET name="value";).
	// +mapType=granular
	ScriptVariables map[string]*string `json:"scriptVariables,omitempty" tf:"script_variables,omitempty"`
}

type PigJobLoggingConfigInitParameters struct {

	// The per-package log levels for the driver. This may include "root" package name to configure rootLogger. Examples: 'com.google = FATAL', 'root = INFO', 'org.apache = DEBUG'
	// +mapType=granular
	DriverLogLevels map[string]*string `json:"driverLogLevels,omitempty" tf:"driver_log_levels,omitempty"`
}

type PigJobLoggingConfigObservation struct {

	// The per-package log levels for the driver. This may include "root" package name to configure rootLogger. Examples: 'com.google = FATAL', 'root = INFO', 'org.apache = DEBUG'
	// +mapType=granular
	DriverLogLevels map[string]*string `json:"driverLogLevels,omitempty" tf:"driver_log_levels,omitempty"`
}

type PigJobLoggingConfigParameters struct {

	// The per-package log levels for the driver. This may include "root" package name to configure rootLogger. Examples: 'com.google = FATAL', 'root = INFO', 'org.apache = DEBUG'
	// +kubebuilder:validation:Optional
	// +mapType=granular
	DriverLogLevels map[string]*string `json:"driverLogLevels,omitempty" tf:"driver_log_levels,omitempty"`
}

type PigJobObservation struct {

	// Whether to continue executing queries if a query fails. The default value is false. Setting to true can be useful when executing independent parallel queries.
	ContinueOnFailure *bool `json:"continueOnFailure,omitempty" tf:"continue_on_failure,omitempty"`

	// HCFS URIs of jar files to be added to the Spark CLASSPATH.
	JarFileUris []*string `json:"jarFileUris,omitempty" tf:"jar_file_uris,omitempty"`

	// The runtime log config for job execution.
	LoggingConfig []PigJobLoggingConfigObservation `json:"loggingConfig,omitempty" tf:"logging_config,omitempty"`

	// A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`

	// The HCFS URI of the script that contains SQL queries.
	QueryFileURI *string `json:"queryFileUri,omitempty" tf:"query_file_uri,omitempty"`

	// A list of queries.
	QueryList []PigJobQueryListObservation `json:"queryList,omitempty" tf:"query_list,omitempty"`

	// Mapping of query variable names to values (equivalent to the Spark SQL command: SET name="value";).
	// +mapType=granular
	ScriptVariables map[string]*string `json:"scriptVariables,omitempty" tf:"script_variables,omitempty"`
}

type PigJobParameters struct {

	// Whether to continue executing queries if a query fails. The default value is false. Setting to true can be useful when executing independent parallel queries.
	// +kubebuilder:validation:Optional
	ContinueOnFailure *bool `json:"continueOnFailure,omitempty" tf:"continue_on_failure,omitempty"`

	// HCFS URIs of jar files to be added to the Spark CLASSPATH.
	// +kubebuilder:validation:Optional
	JarFileUris []*string `json:"jarFileUris,omitempty" tf:"jar_file_uris,omitempty"`

	// The runtime log config for job execution.
	// +kubebuilder:validation:Optional
	LoggingConfig []PigJobLoggingConfigParameters `json:"loggingConfig,omitempty" tf:"logging_config,omitempty"`

	// A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`

	// The HCFS URI of the script that contains SQL queries.
	// +kubebuilder:validation:Optional
	QueryFileURI *string `json:"queryFileUri,omitempty" tf:"query_file_uri,omitempty"`

	// A list of queries.
	// +kubebuilder:validation:Optional
	QueryList []PigJobQueryListParameters `json:"queryList,omitempty" tf:"query_list,omitempty"`

	// Mapping of query variable names to values (equivalent to the Spark SQL command: SET name="value";).
	// +kubebuilder:validation:Optional
	// +mapType=granular
	ScriptVariables map[string]*string `json:"scriptVariables,omitempty" tf:"script_variables,omitempty"`
}

type PigJobQueryListInitParameters struct {

	// Required. The queries to execute. You do not need to end a query expression with a semicolon. Multiple queries can be specified in one string by separating each with a semicolon. Here is an example of a Dataproc API snippet that uses a QueryList to specify a HiveJob: "hiveJob": { "queryList": { "queries": } }
	Queries []*string `json:"queries,omitempty" tf:"queries,omitempty"`
}

type PigJobQueryListObservation struct {

	// Required. The queries to execute. You do not need to end a query expression with a semicolon. Multiple queries can be specified in one string by separating each with a semicolon. Here is an example of a Dataproc API snippet that uses a QueryList to specify a HiveJob: "hiveJob": { "queryList": { "queries": } }
	Queries []*string `json:"queries,omitempty" tf:"queries,omitempty"`
}

type PigJobQueryListParameters struct {

	// Required. The queries to execute. You do not need to end a query expression with a semicolon. Multiple queries can be specified in one string by separating each with a semicolon. Here is an example of a Dataproc API snippet that uses a QueryList to specify a HiveJob: "hiveJob": { "queryList": { "queries": } }
	// +kubebuilder:validation:Optional
	Queries []*string `json:"queries" tf:"queries,omitempty"`
}

type PrestoJobInitParameters struct {

	// Presto client tags to attach to this query
	ClientTags []*string `json:"clientTags,omitempty" tf:"client_tags,omitempty"`

	// Whether to continue executing queries if a query fails. The default value is false. Setting to true can be useful when executing independent parallel queries.
	ContinueOnFailure *bool `json:"continueOnFailure,omitempty" tf:"continue_on_failure,omitempty"`

	// The runtime log config for job execution.
	LoggingConfig []PrestoJobLoggingConfigInitParameters `json:"loggingConfig,omitempty" tf:"logging_config,omitempty"`

	// The format in which query output will be displayed. See the Presto documentation for supported output formats
	OutputFormat *string `json:"outputFormat,omitempty" tf:"output_format,omitempty"`

	// A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`

	// The HCFS URI of the script that contains SQL queries.
	QueryFileURI *string `json:"queryFileUri,omitempty" tf:"query_file_uri,omitempty"`

	// A list of queries.
	QueryList []PrestoJobQueryListInitParameters `json:"queryList,omitempty" tf:"query_list,omitempty"`
}

type PrestoJobLoggingConfigInitParameters struct {

	// The per-package log levels for the driver. This may include "root" package name to configure rootLogger. Examples: 'com.google = FATAL', 'root = INFO', 'org.apache = DEBUG'
	// +mapType=granular
	DriverLogLevels map[string]*string `json:"driverLogLevels,omitempty" tf:"driver_log_levels,omitempty"`
}

type PrestoJobLoggingConfigObservation struct {

	// The per-package log levels for the driver. This may include "root" package name to configure rootLogger. Examples: 'com.google = FATAL', 'root = INFO', 'org.apache = DEBUG'
	// +mapType=granular
	DriverLogLevels map[string]*string `json:"driverLogLevels,omitempty" tf:"driver_log_levels,omitempty"`
}

type PrestoJobLoggingConfigParameters struct {

	// The per-package log levels for the driver. This may include "root" package name to configure rootLogger. Examples: 'com.google = FATAL', 'root = INFO', 'org.apache = DEBUG'
	// +kubebuilder:validation:Optional
	// +mapType=granular
	DriverLogLevels map[string]*string `json:"driverLogLevels,omitempty" tf:"driver_log_levels,omitempty"`
}

type PrestoJobObservation struct {

	// Presto client tags to attach to this query
	ClientTags []*string `json:"clientTags,omitempty" tf:"client_tags,omitempty"`

	// Whether to continue executing queries if a query fails. The default value is false. Setting to true can be useful when executing independent parallel queries.
	ContinueOnFailure *bool `json:"continueOnFailure,omitempty" tf:"continue_on_failure,omitempty"`

	// The runtime log config for job execution.
	LoggingConfig []PrestoJobLoggingConfigObservation `json:"loggingConfig,omitempty" tf:"logging_config,omitempty"`

	// The format in which query output will be displayed. See the Presto documentation for supported output formats
	OutputFormat *string `json:"outputFormat,omitempty" tf:"output_format,omitempty"`

	// A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`

	// The HCFS URI of the script that contains SQL queries.
	QueryFileURI *string `json:"queryFileUri,omitempty" tf:"query_file_uri,omitempty"`

	// A list of queries.
	QueryList []PrestoJobQueryListObservation `json:"queryList,omitempty" tf:"query_list,omitempty"`
}

type PrestoJobParameters struct {

	// Presto client tags to attach to this query
	// +kubebuilder:validation:Optional
	ClientTags []*string `json:"clientTags,omitempty" tf:"client_tags,omitempty"`

	// Whether to continue executing queries if a query fails. The default value is false. Setting to true can be useful when executing independent parallel queries.
	// +kubebuilder:validation:Optional
	ContinueOnFailure *bool `json:"continueOnFailure,omitempty" tf:"continue_on_failure,omitempty"`

	// The runtime log config for job execution.
	// +kubebuilder:validation:Optional
	LoggingConfig []PrestoJobLoggingConfigParameters `json:"loggingConfig,omitempty" tf:"logging_config,omitempty"`

	// The format in which query output will be displayed. See the Presto documentation for supported output formats
	// +kubebuilder:validation:Optional
	OutputFormat *string `json:"outputFormat,omitempty" tf:"output_format,omitempty"`

	// A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`

	// The HCFS URI of the script that contains SQL queries.
	// +kubebuilder:validation:Optional
	QueryFileURI *string `json:"queryFileUri,omitempty" tf:"query_file_uri,omitempty"`

	// A list of queries.
	// +kubebuilder:validation:Optional
	QueryList []PrestoJobQueryListParameters `json:"queryList,omitempty" tf:"query_list,omitempty"`
}

type PrestoJobQueryListInitParameters struct {

	// Required. The queries to execute. You do not need to end a query expression with a semicolon. Multiple queries can be specified in one string by separating each with a semicolon. Here is an example of a Dataproc API snippet that uses a QueryList to specify a HiveJob: "hiveJob": { "queryList": { "queries": } }
	Queries []*string `json:"queries,omitempty" tf:"queries,omitempty"`
}

type PrestoJobQueryListObservation struct {

	// Required. The queries to execute. You do not need to end a query expression with a semicolon. Multiple queries can be specified in one string by separating each with a semicolon. Here is an example of a Dataproc API snippet that uses a QueryList to specify a HiveJob: "hiveJob": { "queryList": { "queries": } }
	Queries []*string `json:"queries,omitempty" tf:"queries,omitempty"`
}

type PrestoJobQueryListParameters struct {

	// Required. The queries to execute. You do not need to end a query expression with a semicolon. Multiple queries can be specified in one string by separating each with a semicolon. Here is an example of a Dataproc API snippet that uses a QueryList to specify a HiveJob: "hiveJob": { "queryList": { "queries": } }
	// +kubebuilder:validation:Optional
	Queries []*string `json:"queries" tf:"queries,omitempty"`
}

type PysparkJobInitParameters struct {

	// HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
	ArchiveUris []*string `json:"archiveUris,omitempty" tf:"archive_uris,omitempty"`

	// The arguments to pass to the driver. Do not include arguments, such as --conf, that can be set as job properties, since a collision may occur that causes an incorrect job submission.
	Args []*string `json:"args,omitempty" tf:"args,omitempty"`

	// HCFS URIs of files to be placed in the working directory of each executor. Useful for naively parallel tasks.
	FileUris []*string `json:"fileUris,omitempty" tf:"file_uris,omitempty"`

	// HCFS URIs of jar files to be added to the Spark CLASSPATH.
	JarFileUris []*string `json:"jarFileUris,omitempty" tf:"jar_file_uris,omitempty"`

	// The runtime log config for job execution.
	LoggingConfig []PysparkJobLoggingConfigInitParameters `json:"loggingConfig,omitempty" tf:"logging_config,omitempty"`

	// Required. The HCFS URI of the main Python file to use as the driver. Must be a .py file.
	MainPythonFileURI *string `json:"mainPythonFileUri,omitempty" tf:"main_python_file_uri,omitempty"`

	// A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`

	// HCFS file URIs of Python files to pass to the PySpark framework. Supported file types: .py, .egg, and .zip.
	PythonFileUris []*string `json:"pythonFileUris,omitempty" tf:"python_file_uris,omitempty"`
}

type PysparkJobLoggingConfigInitParameters struct {

	// The per-package log levels for the driver. This may include "root" package name to configure rootLogger. Examples: 'com.google = FATAL', 'root = INFO', 'org.apache = DEBUG'
	// +mapType=granular
	DriverLogLevels map[string]*string `json:"driverLogLevels,omitempty" tf:"driver_log_levels,omitempty"`
}

type PysparkJobLoggingConfigObservation struct {

	// The per-package log levels for the driver. This may include "root" package name to configure rootLogger. Examples: 'com.google = FATAL', 'root = INFO', 'org.apache = DEBUG'
	// +mapType=granular
	DriverLogLevels map[string]*string `json:"driverLogLevels,omitempty" tf:"driver_log_levels,omitempty"`
}

type PysparkJobLoggingConfigParameters struct {

	// The per-package log levels for the driver. This may include "root" package name to configure rootLogger. Examples: 'com.google = FATAL', 'root = INFO', 'org.apache = DEBUG'
	// +kubebuilder:validation:Optional
	// +mapType=granular
	DriverLogLevels map[string]*string `json:"driverLogLevels,omitempty" tf:"driver_log_levels,omitempty"`
}

type PysparkJobObservation struct {

	// HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
	ArchiveUris []*string `json:"archiveUris,omitempty" tf:"archive_uris,omitempty"`

	// The arguments to pass to the driver. Do not include arguments, such as --conf, that can be set as job properties, since a collision may occur that causes an incorrect job submission.
	Args []*string `json:"args,omitempty" tf:"args,omitempty"`

	// HCFS URIs of files to be placed in the working directory of each executor. Useful for naively parallel tasks.
	FileUris []*string `json:"fileUris,omitempty" tf:"file_uris,omitempty"`

	// HCFS URIs of jar files to be added to the Spark CLASSPATH.
	JarFileUris []*string `json:"jarFileUris,omitempty" tf:"jar_file_uris,omitempty"`

	// The runtime log config for job execution.
	LoggingConfig []PysparkJobLoggingConfigObservation `json:"loggingConfig,omitempty" tf:"logging_config,omitempty"`

	// Required. The HCFS URI of the main Python file to use as the driver. Must be a .py file.
	MainPythonFileURI *string `json:"mainPythonFileUri,omitempty" tf:"main_python_file_uri,omitempty"`

	// A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`

	// HCFS file URIs of Python files to pass to the PySpark framework. Supported file types: .py, .egg, and .zip.
	PythonFileUris []*string `json:"pythonFileUris,omitempty" tf:"python_file_uris,omitempty"`
}

type PysparkJobParameters struct {

	// HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
	// +kubebuilder:validation:Optional
	ArchiveUris []*string `json:"archiveUris,omitempty" tf:"archive_uris,omitempty"`

	// The arguments to pass to the driver. Do not include arguments, such as --conf, that can be set as job properties, since a collision may occur that causes an incorrect job submission.
	// +kubebuilder:validation:Optional
	Args []*string `json:"args,omitempty" tf:"args,omitempty"`

	// HCFS URIs of files to be placed in the working directory of each executor. Useful for naively parallel tasks.
	// +kubebuilder:validation:Optional
	FileUris []*string `json:"fileUris,omitempty" tf:"file_uris,omitempty"`

	// HCFS URIs of jar files to be added to the Spark CLASSPATH.
	// +kubebuilder:validation:Optional
	JarFileUris []*string `json:"jarFileUris,omitempty" tf:"jar_file_uris,omitempty"`

	// The runtime log config for job execution.
	// +kubebuilder:validation:Optional
	LoggingConfig []PysparkJobLoggingConfigParameters `json:"loggingConfig,omitempty" tf:"logging_config,omitempty"`

	// Required. The HCFS URI of the main Python file to use as the driver. Must be a .py file.
	// +kubebuilder:validation:Optional
	MainPythonFileURI *string `json:"mainPythonFileUri" tf:"main_python_file_uri,omitempty"`

	// A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`

	// HCFS file URIs of Python files to pass to the PySpark framework. Supported file types: .py, .egg, and .zip.
	// +kubebuilder:validation:Optional
	PythonFileUris []*string `json:"pythonFileUris,omitempty" tf:"python_file_uris,omitempty"`
}

type QueryListInitParameters struct {

	// Required. The queries to execute. You do not need to end a query expression with a semicolon. Multiple queries can be specified in one string by separating each with a semicolon. Here is an example of a Dataproc API snippet that uses a QueryList to specify a HiveJob: "hiveJob": { "queryList": { "queries": } }
	Queries []*string `json:"queries,omitempty" tf:"queries,omitempty"`
}

type QueryListObservation struct {

	// Required. The queries to execute. You do not need to end a query expression with a semicolon. Multiple queries can be specified in one string by separating each with a semicolon. Here is an example of a Dataproc API snippet that uses a QueryList to specify a HiveJob: "hiveJob": { "queryList": { "queries": } }
	Queries []*string `json:"queries,omitempty" tf:"queries,omitempty"`
}

type QueryListParameters struct {

	// Required. The queries to execute. You do not need to end a query expression with a semicolon. Multiple queries can be specified in one string by separating each with a semicolon. Here is an example of a Dataproc API snippet that uses a QueryList to specify a HiveJob: "hiveJob": { "queryList": { "queries": } }
	// +kubebuilder:validation:Optional
	Queries []*string `json:"queries" tf:"queries,omitempty"`
}

type RegexInitParameters struct {

	// Required. RE2 regular expressions used to validate the parameter's value. The value must match the regex in its entirety (substring matches are not sufficient).
	Regexes []*string `json:"regexes,omitempty" tf:"regexes,omitempty"`
}

type RegexObservation struct {

	// Required. RE2 regular expressions used to validate the parameter's value. The value must match the regex in its entirety (substring matches are not sufficient).
	Regexes []*string `json:"regexes,omitempty" tf:"regexes,omitempty"`
}

type RegexParameters struct {

	// Required. RE2 regular expressions used to validate the parameter's value. The value must match the regex in its entirety (substring matches are not sufficient).
	// +kubebuilder:validation:Optional
	Regexes []*string `json:"regexes" tf:"regexes,omitempty"`
}

type SecondaryWorkerConfigAcceleratorsInitParameters struct {

	// The number of the accelerator cards of this type exposed to this instance.
	AcceleratorCount *float64 `json:"acceleratorCount,omitempty" tf:"accelerator_count,omitempty"`

	// Full URL, partial URI, or short name of the accelerator type resource to expose to this instance. See (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the accelerator type resource, for example, nvidia-tesla-k80.
	AcceleratorType *string `json:"acceleratorType,omitempty" tf:"accelerator_type,omitempty"`
}

type SecondaryWorkerConfigAcceleratorsObservation struct {

	// The number of the accelerator cards of this type exposed to this instance.
	AcceleratorCount *float64 `json:"acceleratorCount,omitempty" tf:"accelerator_count,omitempty"`

	// Full URL, partial URI, or short name of the accelerator type resource to expose to this instance. See (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the accelerator type resource, for example, nvidia-tesla-k80.
	AcceleratorType *string `json:"acceleratorType,omitempty" tf:"accelerator_type,omitempty"`
}

type SecondaryWorkerConfigAcceleratorsParameters struct {

	// The number of the accelerator cards of this type exposed to this instance.
	// +kubebuilder:validation:Optional
	AcceleratorCount *float64 `json:"acceleratorCount,omitempty" tf:"accelerator_count,omitempty"`

	// Full URL, partial URI, or short name of the accelerator type resource to expose to this instance. See (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the accelerator type resource, for example, nvidia-tesla-k80.
	// +kubebuilder:validation:Optional
	AcceleratorType *string `json:"acceleratorType,omitempty" tf:"accelerator_type,omitempty"`
}

type SecondaryWorkerConfigDiskConfigInitParameters struct {

	// Size in GB of the boot disk (default is 500GB).
	BootDiskSizeGb *float64 `json:"bootDiskSizeGb,omitempty" tf:"boot_disk_size_gb,omitempty"`

	// Type of the boot disk (default is "pd-standard"). Valid values: "pd-ssd" (Persistent Disk Solid State Drive) or "pd-standard" (Persistent Disk Hard Disk Drive).
	BootDiskType *string `json:"bootDiskType,omitempty" tf:"boot_disk_type,omitempty"`

	// Number of attached SSDs, from 0 to 4 (default is 0). If SSDs are not attached, the boot disk is used to store runtime logs and (https://hadoop.apache.org/docs/r1.2.1/hdfs_user_guide.html) data. If one or more SSDs are attached, this runtime bulk data is spread across them, and the boot disk contains only basic config and installed binaries.
	NumLocalSsds *float64 `json:"numLocalSsds,omitempty" tf:"num_local_ssds,omitempty"`
}

type SecondaryWorkerConfigDiskConfigObservation struct {

	// Size in GB of the boot disk (default is 500GB).
	BootDiskSizeGb *float64 `json:"bootDiskSizeGb,omitempty" tf:"boot_disk_size_gb,omitempty"`

	// Type of the boot disk (default is "pd-standard"). Valid values: "pd-ssd" (Persistent Disk Solid State Drive) or "pd-standard" (Persistent Disk Hard Disk Drive).
	BootDiskType *string `json:"bootDiskType,omitempty" tf:"boot_disk_type,omitempty"`

	// Number of attached SSDs, from 0 to 4 (default is 0). If SSDs are not attached, the boot disk is used to store runtime logs and (https://hadoop.apache.org/docs/r1.2.1/hdfs_user_guide.html) data. If one or more SSDs are attached, this runtime bulk data is spread across them, and the boot disk contains only basic config and installed binaries.
	NumLocalSsds *float64 `json:"numLocalSsds,omitempty" tf:"num_local_ssds,omitempty"`
}

type SecondaryWorkerConfigDiskConfigParameters struct {

	// Size in GB of the boot disk (default is 500GB).
	// +kubebuilder:validation:Optional
	BootDiskSizeGb *float64 `json:"bootDiskSizeGb,omitempty" tf:"boot_disk_size_gb,omitempty"`

	// Type of the boot disk (default is "pd-standard"). Valid values: "pd-ssd" (Persistent Disk Solid State Drive) or "pd-standard" (Persistent Disk Hard Disk Drive).
	// +kubebuilder:validation:Optional
	BootDiskType *string `json:"bootDiskType,omitempty" tf:"boot_disk_type,omitempty"`

	// Number of attached SSDs, from 0 to 4 (default is 0). If SSDs are not attached, the boot disk is used to store runtime logs and (https://hadoop.apache.org/docs/r1.2.1/hdfs_user_guide.html) data. If one or more SSDs are attached, this runtime bulk data is spread across them, and the boot disk contains only basic config and installed binaries.
	// +kubebuilder:validation:Optional
	NumLocalSsds *float64 `json:"numLocalSsds,omitempty" tf:"num_local_ssds,omitempty"`
}

type SecondaryWorkerConfigManagedGroupConfigInitParameters struct {
}

type SecondaryWorkerConfigManagedGroupConfigObservation struct {

	// Output only. The resource name of the workflow template, as described in https://cloud.google.com/apis/design/resource_names. * For projects.regions.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/regions/{region}/workflowTemplates/{template_id} * For projects.locations.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/locations/{location}/workflowTemplates/{template_id}
	InstanceGroupManagerName *string `json:"instanceGroupManagerName,omitempty" tf:"instance_group_manager_name,omitempty"`

	// Output only. The resource name of the workflow template, as described in https://cloud.google.com/apis/design/resource_names. * For projects.regions.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/regions/{region}/workflowTemplates/{template_id} * For projects.locations.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/locations/{location}/workflowTemplates/{template_id}
	InstanceTemplateName *string `json:"instanceTemplateName,omitempty" tf:"instance_template_name,omitempty"`
}

type SecondaryWorkerConfigManagedGroupConfigParameters struct {
}

type SecurityConfigKerberosConfigInitParameters struct {

	// The admin server (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
	CrossRealmTrustAdminServer *string `json:"crossRealmTrustAdminServer,omitempty" tf:"cross_realm_trust_admin_server,omitempty"`

	// The KDC (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
	CrossRealmTrustKdc *string `json:"crossRealmTrustKdc,omitempty" tf:"cross_realm_trust_kdc,omitempty"`

	// The remote realm the Dataproc on-cluster KDC will trust, should the user enable cross realm trust.
	CrossRealmTrustRealm *string `json:"crossRealmTrustRealm,omitempty" tf:"cross_realm_trust_realm,omitempty"`

	// The Cloud Storage URI of a KMS encrypted file containing the shared password between the on-cluster Kerberos realm and the remote trusted realm, in a cross realm trust relationship.
	CrossRealmTrustSharedPassword *string `json:"crossRealmTrustSharedPassword,omitempty" tf:"cross_realm_trust_shared_password,omitempty"`

	// Flag to indicate whether to Kerberize the cluster (default: false). Set this field to true to enable Kerberos on a cluster.
	EnableKerberos *bool `json:"enableKerberos,omitempty" tf:"enable_kerberos,omitempty"`

	// The uri of the KMS key used to encrypt various sensitive files.
	KMSKey *string `json:"kmsKey,omitempty" tf:"kms_key,omitempty"`

	// The Cloud Storage URI of a KMS encrypted file containing the master key of the KDC database.
	KdcDBKey *string `json:"kdcDbKey,omitempty" tf:"kdc_db_key,omitempty"`

	// The Cloud Storage URI of a KMS encrypted file containing the password to the user provided key. For the self-signed certificate, this password is generated by Dataproc.
	KeyPassword *string `json:"keyPassword,omitempty" tf:"key_password,omitempty"`

	// The Cloud Storage URI of the keystore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
	Keystore *string `json:"keystore,omitempty" tf:"keystore,omitempty"`

	// The Cloud Storage URI of a KMS encrypted file containing the password to the user provided keystore. For the self-signed certificate, this password is generated by Dataproc.
	KeystorePassword *string `json:"keystorePassword,omitempty" tf:"keystore_password,omitempty"`

	// The name of the on-cluster Kerberos realm. If not specified, the uppercased domain of hostnames will be the realm.
	Realm *string `json:"realm,omitempty" tf:"realm,omitempty"`

	// The Cloud Storage URI of a KMS encrypted file containing the root principal password.
	RootPrincipalPassword *string `json:"rootPrincipalPassword,omitempty" tf:"root_principal_password,omitempty"`

	// The lifetime of the ticket granting ticket, in hours. If not specified, or user specifies 0, then default value 10 will be used.
	TgtLifetimeHours *float64 `json:"tgtLifetimeHours,omitempty" tf:"tgt_lifetime_hours,omitempty"`

	// The Cloud Storage URI of the truststore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
	Truststore *string `json:"truststore,omitempty" tf:"truststore,omitempty"`

	// The Cloud Storage URI of a KMS encrypted file containing the password to the user provided truststore. For the self-signed certificate, this password is generated by Dataproc.
	TruststorePassword *string `json:"truststorePassword,omitempty" tf:"truststore_password,omitempty"`
}

type SecurityConfigKerberosConfigObservation struct {

	// The admin server (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
	CrossRealmTrustAdminServer *string `json:"crossRealmTrustAdminServer,omitempty" tf:"cross_realm_trust_admin_server,omitempty"`

	// The KDC (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
	CrossRealmTrustKdc *string `json:"crossRealmTrustKdc,omitempty" tf:"cross_realm_trust_kdc,omitempty"`

	// The remote realm the Dataproc on-cluster KDC will trust, should the user enable cross realm trust.
	CrossRealmTrustRealm *string `json:"crossRealmTrustRealm,omitempty" tf:"cross_realm_trust_realm,omitempty"`

	// The Cloud Storage URI of a KMS encrypted file containing the shared password between the on-cluster Kerberos realm and the remote trusted realm, in a cross realm trust relationship.
	CrossRealmTrustSharedPassword *string `json:"crossRealmTrustSharedPassword,omitempty" tf:"cross_realm_trust_shared_password,omitempty"`

	// Flag to indicate whether to Kerberize the cluster (default: false). Set this field to true to enable Kerberos on a cluster.
	EnableKerberos *bool `json:"enableKerberos,omitempty" tf:"enable_kerberos,omitempty"`

	// The uri of the KMS key used to encrypt various sensitive files.
	KMSKey *string `json:"kmsKey,omitempty" tf:"kms_key,omitempty"`

	// The Cloud Storage URI of a KMS encrypted file containing the master key of the KDC database.
	KdcDBKey *string `json:"kdcDbKey,omitempty" tf:"kdc_db_key,omitempty"`

	// The Cloud Storage URI of a KMS encrypted file containing the password to the user provided key. For the self-signed certificate, this password is generated by Dataproc.
	KeyPassword *string `json:"keyPassword,omitempty" tf:"key_password,omitempty"`

	// The Cloud Storage URI of the keystore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
	Keystore *string `json:"keystore,omitempty" tf:"keystore,omitempty"`

	// The Cloud Storage URI of a KMS encrypted file containing the password to the user provided keystore. For the self-signed certificate, this password is generated by Dataproc.
	KeystorePassword *string `json:"keystorePassword,omitempty" tf:"keystore_password,omitempty"`

	// The name of the on-cluster Kerberos realm. If not specified, the uppercased domain of hostnames will be the realm.
	Realm *string `json:"realm,omitempty" tf:"realm,omitempty"`

	// The Cloud Storage URI of a KMS encrypted file containing the root principal password.
	RootPrincipalPassword *string `json:"rootPrincipalPassword,omitempty" tf:"root_principal_password,omitempty"`

	// The lifetime of the ticket granting ticket, in hours. If not specified, or user specifies 0, then default value 10 will be used.
	TgtLifetimeHours *float64 `json:"tgtLifetimeHours,omitempty" tf:"tgt_lifetime_hours,omitempty"`

	// The Cloud Storage URI of the truststore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
	Truststore *string `json:"truststore,omitempty" tf:"truststore,omitempty"`

	// The Cloud Storage URI of a KMS encrypted file containing the password to the user provided truststore. For the self-signed certificate, this password is generated by Dataproc.
	TruststorePassword *string `json:"truststorePassword,omitempty" tf:"truststore_password,omitempty"`
}

type SecurityConfigKerberosConfigParameters struct {

	// The admin server (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
	// +kubebuilder:validation:Optional
	CrossRealmTrustAdminServer *string `json:"crossRealmTrustAdminServer,omitempty" tf:"cross_realm_trust_admin_server,omitempty"`

	// The KDC (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
	// +kubebuilder:validation:Optional
	CrossRealmTrustKdc *string `json:"crossRealmTrustKdc,omitempty" tf:"cross_realm_trust_kdc,omitempty"`

	// The remote realm the Dataproc on-cluster KDC will trust, should the user enable cross realm trust.
	// +kubebuilder:validation:Optional
	CrossRealmTrustRealm *string `json:"crossRealmTrustRealm,omitempty" tf:"cross_realm_trust_realm,omitempty"`

	// The Cloud Storage URI of a KMS encrypted file containing the shared password between the on-cluster Kerberos realm and the remote trusted realm, in a cross realm trust relationship.
	// +kubebuilder:validation:Optional
	CrossRealmTrustSharedPassword *string `json:"crossRealmTrustSharedPassword,omitempty" tf:"cross_realm_trust_shared_password,omitempty"`

	// Flag to indicate whether to Kerberize the cluster (default: false). Set this field to true to enable Kerberos on a cluster.
	// +kubebuilder:validation:Optional
	EnableKerberos *bool `json:"enableKerberos,omitempty" tf:"enable_kerberos,omitempty"`

	// The uri of the KMS key used to encrypt various sensitive files.
	// +kubebuilder:validation:Optional
	KMSKey *string `json:"kmsKey,omitempty" tf:"kms_key,omitempty"`

	// The Cloud Storage URI of a KMS encrypted file containing the master key of the KDC database.
	// +kubebuilder:validation:Optional
	KdcDBKey *string `json:"kdcDbKey,omitempty" tf:"kdc_db_key,omitempty"`

	// The Cloud Storage URI of a KMS encrypted file containing the password to the user provided key. For the self-signed certificate, this password is generated by Dataproc.
	// +kubebuilder:validation:Optional
	KeyPassword *string `json:"keyPassword,omitempty" tf:"key_password,omitempty"`

	// The Cloud Storage URI of the keystore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
	// +kubebuilder:validation:Optional
	Keystore *string `json:"keystore,omitempty" tf:"keystore,omitempty"`

	// The Cloud Storage URI of a KMS encrypted file containing the password to the user provided keystore. For the self-signed certificate, this password is generated by Dataproc.
	// +kubebuilder:validation:Optional
	KeystorePassword *string `json:"keystorePassword,omitempty" tf:"keystore_password,omitempty"`

	// The name of the on-cluster Kerberos realm. If not specified, the uppercased domain of hostnames will be the realm.
	// +kubebuilder:validation:Optional
	Realm *string `json:"realm,omitempty" tf:"realm,omitempty"`

	// The Cloud Storage URI of a KMS encrypted file containing the root principal password.
	// +kubebuilder:validation:Optional
	RootPrincipalPassword *string `json:"rootPrincipalPassword,omitempty" tf:"root_principal_password,omitempty"`

	// The lifetime of the ticket granting ticket, in hours. If not specified, or user specifies 0, then default value 10 will be used.
	// +kubebuilder:validation:Optional
	TgtLifetimeHours *float64 `json:"tgtLifetimeHours,omitempty" tf:"tgt_lifetime_hours,omitempty"`

	// The Cloud Storage URI of the truststore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
	// +kubebuilder:validation:Optional
	Truststore *string `json:"truststore,omitempty" tf:"truststore,omitempty"`

	// The Cloud Storage URI of a KMS encrypted file containing the password to the user provided truststore. For the self-signed certificate, this password is generated by Dataproc.
	// +kubebuilder:validation:Optional
	TruststorePassword *string `json:"truststorePassword,omitempty" tf:"truststore_password,omitempty"`
}

type SparkJobInitParameters struct {

	// HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
	ArchiveUris []*string `json:"archiveUris,omitempty" tf:"archive_uris,omitempty"`

	// The arguments to pass to the driver. Do not include arguments, such as --conf, that can be set as job properties, since a collision may occur that causes an incorrect job submission.
	Args []*string `json:"args,omitempty" tf:"args,omitempty"`

	// HCFS URIs of files to be placed in the working directory of each executor. Useful for naively parallel tasks.
	FileUris []*string `json:"fileUris,omitempty" tf:"file_uris,omitempty"`

	// HCFS URIs of jar files to be added to the Spark CLASSPATH.
	JarFileUris []*string `json:"jarFileUris,omitempty" tf:"jar_file_uris,omitempty"`

	// The runtime log config for job execution.
	LoggingConfig []SparkJobLoggingConfigInitParameters `json:"loggingConfig,omitempty" tf:"logging_config,omitempty"`

	// The name of the driver's main class. The jar file that contains the class must be in the default CLASSPATH or specified in jar_file_uris.
	MainClass *string `json:"mainClass,omitempty" tf:"main_class,omitempty"`

	// The HCFS URI of the jar file that contains the main class.
	MainJarFileURI *string `json:"mainJarFileUri,omitempty" tf:"main_jar_file_uri,omitempty"`

	// A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`
}

type SparkJobLoggingConfigInitParameters struct {

	// The per-package log levels for the driver. This may include "root" package name to configure rootLogger. Examples: 'com.google = FATAL', 'root = INFO', 'org.apache = DEBUG'
	// +mapType=granular
	DriverLogLevels map[string]*string `json:"driverLogLevels,omitempty" tf:"driver_log_levels,omitempty"`
}

type SparkJobLoggingConfigObservation struct {

	// The per-package log levels for the driver. This may include "root" package name to configure rootLogger. Examples: 'com.google = FATAL', 'root = INFO', 'org.apache = DEBUG'
	// +mapType=granular
	DriverLogLevels map[string]*string `json:"driverLogLevels,omitempty" tf:"driver_log_levels,omitempty"`
}

type SparkJobLoggingConfigParameters struct {

	// The per-package log levels for the driver. This may include "root" package name to configure rootLogger. Examples: 'com.google = FATAL', 'root = INFO', 'org.apache = DEBUG'
	// +kubebuilder:validation:Optional
	// +mapType=granular
	DriverLogLevels map[string]*string `json:"driverLogLevels,omitempty" tf:"driver_log_levels,omitempty"`
}

type SparkJobObservation struct {

	// HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
	ArchiveUris []*string `json:"archiveUris,omitempty" tf:"archive_uris,omitempty"`

	// The arguments to pass to the driver. Do not include arguments, such as --conf, that can be set as job properties, since a collision may occur that causes an incorrect job submission.
	Args []*string `json:"args,omitempty" tf:"args,omitempty"`

	// HCFS URIs of files to be placed in the working directory of each executor. Useful for naively parallel tasks.
	FileUris []*string `json:"fileUris,omitempty" tf:"file_uris,omitempty"`

	// HCFS URIs of jar files to be added to the Spark CLASSPATH.
	JarFileUris []*string `json:"jarFileUris,omitempty" tf:"jar_file_uris,omitempty"`

	// The runtime log config for job execution.
	LoggingConfig []SparkJobLoggingConfigObservation `json:"loggingConfig,omitempty" tf:"logging_config,omitempty"`

	// The name of the driver's main class. The jar file that contains the class must be in the default CLASSPATH or specified in jar_file_uris.
	MainClass *string `json:"mainClass,omitempty" tf:"main_class,omitempty"`

	// The HCFS URI of the jar file that contains the main class.
	MainJarFileURI *string `json:"mainJarFileUri,omitempty" tf:"main_jar_file_uri,omitempty"`

	// A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`
}

type SparkJobParameters struct {

	// HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
	// +kubebuilder:validation:Optional
	ArchiveUris []*string `json:"archiveUris,omitempty" tf:"archive_uris,omitempty"`

	// The arguments to pass to the driver. Do not include arguments, such as --conf, that can be set as job properties, since a collision may occur that causes an incorrect job submission.
	// +kubebuilder:validation:Optional
	Args []*string `json:"args,omitempty" tf:"args,omitempty"`

	// HCFS URIs of files to be placed in the working directory of each executor. Useful for naively parallel tasks.
	// +kubebuilder:validation:Optional
	FileUris []*string `json:"fileUris,omitempty" tf:"file_uris,omitempty"`

	// HCFS URIs of jar files to be added to the Spark CLASSPATH.
	// +kubebuilder:validation:Optional
	JarFileUris []*string `json:"jarFileUris,omitempty" tf:"jar_file_uris,omitempty"`

	// The runtime log config for job execution.
	// +kubebuilder:validation:Optional
	LoggingConfig []SparkJobLoggingConfigParameters `json:"loggingConfig,omitempty" tf:"logging_config,omitempty"`

	// The name of the driver's main class. The jar file that contains the class must be in the default CLASSPATH or specified in jar_file_uris.
	// +kubebuilder:validation:Optional
	MainClass *string `json:"mainClass,omitempty" tf:"main_class,omitempty"`

	// The HCFS URI of the jar file that contains the main class.
	// +kubebuilder:validation:Optional
	MainJarFileURI *string `json:"mainJarFileUri,omitempty" tf:"main_jar_file_uri,omitempty"`

	// A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`
}

type SparkRJobInitParameters struct {

	// HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
	ArchiveUris []*string `json:"archiveUris,omitempty" tf:"archive_uris,omitempty"`

	// The arguments to pass to the driver. Do not include arguments, such as --conf, that can be set as job properties, since a collision may occur that causes an incorrect job submission.
	Args []*string `json:"args,omitempty" tf:"args,omitempty"`

	// HCFS URIs of files to be placed in the working directory of each executor. Useful for naively parallel tasks.
	FileUris []*string `json:"fileUris,omitempty" tf:"file_uris,omitempty"`

	// The runtime log config for job execution.
	LoggingConfig []SparkRJobLoggingConfigInitParameters `json:"loggingConfig,omitempty" tf:"logging_config,omitempty"`

	// Required. The HCFS URI of the main R file to use as the driver. Must be a .R file.
	MainRFileURI *string `json:"mainRFileUri,omitempty" tf:"main_r_file_uri,omitempty"`

	// A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`
}

type SparkRJobLoggingConfigInitParameters struct {

	// The per-package log levels for the driver. This may include "root" package name to configure rootLogger. Examples: 'com.google = FATAL', 'root = INFO', 'org.apache = DEBUG'
	// +mapType=granular
	DriverLogLevels map[string]*string `json:"driverLogLevels,omitempty" tf:"driver_log_levels,omitempty"`
}

type SparkRJobLoggingConfigObservation struct {

	// The per-package log levels for the driver. This may include "root" package name to configure rootLogger. Examples: 'com.google = FATAL', 'root = INFO', 'org.apache = DEBUG'
	// +mapType=granular
	DriverLogLevels map[string]*string `json:"driverLogLevels,omitempty" tf:"driver_log_levels,omitempty"`
}

type SparkRJobLoggingConfigParameters struct {

	// The per-package log levels for the driver. This may include "root" package name to configure rootLogger. Examples: 'com.google = FATAL', 'root = INFO', 'org.apache = DEBUG'
	// +kubebuilder:validation:Optional
	// +mapType=granular
	DriverLogLevels map[string]*string `json:"driverLogLevels,omitempty" tf:"driver_log_levels,omitempty"`
}

type SparkRJobObservation struct {

	// HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
	ArchiveUris []*string `json:"archiveUris,omitempty" tf:"archive_uris,omitempty"`

	// The arguments to pass to the driver. Do not include arguments, such as --conf, that can be set as job properties, since a collision may occur that causes an incorrect job submission.
	Args []*string `json:"args,omitempty" tf:"args,omitempty"`

	// HCFS URIs of files to be placed in the working directory of each executor. Useful for naively parallel tasks.
	FileUris []*string `json:"fileUris,omitempty" tf:"file_uris,omitempty"`

	// The runtime log config for job execution.
	LoggingConfig []SparkRJobLoggingConfigObservation `json:"loggingConfig,omitempty" tf:"logging_config,omitempty"`

	// Required. The HCFS URI of the main R file to use as the driver. Must be a .R file.
	MainRFileURI *string `json:"mainRFileUri,omitempty" tf:"main_r_file_uri,omitempty"`

	// A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`
}

type SparkRJobParameters struct {

	// HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
	// +kubebuilder:validation:Optional
	ArchiveUris []*string `json:"archiveUris,omitempty" tf:"archive_uris,omitempty"`

	// The arguments to pass to the driver. Do not include arguments, such as --conf, that can be set as job properties, since a collision may occur that causes an incorrect job submission.
	// +kubebuilder:validation:Optional
	Args []*string `json:"args,omitempty" tf:"args,omitempty"`

	// HCFS URIs of files to be placed in the working directory of each executor. Useful for naively parallel tasks.
	// +kubebuilder:validation:Optional
	FileUris []*string `json:"fileUris,omitempty" tf:"file_uris,omitempty"`

	// The runtime log config for job execution.
	// +kubebuilder:validation:Optional
	LoggingConfig []SparkRJobLoggingConfigParameters `json:"loggingConfig,omitempty" tf:"logging_config,omitempty"`

	// Required. The HCFS URI of the main R file to use as the driver. Must be a .R file.
	// +kubebuilder:validation:Optional
	MainRFileURI *string `json:"mainRFileUri" tf:"main_r_file_uri,omitempty"`

	// A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`
}

type SparkSQLJobInitParameters struct {

	// HCFS URIs of jar files to be added to the Spark CLASSPATH.
	JarFileUris []*string `json:"jarFileUris,omitempty" tf:"jar_file_uris,omitempty"`

	// The runtime log config for job execution.
	LoggingConfig []SparkSQLJobLoggingConfigInitParameters `json:"loggingConfig,omitempty" tf:"logging_config,omitempty"`

	// A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`

	// The HCFS URI of the script that contains SQL queries.
	QueryFileURI *string `json:"queryFileUri,omitempty" tf:"query_file_uri,omitempty"`

	// A list of queries.
	QueryList []SparkSQLJobQueryListInitParameters `json:"queryList,omitempty" tf:"query_list,omitempty"`

	// Mapping of query variable names to values (equivalent to the Spark SQL command: SET name="value";).
	// +mapType=granular
	ScriptVariables map[string]*string `json:"scriptVariables,omitempty" tf:"script_variables,omitempty"`
}

type SparkSQLJobLoggingConfigInitParameters struct {

	// The per-package log levels for the driver. This may include "root" package name to configure rootLogger. Examples: 'com.google = FATAL', 'root = INFO', 'org.apache = DEBUG'
	// +mapType=granular
	DriverLogLevels map[string]*string `json:"driverLogLevels,omitempty" tf:"driver_log_levels,omitempty"`
}

type SparkSQLJobLoggingConfigObservation struct {

	// The per-package log levels for the driver. This may include "root" package name to configure rootLogger. Examples: 'com.google = FATAL', 'root = INFO', 'org.apache = DEBUG'
	// +mapType=granular
	DriverLogLevels map[string]*string `json:"driverLogLevels,omitempty" tf:"driver_log_levels,omitempty"`
}

type SparkSQLJobLoggingConfigParameters struct {

	// The per-package log levels for the driver. This may include "root" package name to configure rootLogger. Examples: 'com.google = FATAL', 'root = INFO', 'org.apache = DEBUG'
	// +kubebuilder:validation:Optional
	// +mapType=granular
	DriverLogLevels map[string]*string `json:"driverLogLevels,omitempty" tf:"driver_log_levels,omitempty"`
}

type SparkSQLJobObservation struct {

	// HCFS URIs of jar files to be added to the Spark CLASSPATH.
	JarFileUris []*string `json:"jarFileUris,omitempty" tf:"jar_file_uris,omitempty"`

	// The runtime log config for job execution.
	LoggingConfig []SparkSQLJobLoggingConfigObservation `json:"loggingConfig,omitempty" tf:"logging_config,omitempty"`

	// A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`

	// The HCFS URI of the script that contains SQL queries.
	QueryFileURI *string `json:"queryFileUri,omitempty" tf:"query_file_uri,omitempty"`

	// A list of queries.
	QueryList []SparkSQLJobQueryListObservation `json:"queryList,omitempty" tf:"query_list,omitempty"`

	// Mapping of query variable names to values (equivalent to the Spark SQL command: SET name="value";).
	// +mapType=granular
	ScriptVariables map[string]*string `json:"scriptVariables,omitempty" tf:"script_variables,omitempty"`
}

type SparkSQLJobParameters struct {

	// HCFS URIs of jar files to be added to the Spark CLASSPATH.
	// +kubebuilder:validation:Optional
	JarFileUris []*string `json:"jarFileUris,omitempty" tf:"jar_file_uris,omitempty"`

	// The runtime log config for job execution.
	// +kubebuilder:validation:Optional
	LoggingConfig []SparkSQLJobLoggingConfigParameters `json:"loggingConfig,omitempty" tf:"logging_config,omitempty"`

	// A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`

	// The HCFS URI of the script that contains SQL queries.
	// +kubebuilder:validation:Optional
	QueryFileURI *string `json:"queryFileUri,omitempty" tf:"query_file_uri,omitempty"`

	// A list of queries.
	// +kubebuilder:validation:Optional
	QueryList []SparkSQLJobQueryListParameters `json:"queryList,omitempty" tf:"query_list,omitempty"`

	// Mapping of query variable names to values (equivalent to the Spark SQL command: SET name="value";).
	// +kubebuilder:validation:Optional
	// +mapType=granular
	ScriptVariables map[string]*string `json:"scriptVariables,omitempty" tf:"script_variables,omitempty"`
}

type SparkSQLJobQueryListInitParameters struct {

	// Required. The queries to execute. You do not need to end a query expression with a semicolon. Multiple queries can be specified in one string by separating each with a semicolon. Here is an example of a Dataproc API snippet that uses a QueryList to specify a HiveJob: "hiveJob": { "queryList": { "queries": } }
	Queries []*string `json:"queries,omitempty" tf:"queries,omitempty"`
}

type SparkSQLJobQueryListObservation struct {

	// Required. The queries to execute. You do not need to end a query expression with a semicolon. Multiple queries can be specified in one string by separating each with a semicolon. Here is an example of a Dataproc API snippet that uses a QueryList to specify a HiveJob: "hiveJob": { "queryList": { "queries": } }
	Queries []*string `json:"queries,omitempty" tf:"queries,omitempty"`
}

type SparkSQLJobQueryListParameters struct {

	// Required. The queries to execute. You do not need to end a query expression with a semicolon. Multiple queries can be specified in one string by separating each with a semicolon. Here is an example of a Dataproc API snippet that uses a QueryList to specify a HiveJob: "hiveJob": { "queryList": { "queries": } }
	// +kubebuilder:validation:Optional
	Queries []*string `json:"queries" tf:"queries,omitempty"`
}

type ValidationInitParameters struct {

	// Validation based on regular expressions.
	Regex []RegexInitParameters `json:"regex,omitempty" tf:"regex,omitempty"`

	// Required. List of allowed values for the parameter.
	Values []ValuesInitParameters `json:"values,omitempty" tf:"values,omitempty"`
}

type ValidationObservation struct {

	// Validation based on regular expressions.
	Regex []RegexObservation `json:"regex,omitempty" tf:"regex,omitempty"`

	// Required. List of allowed values for the parameter.
	Values []ValuesObservation `json:"values,omitempty" tf:"values,omitempty"`
}

type ValidationParameters struct {

	// Validation based on regular expressions.
	// +kubebuilder:validation:Optional
	Regex []RegexParameters `json:"regex,omitempty" tf:"regex,omitempty"`

	// Required. List of allowed values for the parameter.
	// +kubebuilder:validation:Optional
	Values []ValuesParameters `json:"values,omitempty" tf:"values,omitempty"`
}

type ValuesInitParameters struct {

	// Required. List of allowed values for the parameter.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type ValuesObservation struct {

	// Required. List of allowed values for the parameter.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type ValuesParameters struct {

	// Required. List of allowed values for the parameter.
	// +kubebuilder:validation:Optional
	Values []*string `json:"values" tf:"values,omitempty"`
}

type WorkerConfigManagedGroupConfigInitParameters struct {
}

type WorkerConfigManagedGroupConfigObservation struct {

	// Output only. The resource name of the workflow template, as described in https://cloud.google.com/apis/design/resource_names. * For projects.regions.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/regions/{region}/workflowTemplates/{template_id} * For projects.locations.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/locations/{location}/workflowTemplates/{template_id}
	InstanceGroupManagerName *string `json:"instanceGroupManagerName,omitempty" tf:"instance_group_manager_name,omitempty"`

	// Output only. The resource name of the workflow template, as described in https://cloud.google.com/apis/design/resource_names. * For projects.regions.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/regions/{region}/workflowTemplates/{template_id} * For projects.locations.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/locations/{location}/workflowTemplates/{template_id}
	InstanceTemplateName *string `json:"instanceTemplateName,omitempty" tf:"instance_template_name,omitempty"`
}

type WorkerConfigManagedGroupConfigParameters struct {
}

type WorkflowTemplateInitParameters struct {

	// (Beta only) Optional. Timeout duration for the DAG of jobs. You can use "s", "m", "h", and "d" suffixes for second, minute, hour, and day duration values, respectively. The timeout duration must be from 10 minutes ("10m") to 24 hours ("24h" or "1d"). The timer begins when the first job is submitted. If the workflow is running at the end of the timeout period, any remaining jobs are cancelled, the workflow is ended, and if the workflow was running on a (/dataproc/docs/concepts/workflows/using-workflows#configuring_or_selecting_a_cluster), the cluster is deleted.
	DagTimeout *string `json:"dagTimeout,omitempty" tf:"dag_timeout,omitempty"`

	// Required. The Directed Acyclic Graph of Jobs to submit.
	Jobs []JobsInitParameters `json:"jobs,omitempty" tf:"jobs,omitempty"`

	// The labels to associate with this cluster. Label keys must be between 1 and 63 characters long, and must conform to the following PCRE regular expression: {0,63} No more than 32 labels can be associated with a given cluster.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Template parameters whose values are substituted into the template. Values for parameters must be provided when the template is instantiated.
	Parameters []ParametersInitParameters `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// Required. WorkflowTemplate scheduling information.
	Placement []WorkflowTemplatePlacementInitParameters `json:"placement,omitempty" tf:"placement,omitempty"`

	// The project for the resource
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Used to perform a consistent read-modify-write. This field should be left blank for a CreateWorkflowTemplate request. It is required for an UpdateWorkflowTemplate request, and must match the current server version. A typical update template flow would fetch the current template with a GetWorkflowTemplate request, which will return the current template with the version field filled in with the current server version. The user updates other fields in the template, then returns it as part of the UpdateWorkflowTemplate request.
	Version *float64 `json:"version,omitempty" tf:"version,omitempty"`
}

type WorkflowTemplateObservation struct {

	// Output only. The time template was created.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// (Beta only) Optional. Timeout duration for the DAG of jobs. You can use "s", "m", "h", and "d" suffixes for second, minute, hour, and day duration values, respectively. The timeout duration must be from 10 minutes ("10m") to 24 hours ("24h" or "1d"). The timer begins when the first job is submitted. If the workflow is running at the end of the timeout period, any remaining jobs are cancelled, the workflow is ended, and if the workflow was running on a (/dataproc/docs/concepts/workflows/using-workflows#configuring_or_selecting_a_cluster), the cluster is deleted.
	DagTimeout *string `json:"dagTimeout,omitempty" tf:"dag_timeout,omitempty"`

	// +mapType=granular
	EffectiveLabels map[string]*string `json:"effectiveLabels,omitempty" tf:"effective_labels,omitempty"`

	// an identifier for the resource with format projects/{{project}}/locations/{{location}}/workflowTemplates/{{name}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Required. The Directed Acyclic Graph of Jobs to submit.
	Jobs []JobsObservation `json:"jobs,omitempty" tf:"jobs,omitempty"`

	// The labels to associate with this cluster. Label keys must be between 1 and 63 characters long, and must conform to the following PCRE regular expression: {0,63} No more than 32 labels can be associated with a given cluster.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The location for the resource
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// Template parameters whose values are substituted into the template. Values for parameters must be provided when the template is instantiated.
	Parameters []ParametersObservation `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// Required. WorkflowTemplate scheduling information.
	Placement []WorkflowTemplatePlacementObservation `json:"placement,omitempty" tf:"placement,omitempty"`

	// The project for the resource
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// +mapType=granular
	TerraformLabels map[string]*string `json:"terraformLabels,omitempty" tf:"terraform_labels,omitempty"`

	// Output only. The time template was last updated.
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`

	// Used to perform a consistent read-modify-write. This field should be left blank for a CreateWorkflowTemplate request. It is required for an UpdateWorkflowTemplate request, and must match the current server version. A typical update template flow would fetch the current template with a GetWorkflowTemplate request, which will return the current template with the version field filled in with the current server version. The user updates other fields in the template, then returns it as part of the UpdateWorkflowTemplate request.
	Version *float64 `json:"version,omitempty" tf:"version,omitempty"`
}

type WorkflowTemplateParameters struct {

	// (Beta only) Optional. Timeout duration for the DAG of jobs. You can use "s", "m", "h", and "d" suffixes for second, minute, hour, and day duration values, respectively. The timeout duration must be from 10 minutes ("10m") to 24 hours ("24h" or "1d"). The timer begins when the first job is submitted. If the workflow is running at the end of the timeout period, any remaining jobs are cancelled, the workflow is ended, and if the workflow was running on a (/dataproc/docs/concepts/workflows/using-workflows#configuring_or_selecting_a_cluster), the cluster is deleted.
	// +kubebuilder:validation:Optional
	DagTimeout *string `json:"dagTimeout,omitempty" tf:"dag_timeout,omitempty"`

	// Required. The Directed Acyclic Graph of Jobs to submit.
	// +kubebuilder:validation:Optional
	Jobs []JobsParameters `json:"jobs,omitempty" tf:"jobs,omitempty"`

	// The labels to associate with this cluster. Label keys must be between 1 and 63 characters long, and must conform to the following PCRE regular expression: {0,63} No more than 32 labels can be associated with a given cluster.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The location for the resource
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// Template parameters whose values are substituted into the template. Values for parameters must be provided when the template is instantiated.
	// +kubebuilder:validation:Optional
	Parameters []ParametersParameters `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// Required. WorkflowTemplate scheduling information.
	// +kubebuilder:validation:Optional
	Placement []WorkflowTemplatePlacementParameters `json:"placement,omitempty" tf:"placement,omitempty"`

	// The project for the resource
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Used to perform a consistent read-modify-write. This field should be left blank for a CreateWorkflowTemplate request. It is required for an UpdateWorkflowTemplate request, and must match the current server version. A typical update template flow would fetch the current template with a GetWorkflowTemplate request, which will return the current template with the version field filled in with the current server version. The user updates other fields in the template, then returns it as part of the UpdateWorkflowTemplate request.
	// +kubebuilder:validation:Optional
	Version *float64 `json:"version,omitempty" tf:"version,omitempty"`
}

type WorkflowTemplatePlacementInitParameters struct {

	// A selector that chooses target cluster for jobs based on metadata. The selector is evaluated at the time each job is submitted.
	ClusterSelector []ClusterSelectorInitParameters `json:"clusterSelector,omitempty" tf:"cluster_selector,omitempty"`

	// A cluster that is managed by the workflow.
	ManagedCluster []ManagedClusterInitParameters `json:"managedCluster,omitempty" tf:"managed_cluster,omitempty"`
}

type WorkflowTemplatePlacementObservation struct {

	// A selector that chooses target cluster for jobs based on metadata. The selector is evaluated at the time each job is submitted.
	ClusterSelector []ClusterSelectorObservation `json:"clusterSelector,omitempty" tf:"cluster_selector,omitempty"`

	// A cluster that is managed by the workflow.
	ManagedCluster []ManagedClusterObservation `json:"managedCluster,omitempty" tf:"managed_cluster,omitempty"`
}

type WorkflowTemplatePlacementParameters struct {

	// A selector that chooses target cluster for jobs based on metadata. The selector is evaluated at the time each job is submitted.
	// +kubebuilder:validation:Optional
	ClusterSelector []ClusterSelectorParameters `json:"clusterSelector,omitempty" tf:"cluster_selector,omitempty"`

	// A cluster that is managed by the workflow.
	// +kubebuilder:validation:Optional
	ManagedCluster []ManagedClusterParameters `json:"managedCluster,omitempty" tf:"managed_cluster,omitempty"`
}

// WorkflowTemplateSpec defines the desired state of WorkflowTemplate
type WorkflowTemplateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     WorkflowTemplateParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider WorkflowTemplateInitParameters `json:"initProvider,omitempty"`
}

// WorkflowTemplateStatus defines the observed state of WorkflowTemplate.
type WorkflowTemplateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        WorkflowTemplateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// WorkflowTemplate is the Schema for the WorkflowTemplates API. A Workflow Template is a reusable workflow configuration.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type WorkflowTemplate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.jobs) || (has(self.initProvider) && has(self.initProvider.jobs))",message="spec.forProvider.jobs is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.placement) || (has(self.initProvider) && has(self.initProvider.placement))",message="spec.forProvider.placement is a required parameter"
	Spec   WorkflowTemplateSpec   `json:"spec"`
	Status WorkflowTemplateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WorkflowTemplateList contains a list of WorkflowTemplates
type WorkflowTemplateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []WorkflowTemplate `json:"items"`
}

// Repository type metadata.
var (
	WorkflowTemplate_Kind             = "WorkflowTemplate"
	WorkflowTemplate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: WorkflowTemplate_Kind}.String()
	WorkflowTemplate_KindAPIVersion   = WorkflowTemplate_Kind + "." + CRDGroupVersion.String()
	WorkflowTemplate_GroupVersionKind = CRDGroupVersion.WithKind(WorkflowTemplate_Kind)
)

func init() {
	SchemeBuilder.Register(&WorkflowTemplate{}, &WorkflowTemplateList{})
}
