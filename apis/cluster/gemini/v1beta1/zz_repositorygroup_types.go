// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type RepositoriesInitParameters struct {

	// Required. The Git branch pattern used for indexing in RE2 syntax.
	// See https://github.com/google/re2/wiki/syntax for syntax.
	BranchPattern *string `json:"branchPattern,omitempty" tf:"branch_pattern,omitempty"`

	// Required. The DeveloperConnect repository full resource name, relative resource name
	// or resource URL to be indexed.
	Resource *string `json:"resource,omitempty" tf:"resource,omitempty"`
}

type RepositoriesObservation struct {

	// Required. The Git branch pattern used for indexing in RE2 syntax.
	// See https://github.com/google/re2/wiki/syntax for syntax.
	BranchPattern *string `json:"branchPattern,omitempty" tf:"branch_pattern,omitempty"`

	// Required. The DeveloperConnect repository full resource name, relative resource name
	// or resource URL to be indexed.
	Resource *string `json:"resource,omitempty" tf:"resource,omitempty"`
}

type RepositoriesParameters struct {

	// Required. The Git branch pattern used for indexing in RE2 syntax.
	// See https://github.com/google/re2/wiki/syntax for syntax.
	// +kubebuilder:validation:Optional
	BranchPattern *string `json:"branchPattern" tf:"branch_pattern,omitempty"`

	// Required. The DeveloperConnect repository full resource name, relative resource name
	// or resource URL to be indexed.
	// +kubebuilder:validation:Optional
	Resource *string `json:"resource" tf:"resource,omitempty"`
}

type RepositoryGroupInitParameters struct {

	// Optional. Labels as key value pairs.
	// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field effective_labels for all of the labels present on the resource.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Required. List of repositories to group.
	// Structure is documented below.
	Repositories []RepositoriesInitParameters `json:"repositories,omitempty" tf:"repositories,omitempty"`
}

type RepositoryGroupObservation struct {

	// Required. Id of the Code Repository Index.
	CodeRepositoryIndex *string `json:"codeRepositoryIndex,omitempty" tf:"code_repository_index,omitempty"`

	// Output only. Create time stamp.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// +mapType=granular
	EffectiveLabels map[string]*string `json:"effectiveLabels,omitempty" tf:"effective_labels,omitempty"`

	// an identifier for the resource with format projects/{{project}}/locations/{{location}}/codeRepositoryIndexes/{{code_repository_index}}/repositoryGroups/{{repository_group_id}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Optional. Labels as key value pairs.
	// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field effective_labels for all of the labels present on the resource.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The location of the Code Repository Index, for example us-central1.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// Immutable. Identifier. Name of Repository Group.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Required. List of repositories to group.
	// Structure is documented below.
	Repositories []RepositoriesObservation `json:"repositories,omitempty" tf:"repositories,omitempty"`

	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	// +mapType=granular
	TerraformLabels map[string]*string `json:"terraformLabels,omitempty" tf:"terraform_labels,omitempty"`

	// Output only. Update time stamp.
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type RepositoryGroupParameters struct {

	// Required. Id of the Code Repository Index.
	// +kubebuilder:validation:Required
	CodeRepositoryIndex *string `json:"codeRepositoryIndex" tf:"code_repository_index,omitempty"`

	// Optional. Labels as key value pairs.
	// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field effective_labels for all of the labels present on the resource.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The location of the Code Repository Index, for example us-central1.
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Required. List of repositories to group.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Repositories []RepositoriesParameters `json:"repositories,omitempty" tf:"repositories,omitempty"`
}

// RepositoryGroupSpec defines the desired state of RepositoryGroup
type RepositoryGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RepositoryGroupParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RepositoryGroupInitParameters `json:"initProvider,omitempty"`
}

// RepositoryGroupStatus defines the observed state of RepositoryGroup.
type RepositoryGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RepositoryGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// RepositoryGroup is the Schema for the RepositoryGroups API. The resource for managing Repository Group for Gemini Code Assist.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type RepositoryGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.repositories) || (has(self.initProvider) && has(self.initProvider.repositories))",message="spec.forProvider.repositories is a required parameter"
	Spec   RepositoryGroupSpec   `json:"spec"`
	Status RepositoryGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RepositoryGroupList contains a list of RepositoryGroups
type RepositoryGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RepositoryGroup `json:"items"`
}

// Repository type metadata.
var (
	RepositoryGroup_Kind             = "RepositoryGroup"
	RepositoryGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RepositoryGroup_Kind}.String()
	RepositoryGroup_KindAPIVersion   = RepositoryGroup_Kind + "." + CRDGroupVersion.String()
	RepositoryGroup_GroupVersionKind = CRDGroupVersion.WithKind(RepositoryGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&RepositoryGroup{}, &RepositoryGroupList{})
}
