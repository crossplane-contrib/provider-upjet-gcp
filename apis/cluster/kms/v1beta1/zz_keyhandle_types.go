// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type KeyHandleInitParameters struct {

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/cluster/cloudplatform/v1beta1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("project_id",false)
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Reference to a Project in cloudplatform to populate project.
	// +kubebuilder:validation:Optional
	ProjectRef *v1.Reference `json:"projectRef,omitempty" tf:"-"`

	// Selector for a Project in cloudplatform to populate project.
	// +kubebuilder:validation:Optional
	ProjectSelector *v1.Selector `json:"projectSelector,omitempty" tf:"-"`

	// Selector of the resource type where we want to protect resources.
	// For example, storage.googleapis.com/Bucket.
	ResourceTypeSelector *string `json:"resourceTypeSelector,omitempty" tf:"resource_type_selector,omitempty"`
}

type KeyHandleObservation struct {

	// an identifier for the resource with format projects/{{project}}/locations/{{location}}/keyHandles/{{name}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A reference to a Cloud KMS CryptoKey that can be used for CMEK in the requested
	// product/project/location, for example
	// projects/1/locations/us-east1/keyRings/foo/cryptoKeys/bar-ffffff
	KMSKey *string `json:"kmsKey,omitempty" tf:"kms_key,omitempty"`

	// The location for the KeyHandle.
	// A full list of valid locations can be found by running gcloud kms locations list.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Selector of the resource type where we want to protect resources.
	// For example, storage.googleapis.com/Bucket.
	ResourceTypeSelector *string `json:"resourceTypeSelector,omitempty" tf:"resource_type_selector,omitempty"`
}

type KeyHandleParameters struct {

	// The location for the KeyHandle.
	// A full list of valid locations can be found by running gcloud kms locations list.
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/cluster/cloudplatform/v1beta1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("project_id",false)
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Reference to a Project in cloudplatform to populate project.
	// +kubebuilder:validation:Optional
	ProjectRef *v1.Reference `json:"projectRef,omitempty" tf:"-"`

	// Selector for a Project in cloudplatform to populate project.
	// +kubebuilder:validation:Optional
	ProjectSelector *v1.Selector `json:"projectSelector,omitempty" tf:"-"`

	// Selector of the resource type where we want to protect resources.
	// For example, storage.googleapis.com/Bucket.
	// +kubebuilder:validation:Optional
	ResourceTypeSelector *string `json:"resourceTypeSelector,omitempty" tf:"resource_type_selector,omitempty"`
}

// KeyHandleSpec defines the desired state of KeyHandle
type KeyHandleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KeyHandleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider KeyHandleInitParameters `json:"initProvider,omitempty"`
}

// KeyHandleStatus defines the observed state of KeyHandle.
type KeyHandleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KeyHandleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// KeyHandle is the Schema for the KeyHandles API. A
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type KeyHandle struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.resourceTypeSelector) || (has(self.initProvider) && has(self.initProvider.resourceTypeSelector))",message="spec.forProvider.resourceTypeSelector is a required parameter"
	Spec   KeyHandleSpec   `json:"spec"`
	Status KeyHandleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KeyHandleList contains a list of KeyHandles
type KeyHandleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KeyHandle `json:"items"`
}

// Repository type metadata.
var (
	KeyHandle_Kind             = "KeyHandle"
	KeyHandle_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: KeyHandle_Kind}.String()
	KeyHandle_KindAPIVersion   = KeyHandle_Kind + "." + CRDGroupVersion.String()
	KeyHandle_GroupVersionKind = CRDGroupVersion.WithKind(KeyHandle_Kind)
)

func init() {
	SchemeBuilder.Register(&KeyHandle{}, &KeyHandleList{})
}
