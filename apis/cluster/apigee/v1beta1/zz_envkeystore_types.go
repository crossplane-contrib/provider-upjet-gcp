// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type EnvKeystoreInitParameters struct {
}

type EnvKeystoreObservation struct {
	Aliases []*string `json:"aliases,omitempty" tf:"aliases,omitempty"`

	EnvID *string `json:"envId,omitempty" tf:"env_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type EnvKeystoreParameters struct {

	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/cluster/apigee/v1beta2.Environment
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-gcp/config/cluster/common.ExtractResourceID()
	// +kubebuilder:validation:Optional
	EnvID *string `json:"envId,omitempty" tf:"env_id,omitempty"`

	// Reference to a Environment in apigee to populate envId.
	// +kubebuilder:validation:Optional
	EnvIDRef *v1.Reference `json:"envIdRef,omitempty" tf:"-"`

	// Selector for a Environment in apigee to populate envId.
	// +kubebuilder:validation:Optional
	EnvIDSelector *v1.Selector `json:"envIdSelector,omitempty" tf:"-"`
}

// EnvKeystoreSpec defines the desired state of EnvKeystore
type EnvKeystoreSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EnvKeystoreParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EnvKeystoreInitParameters `json:"initProvider,omitempty"`
}

// EnvKeystoreStatus defines the observed state of EnvKeystore.
type EnvKeystoreStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EnvKeystoreObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// EnvKeystore is the Schema for the EnvKeystores API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type EnvKeystore struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EnvKeystoreSpec   `json:"spec"`
	Status            EnvKeystoreStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EnvKeystoreList contains a list of EnvKeystores
type EnvKeystoreList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EnvKeystore `json:"items"`
}

// Repository type metadata.
var (
	EnvKeystore_Kind             = "EnvKeystore"
	EnvKeystore_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EnvKeystore_Kind}.String()
	EnvKeystore_KindAPIVersion   = EnvKeystore_Kind + "." + CRDGroupVersion.String()
	EnvKeystore_GroupVersionKind = CRDGroupVersion.WithKind(EnvKeystore_Kind)
)

func init() {
	SchemeBuilder.Register(&EnvKeystore{}, &EnvKeystoreList{})
}
