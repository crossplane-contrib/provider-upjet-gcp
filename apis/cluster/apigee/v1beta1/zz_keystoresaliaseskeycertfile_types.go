// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type CertInfoInitParameters struct {
	BasicConstraints *string `json:"basicConstraints,omitempty" tf:"basic_constraints,omitempty"`

	ExpiryDate *string `json:"expiryDate,omitempty" tf:"expiry_date,omitempty"`

	IsValid *string `json:"isValid,omitempty" tf:"is_valid,omitempty"`

	Issuer *string `json:"issuer,omitempty" tf:"issuer,omitempty"`

	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`

	SerialNumber *string `json:"serialNumber,omitempty" tf:"serial_number,omitempty"`

	SigAlgName *string `json:"sigAlgName,omitempty" tf:"sig_alg_name,omitempty"`

	Subject *string `json:"subject,omitempty" tf:"subject,omitempty"`

	SubjectAlternativeNames []*string `json:"subjectAlternativeNames,omitempty" tf:"subject_alternative_names,omitempty"`

	ValidFrom *string `json:"validFrom,omitempty" tf:"valid_from,omitempty"`

	Version *float64 `json:"version,omitempty" tf:"version,omitempty"`
}

type CertInfoObservation struct {
	BasicConstraints *string `json:"basicConstraints,omitempty" tf:"basic_constraints,omitempty"`

	ExpiryDate *string `json:"expiryDate,omitempty" tf:"expiry_date,omitempty"`

	IsValid *string `json:"isValid,omitempty" tf:"is_valid,omitempty"`

	Issuer *string `json:"issuer,omitempty" tf:"issuer,omitempty"`

	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`

	SerialNumber *string `json:"serialNumber,omitempty" tf:"serial_number,omitempty"`

	SigAlgName *string `json:"sigAlgName,omitempty" tf:"sig_alg_name,omitempty"`

	Subject *string `json:"subject,omitempty" tf:"subject,omitempty"`

	SubjectAlternativeNames []*string `json:"subjectAlternativeNames,omitempty" tf:"subject_alternative_names,omitempty"`

	ValidFrom *string `json:"validFrom,omitempty" tf:"valid_from,omitempty"`

	Version *float64 `json:"version,omitempty" tf:"version,omitempty"`
}

type CertInfoParameters struct {

	// +kubebuilder:validation:Optional
	BasicConstraints *string `json:"basicConstraints,omitempty" tf:"basic_constraints,omitempty"`

	// +kubebuilder:validation:Optional
	ExpiryDate *string `json:"expiryDate,omitempty" tf:"expiry_date,omitempty"`

	// +kubebuilder:validation:Optional
	IsValid *string `json:"isValid,omitempty" tf:"is_valid,omitempty"`

	// +kubebuilder:validation:Optional
	Issuer *string `json:"issuer,omitempty" tf:"issuer,omitempty"`

	// +kubebuilder:validation:Optional
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`

	// +kubebuilder:validation:Optional
	SerialNumber *string `json:"serialNumber,omitempty" tf:"serial_number,omitempty"`

	// +kubebuilder:validation:Optional
	SigAlgName *string `json:"sigAlgName,omitempty" tf:"sig_alg_name,omitempty"`

	// +kubebuilder:validation:Optional
	Subject *string `json:"subject,omitempty" tf:"subject,omitempty"`

	// +kubebuilder:validation:Optional
	SubjectAlternativeNames []*string `json:"subjectAlternativeNames,omitempty" tf:"subject_alternative_names,omitempty"`

	// +kubebuilder:validation:Optional
	ValidFrom *string `json:"validFrom,omitempty" tf:"valid_from,omitempty"`

	// +kubebuilder:validation:Optional
	Version *float64 `json:"version,omitempty" tf:"version,omitempty"`
}

type CertsInfoInitParameters struct {
	CertInfo []CertInfoInitParameters `json:"certInfo,omitempty" tf:"cert_info,omitempty"`
}

type CertsInfoObservation struct {
	CertInfo []CertInfoObservation `json:"certInfo,omitempty" tf:"cert_info,omitempty"`
}

type CertsInfoParameters struct {

	// +kubebuilder:validation:Optional
	CertInfo []CertInfoParameters `json:"certInfo,omitempty" tf:"cert_info,omitempty"`
}

type KeystoresAliasesKeyCertFileInitParameters struct {
	Cert *string `json:"cert,omitempty" tf:"cert,omitempty"`

	CertsInfo *CertsInfoInitParameters `json:"certsInfo,omitempty" tf:"certs_info,omitempty"`

	KeySecretRef *v1.SecretKeySelector `json:"keySecretRef,omitempty" tf:"-"`

	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`
}

type KeystoresAliasesKeyCertFileObservation struct {
	Cert *string `json:"cert,omitempty" tf:"cert,omitempty"`

	CertsInfo *CertsInfoObservation `json:"certsInfo,omitempty" tf:"certs_info,omitempty"`

	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Keystore *string `json:"keystore,omitempty" tf:"keystore,omitempty"`

	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type KeystoresAliasesKeyCertFileParameters struct {

	// +kubebuilder:validation:Optional
	Cert *string `json:"cert,omitempty" tf:"cert,omitempty"`

	// +kubebuilder:validation:Optional
	CertsInfo *CertsInfoParameters `json:"certsInfo,omitempty" tf:"certs_info,omitempty"`

	// +kubebuilder:validation:Required
	Environment *string `json:"environment" tf:"environment,omitempty"`

	// +kubebuilder:validation:Optional
	KeySecretRef *v1.SecretKeySelector `json:"keySecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	Keystore *string `json:"keystore" tf:"keystore,omitempty"`

	// +kubebuilder:validation:Required
	OrgID *string `json:"orgId" tf:"org_id,omitempty"`

	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`
}

// KeystoresAliasesKeyCertFileSpec defines the desired state of KeystoresAliasesKeyCertFile
type KeystoresAliasesKeyCertFileSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KeystoresAliasesKeyCertFileParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider KeystoresAliasesKeyCertFileInitParameters `json:"initProvider,omitempty"`
}

// KeystoresAliasesKeyCertFileStatus defines the observed state of KeystoresAliasesKeyCertFile.
type KeystoresAliasesKeyCertFileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KeystoresAliasesKeyCertFileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// KeystoresAliasesKeyCertFile is the Schema for the KeystoresAliasesKeyCertFiles API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type KeystoresAliasesKeyCertFile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.cert) || (has(self.initProvider) && has(self.initProvider.cert))",message="spec.forProvider.cert is a required parameter"
	Spec   KeystoresAliasesKeyCertFileSpec   `json:"spec"`
	Status KeystoresAliasesKeyCertFileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KeystoresAliasesKeyCertFileList contains a list of KeystoresAliasesKeyCertFiles
type KeystoresAliasesKeyCertFileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KeystoresAliasesKeyCertFile `json:"items"`
}

// Repository type metadata.
var (
	KeystoresAliasesKeyCertFile_Kind             = "KeystoresAliasesKeyCertFile"
	KeystoresAliasesKeyCertFile_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: KeystoresAliasesKeyCertFile_Kind}.String()
	KeystoresAliasesKeyCertFile_KindAPIVersion   = KeystoresAliasesKeyCertFile_Kind + "." + CRDGroupVersion.String()
	KeystoresAliasesKeyCertFile_GroupVersionKind = CRDGroupVersion.WithKind(KeystoresAliasesKeyCertFile_Kind)
)

func init() {
	SchemeBuilder.Register(&KeystoresAliasesKeyCertFile{}, &KeystoresAliasesKeyCertFileList{})
}
