// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type AppendOnlyInitParameters struct {
}

type AppendOnlyObservation struct {
}

type AppendOnlyParameters struct {
}

type AvroFileFormatInitParameters struct {
}

type AvroFileFormatObservation struct {
}

type AvroFileFormatParameters struct {
}

type BackfillAllInitParameters struct {

	// MySQL data source objects to avoid backfilling.
	// Structure is documented below.
	MySQLExcludedObjects *MySQLExcludedObjectsInitParameters `json:"mysqlExcludedObjects,omitempty" tf:"mysql_excluded_objects,omitempty"`

	// PostgreSQL data source objects to avoid backfilling.
	// Structure is documented below.
	OracleExcludedObjects *OracleExcludedObjectsInitParameters `json:"oracleExcludedObjects,omitempty" tf:"oracle_excluded_objects,omitempty"`

	// PostgreSQL data source objects to avoid backfilling.
	// Structure is documented below.
	PostgresqlExcludedObjects *PostgresqlExcludedObjectsInitParameters `json:"postgresqlExcludedObjects,omitempty" tf:"postgresql_excluded_objects,omitempty"`

	// SQL Server data source objects to avoid backfilling.
	// Structure is documented below.
	SQLServerExcludedObjects *SQLServerExcludedObjectsInitParameters `json:"sqlServerExcludedObjects,omitempty" tf:"sql_server_excluded_objects,omitempty"`

	// Salesforce objects to avoid backfilling.
	// Structure is documented below.
	SalesforceExcludedObjects *SalesforceExcludedObjectsInitParameters `json:"salesforceExcludedObjects,omitempty" tf:"salesforce_excluded_objects,omitempty"`
}

type BackfillAllObservation struct {

	// MySQL data source objects to avoid backfilling.
	// Structure is documented below.
	MySQLExcludedObjects *MySQLExcludedObjectsObservation `json:"mysqlExcludedObjects,omitempty" tf:"mysql_excluded_objects,omitempty"`

	// PostgreSQL data source objects to avoid backfilling.
	// Structure is documented below.
	OracleExcludedObjects *OracleExcludedObjectsObservation `json:"oracleExcludedObjects,omitempty" tf:"oracle_excluded_objects,omitempty"`

	// PostgreSQL data source objects to avoid backfilling.
	// Structure is documented below.
	PostgresqlExcludedObjects *PostgresqlExcludedObjectsObservation `json:"postgresqlExcludedObjects,omitempty" tf:"postgresql_excluded_objects,omitempty"`

	// SQL Server data source objects to avoid backfilling.
	// Structure is documented below.
	SQLServerExcludedObjects *SQLServerExcludedObjectsObservation `json:"sqlServerExcludedObjects,omitempty" tf:"sql_server_excluded_objects,omitempty"`

	// Salesforce objects to avoid backfilling.
	// Structure is documented below.
	SalesforceExcludedObjects *SalesforceExcludedObjectsObservation `json:"salesforceExcludedObjects,omitempty" tf:"salesforce_excluded_objects,omitempty"`
}

type BackfillAllParameters struct {

	// MySQL data source objects to avoid backfilling.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	MySQLExcludedObjects *MySQLExcludedObjectsParameters `json:"mysqlExcludedObjects,omitempty" tf:"mysql_excluded_objects,omitempty"`

	// PostgreSQL data source objects to avoid backfilling.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	OracleExcludedObjects *OracleExcludedObjectsParameters `json:"oracleExcludedObjects,omitempty" tf:"oracle_excluded_objects,omitempty"`

	// PostgreSQL data source objects to avoid backfilling.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	PostgresqlExcludedObjects *PostgresqlExcludedObjectsParameters `json:"postgresqlExcludedObjects,omitempty" tf:"postgresql_excluded_objects,omitempty"`

	// SQL Server data source objects to avoid backfilling.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	SQLServerExcludedObjects *SQLServerExcludedObjectsParameters `json:"sqlServerExcludedObjects,omitempty" tf:"sql_server_excluded_objects,omitempty"`

	// Salesforce objects to avoid backfilling.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	SalesforceExcludedObjects *SalesforceExcludedObjectsParameters `json:"salesforceExcludedObjects,omitempty" tf:"salesforce_excluded_objects,omitempty"`
}

type BackfillNoneInitParameters struct {
}

type BackfillNoneObservation struct {
}

type BackfillNoneParameters struct {
}

type BigqueryDestinationConfigInitParameters struct {

	// AppendOnly mode defines that the stream of changes (INSERT, UPDATE-INSERT, UPDATE-DELETE and DELETE
	// events) to a source table will be written to the destination Google BigQuery table, retaining the
	// historical state of the data.
	AppendOnly *AppendOnlyInitParameters `json:"appendOnly,omitempty" tf:"append_only,omitempty"`

	// BigLake Managed Tables configuration for BigQuery streams.
	// Structure is documented below.
	BlmtConfig *BlmtConfigInitParameters `json:"blmtConfig,omitempty" tf:"blmt_config,omitempty"`

	// The guaranteed data freshness (in seconds) when querying tables created by the stream.
	// Editing this field will only affect new tables created in the future, but existing tables
	// will not be impacted. Lower values mean that queries will return fresher data, but may result in higher cost.
	// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s". Defaults to 900s.
	DataFreshness *string `json:"dataFreshness,omitempty" tf:"data_freshness,omitempty"`

	// Merge mode defines that all changes to a table will be merged at the destination Google BigQuery
	// table. This is the default write mode. When selected, BigQuery reflects the way the data is stored
	// in the source database. With Merge mode, no historical record of the change events is kept.
	Merge *MergeInitParameters `json:"merge,omitempty" tf:"merge,omitempty"`

	// A single target dataset to which all data will be streamed.
	// Structure is documented below.
	SingleTargetDataset *SingleTargetDatasetInitParameters `json:"singleTargetDataset,omitempty" tf:"single_target_dataset,omitempty"`

	// Destination datasets are created so that hierarchy of the destination data objects matches the source hierarchy.
	// Structure is documented below.
	SourceHierarchyDatasets *SourceHierarchyDatasetsInitParameters `json:"sourceHierarchyDatasets,omitempty" tf:"source_hierarchy_datasets,omitempty"`
}

type BigqueryDestinationConfigObservation struct {

	// AppendOnly mode defines that the stream of changes (INSERT, UPDATE-INSERT, UPDATE-DELETE and DELETE
	// events) to a source table will be written to the destination Google BigQuery table, retaining the
	// historical state of the data.
	AppendOnly *AppendOnlyParameters `json:"appendOnly,omitempty" tf:"append_only,omitempty"`

	// BigLake Managed Tables configuration for BigQuery streams.
	// Structure is documented below.
	BlmtConfig *BlmtConfigObservation `json:"blmtConfig,omitempty" tf:"blmt_config,omitempty"`

	// The guaranteed data freshness (in seconds) when querying tables created by the stream.
	// Editing this field will only affect new tables created in the future, but existing tables
	// will not be impacted. Lower values mean that queries will return fresher data, but may result in higher cost.
	// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s". Defaults to 900s.
	DataFreshness *string `json:"dataFreshness,omitempty" tf:"data_freshness,omitempty"`

	// Merge mode defines that all changes to a table will be merged at the destination Google BigQuery
	// table. This is the default write mode. When selected, BigQuery reflects the way the data is stored
	// in the source database. With Merge mode, no historical record of the change events is kept.
	Merge *MergeParameters `json:"merge,omitempty" tf:"merge,omitempty"`

	// A single target dataset to which all data will be streamed.
	// Structure is documented below.
	SingleTargetDataset *SingleTargetDatasetObservation `json:"singleTargetDataset,omitempty" tf:"single_target_dataset,omitempty"`

	// Destination datasets are created so that hierarchy of the destination data objects matches the source hierarchy.
	// Structure is documented below.
	SourceHierarchyDatasets *SourceHierarchyDatasetsObservation `json:"sourceHierarchyDatasets,omitempty" tf:"source_hierarchy_datasets,omitempty"`
}

type BigqueryDestinationConfigParameters struct {

	// AppendOnly mode defines that the stream of changes (INSERT, UPDATE-INSERT, UPDATE-DELETE and DELETE
	// events) to a source table will be written to the destination Google BigQuery table, retaining the
	// historical state of the data.
	// +kubebuilder:validation:Optional
	AppendOnly *AppendOnlyParameters `json:"appendOnly,omitempty" tf:"append_only,omitempty"`

	// BigLake Managed Tables configuration for BigQuery streams.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	BlmtConfig *BlmtConfigParameters `json:"blmtConfig,omitempty" tf:"blmt_config,omitempty"`

	// The guaranteed data freshness (in seconds) when querying tables created by the stream.
	// Editing this field will only affect new tables created in the future, but existing tables
	// will not be impacted. Lower values mean that queries will return fresher data, but may result in higher cost.
	// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s". Defaults to 900s.
	// +kubebuilder:validation:Optional
	DataFreshness *string `json:"dataFreshness,omitempty" tf:"data_freshness,omitempty"`

	// Merge mode defines that all changes to a table will be merged at the destination Google BigQuery
	// table. This is the default write mode. When selected, BigQuery reflects the way the data is stored
	// in the source database. With Merge mode, no historical record of the change events is kept.
	// +kubebuilder:validation:Optional
	Merge *MergeParameters `json:"merge,omitempty" tf:"merge,omitempty"`

	// A single target dataset to which all data will be streamed.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	SingleTargetDataset *SingleTargetDatasetParameters `json:"singleTargetDataset,omitempty" tf:"single_target_dataset,omitempty"`

	// Destination datasets are created so that hierarchy of the destination data objects matches the source hierarchy.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	SourceHierarchyDatasets *SourceHierarchyDatasetsParameters `json:"sourceHierarchyDatasets,omitempty" tf:"source_hierarchy_datasets,omitempty"`
}

type BinaryLogPositionInitParameters struct {
}

type BinaryLogPositionObservation struct {
}

type BinaryLogPositionParameters struct {
}

type BlmtConfigInitParameters struct {

	// The Cloud Storage bucket name.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/cluster/storage/v1beta2.Bucket
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Reference to a Bucket in storage to populate bucket.
	// +kubebuilder:validation:Optional
	BucketRef *v1.Reference `json:"bucketRef,omitempty" tf:"-"`

	// Selector for a Bucket in storage to populate bucket.
	// +kubebuilder:validation:Optional
	BucketSelector *v1.Selector `json:"bucketSelector,omitempty" tf:"-"`

	// The bigquery connection. Format: {project}.{location}.{name}
	ConnectionName *string `json:"connectionName,omitempty" tf:"connection_name,omitempty"`

	// The file format.
	FileFormat *string `json:"fileFormat,omitempty" tf:"file_format,omitempty"`

	// The root path inside the Cloud Storage bucket.
	RootPath *string `json:"rootPath,omitempty" tf:"root_path,omitempty"`

	// The table format.
	TableFormat *string `json:"tableFormat,omitempty" tf:"table_format,omitempty"`
}

type BlmtConfigObservation struct {

	// The Cloud Storage bucket name.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// The bigquery connection. Format: {project}.{location}.{name}
	ConnectionName *string `json:"connectionName,omitempty" tf:"connection_name,omitempty"`

	// The file format.
	FileFormat *string `json:"fileFormat,omitempty" tf:"file_format,omitempty"`

	// The root path inside the Cloud Storage bucket.
	RootPath *string `json:"rootPath,omitempty" tf:"root_path,omitempty"`

	// The table format.
	TableFormat *string `json:"tableFormat,omitempty" tf:"table_format,omitempty"`
}

type BlmtConfigParameters struct {

	// The Cloud Storage bucket name.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/cluster/storage/v1beta2.Bucket
	// +kubebuilder:validation:Optional
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Reference to a Bucket in storage to populate bucket.
	// +kubebuilder:validation:Optional
	BucketRef *v1.Reference `json:"bucketRef,omitempty" tf:"-"`

	// Selector for a Bucket in storage to populate bucket.
	// +kubebuilder:validation:Optional
	BucketSelector *v1.Selector `json:"bucketSelector,omitempty" tf:"-"`

	// The bigquery connection. Format: {project}.{location}.{name}
	// +kubebuilder:validation:Optional
	ConnectionName *string `json:"connectionName" tf:"connection_name,omitempty"`

	// The file format.
	// +kubebuilder:validation:Optional
	FileFormat *string `json:"fileFormat" tf:"file_format,omitempty"`

	// The root path inside the Cloud Storage bucket.
	// +kubebuilder:validation:Optional
	RootPath *string `json:"rootPath,omitempty" tf:"root_path,omitempty"`

	// The table format.
	// +kubebuilder:validation:Optional
	TableFormat *string `json:"tableFormat" tf:"table_format,omitempty"`
}

type ChangeTablesInitParameters struct {
}

type ChangeTablesObservation struct {
}

type ChangeTablesParameters struct {
}

type ColumnsInitParameters struct {

	// Column name.
	Column *string `json:"column,omitempty" tf:"column,omitempty"`

	// The PostgreSQL data type. Full data types list can be found here:
	// https://www.postgresql.org/docs/current/datatype.html
	DataType *string `json:"dataType,omitempty" tf:"data_type,omitempty"`
}

type ColumnsObservation struct {

	// Column name.
	Column *string `json:"column,omitempty" tf:"column,omitempty"`

	// The PostgreSQL data type. Full data types list can be found here:
	// https://www.postgresql.org/docs/current/datatype.html
	DataType *string `json:"dataType,omitempty" tf:"data_type,omitempty"`

	// (Output)
	// Column length.
	Length *float64 `json:"length,omitempty" tf:"length,omitempty"`

	// Whether or not the column can accept a null value.
	Nullable *bool `json:"nullable,omitempty" tf:"nullable,omitempty"`

	// The ordinal position of the column in the table.
	OrdinalPosition *float64 `json:"ordinalPosition,omitempty" tf:"ordinal_position,omitempty"`

	// (Output)
	// Column precision.
	Precision *float64 `json:"precision,omitempty" tf:"precision,omitempty"`

	// Whether or not the column represents a primary key.
	PrimaryKey *bool `json:"primaryKey,omitempty" tf:"primary_key,omitempty"`

	// (Output)
	// Column scale.
	Scale *float64 `json:"scale,omitempty" tf:"scale,omitempty"`
}

type ColumnsParameters struct {

	// Column name.
	// +kubebuilder:validation:Optional
	Column *string `json:"column,omitempty" tf:"column,omitempty"`

	// The PostgreSQL data type. Full data types list can be found here:
	// https://www.postgresql.org/docs/current/datatype.html
	// +kubebuilder:validation:Optional
	DataType *string `json:"dataType,omitempty" tf:"data_type,omitempty"`
}

type DatasetTemplateInitParameters struct {

	// If supplied, every created dataset will have its name prefixed by the provided value.
	// The prefix and name will be separated by an underscore. i.e. _.
	DatasetIDPrefix *string `json:"datasetIdPrefix,omitempty" tf:"dataset_id_prefix,omitempty"`

	// Describes the Cloud KMS encryption key that will be used to protect destination BigQuery
	// table. The BigQuery Service Account associated with your project requires access to this
	// encryption key. i.e. projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{cryptoKey}.
	// See https://cloud.google.com/bigquery/docs/customer-managed-encryption for more information.
	KMSKeyName *string `json:"kmsKeyName,omitempty" tf:"kms_key_name,omitempty"`
}

type DatasetTemplateObservation struct {

	// If supplied, every created dataset will have its name prefixed by the provided value.
	// The prefix and name will be separated by an underscore. i.e. _.
	DatasetIDPrefix *string `json:"datasetIdPrefix,omitempty" tf:"dataset_id_prefix,omitempty"`

	// Describes the Cloud KMS encryption key that will be used to protect destination BigQuery
	// table. The BigQuery Service Account associated with your project requires access to this
	// encryption key. i.e. projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{cryptoKey}.
	// See https://cloud.google.com/bigquery/docs/customer-managed-encryption for more information.
	KMSKeyName *string `json:"kmsKeyName,omitempty" tf:"kms_key_name,omitempty"`

	// The geographic location where the dataset should reside.
	// See https://cloud.google.com/bigquery/docs/locations for supported locations.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`
}

type DatasetTemplateParameters struct {

	// If supplied, every created dataset will have its name prefixed by the provided value.
	// The prefix and name will be separated by an underscore. i.e. _.
	// +kubebuilder:validation:Optional
	DatasetIDPrefix *string `json:"datasetIdPrefix,omitempty" tf:"dataset_id_prefix,omitempty"`

	// Describes the Cloud KMS encryption key that will be used to protect destination BigQuery
	// table. The BigQuery Service Account associated with your project requires access to this
	// encryption key. i.e. projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{cryptoKey}.
	// See https://cloud.google.com/bigquery/docs/customer-managed-encryption for more information.
	// +kubebuilder:validation:Optional
	KMSKeyName *string `json:"kmsKeyName,omitempty" tf:"kms_key_name,omitempty"`

	// The geographic location where the dataset should reside.
	// See https://cloud.google.com/bigquery/docs/locations for supported locations.
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`
}

type DestinationConfigInitParameters struct {

	// A configuration for how data should be loaded to Google BigQuery.
	// Structure is documented below.
	BigqueryDestinationConfig *BigqueryDestinationConfigInitParameters `json:"bigqueryDestinationConfig,omitempty" tf:"bigquery_destination_config,omitempty"`

	// Destination connection profile resource. Format: projects/{project}/locations/{location}/connectionProfiles/{name}
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/cluster/datastream/v1beta2.ConnectionProfile
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	DestinationConnectionProfile *string `json:"destinationConnectionProfile,omitempty" tf:"destination_connection_profile,omitempty"`

	// Reference to a ConnectionProfile in datastream to populate destinationConnectionProfile.
	// +kubebuilder:validation:Optional
	DestinationConnectionProfileRef *v1.Reference `json:"destinationConnectionProfileRef,omitempty" tf:"-"`

	// Selector for a ConnectionProfile in datastream to populate destinationConnectionProfile.
	// +kubebuilder:validation:Optional
	DestinationConnectionProfileSelector *v1.Selector `json:"destinationConnectionProfileSelector,omitempty" tf:"-"`

	// A configuration for how data should be loaded to Cloud Storage.
	// Structure is documented below.
	GcsDestinationConfig *GcsDestinationConfigInitParameters `json:"gcsDestinationConfig,omitempty" tf:"gcs_destination_config,omitempty"`
}

type DestinationConfigObservation struct {

	// A configuration for how data should be loaded to Google BigQuery.
	// Structure is documented below.
	BigqueryDestinationConfig *BigqueryDestinationConfigObservation `json:"bigqueryDestinationConfig,omitempty" tf:"bigquery_destination_config,omitempty"`

	// Destination connection profile resource. Format: projects/{project}/locations/{location}/connectionProfiles/{name}
	DestinationConnectionProfile *string `json:"destinationConnectionProfile,omitempty" tf:"destination_connection_profile,omitempty"`

	// A configuration for how data should be loaded to Cloud Storage.
	// Structure is documented below.
	GcsDestinationConfig *GcsDestinationConfigObservation `json:"gcsDestinationConfig,omitempty" tf:"gcs_destination_config,omitempty"`
}

type DestinationConfigParameters struct {

	// A configuration for how data should be loaded to Google BigQuery.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	BigqueryDestinationConfig *BigqueryDestinationConfigParameters `json:"bigqueryDestinationConfig,omitempty" tf:"bigquery_destination_config,omitempty"`

	// Destination connection profile resource. Format: projects/{project}/locations/{location}/connectionProfiles/{name}
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/cluster/datastream/v1beta2.ConnectionProfile
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	DestinationConnectionProfile *string `json:"destinationConnectionProfile,omitempty" tf:"destination_connection_profile,omitempty"`

	// Reference to a ConnectionProfile in datastream to populate destinationConnectionProfile.
	// +kubebuilder:validation:Optional
	DestinationConnectionProfileRef *v1.Reference `json:"destinationConnectionProfileRef,omitempty" tf:"-"`

	// Selector for a ConnectionProfile in datastream to populate destinationConnectionProfile.
	// +kubebuilder:validation:Optional
	DestinationConnectionProfileSelector *v1.Selector `json:"destinationConnectionProfileSelector,omitempty" tf:"-"`

	// A configuration for how data should be loaded to Cloud Storage.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	GcsDestinationConfig *GcsDestinationConfigParameters `json:"gcsDestinationConfig,omitempty" tf:"gcs_destination_config,omitempty"`
}

type DropLargeObjectsInitParameters struct {
}

type DropLargeObjectsObservation struct {
}

type DropLargeObjectsParameters struct {
}

type ExcludeObjectsInitParameters struct {

	// MySQL databases on the server
	// Structure is documented below.
	MySQLDatabases []ExcludeObjectsMySQLDatabasesInitParameters `json:"mysqlDatabases,omitempty" tf:"mysql_databases,omitempty"`
}

type ExcludeObjectsMySQLDatabasesInitParameters struct {

	// Database name.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Tables in the database.
	// Structure is documented below.
	MySQLTables []MySQLDatabasesMySQLTablesInitParameters `json:"mysqlTables,omitempty" tf:"mysql_tables,omitempty"`
}

type ExcludeObjectsMySQLDatabasesObservation struct {

	// Database name.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Tables in the database.
	// Structure is documented below.
	MySQLTables []MySQLDatabasesMySQLTablesObservation `json:"mysqlTables,omitempty" tf:"mysql_tables,omitempty"`
}

type ExcludeObjectsMySQLDatabasesParameters struct {

	// Database name.
	// +kubebuilder:validation:Optional
	Database *string `json:"database" tf:"database,omitempty"`

	// Tables in the database.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	MySQLTables []MySQLDatabasesMySQLTablesParameters `json:"mysqlTables,omitempty" tf:"mysql_tables,omitempty"`
}

type ExcludeObjectsObjectsInitParameters struct {

	// Fields in the Salesforce object. When unspecified as part of include/exclude objects, includes/excludes everything/nothing.
	// Structure is documented below.
	Fields []ObjectsFieldsInitParameters `json:"fields,omitempty" tf:"fields,omitempty"`

	// Name of object in Salesforce Org.
	ObjectName *string `json:"objectName,omitempty" tf:"object_name,omitempty"`
}

type ExcludeObjectsObjectsObservation struct {

	// Fields in the Salesforce object. When unspecified as part of include/exclude objects, includes/excludes everything/nothing.
	// Structure is documented below.
	Fields []ObjectsFieldsObservation `json:"fields,omitempty" tf:"fields,omitempty"`

	// Name of object in Salesforce Org.
	ObjectName *string `json:"objectName,omitempty" tf:"object_name,omitempty"`
}

type ExcludeObjectsObjectsParameters struct {

	// Fields in the Salesforce object. When unspecified as part of include/exclude objects, includes/excludes everything/nothing.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Fields []ObjectsFieldsParameters `json:"fields,omitempty" tf:"fields,omitempty"`

	// Name of object in Salesforce Org.
	// +kubebuilder:validation:Optional
	ObjectName *string `json:"objectName,omitempty" tf:"object_name,omitempty"`
}

type ExcludeObjectsObservation struct {

	// MySQL databases on the server
	// Structure is documented below.
	MySQLDatabases []ExcludeObjectsMySQLDatabasesObservation `json:"mysqlDatabases,omitempty" tf:"mysql_databases,omitempty"`
}

type ExcludeObjectsOracleSchemasInitParameters struct {

	// Tables in the database.
	// Structure is documented below.
	OracleTables []OracleSchemasOracleTablesInitParameters `json:"oracleTables,omitempty" tf:"oracle_tables,omitempty"`

	// Schema name.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`
}

type ExcludeObjectsOracleSchemasObservation struct {

	// Tables in the database.
	// Structure is documented below.
	OracleTables []OracleSchemasOracleTablesObservation `json:"oracleTables,omitempty" tf:"oracle_tables,omitempty"`

	// Schema name.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`
}

type ExcludeObjectsOracleSchemasParameters struct {

	// Tables in the database.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	OracleTables []OracleSchemasOracleTablesParameters `json:"oracleTables,omitempty" tf:"oracle_tables,omitempty"`

	// Schema name.
	// +kubebuilder:validation:Optional
	Schema *string `json:"schema" tf:"schema,omitempty"`
}

type ExcludeObjectsParameters struct {

	// MySQL databases on the server
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	MySQLDatabases []ExcludeObjectsMySQLDatabasesParameters `json:"mysqlDatabases" tf:"mysql_databases,omitempty"`
}

type ExcludeObjectsPostgresqlSchemasInitParameters struct {

	// Tables in the schema.
	// Structure is documented below.
	PostgresqlTables []PostgresqlSchemasPostgresqlTablesInitParameters `json:"postgresqlTables,omitempty" tf:"postgresql_tables,omitempty"`

	// Schema name.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`
}

type ExcludeObjectsPostgresqlSchemasObservation struct {

	// Tables in the schema.
	// Structure is documented below.
	PostgresqlTables []PostgresqlSchemasPostgresqlTablesObservation `json:"postgresqlTables,omitempty" tf:"postgresql_tables,omitempty"`

	// Schema name.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`
}

type ExcludeObjectsPostgresqlSchemasParameters struct {

	// Tables in the schema.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	PostgresqlTables []PostgresqlSchemasPostgresqlTablesParameters `json:"postgresqlTables,omitempty" tf:"postgresql_tables,omitempty"`

	// Schema name.
	// +kubebuilder:validation:Optional
	Schema *string `json:"schema" tf:"schema,omitempty"`
}

type ExcludeObjectsSchemasInitParameters struct {

	// Schema name.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// Tables in the database.
	// Structure is documented below.
	Tables []SchemasTablesInitParameters `json:"tables,omitempty" tf:"tables,omitempty"`
}

type ExcludeObjectsSchemasObservation struct {

	// Schema name.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// Tables in the database.
	// Structure is documented below.
	Tables []SchemasTablesObservation `json:"tables,omitempty" tf:"tables,omitempty"`
}

type ExcludeObjectsSchemasParameters struct {

	// Schema name.
	// +kubebuilder:validation:Optional
	Schema *string `json:"schema" tf:"schema,omitempty"`

	// Tables in the database.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Tables []SchemasTablesParameters `json:"tables,omitempty" tf:"tables,omitempty"`
}

type FieldsInitParameters struct {

	// The stream's name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type FieldsObservation struct {

	// The stream's name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type FieldsParameters struct {

	// The stream's name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type GcsDestinationConfigInitParameters struct {

	// AVRO file format configuration.
	AvroFileFormat *AvroFileFormatInitParameters `json:"avroFileFormat,omitempty" tf:"avro_file_format,omitempty"`

	// The maximum duration for which new events are added before a file is closed and a new file is created.
	// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s". Defaults to 900s.
	FileRotationInterval *string `json:"fileRotationInterval,omitempty" tf:"file_rotation_interval,omitempty"`

	// The maximum file size to be saved in the bucket.
	FileRotationMb *float64 `json:"fileRotationMb,omitempty" tf:"file_rotation_mb,omitempty"`

	// JSON file format configuration.
	// Structure is documented below.
	JSONFileFormat *JSONFileFormatInitParameters `json:"jsonFileFormat,omitempty" tf:"json_file_format,omitempty"`

	// Path inside the Cloud Storage bucket to write data to.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type GcsDestinationConfigObservation struct {

	// AVRO file format configuration.
	AvroFileFormat *AvroFileFormatParameters `json:"avroFileFormat,omitempty" tf:"avro_file_format,omitempty"`

	// The maximum duration for which new events are added before a file is closed and a new file is created.
	// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s". Defaults to 900s.
	FileRotationInterval *string `json:"fileRotationInterval,omitempty" tf:"file_rotation_interval,omitempty"`

	// The maximum file size to be saved in the bucket.
	FileRotationMb *float64 `json:"fileRotationMb,omitempty" tf:"file_rotation_mb,omitempty"`

	// JSON file format configuration.
	// Structure is documented below.
	JSONFileFormat *JSONFileFormatObservation `json:"jsonFileFormat,omitempty" tf:"json_file_format,omitempty"`

	// Path inside the Cloud Storage bucket to write data to.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type GcsDestinationConfigParameters struct {

	// AVRO file format configuration.
	// +kubebuilder:validation:Optional
	AvroFileFormat *AvroFileFormatParameters `json:"avroFileFormat,omitempty" tf:"avro_file_format,omitempty"`

	// The maximum duration for which new events are added before a file is closed and a new file is created.
	// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s". Defaults to 900s.
	// +kubebuilder:validation:Optional
	FileRotationInterval *string `json:"fileRotationInterval,omitempty" tf:"file_rotation_interval,omitempty"`

	// The maximum file size to be saved in the bucket.
	// +kubebuilder:validation:Optional
	FileRotationMb *float64 `json:"fileRotationMb,omitempty" tf:"file_rotation_mb,omitempty"`

	// JSON file format configuration.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	JSONFileFormat *JSONFileFormatParameters `json:"jsonFileFormat,omitempty" tf:"json_file_format,omitempty"`

	// Path inside the Cloud Storage bucket to write data to.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type GtidInitParameters struct {
}

type GtidObservation struct {
}

type GtidParameters struct {
}

type IncludeObjectsInitParameters struct {

	// MySQL databases on the server
	// Structure is documented below.
	MySQLDatabases []IncludeObjectsMySQLDatabasesInitParameters `json:"mysqlDatabases,omitempty" tf:"mysql_databases,omitempty"`
}

type IncludeObjectsMySQLDatabasesInitParameters struct {

	// Database name.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Tables in the database.
	// Structure is documented below.
	MySQLTables []IncludeObjectsMySQLDatabasesMySQLTablesInitParameters `json:"mysqlTables,omitempty" tf:"mysql_tables,omitempty"`
}

type IncludeObjectsMySQLDatabasesMySQLTablesInitParameters struct {

	// MySQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	MySQLColumns []MySQLDatabasesMySQLTablesMySQLColumnsInitParameters `json:"mysqlColumns,omitempty" tf:"mysql_columns,omitempty"`

	// Table name.
	Table *string `json:"table,omitempty" tf:"table,omitempty"`
}

type IncludeObjectsMySQLDatabasesMySQLTablesObservation struct {

	// MySQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	MySQLColumns []MySQLDatabasesMySQLTablesMySQLColumnsObservation `json:"mysqlColumns,omitempty" tf:"mysql_columns,omitempty"`

	// Table name.
	Table *string `json:"table,omitempty" tf:"table,omitempty"`
}

type IncludeObjectsMySQLDatabasesMySQLTablesParameters struct {

	// MySQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	MySQLColumns []MySQLDatabasesMySQLTablesMySQLColumnsParameters `json:"mysqlColumns,omitempty" tf:"mysql_columns,omitempty"`

	// Table name.
	// +kubebuilder:validation:Optional
	Table *string `json:"table" tf:"table,omitempty"`
}

type IncludeObjectsMySQLDatabasesObservation struct {

	// Database name.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Tables in the database.
	// Structure is documented below.
	MySQLTables []IncludeObjectsMySQLDatabasesMySQLTablesObservation `json:"mysqlTables,omitempty" tf:"mysql_tables,omitempty"`
}

type IncludeObjectsMySQLDatabasesParameters struct {

	// Database name.
	// +kubebuilder:validation:Optional
	Database *string `json:"database" tf:"database,omitempty"`

	// Tables in the database.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	MySQLTables []IncludeObjectsMySQLDatabasesMySQLTablesParameters `json:"mysqlTables,omitempty" tf:"mysql_tables,omitempty"`
}

type IncludeObjectsObjectsFieldsInitParameters struct {

	// The stream's name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type IncludeObjectsObjectsFieldsObservation struct {

	// The stream's name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type IncludeObjectsObjectsFieldsParameters struct {

	// The stream's name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type IncludeObjectsObjectsInitParameters struct {

	// Fields in the Salesforce object. When unspecified as part of include/exclude objects, includes/excludes everything/nothing.
	// Structure is documented below.
	Fields []IncludeObjectsObjectsFieldsInitParameters `json:"fields,omitempty" tf:"fields,omitempty"`

	// Name of object in Salesforce Org.
	ObjectName *string `json:"objectName,omitempty" tf:"object_name,omitempty"`
}

type IncludeObjectsObjectsObservation struct {

	// Fields in the Salesforce object. When unspecified as part of include/exclude objects, includes/excludes everything/nothing.
	// Structure is documented below.
	Fields []IncludeObjectsObjectsFieldsObservation `json:"fields,omitempty" tf:"fields,omitempty"`

	// Name of object in Salesforce Org.
	ObjectName *string `json:"objectName,omitempty" tf:"object_name,omitempty"`
}

type IncludeObjectsObjectsParameters struct {

	// Fields in the Salesforce object. When unspecified as part of include/exclude objects, includes/excludes everything/nothing.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Fields []IncludeObjectsObjectsFieldsParameters `json:"fields,omitempty" tf:"fields,omitempty"`

	// Name of object in Salesforce Org.
	// +kubebuilder:validation:Optional
	ObjectName *string `json:"objectName,omitempty" tf:"object_name,omitempty"`
}

type IncludeObjectsObservation struct {

	// MySQL databases on the server
	// Structure is documented below.
	MySQLDatabases []IncludeObjectsMySQLDatabasesObservation `json:"mysqlDatabases,omitempty" tf:"mysql_databases,omitempty"`
}

type IncludeObjectsOracleSchemasInitParameters struct {

	// Tables in the database.
	// Structure is documented below.
	OracleTables []IncludeObjectsOracleSchemasOracleTablesInitParameters `json:"oracleTables,omitempty" tf:"oracle_tables,omitempty"`

	// Schema name.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`
}

type IncludeObjectsOracleSchemasObservation struct {

	// Tables in the database.
	// Structure is documented below.
	OracleTables []IncludeObjectsOracleSchemasOracleTablesObservation `json:"oracleTables,omitempty" tf:"oracle_tables,omitempty"`

	// Schema name.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`
}

type IncludeObjectsOracleSchemasOracleTablesInitParameters struct {

	// Oracle columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	OracleColumns []OracleSchemasOracleTablesOracleColumnsInitParameters `json:"oracleColumns,omitempty" tf:"oracle_columns,omitempty"`

	// Table name.
	Table *string `json:"table,omitempty" tf:"table,omitempty"`
}

type IncludeObjectsOracleSchemasOracleTablesObservation struct {

	// Oracle columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	OracleColumns []OracleSchemasOracleTablesOracleColumnsObservation `json:"oracleColumns,omitempty" tf:"oracle_columns,omitempty"`

	// Table name.
	Table *string `json:"table,omitempty" tf:"table,omitempty"`
}

type IncludeObjectsOracleSchemasOracleTablesParameters struct {

	// Oracle columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	OracleColumns []OracleSchemasOracleTablesOracleColumnsParameters `json:"oracleColumns,omitempty" tf:"oracle_columns,omitempty"`

	// Table name.
	// +kubebuilder:validation:Optional
	Table *string `json:"table" tf:"table,omitempty"`
}

type IncludeObjectsOracleSchemasParameters struct {

	// Tables in the database.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	OracleTables []IncludeObjectsOracleSchemasOracleTablesParameters `json:"oracleTables,omitempty" tf:"oracle_tables,omitempty"`

	// Schema name.
	// +kubebuilder:validation:Optional
	Schema *string `json:"schema" tf:"schema,omitempty"`
}

type IncludeObjectsParameters struct {

	// MySQL databases on the server
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	MySQLDatabases []IncludeObjectsMySQLDatabasesParameters `json:"mysqlDatabases" tf:"mysql_databases,omitempty"`
}

type IncludeObjectsPostgresqlSchemasInitParameters struct {

	// Tables in the schema.
	// Structure is documented below.
	PostgresqlTables []IncludeObjectsPostgresqlSchemasPostgresqlTablesInitParameters `json:"postgresqlTables,omitempty" tf:"postgresql_tables,omitempty"`

	// Schema name.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`
}

type IncludeObjectsPostgresqlSchemasObservation struct {

	// Tables in the schema.
	// Structure is documented below.
	PostgresqlTables []IncludeObjectsPostgresqlSchemasPostgresqlTablesObservation `json:"postgresqlTables,omitempty" tf:"postgresql_tables,omitempty"`

	// Schema name.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`
}

type IncludeObjectsPostgresqlSchemasParameters struct {

	// Tables in the schema.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	PostgresqlTables []IncludeObjectsPostgresqlSchemasPostgresqlTablesParameters `json:"postgresqlTables,omitempty" tf:"postgresql_tables,omitempty"`

	// Schema name.
	// +kubebuilder:validation:Optional
	Schema *string `json:"schema" tf:"schema,omitempty"`
}

type IncludeObjectsPostgresqlSchemasPostgresqlTablesInitParameters struct {

	// PostgreSQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	PostgresqlColumns []PostgresqlSchemasPostgresqlTablesPostgresqlColumnsInitParameters `json:"postgresqlColumns,omitempty" tf:"postgresql_columns,omitempty"`

	// Table name.
	Table *string `json:"table,omitempty" tf:"table,omitempty"`
}

type IncludeObjectsPostgresqlSchemasPostgresqlTablesObservation struct {

	// PostgreSQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	PostgresqlColumns []PostgresqlSchemasPostgresqlTablesPostgresqlColumnsObservation `json:"postgresqlColumns,omitempty" tf:"postgresql_columns,omitempty"`

	// Table name.
	Table *string `json:"table,omitempty" tf:"table,omitempty"`
}

type IncludeObjectsPostgresqlSchemasPostgresqlTablesParameters struct {

	// PostgreSQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	PostgresqlColumns []PostgresqlSchemasPostgresqlTablesPostgresqlColumnsParameters `json:"postgresqlColumns,omitempty" tf:"postgresql_columns,omitempty"`

	// Table name.
	// +kubebuilder:validation:Optional
	Table *string `json:"table" tf:"table,omitempty"`
}

type IncludeObjectsSchemasInitParameters struct {

	// Schema name.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// Tables in the database.
	// Structure is documented below.
	Tables []IncludeObjectsSchemasTablesInitParameters `json:"tables,omitempty" tf:"tables,omitempty"`
}

type IncludeObjectsSchemasObservation struct {

	// Schema name.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// Tables in the database.
	// Structure is documented below.
	Tables []IncludeObjectsSchemasTablesObservation `json:"tables,omitempty" tf:"tables,omitempty"`
}

type IncludeObjectsSchemasParameters struct {

	// Schema name.
	// +kubebuilder:validation:Optional
	Schema *string `json:"schema" tf:"schema,omitempty"`

	// Tables in the database.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Tables []IncludeObjectsSchemasTablesParameters `json:"tables,omitempty" tf:"tables,omitempty"`
}

type IncludeObjectsSchemasTablesInitParameters struct {

	// SQL Server columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	Columns []SchemasTablesColumnsInitParameters `json:"columns,omitempty" tf:"columns,omitempty"`

	// Table name.
	Table *string `json:"table,omitempty" tf:"table,omitempty"`
}

type IncludeObjectsSchemasTablesObservation struct {

	// SQL Server columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	Columns []SchemasTablesColumnsObservation `json:"columns,omitempty" tf:"columns,omitempty"`

	// Table name.
	Table *string `json:"table,omitempty" tf:"table,omitempty"`
}

type IncludeObjectsSchemasTablesParameters struct {

	// SQL Server columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Columns []SchemasTablesColumnsParameters `json:"columns,omitempty" tf:"columns,omitempty"`

	// Table name.
	// +kubebuilder:validation:Optional
	Table *string `json:"table" tf:"table,omitempty"`
}

type JSONFileFormatInitParameters struct {

	// Compression of the loaded JSON file.
	// Possible values are: NO_COMPRESSION, GZIP.
	Compression *string `json:"compression,omitempty" tf:"compression,omitempty"`

	// The schema file format along JSON data files.
	// Possible values are: NO_SCHEMA_FILE, AVRO_SCHEMA_FILE.
	SchemaFileFormat *string `json:"schemaFileFormat,omitempty" tf:"schema_file_format,omitempty"`
}

type JSONFileFormatObservation struct {

	// Compression of the loaded JSON file.
	// Possible values are: NO_COMPRESSION, GZIP.
	Compression *string `json:"compression,omitempty" tf:"compression,omitempty"`

	// The schema file format along JSON data files.
	// Possible values are: NO_SCHEMA_FILE, AVRO_SCHEMA_FILE.
	SchemaFileFormat *string `json:"schemaFileFormat,omitempty" tf:"schema_file_format,omitempty"`
}

type JSONFileFormatParameters struct {

	// Compression of the loaded JSON file.
	// Possible values are: NO_COMPRESSION, GZIP.
	// +kubebuilder:validation:Optional
	Compression *string `json:"compression,omitempty" tf:"compression,omitempty"`

	// The schema file format along JSON data files.
	// Possible values are: NO_SCHEMA_FILE, AVRO_SCHEMA_FILE.
	// +kubebuilder:validation:Optional
	SchemaFileFormat *string `json:"schemaFileFormat,omitempty" tf:"schema_file_format,omitempty"`
}

type MergeInitParameters struct {
}

type MergeObservation struct {
}

type MergeParameters struct {
}

type MySQLColumnsInitParameters struct {

	// Column collation.
	Collation *string `json:"collation,omitempty" tf:"collation,omitempty"`

	// Column name.
	Column *string `json:"column,omitempty" tf:"column,omitempty"`

	// The PostgreSQL data type. Full data types list can be found here:
	// https://www.postgresql.org/docs/current/datatype.html
	DataType *string `json:"dataType,omitempty" tf:"data_type,omitempty"`

	// Whether or not the column can accept a null value.
	Nullable *bool `json:"nullable,omitempty" tf:"nullable,omitempty"`

	// The ordinal position of the column in the table.
	OrdinalPosition *float64 `json:"ordinalPosition,omitempty" tf:"ordinal_position,omitempty"`

	// Whether or not the column represents a primary key.
	PrimaryKey *bool `json:"primaryKey,omitempty" tf:"primary_key,omitempty"`
}

type MySQLColumnsObservation struct {

	// Column collation.
	Collation *string `json:"collation,omitempty" tf:"collation,omitempty"`

	// Column name.
	Column *string `json:"column,omitempty" tf:"column,omitempty"`

	// The PostgreSQL data type. Full data types list can be found here:
	// https://www.postgresql.org/docs/current/datatype.html
	DataType *string `json:"dataType,omitempty" tf:"data_type,omitempty"`

	// (Output)
	// Column length.
	Length *float64 `json:"length,omitempty" tf:"length,omitempty"`

	// Whether or not the column can accept a null value.
	Nullable *bool `json:"nullable,omitempty" tf:"nullable,omitempty"`

	// The ordinal position of the column in the table.
	OrdinalPosition *float64 `json:"ordinalPosition,omitempty" tf:"ordinal_position,omitempty"`

	// Whether or not the column represents a primary key.
	PrimaryKey *bool `json:"primaryKey,omitempty" tf:"primary_key,omitempty"`
}

type MySQLColumnsParameters struct {

	// Column collation.
	// +kubebuilder:validation:Optional
	Collation *string `json:"collation,omitempty" tf:"collation,omitempty"`

	// Column name.
	// +kubebuilder:validation:Optional
	Column *string `json:"column,omitempty" tf:"column,omitempty"`

	// The PostgreSQL data type. Full data types list can be found here:
	// https://www.postgresql.org/docs/current/datatype.html
	// +kubebuilder:validation:Optional
	DataType *string `json:"dataType,omitempty" tf:"data_type,omitempty"`

	// Whether or not the column can accept a null value.
	// +kubebuilder:validation:Optional
	Nullable *bool `json:"nullable,omitempty" tf:"nullable,omitempty"`

	// The ordinal position of the column in the table.
	// +kubebuilder:validation:Optional
	OrdinalPosition *float64 `json:"ordinalPosition,omitempty" tf:"ordinal_position,omitempty"`

	// Whether or not the column represents a primary key.
	// +kubebuilder:validation:Optional
	PrimaryKey *bool `json:"primaryKey,omitempty" tf:"primary_key,omitempty"`
}

type MySQLDatabasesInitParameters struct {

	// Database name.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Tables in the database.
	// Structure is documented below.
	MySQLTables []MySQLTablesInitParameters `json:"mysqlTables,omitempty" tf:"mysql_tables,omitempty"`
}

type MySQLDatabasesMySQLTablesInitParameters struct {

	// MySQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	MySQLColumns []MySQLTablesMySQLColumnsInitParameters `json:"mysqlColumns,omitempty" tf:"mysql_columns,omitempty"`

	// Table name.
	Table *string `json:"table,omitempty" tf:"table,omitempty"`
}

type MySQLDatabasesMySQLTablesMySQLColumnsInitParameters struct {

	// Column collation.
	Collation *string `json:"collation,omitempty" tf:"collation,omitempty"`

	// Column name.
	Column *string `json:"column,omitempty" tf:"column,omitempty"`

	// The PostgreSQL data type. Full data types list can be found here:
	// https://www.postgresql.org/docs/current/datatype.html
	DataType *string `json:"dataType,omitempty" tf:"data_type,omitempty"`

	// Whether or not the column can accept a null value.
	Nullable *bool `json:"nullable,omitempty" tf:"nullable,omitempty"`

	// The ordinal position of the column in the table.
	OrdinalPosition *float64 `json:"ordinalPosition,omitempty" tf:"ordinal_position,omitempty"`

	// Whether or not the column represents a primary key.
	PrimaryKey *bool `json:"primaryKey,omitempty" tf:"primary_key,omitempty"`
}

type MySQLDatabasesMySQLTablesMySQLColumnsObservation struct {

	// Column collation.
	Collation *string `json:"collation,omitempty" tf:"collation,omitempty"`

	// Column name.
	Column *string `json:"column,omitempty" tf:"column,omitempty"`

	// The PostgreSQL data type. Full data types list can be found here:
	// https://www.postgresql.org/docs/current/datatype.html
	DataType *string `json:"dataType,omitempty" tf:"data_type,omitempty"`

	// (Output)
	// Column length.
	Length *float64 `json:"length,omitempty" tf:"length,omitempty"`

	// Whether or not the column can accept a null value.
	Nullable *bool `json:"nullable,omitempty" tf:"nullable,omitempty"`

	// The ordinal position of the column in the table.
	OrdinalPosition *float64 `json:"ordinalPosition,omitempty" tf:"ordinal_position,omitempty"`

	// Whether or not the column represents a primary key.
	PrimaryKey *bool `json:"primaryKey,omitempty" tf:"primary_key,omitempty"`
}

type MySQLDatabasesMySQLTablesMySQLColumnsParameters struct {

	// Column collation.
	// +kubebuilder:validation:Optional
	Collation *string `json:"collation,omitempty" tf:"collation,omitempty"`

	// Column name.
	// +kubebuilder:validation:Optional
	Column *string `json:"column,omitempty" tf:"column,omitempty"`

	// The PostgreSQL data type. Full data types list can be found here:
	// https://www.postgresql.org/docs/current/datatype.html
	// +kubebuilder:validation:Optional
	DataType *string `json:"dataType,omitempty" tf:"data_type,omitempty"`

	// Whether or not the column can accept a null value.
	// +kubebuilder:validation:Optional
	Nullable *bool `json:"nullable,omitempty" tf:"nullable,omitempty"`

	// The ordinal position of the column in the table.
	// +kubebuilder:validation:Optional
	OrdinalPosition *float64 `json:"ordinalPosition,omitempty" tf:"ordinal_position,omitempty"`

	// Whether or not the column represents a primary key.
	// +kubebuilder:validation:Optional
	PrimaryKey *bool `json:"primaryKey,omitempty" tf:"primary_key,omitempty"`
}

type MySQLDatabasesMySQLTablesObservation struct {

	// MySQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	MySQLColumns []MySQLTablesMySQLColumnsObservation `json:"mysqlColumns,omitempty" tf:"mysql_columns,omitempty"`

	// Table name.
	Table *string `json:"table,omitempty" tf:"table,omitempty"`
}

type MySQLDatabasesMySQLTablesParameters struct {

	// MySQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	MySQLColumns []MySQLTablesMySQLColumnsParameters `json:"mysqlColumns,omitempty" tf:"mysql_columns,omitempty"`

	// Table name.
	// +kubebuilder:validation:Optional
	Table *string `json:"table" tf:"table,omitempty"`
}

type MySQLDatabasesObservation struct {

	// Database name.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Tables in the database.
	// Structure is documented below.
	MySQLTables []MySQLTablesObservation `json:"mysqlTables,omitempty" tf:"mysql_tables,omitempty"`
}

type MySQLDatabasesParameters struct {

	// Database name.
	// +kubebuilder:validation:Optional
	Database *string `json:"database" tf:"database,omitempty"`

	// Tables in the database.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	MySQLTables []MySQLTablesParameters `json:"mysqlTables,omitempty" tf:"mysql_tables,omitempty"`
}

type MySQLExcludedObjectsInitParameters struct {

	// MySQL databases on the server
	// Structure is documented below.
	MySQLDatabases []MySQLDatabasesInitParameters `json:"mysqlDatabases,omitempty" tf:"mysql_databases,omitempty"`
}

type MySQLExcludedObjectsObservation struct {

	// MySQL databases on the server
	// Structure is documented below.
	MySQLDatabases []MySQLDatabasesObservation `json:"mysqlDatabases,omitempty" tf:"mysql_databases,omitempty"`
}

type MySQLExcludedObjectsParameters struct {

	// MySQL databases on the server
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	MySQLDatabases []MySQLDatabasesParameters `json:"mysqlDatabases" tf:"mysql_databases,omitempty"`
}

type MySQLSourceConfigInitParameters struct {

	// CDC reader reads from binary logs replication cdc method.
	BinaryLogPosition *BinaryLogPositionInitParameters `json:"binaryLogPosition,omitempty" tf:"binary_log_position,omitempty"`

	// SQL Server objects to exclude from the stream.
	// Structure is documented below.
	ExcludeObjects *ExcludeObjectsInitParameters `json:"excludeObjects,omitempty" tf:"exclude_objects,omitempty"`

	// CDC reader reads from gtid based replication.
	Gtid *GtidInitParameters `json:"gtid,omitempty" tf:"gtid,omitempty"`

	// SQL Server objects to retrieve from the source.
	// Structure is documented below.
	IncludeObjects *IncludeObjectsInitParameters `json:"includeObjects,omitempty" tf:"include_objects,omitempty"`

	// Max concurrent backfill tasks.
	MaxConcurrentBackfillTasks *float64 `json:"maxConcurrentBackfillTasks,omitempty" tf:"max_concurrent_backfill_tasks,omitempty"`

	// Max concurrent CDC tasks.
	MaxConcurrentCdcTasks *float64 `json:"maxConcurrentCdcTasks,omitempty" tf:"max_concurrent_cdc_tasks,omitempty"`
}

type MySQLSourceConfigObservation struct {

	// CDC reader reads from binary logs replication cdc method.
	BinaryLogPosition *BinaryLogPositionParameters `json:"binaryLogPosition,omitempty" tf:"binary_log_position,omitempty"`

	// SQL Server objects to exclude from the stream.
	// Structure is documented below.
	ExcludeObjects *ExcludeObjectsObservation `json:"excludeObjects,omitempty" tf:"exclude_objects,omitempty"`

	// CDC reader reads from gtid based replication.
	Gtid *GtidParameters `json:"gtid,omitempty" tf:"gtid,omitempty"`

	// SQL Server objects to retrieve from the source.
	// Structure is documented below.
	IncludeObjects *IncludeObjectsObservation `json:"includeObjects,omitempty" tf:"include_objects,omitempty"`

	// Max concurrent backfill tasks.
	MaxConcurrentBackfillTasks *float64 `json:"maxConcurrentBackfillTasks,omitempty" tf:"max_concurrent_backfill_tasks,omitempty"`

	// Max concurrent CDC tasks.
	MaxConcurrentCdcTasks *float64 `json:"maxConcurrentCdcTasks,omitempty" tf:"max_concurrent_cdc_tasks,omitempty"`
}

type MySQLSourceConfigParameters struct {

	// CDC reader reads from binary logs replication cdc method.
	// +kubebuilder:validation:Optional
	BinaryLogPosition *BinaryLogPositionParameters `json:"binaryLogPosition,omitempty" tf:"binary_log_position,omitempty"`

	// SQL Server objects to exclude from the stream.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	ExcludeObjects *ExcludeObjectsParameters `json:"excludeObjects,omitempty" tf:"exclude_objects,omitempty"`

	// CDC reader reads from gtid based replication.
	// +kubebuilder:validation:Optional
	Gtid *GtidParameters `json:"gtid,omitempty" tf:"gtid,omitempty"`

	// SQL Server objects to retrieve from the source.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	IncludeObjects *IncludeObjectsParameters `json:"includeObjects,omitempty" tf:"include_objects,omitempty"`

	// Max concurrent backfill tasks.
	// +kubebuilder:validation:Optional
	MaxConcurrentBackfillTasks *float64 `json:"maxConcurrentBackfillTasks,omitempty" tf:"max_concurrent_backfill_tasks,omitempty"`

	// Max concurrent CDC tasks.
	// +kubebuilder:validation:Optional
	MaxConcurrentCdcTasks *float64 `json:"maxConcurrentCdcTasks,omitempty" tf:"max_concurrent_cdc_tasks,omitempty"`
}

type MySQLTablesInitParameters struct {

	// MySQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	MySQLColumns []MySQLColumnsInitParameters `json:"mysqlColumns,omitempty" tf:"mysql_columns,omitempty"`

	// Table name.
	Table *string `json:"table,omitempty" tf:"table,omitempty"`
}

type MySQLTablesMySQLColumnsInitParameters struct {

	// Column collation.
	Collation *string `json:"collation,omitempty" tf:"collation,omitempty"`

	// Column name.
	Column *string `json:"column,omitempty" tf:"column,omitempty"`

	// The PostgreSQL data type. Full data types list can be found here:
	// https://www.postgresql.org/docs/current/datatype.html
	DataType *string `json:"dataType,omitempty" tf:"data_type,omitempty"`

	// Whether or not the column can accept a null value.
	Nullable *bool `json:"nullable,omitempty" tf:"nullable,omitempty"`

	// The ordinal position of the column in the table.
	OrdinalPosition *float64 `json:"ordinalPosition,omitempty" tf:"ordinal_position,omitempty"`

	// Whether or not the column represents a primary key.
	PrimaryKey *bool `json:"primaryKey,omitempty" tf:"primary_key,omitempty"`
}

type MySQLTablesMySQLColumnsObservation struct {

	// Column collation.
	Collation *string `json:"collation,omitempty" tf:"collation,omitempty"`

	// Column name.
	Column *string `json:"column,omitempty" tf:"column,omitempty"`

	// The PostgreSQL data type. Full data types list can be found here:
	// https://www.postgresql.org/docs/current/datatype.html
	DataType *string `json:"dataType,omitempty" tf:"data_type,omitempty"`

	// (Output)
	// Column length.
	Length *float64 `json:"length,omitempty" tf:"length,omitempty"`

	// Whether or not the column can accept a null value.
	Nullable *bool `json:"nullable,omitempty" tf:"nullable,omitempty"`

	// The ordinal position of the column in the table.
	OrdinalPosition *float64 `json:"ordinalPosition,omitempty" tf:"ordinal_position,omitempty"`

	// Whether or not the column represents a primary key.
	PrimaryKey *bool `json:"primaryKey,omitempty" tf:"primary_key,omitempty"`
}

type MySQLTablesMySQLColumnsParameters struct {

	// Column collation.
	// +kubebuilder:validation:Optional
	Collation *string `json:"collation,omitempty" tf:"collation,omitempty"`

	// Column name.
	// +kubebuilder:validation:Optional
	Column *string `json:"column,omitempty" tf:"column,omitempty"`

	// The PostgreSQL data type. Full data types list can be found here:
	// https://www.postgresql.org/docs/current/datatype.html
	// +kubebuilder:validation:Optional
	DataType *string `json:"dataType,omitempty" tf:"data_type,omitempty"`

	// Whether or not the column can accept a null value.
	// +kubebuilder:validation:Optional
	Nullable *bool `json:"nullable,omitempty" tf:"nullable,omitempty"`

	// The ordinal position of the column in the table.
	// +kubebuilder:validation:Optional
	OrdinalPosition *float64 `json:"ordinalPosition,omitempty" tf:"ordinal_position,omitempty"`

	// Whether or not the column represents a primary key.
	// +kubebuilder:validation:Optional
	PrimaryKey *bool `json:"primaryKey,omitempty" tf:"primary_key,omitempty"`
}

type MySQLTablesObservation struct {

	// MySQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	MySQLColumns []MySQLColumnsObservation `json:"mysqlColumns,omitempty" tf:"mysql_columns,omitempty"`

	// Table name.
	Table *string `json:"table,omitempty" tf:"table,omitempty"`
}

type MySQLTablesParameters struct {

	// MySQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	MySQLColumns []MySQLColumnsParameters `json:"mysqlColumns,omitempty" tf:"mysql_columns,omitempty"`

	// Table name.
	// +kubebuilder:validation:Optional
	Table *string `json:"table" tf:"table,omitempty"`
}

type ObjectsFieldsInitParameters struct {

	// The stream's name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ObjectsFieldsObservation struct {

	// The stream's name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ObjectsFieldsParameters struct {

	// The stream's name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ObjectsInitParameters struct {

	// Fields in the Salesforce object. When unspecified as part of include/exclude objects, includes/excludes everything/nothing.
	// Structure is documented below.
	Fields []FieldsInitParameters `json:"fields,omitempty" tf:"fields,omitempty"`

	// Name of object in Salesforce Org.
	ObjectName *string `json:"objectName,omitempty" tf:"object_name,omitempty"`
}

type ObjectsObservation struct {

	// Fields in the Salesforce object. When unspecified as part of include/exclude objects, includes/excludes everything/nothing.
	// Structure is documented below.
	Fields []FieldsObservation `json:"fields,omitempty" tf:"fields,omitempty"`

	// Name of object in Salesforce Org.
	ObjectName *string `json:"objectName,omitempty" tf:"object_name,omitempty"`
}

type ObjectsParameters struct {

	// Fields in the Salesforce object. When unspecified as part of include/exclude objects, includes/excludes everything/nothing.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Fields []FieldsParameters `json:"fields,omitempty" tf:"fields,omitempty"`

	// Name of object in Salesforce Org.
	// +kubebuilder:validation:Optional
	ObjectName *string `json:"objectName,omitempty" tf:"object_name,omitempty"`
}

type OracleColumnsInitParameters struct {

	// Column name.
	Column *string `json:"column,omitempty" tf:"column,omitempty"`

	// The PostgreSQL data type. Full data types list can be found here:
	// https://www.postgresql.org/docs/current/datatype.html
	DataType *string `json:"dataType,omitempty" tf:"data_type,omitempty"`
}

type OracleColumnsObservation struct {

	// Column name.
	Column *string `json:"column,omitempty" tf:"column,omitempty"`

	// The PostgreSQL data type. Full data types list can be found here:
	// https://www.postgresql.org/docs/current/datatype.html
	DataType *string `json:"dataType,omitempty" tf:"data_type,omitempty"`

	// (Output)
	// Column encoding.
	Encoding *string `json:"encoding,omitempty" tf:"encoding,omitempty"`

	// (Output)
	// Column length.
	Length *float64 `json:"length,omitempty" tf:"length,omitempty"`

	// Whether or not the column can accept a null value.
	Nullable *bool `json:"nullable,omitempty" tf:"nullable,omitempty"`

	// The ordinal position of the column in the table.
	OrdinalPosition *float64 `json:"ordinalPosition,omitempty" tf:"ordinal_position,omitempty"`

	// (Output)
	// Column precision.
	Precision *float64 `json:"precision,omitempty" tf:"precision,omitempty"`

	// Whether or not the column represents a primary key.
	PrimaryKey *bool `json:"primaryKey,omitempty" tf:"primary_key,omitempty"`

	// (Output)
	// Column scale.
	Scale *float64 `json:"scale,omitempty" tf:"scale,omitempty"`
}

type OracleColumnsParameters struct {

	// Column name.
	// +kubebuilder:validation:Optional
	Column *string `json:"column,omitempty" tf:"column,omitempty"`

	// The PostgreSQL data type. Full data types list can be found here:
	// https://www.postgresql.org/docs/current/datatype.html
	// +kubebuilder:validation:Optional
	DataType *string `json:"dataType,omitempty" tf:"data_type,omitempty"`
}

type OracleExcludedObjectsInitParameters struct {

	// Oracle schemas/databases in the database server
	// Structure is documented below.
	OracleSchemas []OracleSchemasInitParameters `json:"oracleSchemas,omitempty" tf:"oracle_schemas,omitempty"`
}

type OracleExcludedObjectsObservation struct {

	// Oracle schemas/databases in the database server
	// Structure is documented below.
	OracleSchemas []OracleSchemasObservation `json:"oracleSchemas,omitempty" tf:"oracle_schemas,omitempty"`
}

type OracleExcludedObjectsParameters struct {

	// Oracle schemas/databases in the database server
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	OracleSchemas []OracleSchemasParameters `json:"oracleSchemas" tf:"oracle_schemas,omitempty"`
}

type OracleSchemasInitParameters struct {

	// Tables in the database.
	// Structure is documented below.
	OracleTables []OracleTablesInitParameters `json:"oracleTables,omitempty" tf:"oracle_tables,omitempty"`

	// Schema name.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`
}

type OracleSchemasObservation struct {

	// Tables in the database.
	// Structure is documented below.
	OracleTables []OracleTablesObservation `json:"oracleTables,omitempty" tf:"oracle_tables,omitempty"`

	// Schema name.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`
}

type OracleSchemasOracleTablesInitParameters struct {

	// Oracle columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	OracleColumns []OracleTablesOracleColumnsInitParameters `json:"oracleColumns,omitempty" tf:"oracle_columns,omitempty"`

	// Table name.
	Table *string `json:"table,omitempty" tf:"table,omitempty"`
}

type OracleSchemasOracleTablesObservation struct {

	// Oracle columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	OracleColumns []OracleTablesOracleColumnsObservation `json:"oracleColumns,omitempty" tf:"oracle_columns,omitempty"`

	// Table name.
	Table *string `json:"table,omitempty" tf:"table,omitempty"`
}

type OracleSchemasOracleTablesOracleColumnsInitParameters struct {

	// Column name.
	Column *string `json:"column,omitempty" tf:"column,omitempty"`

	// The PostgreSQL data type. Full data types list can be found here:
	// https://www.postgresql.org/docs/current/datatype.html
	DataType *string `json:"dataType,omitempty" tf:"data_type,omitempty"`
}

type OracleSchemasOracleTablesOracleColumnsObservation struct {

	// Column name.
	Column *string `json:"column,omitempty" tf:"column,omitempty"`

	// The PostgreSQL data type. Full data types list can be found here:
	// https://www.postgresql.org/docs/current/datatype.html
	DataType *string `json:"dataType,omitempty" tf:"data_type,omitempty"`

	// (Output)
	// Column encoding.
	Encoding *string `json:"encoding,omitempty" tf:"encoding,omitempty"`

	// (Output)
	// Column length.
	Length *float64 `json:"length,omitempty" tf:"length,omitempty"`

	// Whether or not the column can accept a null value.
	Nullable *bool `json:"nullable,omitempty" tf:"nullable,omitempty"`

	// The ordinal position of the column in the table.
	OrdinalPosition *float64 `json:"ordinalPosition,omitempty" tf:"ordinal_position,omitempty"`

	// (Output)
	// Column precision.
	Precision *float64 `json:"precision,omitempty" tf:"precision,omitempty"`

	// Whether or not the column represents a primary key.
	PrimaryKey *bool `json:"primaryKey,omitempty" tf:"primary_key,omitempty"`

	// (Output)
	// Column scale.
	Scale *float64 `json:"scale,omitempty" tf:"scale,omitempty"`
}

type OracleSchemasOracleTablesOracleColumnsParameters struct {

	// Column name.
	// +kubebuilder:validation:Optional
	Column *string `json:"column,omitempty" tf:"column,omitempty"`

	// The PostgreSQL data type. Full data types list can be found here:
	// https://www.postgresql.org/docs/current/datatype.html
	// +kubebuilder:validation:Optional
	DataType *string `json:"dataType,omitempty" tf:"data_type,omitempty"`
}

type OracleSchemasOracleTablesParameters struct {

	// Oracle columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	OracleColumns []OracleTablesOracleColumnsParameters `json:"oracleColumns,omitempty" tf:"oracle_columns,omitempty"`

	// Table name.
	// +kubebuilder:validation:Optional
	Table *string `json:"table" tf:"table,omitempty"`
}

type OracleSchemasParameters struct {

	// Tables in the database.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	OracleTables []OracleTablesParameters `json:"oracleTables,omitempty" tf:"oracle_tables,omitempty"`

	// Schema name.
	// +kubebuilder:validation:Optional
	Schema *string `json:"schema" tf:"schema,omitempty"`
}

type OracleSourceConfigExcludeObjectsInitParameters struct {

	// Oracle schemas/databases in the database server
	// Structure is documented below.
	OracleSchemas []ExcludeObjectsOracleSchemasInitParameters `json:"oracleSchemas,omitempty" tf:"oracle_schemas,omitempty"`
}

type OracleSourceConfigExcludeObjectsObservation struct {

	// Oracle schemas/databases in the database server
	// Structure is documented below.
	OracleSchemas []ExcludeObjectsOracleSchemasObservation `json:"oracleSchemas,omitempty" tf:"oracle_schemas,omitempty"`
}

type OracleSourceConfigExcludeObjectsParameters struct {

	// Oracle schemas/databases in the database server
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	OracleSchemas []ExcludeObjectsOracleSchemasParameters `json:"oracleSchemas" tf:"oracle_schemas,omitempty"`
}

type OracleSourceConfigIncludeObjectsInitParameters struct {

	// Oracle schemas/databases in the database server
	// Structure is documented below.
	OracleSchemas []IncludeObjectsOracleSchemasInitParameters `json:"oracleSchemas,omitempty" tf:"oracle_schemas,omitempty"`
}

type OracleSourceConfigIncludeObjectsObservation struct {

	// Oracle schemas/databases in the database server
	// Structure is documented below.
	OracleSchemas []IncludeObjectsOracleSchemasObservation `json:"oracleSchemas,omitempty" tf:"oracle_schemas,omitempty"`
}

type OracleSourceConfigIncludeObjectsParameters struct {

	// Oracle schemas/databases in the database server
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	OracleSchemas []IncludeObjectsOracleSchemasParameters `json:"oracleSchemas" tf:"oracle_schemas,omitempty"`
}

type OracleSourceConfigInitParameters struct {

	// Configuration to drop large object values.
	DropLargeObjects *DropLargeObjectsInitParameters `json:"dropLargeObjects,omitempty" tf:"drop_large_objects,omitempty"`

	// SQL Server objects to exclude from the stream.
	// Structure is documented below.
	ExcludeObjects *OracleSourceConfigExcludeObjectsInitParameters `json:"excludeObjects,omitempty" tf:"exclude_objects,omitempty"`

	// SQL Server objects to retrieve from the source.
	// Structure is documented below.
	IncludeObjects *OracleSourceConfigIncludeObjectsInitParameters `json:"includeObjects,omitempty" tf:"include_objects,omitempty"`

	// Max concurrent backfill tasks.
	MaxConcurrentBackfillTasks *float64 `json:"maxConcurrentBackfillTasks,omitempty" tf:"max_concurrent_backfill_tasks,omitempty"`

	// Max concurrent CDC tasks.
	MaxConcurrentCdcTasks *float64 `json:"maxConcurrentCdcTasks,omitempty" tf:"max_concurrent_cdc_tasks,omitempty"`

	// Configuration to drop large object values.
	StreamLargeObjects *StreamLargeObjectsInitParameters `json:"streamLargeObjects,omitempty" tf:"stream_large_objects,omitempty"`
}

type OracleSourceConfigObservation struct {

	// Configuration to drop large object values.
	DropLargeObjects *DropLargeObjectsParameters `json:"dropLargeObjects,omitempty" tf:"drop_large_objects,omitempty"`

	// SQL Server objects to exclude from the stream.
	// Structure is documented below.
	ExcludeObjects *OracleSourceConfigExcludeObjectsObservation `json:"excludeObjects,omitempty" tf:"exclude_objects,omitempty"`

	// SQL Server objects to retrieve from the source.
	// Structure is documented below.
	IncludeObjects *OracleSourceConfigIncludeObjectsObservation `json:"includeObjects,omitempty" tf:"include_objects,omitempty"`

	// Max concurrent backfill tasks.
	MaxConcurrentBackfillTasks *float64 `json:"maxConcurrentBackfillTasks,omitempty" tf:"max_concurrent_backfill_tasks,omitempty"`

	// Max concurrent CDC tasks.
	MaxConcurrentCdcTasks *float64 `json:"maxConcurrentCdcTasks,omitempty" tf:"max_concurrent_cdc_tasks,omitempty"`

	// Configuration to drop large object values.
	StreamLargeObjects *StreamLargeObjectsParameters `json:"streamLargeObjects,omitempty" tf:"stream_large_objects,omitempty"`
}

type OracleSourceConfigParameters struct {

	// Configuration to drop large object values.
	// +kubebuilder:validation:Optional
	DropLargeObjects *DropLargeObjectsParameters `json:"dropLargeObjects,omitempty" tf:"drop_large_objects,omitempty"`

	// SQL Server objects to exclude from the stream.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	ExcludeObjects *OracleSourceConfigExcludeObjectsParameters `json:"excludeObjects,omitempty" tf:"exclude_objects,omitempty"`

	// SQL Server objects to retrieve from the source.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	IncludeObjects *OracleSourceConfigIncludeObjectsParameters `json:"includeObjects,omitempty" tf:"include_objects,omitempty"`

	// Max concurrent backfill tasks.
	// +kubebuilder:validation:Optional
	MaxConcurrentBackfillTasks *float64 `json:"maxConcurrentBackfillTasks,omitempty" tf:"max_concurrent_backfill_tasks,omitempty"`

	// Max concurrent CDC tasks.
	// +kubebuilder:validation:Optional
	MaxConcurrentCdcTasks *float64 `json:"maxConcurrentCdcTasks,omitempty" tf:"max_concurrent_cdc_tasks,omitempty"`

	// Configuration to drop large object values.
	// +kubebuilder:validation:Optional
	StreamLargeObjects *StreamLargeObjectsParameters `json:"streamLargeObjects,omitempty" tf:"stream_large_objects,omitempty"`
}

type OracleTablesInitParameters struct {

	// Oracle columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	OracleColumns []OracleColumnsInitParameters `json:"oracleColumns,omitempty" tf:"oracle_columns,omitempty"`

	// Table name.
	Table *string `json:"table,omitempty" tf:"table,omitempty"`
}

type OracleTablesObservation struct {

	// Oracle columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	OracleColumns []OracleColumnsObservation `json:"oracleColumns,omitempty" tf:"oracle_columns,omitempty"`

	// Table name.
	Table *string `json:"table,omitempty" tf:"table,omitempty"`
}

type OracleTablesOracleColumnsInitParameters struct {

	// Column name.
	Column *string `json:"column,omitempty" tf:"column,omitempty"`

	// The PostgreSQL data type. Full data types list can be found here:
	// https://www.postgresql.org/docs/current/datatype.html
	DataType *string `json:"dataType,omitempty" tf:"data_type,omitempty"`
}

type OracleTablesOracleColumnsObservation struct {

	// Column name.
	Column *string `json:"column,omitempty" tf:"column,omitempty"`

	// The PostgreSQL data type. Full data types list can be found here:
	// https://www.postgresql.org/docs/current/datatype.html
	DataType *string `json:"dataType,omitempty" tf:"data_type,omitempty"`

	// (Output)
	// Column encoding.
	Encoding *string `json:"encoding,omitempty" tf:"encoding,omitempty"`

	// (Output)
	// Column length.
	Length *float64 `json:"length,omitempty" tf:"length,omitempty"`

	// Whether or not the column can accept a null value.
	Nullable *bool `json:"nullable,omitempty" tf:"nullable,omitempty"`

	// The ordinal position of the column in the table.
	OrdinalPosition *float64 `json:"ordinalPosition,omitempty" tf:"ordinal_position,omitempty"`

	// (Output)
	// Column precision.
	Precision *float64 `json:"precision,omitempty" tf:"precision,omitempty"`

	// Whether or not the column represents a primary key.
	PrimaryKey *bool `json:"primaryKey,omitempty" tf:"primary_key,omitempty"`

	// (Output)
	// Column scale.
	Scale *float64 `json:"scale,omitempty" tf:"scale,omitempty"`
}

type OracleTablesOracleColumnsParameters struct {

	// Column name.
	// +kubebuilder:validation:Optional
	Column *string `json:"column,omitempty" tf:"column,omitempty"`

	// The PostgreSQL data type. Full data types list can be found here:
	// https://www.postgresql.org/docs/current/datatype.html
	// +kubebuilder:validation:Optional
	DataType *string `json:"dataType,omitempty" tf:"data_type,omitempty"`
}

type OracleTablesParameters struct {

	// Oracle columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	OracleColumns []OracleColumnsParameters `json:"oracleColumns,omitempty" tf:"oracle_columns,omitempty"`

	// Table name.
	// +kubebuilder:validation:Optional
	Table *string `json:"table" tf:"table,omitempty"`
}

type PostgresqlColumnsInitParameters struct {

	// Column name.
	Column *string `json:"column,omitempty" tf:"column,omitempty"`

	// The PostgreSQL data type. Full data types list can be found here:
	// https://www.postgresql.org/docs/current/datatype.html
	DataType *string `json:"dataType,omitempty" tf:"data_type,omitempty"`

	// Whether or not the column can accept a null value.
	Nullable *bool `json:"nullable,omitempty" tf:"nullable,omitempty"`

	// The ordinal position of the column in the table.
	OrdinalPosition *float64 `json:"ordinalPosition,omitempty" tf:"ordinal_position,omitempty"`

	// Whether or not the column represents a primary key.
	PrimaryKey *bool `json:"primaryKey,omitempty" tf:"primary_key,omitempty"`
}

type PostgresqlColumnsObservation struct {

	// Column name.
	Column *string `json:"column,omitempty" tf:"column,omitempty"`

	// The PostgreSQL data type. Full data types list can be found here:
	// https://www.postgresql.org/docs/current/datatype.html
	DataType *string `json:"dataType,omitempty" tf:"data_type,omitempty"`

	// (Output)
	// Column length.
	Length *float64 `json:"length,omitempty" tf:"length,omitempty"`

	// Whether or not the column can accept a null value.
	Nullable *bool `json:"nullable,omitempty" tf:"nullable,omitempty"`

	// The ordinal position of the column in the table.
	OrdinalPosition *float64 `json:"ordinalPosition,omitempty" tf:"ordinal_position,omitempty"`

	// (Output)
	// Column precision.
	Precision *float64 `json:"precision,omitempty" tf:"precision,omitempty"`

	// Whether or not the column represents a primary key.
	PrimaryKey *bool `json:"primaryKey,omitempty" tf:"primary_key,omitempty"`

	// (Output)
	// Column scale.
	Scale *float64 `json:"scale,omitempty" tf:"scale,omitempty"`
}

type PostgresqlColumnsParameters struct {

	// Column name.
	// +kubebuilder:validation:Optional
	Column *string `json:"column,omitempty" tf:"column,omitempty"`

	// The PostgreSQL data type. Full data types list can be found here:
	// https://www.postgresql.org/docs/current/datatype.html
	// +kubebuilder:validation:Optional
	DataType *string `json:"dataType,omitempty" tf:"data_type,omitempty"`

	// Whether or not the column can accept a null value.
	// +kubebuilder:validation:Optional
	Nullable *bool `json:"nullable,omitempty" tf:"nullable,omitempty"`

	// The ordinal position of the column in the table.
	// +kubebuilder:validation:Optional
	OrdinalPosition *float64 `json:"ordinalPosition,omitempty" tf:"ordinal_position,omitempty"`

	// Whether or not the column represents a primary key.
	// +kubebuilder:validation:Optional
	PrimaryKey *bool `json:"primaryKey,omitempty" tf:"primary_key,omitempty"`
}

type PostgresqlExcludedObjectsInitParameters struct {

	// PostgreSQL schemas on the server
	// Structure is documented below.
	PostgresqlSchemas []PostgresqlSchemasInitParameters `json:"postgresqlSchemas,omitempty" tf:"postgresql_schemas,omitempty"`
}

type PostgresqlExcludedObjectsObservation struct {

	// PostgreSQL schemas on the server
	// Structure is documented below.
	PostgresqlSchemas []PostgresqlSchemasObservation `json:"postgresqlSchemas,omitempty" tf:"postgresql_schemas,omitempty"`
}

type PostgresqlExcludedObjectsParameters struct {

	// PostgreSQL schemas on the server
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	PostgresqlSchemas []PostgresqlSchemasParameters `json:"postgresqlSchemas" tf:"postgresql_schemas,omitempty"`
}

type PostgresqlSchemasInitParameters struct {

	// Tables in the schema.
	// Structure is documented below.
	PostgresqlTables []PostgresqlTablesInitParameters `json:"postgresqlTables,omitempty" tf:"postgresql_tables,omitempty"`

	// Schema name.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`
}

type PostgresqlSchemasObservation struct {

	// Tables in the schema.
	// Structure is documented below.
	PostgresqlTables []PostgresqlTablesObservation `json:"postgresqlTables,omitempty" tf:"postgresql_tables,omitempty"`

	// Schema name.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`
}

type PostgresqlSchemasParameters struct {

	// Tables in the schema.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	PostgresqlTables []PostgresqlTablesParameters `json:"postgresqlTables,omitempty" tf:"postgresql_tables,omitempty"`

	// Schema name.
	// +kubebuilder:validation:Optional
	Schema *string `json:"schema" tf:"schema,omitempty"`
}

type PostgresqlSchemasPostgresqlTablesInitParameters struct {

	// PostgreSQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	PostgresqlColumns []PostgresqlTablesPostgresqlColumnsInitParameters `json:"postgresqlColumns,omitempty" tf:"postgresql_columns,omitempty"`

	// Table name.
	Table *string `json:"table,omitempty" tf:"table,omitempty"`
}

type PostgresqlSchemasPostgresqlTablesObservation struct {

	// PostgreSQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	PostgresqlColumns []PostgresqlTablesPostgresqlColumnsObservation `json:"postgresqlColumns,omitempty" tf:"postgresql_columns,omitempty"`

	// Table name.
	Table *string `json:"table,omitempty" tf:"table,omitempty"`
}

type PostgresqlSchemasPostgresqlTablesParameters struct {

	// PostgreSQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	PostgresqlColumns []PostgresqlTablesPostgresqlColumnsParameters `json:"postgresqlColumns,omitempty" tf:"postgresql_columns,omitempty"`

	// Table name.
	// +kubebuilder:validation:Optional
	Table *string `json:"table" tf:"table,omitempty"`
}

type PostgresqlSchemasPostgresqlTablesPostgresqlColumnsInitParameters struct {

	// Column name.
	Column *string `json:"column,omitempty" tf:"column,omitempty"`

	// The PostgreSQL data type. Full data types list can be found here:
	// https://www.postgresql.org/docs/current/datatype.html
	DataType *string `json:"dataType,omitempty" tf:"data_type,omitempty"`

	// Whether or not the column can accept a null value.
	Nullable *bool `json:"nullable,omitempty" tf:"nullable,omitempty"`

	// The ordinal position of the column in the table.
	OrdinalPosition *float64 `json:"ordinalPosition,omitempty" tf:"ordinal_position,omitempty"`

	// Whether or not the column represents a primary key.
	PrimaryKey *bool `json:"primaryKey,omitempty" tf:"primary_key,omitempty"`
}

type PostgresqlSchemasPostgresqlTablesPostgresqlColumnsObservation struct {

	// Column name.
	Column *string `json:"column,omitempty" tf:"column,omitempty"`

	// The PostgreSQL data type. Full data types list can be found here:
	// https://www.postgresql.org/docs/current/datatype.html
	DataType *string `json:"dataType,omitempty" tf:"data_type,omitempty"`

	// (Output)
	// Column length.
	Length *float64 `json:"length,omitempty" tf:"length,omitempty"`

	// Whether or not the column can accept a null value.
	Nullable *bool `json:"nullable,omitempty" tf:"nullable,omitempty"`

	// The ordinal position of the column in the table.
	OrdinalPosition *float64 `json:"ordinalPosition,omitempty" tf:"ordinal_position,omitempty"`

	// (Output)
	// Column precision.
	Precision *float64 `json:"precision,omitempty" tf:"precision,omitempty"`

	// Whether or not the column represents a primary key.
	PrimaryKey *bool `json:"primaryKey,omitempty" tf:"primary_key,omitempty"`

	// (Output)
	// Column scale.
	Scale *float64 `json:"scale,omitempty" tf:"scale,omitempty"`
}

type PostgresqlSchemasPostgresqlTablesPostgresqlColumnsParameters struct {

	// Column name.
	// +kubebuilder:validation:Optional
	Column *string `json:"column,omitempty" tf:"column,omitempty"`

	// The PostgreSQL data type. Full data types list can be found here:
	// https://www.postgresql.org/docs/current/datatype.html
	// +kubebuilder:validation:Optional
	DataType *string `json:"dataType,omitempty" tf:"data_type,omitempty"`

	// Whether or not the column can accept a null value.
	// +kubebuilder:validation:Optional
	Nullable *bool `json:"nullable,omitempty" tf:"nullable,omitempty"`

	// The ordinal position of the column in the table.
	// +kubebuilder:validation:Optional
	OrdinalPosition *float64 `json:"ordinalPosition,omitempty" tf:"ordinal_position,omitempty"`

	// Whether or not the column represents a primary key.
	// +kubebuilder:validation:Optional
	PrimaryKey *bool `json:"primaryKey,omitempty" tf:"primary_key,omitempty"`
}

type PostgresqlSourceConfigExcludeObjectsInitParameters struct {

	// PostgreSQL schemas on the server
	// Structure is documented below.
	PostgresqlSchemas []ExcludeObjectsPostgresqlSchemasInitParameters `json:"postgresqlSchemas,omitempty" tf:"postgresql_schemas,omitempty"`
}

type PostgresqlSourceConfigExcludeObjectsObservation struct {

	// PostgreSQL schemas on the server
	// Structure is documented below.
	PostgresqlSchemas []ExcludeObjectsPostgresqlSchemasObservation `json:"postgresqlSchemas,omitempty" tf:"postgresql_schemas,omitempty"`
}

type PostgresqlSourceConfigExcludeObjectsParameters struct {

	// PostgreSQL schemas on the server
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	PostgresqlSchemas []ExcludeObjectsPostgresqlSchemasParameters `json:"postgresqlSchemas" tf:"postgresql_schemas,omitempty"`
}

type PostgresqlSourceConfigIncludeObjectsInitParameters struct {

	// PostgreSQL schemas on the server
	// Structure is documented below.
	PostgresqlSchemas []IncludeObjectsPostgresqlSchemasInitParameters `json:"postgresqlSchemas,omitempty" tf:"postgresql_schemas,omitempty"`
}

type PostgresqlSourceConfigIncludeObjectsObservation struct {

	// PostgreSQL schemas on the server
	// Structure is documented below.
	PostgresqlSchemas []IncludeObjectsPostgresqlSchemasObservation `json:"postgresqlSchemas,omitempty" tf:"postgresql_schemas,omitempty"`
}

type PostgresqlSourceConfigIncludeObjectsParameters struct {

	// PostgreSQL schemas on the server
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	PostgresqlSchemas []IncludeObjectsPostgresqlSchemasParameters `json:"postgresqlSchemas" tf:"postgresql_schemas,omitempty"`
}

type PostgresqlSourceConfigInitParameters struct {

	// SQL Server objects to exclude from the stream.
	// Structure is documented below.
	ExcludeObjects *PostgresqlSourceConfigExcludeObjectsInitParameters `json:"excludeObjects,omitempty" tf:"exclude_objects,omitempty"`

	// SQL Server objects to retrieve from the source.
	// Structure is documented below.
	IncludeObjects *PostgresqlSourceConfigIncludeObjectsInitParameters `json:"includeObjects,omitempty" tf:"include_objects,omitempty"`

	// Max concurrent backfill tasks.
	MaxConcurrentBackfillTasks *float64 `json:"maxConcurrentBackfillTasks,omitempty" tf:"max_concurrent_backfill_tasks,omitempty"`

	// The name of the publication that includes the set of all tables
	// that are defined in the stream's include_objects.
	Publication *string `json:"publication,omitempty" tf:"publication,omitempty"`

	// The name of the logical replication slot that's configured with
	// the pgoutput plugin.
	ReplicationSlot *string `json:"replicationSlot,omitempty" tf:"replication_slot,omitempty"`
}

type PostgresqlSourceConfigObservation struct {

	// SQL Server objects to exclude from the stream.
	// Structure is documented below.
	ExcludeObjects *PostgresqlSourceConfigExcludeObjectsObservation `json:"excludeObjects,omitempty" tf:"exclude_objects,omitempty"`

	// SQL Server objects to retrieve from the source.
	// Structure is documented below.
	IncludeObjects *PostgresqlSourceConfigIncludeObjectsObservation `json:"includeObjects,omitempty" tf:"include_objects,omitempty"`

	// Max concurrent backfill tasks.
	MaxConcurrentBackfillTasks *float64 `json:"maxConcurrentBackfillTasks,omitempty" tf:"max_concurrent_backfill_tasks,omitempty"`

	// The name of the publication that includes the set of all tables
	// that are defined in the stream's include_objects.
	Publication *string `json:"publication,omitempty" tf:"publication,omitempty"`

	// The name of the logical replication slot that's configured with
	// the pgoutput plugin.
	ReplicationSlot *string `json:"replicationSlot,omitempty" tf:"replication_slot,omitempty"`
}

type PostgresqlSourceConfigParameters struct {

	// SQL Server objects to exclude from the stream.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	ExcludeObjects *PostgresqlSourceConfigExcludeObjectsParameters `json:"excludeObjects,omitempty" tf:"exclude_objects,omitempty"`

	// SQL Server objects to retrieve from the source.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	IncludeObjects *PostgresqlSourceConfigIncludeObjectsParameters `json:"includeObjects,omitempty" tf:"include_objects,omitempty"`

	// Max concurrent backfill tasks.
	// +kubebuilder:validation:Optional
	MaxConcurrentBackfillTasks *float64 `json:"maxConcurrentBackfillTasks,omitempty" tf:"max_concurrent_backfill_tasks,omitempty"`

	// The name of the publication that includes the set of all tables
	// that are defined in the stream's include_objects.
	// +kubebuilder:validation:Optional
	Publication *string `json:"publication" tf:"publication,omitempty"`

	// The name of the logical replication slot that's configured with
	// the pgoutput plugin.
	// +kubebuilder:validation:Optional
	ReplicationSlot *string `json:"replicationSlot" tf:"replication_slot,omitempty"`
}

type PostgresqlTablesInitParameters struct {

	// PostgreSQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	PostgresqlColumns []PostgresqlColumnsInitParameters `json:"postgresqlColumns,omitempty" tf:"postgresql_columns,omitempty"`

	// Table name.
	Table *string `json:"table,omitempty" tf:"table,omitempty"`
}

type PostgresqlTablesObservation struct {

	// PostgreSQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	PostgresqlColumns []PostgresqlColumnsObservation `json:"postgresqlColumns,omitempty" tf:"postgresql_columns,omitempty"`

	// Table name.
	Table *string `json:"table,omitempty" tf:"table,omitempty"`
}

type PostgresqlTablesParameters struct {

	// PostgreSQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	PostgresqlColumns []PostgresqlColumnsParameters `json:"postgresqlColumns,omitempty" tf:"postgresql_columns,omitempty"`

	// Table name.
	// +kubebuilder:validation:Optional
	Table *string `json:"table" tf:"table,omitempty"`
}

type PostgresqlTablesPostgresqlColumnsInitParameters struct {

	// Column name.
	Column *string `json:"column,omitempty" tf:"column,omitempty"`

	// The PostgreSQL data type. Full data types list can be found here:
	// https://www.postgresql.org/docs/current/datatype.html
	DataType *string `json:"dataType,omitempty" tf:"data_type,omitempty"`

	// Whether or not the column can accept a null value.
	Nullable *bool `json:"nullable,omitempty" tf:"nullable,omitempty"`

	// The ordinal position of the column in the table.
	OrdinalPosition *float64 `json:"ordinalPosition,omitempty" tf:"ordinal_position,omitempty"`

	// Whether or not the column represents a primary key.
	PrimaryKey *bool `json:"primaryKey,omitempty" tf:"primary_key,omitempty"`
}

type PostgresqlTablesPostgresqlColumnsObservation struct {

	// Column name.
	Column *string `json:"column,omitempty" tf:"column,omitempty"`

	// The PostgreSQL data type. Full data types list can be found here:
	// https://www.postgresql.org/docs/current/datatype.html
	DataType *string `json:"dataType,omitempty" tf:"data_type,omitempty"`

	// (Output)
	// Column length.
	Length *float64 `json:"length,omitempty" tf:"length,omitempty"`

	// Whether or not the column can accept a null value.
	Nullable *bool `json:"nullable,omitempty" tf:"nullable,omitempty"`

	// The ordinal position of the column in the table.
	OrdinalPosition *float64 `json:"ordinalPosition,omitempty" tf:"ordinal_position,omitempty"`

	// (Output)
	// Column precision.
	Precision *float64 `json:"precision,omitempty" tf:"precision,omitempty"`

	// Whether or not the column represents a primary key.
	PrimaryKey *bool `json:"primaryKey,omitempty" tf:"primary_key,omitempty"`

	// (Output)
	// Column scale.
	Scale *float64 `json:"scale,omitempty" tf:"scale,omitempty"`
}

type PostgresqlTablesPostgresqlColumnsParameters struct {

	// Column name.
	// +kubebuilder:validation:Optional
	Column *string `json:"column,omitempty" tf:"column,omitempty"`

	// The PostgreSQL data type. Full data types list can be found here:
	// https://www.postgresql.org/docs/current/datatype.html
	// +kubebuilder:validation:Optional
	DataType *string `json:"dataType,omitempty" tf:"data_type,omitempty"`

	// Whether or not the column can accept a null value.
	// +kubebuilder:validation:Optional
	Nullable *bool `json:"nullable,omitempty" tf:"nullable,omitempty"`

	// The ordinal position of the column in the table.
	// +kubebuilder:validation:Optional
	OrdinalPosition *float64 `json:"ordinalPosition,omitempty" tf:"ordinal_position,omitempty"`

	// Whether or not the column represents a primary key.
	// +kubebuilder:validation:Optional
	PrimaryKey *bool `json:"primaryKey,omitempty" tf:"primary_key,omitempty"`
}

type SQLServerExcludedObjectsInitParameters struct {

	// SQL Server schemas/databases in the database server
	// Structure is documented below.
	Schemas []SchemasInitParameters `json:"schemas,omitempty" tf:"schemas,omitempty"`
}

type SQLServerExcludedObjectsObservation struct {

	// SQL Server schemas/databases in the database server
	// Structure is documented below.
	Schemas []SchemasObservation `json:"schemas,omitempty" tf:"schemas,omitempty"`
}

type SQLServerExcludedObjectsParameters struct {

	// SQL Server schemas/databases in the database server
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Schemas []SchemasParameters `json:"schemas" tf:"schemas,omitempty"`
}

type SQLServerSourceConfigExcludeObjectsInitParameters struct {

	// SQL Server schemas/databases in the database server
	// Structure is documented below.
	Schemas []ExcludeObjectsSchemasInitParameters `json:"schemas,omitempty" tf:"schemas,omitempty"`
}

type SQLServerSourceConfigExcludeObjectsObservation struct {

	// SQL Server schemas/databases in the database server
	// Structure is documented below.
	Schemas []ExcludeObjectsSchemasObservation `json:"schemas,omitempty" tf:"schemas,omitempty"`
}

type SQLServerSourceConfigExcludeObjectsParameters struct {

	// SQL Server schemas/databases in the database server
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Schemas []ExcludeObjectsSchemasParameters `json:"schemas" tf:"schemas,omitempty"`
}

type SQLServerSourceConfigIncludeObjectsInitParameters struct {

	// SQL Server schemas/databases in the database server
	// Structure is documented below.
	Schemas []IncludeObjectsSchemasInitParameters `json:"schemas,omitempty" tf:"schemas,omitempty"`
}

type SQLServerSourceConfigIncludeObjectsObservation struct {

	// SQL Server schemas/databases in the database server
	// Structure is documented below.
	Schemas []IncludeObjectsSchemasObservation `json:"schemas,omitempty" tf:"schemas,omitempty"`
}

type SQLServerSourceConfigIncludeObjectsParameters struct {

	// SQL Server schemas/databases in the database server
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Schemas []IncludeObjectsSchemasParameters `json:"schemas" tf:"schemas,omitempty"`
}

type SQLServerSourceConfigInitParameters struct {

	// CDC reader reads from change tables.
	ChangeTables *ChangeTablesInitParameters `json:"changeTables,omitempty" tf:"change_tables,omitempty"`

	// SQL Server objects to exclude from the stream.
	// Structure is documented below.
	ExcludeObjects *SQLServerSourceConfigExcludeObjectsInitParameters `json:"excludeObjects,omitempty" tf:"exclude_objects,omitempty"`

	// SQL Server objects to retrieve from the source.
	// Structure is documented below.
	IncludeObjects *SQLServerSourceConfigIncludeObjectsInitParameters `json:"includeObjects,omitempty" tf:"include_objects,omitempty"`

	// Max concurrent backfill tasks.
	MaxConcurrentBackfillTasks *float64 `json:"maxConcurrentBackfillTasks,omitempty" tf:"max_concurrent_backfill_tasks,omitempty"`

	// Max concurrent CDC tasks.
	MaxConcurrentCdcTasks *float64 `json:"maxConcurrentCdcTasks,omitempty" tf:"max_concurrent_cdc_tasks,omitempty"`

	// CDC reader reads from transaction logs.
	TransactionLogs *TransactionLogsInitParameters `json:"transactionLogs,omitempty" tf:"transaction_logs,omitempty"`
}

type SQLServerSourceConfigObservation struct {

	// CDC reader reads from change tables.
	ChangeTables *ChangeTablesParameters `json:"changeTables,omitempty" tf:"change_tables,omitempty"`

	// SQL Server objects to exclude from the stream.
	// Structure is documented below.
	ExcludeObjects *SQLServerSourceConfigExcludeObjectsObservation `json:"excludeObjects,omitempty" tf:"exclude_objects,omitempty"`

	// SQL Server objects to retrieve from the source.
	// Structure is documented below.
	IncludeObjects *SQLServerSourceConfigIncludeObjectsObservation `json:"includeObjects,omitempty" tf:"include_objects,omitempty"`

	// Max concurrent backfill tasks.
	MaxConcurrentBackfillTasks *float64 `json:"maxConcurrentBackfillTasks,omitempty" tf:"max_concurrent_backfill_tasks,omitempty"`

	// Max concurrent CDC tasks.
	MaxConcurrentCdcTasks *float64 `json:"maxConcurrentCdcTasks,omitempty" tf:"max_concurrent_cdc_tasks,omitempty"`

	// CDC reader reads from transaction logs.
	TransactionLogs *TransactionLogsParameters `json:"transactionLogs,omitempty" tf:"transaction_logs,omitempty"`
}

type SQLServerSourceConfigParameters struct {

	// CDC reader reads from change tables.
	// +kubebuilder:validation:Optional
	ChangeTables *ChangeTablesParameters `json:"changeTables,omitempty" tf:"change_tables,omitempty"`

	// SQL Server objects to exclude from the stream.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	ExcludeObjects *SQLServerSourceConfigExcludeObjectsParameters `json:"excludeObjects,omitempty" tf:"exclude_objects,omitempty"`

	// SQL Server objects to retrieve from the source.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	IncludeObjects *SQLServerSourceConfigIncludeObjectsParameters `json:"includeObjects,omitempty" tf:"include_objects,omitempty"`

	// Max concurrent backfill tasks.
	// +kubebuilder:validation:Optional
	MaxConcurrentBackfillTasks *float64 `json:"maxConcurrentBackfillTasks,omitempty" tf:"max_concurrent_backfill_tasks,omitempty"`

	// Max concurrent CDC tasks.
	// +kubebuilder:validation:Optional
	MaxConcurrentCdcTasks *float64 `json:"maxConcurrentCdcTasks,omitempty" tf:"max_concurrent_cdc_tasks,omitempty"`

	// CDC reader reads from transaction logs.
	// +kubebuilder:validation:Optional
	TransactionLogs *TransactionLogsParameters `json:"transactionLogs,omitempty" tf:"transaction_logs,omitempty"`
}

type SalesforceExcludedObjectsInitParameters struct {

	// Salesforce objects in Salesforce Org.
	// Structure is documented below.
	Objects []ObjectsInitParameters `json:"objects,omitempty" tf:"objects,omitempty"`
}

type SalesforceExcludedObjectsObservation struct {

	// Salesforce objects in Salesforce Org.
	// Structure is documented below.
	Objects []ObjectsObservation `json:"objects,omitempty" tf:"objects,omitempty"`
}

type SalesforceExcludedObjectsParameters struct {

	// Salesforce objects in Salesforce Org.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Objects []ObjectsParameters `json:"objects" tf:"objects,omitempty"`
}

type SalesforceSourceConfigExcludeObjectsInitParameters struct {

	// Salesforce objects in Salesforce Org.
	// Structure is documented below.
	Objects []ExcludeObjectsObjectsInitParameters `json:"objects,omitempty" tf:"objects,omitempty"`
}

type SalesforceSourceConfigExcludeObjectsObservation struct {

	// Salesforce objects in Salesforce Org.
	// Structure is documented below.
	Objects []ExcludeObjectsObjectsObservation `json:"objects,omitempty" tf:"objects,omitempty"`
}

type SalesforceSourceConfigExcludeObjectsParameters struct {

	// Salesforce objects in Salesforce Org.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Objects []ExcludeObjectsObjectsParameters `json:"objects" tf:"objects,omitempty"`
}

type SalesforceSourceConfigIncludeObjectsInitParameters struct {

	// Salesforce objects in Salesforce Org.
	// Structure is documented below.
	Objects []IncludeObjectsObjectsInitParameters `json:"objects,omitempty" tf:"objects,omitempty"`
}

type SalesforceSourceConfigIncludeObjectsObservation struct {

	// Salesforce objects in Salesforce Org.
	// Structure is documented below.
	Objects []IncludeObjectsObjectsObservation `json:"objects,omitempty" tf:"objects,omitempty"`
}

type SalesforceSourceConfigIncludeObjectsParameters struct {

	// Salesforce objects in Salesforce Org.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Objects []IncludeObjectsObjectsParameters `json:"objects" tf:"objects,omitempty"`
}

type SalesforceSourceConfigInitParameters struct {

	// SQL Server objects to exclude from the stream.
	// Structure is documented below.
	ExcludeObjects *SalesforceSourceConfigExcludeObjectsInitParameters `json:"excludeObjects,omitempty" tf:"exclude_objects,omitempty"`

	// SQL Server objects to retrieve from the source.
	// Structure is documented below.
	IncludeObjects *SalesforceSourceConfigIncludeObjectsInitParameters `json:"includeObjects,omitempty" tf:"include_objects,omitempty"`

	// Salesforce objects polling interval. The interval at which new changes will be polled for each object. The duration must be between 5 minutes and 24 hours.
	PollingInterval *string `json:"pollingInterval,omitempty" tf:"polling_interval,omitempty"`
}

type SalesforceSourceConfigObservation struct {

	// SQL Server objects to exclude from the stream.
	// Structure is documented below.
	ExcludeObjects *SalesforceSourceConfigExcludeObjectsObservation `json:"excludeObjects,omitempty" tf:"exclude_objects,omitempty"`

	// SQL Server objects to retrieve from the source.
	// Structure is documented below.
	IncludeObjects *SalesforceSourceConfigIncludeObjectsObservation `json:"includeObjects,omitempty" tf:"include_objects,omitempty"`

	// Salesforce objects polling interval. The interval at which new changes will be polled for each object. The duration must be between 5 minutes and 24 hours.
	PollingInterval *string `json:"pollingInterval,omitempty" tf:"polling_interval,omitempty"`
}

type SalesforceSourceConfigParameters struct {

	// SQL Server objects to exclude from the stream.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	ExcludeObjects *SalesforceSourceConfigExcludeObjectsParameters `json:"excludeObjects,omitempty" tf:"exclude_objects,omitempty"`

	// SQL Server objects to retrieve from the source.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	IncludeObjects *SalesforceSourceConfigIncludeObjectsParameters `json:"includeObjects,omitempty" tf:"include_objects,omitempty"`

	// Salesforce objects polling interval. The interval at which new changes will be polled for each object. The duration must be between 5 minutes and 24 hours.
	// +kubebuilder:validation:Optional
	PollingInterval *string `json:"pollingInterval" tf:"polling_interval,omitempty"`
}

type SchemasInitParameters struct {

	// Schema name.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// Tables in the database.
	// Structure is documented below.
	Tables []TablesInitParameters `json:"tables,omitempty" tf:"tables,omitempty"`
}

type SchemasObservation struct {

	// Schema name.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// Tables in the database.
	// Structure is documented below.
	Tables []TablesObservation `json:"tables,omitempty" tf:"tables,omitempty"`
}

type SchemasParameters struct {

	// Schema name.
	// +kubebuilder:validation:Optional
	Schema *string `json:"schema" tf:"schema,omitempty"`

	// Tables in the database.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Tables []TablesParameters `json:"tables,omitempty" tf:"tables,omitempty"`
}

type SchemasTablesColumnsInitParameters struct {

	// Column name.
	Column *string `json:"column,omitempty" tf:"column,omitempty"`

	// The PostgreSQL data type. Full data types list can be found here:
	// https://www.postgresql.org/docs/current/datatype.html
	DataType *string `json:"dataType,omitempty" tf:"data_type,omitempty"`
}

type SchemasTablesColumnsObservation struct {

	// Column name.
	Column *string `json:"column,omitempty" tf:"column,omitempty"`

	// The PostgreSQL data type. Full data types list can be found here:
	// https://www.postgresql.org/docs/current/datatype.html
	DataType *string `json:"dataType,omitempty" tf:"data_type,omitempty"`

	// (Output)
	// Column length.
	Length *float64 `json:"length,omitempty" tf:"length,omitempty"`

	// Whether or not the column can accept a null value.
	Nullable *bool `json:"nullable,omitempty" tf:"nullable,omitempty"`

	// The ordinal position of the column in the table.
	OrdinalPosition *float64 `json:"ordinalPosition,omitempty" tf:"ordinal_position,omitempty"`

	// (Output)
	// Column precision.
	Precision *float64 `json:"precision,omitempty" tf:"precision,omitempty"`

	// Whether or not the column represents a primary key.
	PrimaryKey *bool `json:"primaryKey,omitempty" tf:"primary_key,omitempty"`

	// (Output)
	// Column scale.
	Scale *float64 `json:"scale,omitempty" tf:"scale,omitempty"`
}

type SchemasTablesColumnsParameters struct {

	// Column name.
	// +kubebuilder:validation:Optional
	Column *string `json:"column,omitempty" tf:"column,omitempty"`

	// The PostgreSQL data type. Full data types list can be found here:
	// https://www.postgresql.org/docs/current/datatype.html
	// +kubebuilder:validation:Optional
	DataType *string `json:"dataType,omitempty" tf:"data_type,omitempty"`
}

type SchemasTablesInitParameters struct {

	// SQL Server columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	Columns []TablesColumnsInitParameters `json:"columns,omitempty" tf:"columns,omitempty"`

	// Table name.
	Table *string `json:"table,omitempty" tf:"table,omitempty"`
}

type SchemasTablesObservation struct {

	// SQL Server columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	Columns []TablesColumnsObservation `json:"columns,omitempty" tf:"columns,omitempty"`

	// Table name.
	Table *string `json:"table,omitempty" tf:"table,omitempty"`
}

type SchemasTablesParameters struct {

	// SQL Server columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Columns []TablesColumnsParameters `json:"columns,omitempty" tf:"columns,omitempty"`

	// Table name.
	// +kubebuilder:validation:Optional
	Table *string `json:"table" tf:"table,omitempty"`
}

type SingleTargetDatasetInitParameters struct {

	// Dataset ID in the format projects/{project}/datasets/{dataset_id} or
	// {project}:{dataset_id}
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/cluster/bigquery/v1beta2.Dataset
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	DatasetID *string `json:"datasetId,omitempty" tf:"dataset_id,omitempty"`

	// Reference to a Dataset in bigquery to populate datasetId.
	// +kubebuilder:validation:Optional
	DatasetIDRef *v1.Reference `json:"datasetIdRef,omitempty" tf:"-"`

	// Selector for a Dataset in bigquery to populate datasetId.
	// +kubebuilder:validation:Optional
	DatasetIDSelector *v1.Selector `json:"datasetIdSelector,omitempty" tf:"-"`
}

type SingleTargetDatasetObservation struct {

	// Dataset ID in the format projects/{project}/datasets/{dataset_id} or
	// {project}:{dataset_id}
	DatasetID *string `json:"datasetId,omitempty" tf:"dataset_id,omitempty"`
}

type SingleTargetDatasetParameters struct {

	// Dataset ID in the format projects/{project}/datasets/{dataset_id} or
	// {project}:{dataset_id}
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/cluster/bigquery/v1beta2.Dataset
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	DatasetID *string `json:"datasetId,omitempty" tf:"dataset_id,omitempty"`

	// Reference to a Dataset in bigquery to populate datasetId.
	// +kubebuilder:validation:Optional
	DatasetIDRef *v1.Reference `json:"datasetIdRef,omitempty" tf:"-"`

	// Selector for a Dataset in bigquery to populate datasetId.
	// +kubebuilder:validation:Optional
	DatasetIDSelector *v1.Selector `json:"datasetIdSelector,omitempty" tf:"-"`
}

type SourceConfigInitParameters struct {

	// MySQL data source configuration.
	// Structure is documented below.
	MySQLSourceConfig *MySQLSourceConfigInitParameters `json:"mysqlSourceConfig,omitempty" tf:"mysql_source_config,omitempty"`

	// MySQL data source configuration.
	// Structure is documented below.
	OracleSourceConfig *OracleSourceConfigInitParameters `json:"oracleSourceConfig,omitempty" tf:"oracle_source_config,omitempty"`

	// PostgreSQL data source configuration.
	// Structure is documented below.
	PostgresqlSourceConfig *PostgresqlSourceConfigInitParameters `json:"postgresqlSourceConfig,omitempty" tf:"postgresql_source_config,omitempty"`

	// SQL Server data source configuration.
	// Structure is documented below.
	SQLServerSourceConfig *SQLServerSourceConfigInitParameters `json:"sqlServerSourceConfig,omitempty" tf:"sql_server_source_config,omitempty"`

	// Salesforce data source configuration.
	// Structure is documented below.
	SalesforceSourceConfig *SalesforceSourceConfigInitParameters `json:"salesforceSourceConfig,omitempty" tf:"salesforce_source_config,omitempty"`

	// Source connection profile resource. Format: projects/{project}/locations/{location}/connectionProfiles/{name}
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/cluster/datastream/v1beta2.ConnectionProfile
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	SourceConnectionProfile *string `json:"sourceConnectionProfile,omitempty" tf:"source_connection_profile,omitempty"`

	// Reference to a ConnectionProfile in datastream to populate sourceConnectionProfile.
	// +kubebuilder:validation:Optional
	SourceConnectionProfileRef *v1.Reference `json:"sourceConnectionProfileRef,omitempty" tf:"-"`

	// Selector for a ConnectionProfile in datastream to populate sourceConnectionProfile.
	// +kubebuilder:validation:Optional
	SourceConnectionProfileSelector *v1.Selector `json:"sourceConnectionProfileSelector,omitempty" tf:"-"`
}

type SourceConfigObservation struct {

	// MySQL data source configuration.
	// Structure is documented below.
	MySQLSourceConfig *MySQLSourceConfigObservation `json:"mysqlSourceConfig,omitempty" tf:"mysql_source_config,omitempty"`

	// MySQL data source configuration.
	// Structure is documented below.
	OracleSourceConfig *OracleSourceConfigObservation `json:"oracleSourceConfig,omitempty" tf:"oracle_source_config,omitempty"`

	// PostgreSQL data source configuration.
	// Structure is documented below.
	PostgresqlSourceConfig *PostgresqlSourceConfigObservation `json:"postgresqlSourceConfig,omitempty" tf:"postgresql_source_config,omitempty"`

	// SQL Server data source configuration.
	// Structure is documented below.
	SQLServerSourceConfig *SQLServerSourceConfigObservation `json:"sqlServerSourceConfig,omitempty" tf:"sql_server_source_config,omitempty"`

	// Salesforce data source configuration.
	// Structure is documented below.
	SalesforceSourceConfig *SalesforceSourceConfigObservation `json:"salesforceSourceConfig,omitempty" tf:"salesforce_source_config,omitempty"`

	// Source connection profile resource. Format: projects/{project}/locations/{location}/connectionProfiles/{name}
	SourceConnectionProfile *string `json:"sourceConnectionProfile,omitempty" tf:"source_connection_profile,omitempty"`
}

type SourceConfigParameters struct {

	// MySQL data source configuration.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	MySQLSourceConfig *MySQLSourceConfigParameters `json:"mysqlSourceConfig,omitempty" tf:"mysql_source_config,omitempty"`

	// MySQL data source configuration.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	OracleSourceConfig *OracleSourceConfigParameters `json:"oracleSourceConfig,omitempty" tf:"oracle_source_config,omitempty"`

	// PostgreSQL data source configuration.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	PostgresqlSourceConfig *PostgresqlSourceConfigParameters `json:"postgresqlSourceConfig,omitempty" tf:"postgresql_source_config,omitempty"`

	// SQL Server data source configuration.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	SQLServerSourceConfig *SQLServerSourceConfigParameters `json:"sqlServerSourceConfig,omitempty" tf:"sql_server_source_config,omitempty"`

	// Salesforce data source configuration.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	SalesforceSourceConfig *SalesforceSourceConfigParameters `json:"salesforceSourceConfig,omitempty" tf:"salesforce_source_config,omitempty"`

	// Source connection profile resource. Format: projects/{project}/locations/{location}/connectionProfiles/{name}
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/cluster/datastream/v1beta2.ConnectionProfile
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	SourceConnectionProfile *string `json:"sourceConnectionProfile,omitempty" tf:"source_connection_profile,omitempty"`

	// Reference to a ConnectionProfile in datastream to populate sourceConnectionProfile.
	// +kubebuilder:validation:Optional
	SourceConnectionProfileRef *v1.Reference `json:"sourceConnectionProfileRef,omitempty" tf:"-"`

	// Selector for a ConnectionProfile in datastream to populate sourceConnectionProfile.
	// +kubebuilder:validation:Optional
	SourceConnectionProfileSelector *v1.Selector `json:"sourceConnectionProfileSelector,omitempty" tf:"-"`
}

type SourceHierarchyDatasetsInitParameters struct {

	// Dataset template used for dynamic dataset creation.
	// Structure is documented below.
	DatasetTemplate *DatasetTemplateInitParameters `json:"datasetTemplate,omitempty" tf:"dataset_template,omitempty"`
}

type SourceHierarchyDatasetsObservation struct {

	// Dataset template used for dynamic dataset creation.
	// Structure is documented below.
	DatasetTemplate *DatasetTemplateObservation `json:"datasetTemplate,omitempty" tf:"dataset_template,omitempty"`
}

type SourceHierarchyDatasetsParameters struct {

	// Dataset template used for dynamic dataset creation.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	DatasetTemplate *DatasetTemplateParameters `json:"datasetTemplate" tf:"dataset_template,omitempty"`
}

type StreamInitParameters struct {

	// Backfill strategy to automatically backfill the Stream's objects. Specific objects can be excluded.
	// Structure is documented below.
	BackfillAll *BackfillAllInitParameters `json:"backfillAll,omitempty" tf:"backfill_all,omitempty"`

	// Backfill strategy to disable automatic backfill for the Stream's objects.
	BackfillNone *BackfillNoneInitParameters `json:"backfillNone,omitempty" tf:"backfill_none,omitempty"`

	// Create the stream without validating it.
	CreateWithoutValidation *bool `json:"createWithoutValidation,omitempty" tf:"create_without_validation,omitempty"`

	// A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data
	// will be encrypted using an internal Stream-specific encryption key provisioned through KMS.
	CustomerManagedEncryptionKey *string `json:"customerManagedEncryptionKey,omitempty" tf:"customer_managed_encryption_key,omitempty"`

	// Desired state of the Stream. Set this field to RUNNING to start the stream,
	// NOT_STARTED to create the stream without starting and PAUSED to pause
	// the stream from a RUNNING state.
	// Possible values: NOT_STARTED, RUNNING, PAUSED. Default: NOT_STARTED
	DesiredState *string `json:"desiredState,omitempty" tf:"desired_state,omitempty"`

	// Destination connection profile configuration.
	// Structure is documented below.
	DestinationConfig *DestinationConfigInitParameters `json:"destinationConfig,omitempty" tf:"destination_config,omitempty"`

	// Display name.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Labels.
	// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field effective_labels for all of the labels present on the resource.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Source connection profile configuration.
	// Structure is documented below.
	SourceConfig *SourceConfigInitParameters `json:"sourceConfig,omitempty" tf:"source_config,omitempty"`
}

type StreamLargeObjectsInitParameters struct {
}

type StreamLargeObjectsObservation struct {
}

type StreamLargeObjectsParameters struct {
}

type StreamObservation struct {

	// Backfill strategy to automatically backfill the Stream's objects. Specific objects can be excluded.
	// Structure is documented below.
	BackfillAll *BackfillAllObservation `json:"backfillAll,omitempty" tf:"backfill_all,omitempty"`

	// Backfill strategy to disable automatic backfill for the Stream's objects.
	BackfillNone *BackfillNoneParameters `json:"backfillNone,omitempty" tf:"backfill_none,omitempty"`

	// Create the stream without validating it.
	CreateWithoutValidation *bool `json:"createWithoutValidation,omitempty" tf:"create_without_validation,omitempty"`

	// A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data
	// will be encrypted using an internal Stream-specific encryption key provisioned through KMS.
	CustomerManagedEncryptionKey *string `json:"customerManagedEncryptionKey,omitempty" tf:"customer_managed_encryption_key,omitempty"`

	// Desired state of the Stream. Set this field to RUNNING to start the stream,
	// NOT_STARTED to create the stream without starting and PAUSED to pause
	// the stream from a RUNNING state.
	// Possible values: NOT_STARTED, RUNNING, PAUSED. Default: NOT_STARTED
	DesiredState *string `json:"desiredState,omitempty" tf:"desired_state,omitempty"`

	// Destination connection profile configuration.
	// Structure is documented below.
	DestinationConfig *DestinationConfigObservation `json:"destinationConfig,omitempty" tf:"destination_config,omitempty"`

	// Display name.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +mapType=granular
	EffectiveLabels map[string]*string `json:"effectiveLabels,omitempty" tf:"effective_labels,omitempty"`

	// an identifier for the resource with format projects/{{project}}/locations/{{location}}/streams/{{stream_id}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Labels.
	// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field effective_labels for all of the labels present on the resource.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The name of the location this stream is located in.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// The stream's name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Source connection profile configuration.
	// Structure is documented below.
	SourceConfig *SourceConfigObservation `json:"sourceConfig,omitempty" tf:"source_config,omitempty"`

	// The state of the stream.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// The combination of labels configured directly on the resource
	// and default labels configured on the provider.
	// +mapType=granular
	TerraformLabels map[string]*string `json:"terraformLabels,omitempty" tf:"terraform_labels,omitempty"`
}

type StreamParameters struct {

	// Backfill strategy to automatically backfill the Stream's objects. Specific objects can be excluded.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	BackfillAll *BackfillAllParameters `json:"backfillAll,omitempty" tf:"backfill_all,omitempty"`

	// Backfill strategy to disable automatic backfill for the Stream's objects.
	// +kubebuilder:validation:Optional
	BackfillNone *BackfillNoneParameters `json:"backfillNone,omitempty" tf:"backfill_none,omitempty"`

	// Create the stream without validating it.
	// +kubebuilder:validation:Optional
	CreateWithoutValidation *bool `json:"createWithoutValidation,omitempty" tf:"create_without_validation,omitempty"`

	// A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data
	// will be encrypted using an internal Stream-specific encryption key provisioned through KMS.
	// +kubebuilder:validation:Optional
	CustomerManagedEncryptionKey *string `json:"customerManagedEncryptionKey,omitempty" tf:"customer_managed_encryption_key,omitempty"`

	// Desired state of the Stream. Set this field to RUNNING to start the stream,
	// NOT_STARTED to create the stream without starting and PAUSED to pause
	// the stream from a RUNNING state.
	// Possible values: NOT_STARTED, RUNNING, PAUSED. Default: NOT_STARTED
	// +kubebuilder:validation:Optional
	DesiredState *string `json:"desiredState,omitempty" tf:"desired_state,omitempty"`

	// Destination connection profile configuration.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	DestinationConfig *DestinationConfigParameters `json:"destinationConfig,omitempty" tf:"destination_config,omitempty"`

	// Display name.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Labels.
	// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
	// Please refer to the field effective_labels for all of the labels present on the resource.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The name of the location this stream is located in.
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Source connection profile configuration.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	SourceConfig *SourceConfigParameters `json:"sourceConfig,omitempty" tf:"source_config,omitempty"`
}

type TablesColumnsInitParameters struct {

	// Column name.
	Column *string `json:"column,omitempty" tf:"column,omitempty"`

	// The PostgreSQL data type. Full data types list can be found here:
	// https://www.postgresql.org/docs/current/datatype.html
	DataType *string `json:"dataType,omitempty" tf:"data_type,omitempty"`
}

type TablesColumnsObservation struct {

	// Column name.
	Column *string `json:"column,omitempty" tf:"column,omitempty"`

	// The PostgreSQL data type. Full data types list can be found here:
	// https://www.postgresql.org/docs/current/datatype.html
	DataType *string `json:"dataType,omitempty" tf:"data_type,omitempty"`

	// (Output)
	// Column length.
	Length *float64 `json:"length,omitempty" tf:"length,omitempty"`

	// Whether or not the column can accept a null value.
	Nullable *bool `json:"nullable,omitempty" tf:"nullable,omitempty"`

	// The ordinal position of the column in the table.
	OrdinalPosition *float64 `json:"ordinalPosition,omitempty" tf:"ordinal_position,omitempty"`

	// (Output)
	// Column precision.
	Precision *float64 `json:"precision,omitempty" tf:"precision,omitempty"`

	// Whether or not the column represents a primary key.
	PrimaryKey *bool `json:"primaryKey,omitempty" tf:"primary_key,omitempty"`

	// (Output)
	// Column scale.
	Scale *float64 `json:"scale,omitempty" tf:"scale,omitempty"`
}

type TablesColumnsParameters struct {

	// Column name.
	// +kubebuilder:validation:Optional
	Column *string `json:"column,omitempty" tf:"column,omitempty"`

	// The PostgreSQL data type. Full data types list can be found here:
	// https://www.postgresql.org/docs/current/datatype.html
	// +kubebuilder:validation:Optional
	DataType *string `json:"dataType,omitempty" tf:"data_type,omitempty"`
}

type TablesInitParameters struct {

	// SQL Server columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	Columns []ColumnsInitParameters `json:"columns,omitempty" tf:"columns,omitempty"`

	// Table name.
	Table *string `json:"table,omitempty" tf:"table,omitempty"`
}

type TablesObservation struct {

	// SQL Server columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	Columns []ColumnsObservation `json:"columns,omitempty" tf:"columns,omitempty"`

	// Table name.
	Table *string `json:"table,omitempty" tf:"table,omitempty"`
}

type TablesParameters struct {

	// SQL Server columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Columns []ColumnsParameters `json:"columns,omitempty" tf:"columns,omitempty"`

	// Table name.
	// +kubebuilder:validation:Optional
	Table *string `json:"table" tf:"table,omitempty"`
}

type TransactionLogsInitParameters struct {
}

type TransactionLogsObservation struct {
}

type TransactionLogsParameters struct {
}

// StreamSpec defines the desired state of Stream
type StreamSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StreamParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider StreamInitParameters `json:"initProvider,omitempty"`
}

// StreamStatus defines the observed state of Stream.
type StreamStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StreamObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Stream is the Schema for the Streams API. A resource representing streaming data from a source to a destination.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type Stream struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.destinationConfig) || (has(self.initProvider) && has(self.initProvider.destinationConfig))",message="spec.forProvider.destinationConfig is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.displayName) || (has(self.initProvider) && has(self.initProvider.displayName))",message="spec.forProvider.displayName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sourceConfig) || (has(self.initProvider) && has(self.initProvider.sourceConfig))",message="spec.forProvider.sourceConfig is a required parameter"
	Spec   StreamSpec   `json:"spec"`
	Status StreamStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StreamList contains a list of Streams
type StreamList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Stream `json:"items"`
}

// Repository type metadata.
var (
	Stream_Kind             = "Stream"
	Stream_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Stream_Kind}.String()
	Stream_KindAPIVersion   = Stream_Kind + "." + CRDGroupVersion.String()
	Stream_GroupVersionKind = CRDGroupVersion.WithKind(Stream_Kind)
)

func init() {
	SchemeBuilder.Register(&Stream{}, &StreamList{})
}
