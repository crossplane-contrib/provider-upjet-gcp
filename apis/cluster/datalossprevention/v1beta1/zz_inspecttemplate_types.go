// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CloudStoragePathInitParameters struct {

	// A url representing a file or path (no wildcards) in Cloud Storage. Example: gs://[BUCKET_NAME]/dictionary.txt
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type CloudStoragePathObservation struct {

	// A url representing a file or path (no wildcards) in Cloud Storage. Example: gs://[BUCKET_NAME]/dictionary.txt
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type CloudStoragePathParameters struct {

	// A url representing a file or path (no wildcards) in Cloud Storage. Example: gs://[BUCKET_NAME]/dictionary.txt
	// +kubebuilder:validation:Optional
	Path *string `json:"path" tf:"path,omitempty"`
}

type CustomInfoTypesInitParameters struct {

	// Dictionary which defines the rule.
	// Structure is documented below.
	Dictionary []DictionaryInitParameters `json:"dictionary,omitempty" tf:"dictionary,omitempty"`

	// If set to EXCLUSION_TYPE_EXCLUDE this infoType will not cause a finding to be returned. It still can be used for rules matching.
	// Possible values are: EXCLUSION_TYPE_EXCLUDE.
	ExclusionType *string `json:"exclusionType,omitempty" tf:"exclusion_type,omitempty"`

	// Type of information the findings limit applies to. Only one limit per infoType should be provided. If InfoTypeLimit does
	// not have an infoType, the DLP API applies the limit against all infoTypes that are found but not
	// specified in another InfoTypeLimit.
	// Structure is documented below.
	InfoType []InfoTypeInitParameters `json:"infoType,omitempty" tf:"info_type,omitempty"`

	// Likelihood to return for this CustomInfoType. This base value can be altered by a detection rule if the finding meets the criteria
	// specified by the rule.
	// Default value is VERY_LIKELY.
	// Possible values are: VERY_UNLIKELY, UNLIKELY, POSSIBLE, LIKELY, VERY_LIKELY.
	Likelihood *string `json:"likelihood,omitempty" tf:"likelihood,omitempty"`

	// Regular expression which defines the rule.
	// Structure is documented below.
	Regex []RegexInitParameters `json:"regex,omitempty" tf:"regex,omitempty"`

	// Optional custom sensitivity for this InfoType. This only applies to data profiling.
	// Structure is documented below.
	SensitivityScore []CustomInfoTypesSensitivityScoreInitParameters `json:"sensitivityScore,omitempty" tf:"sensitivity_score,omitempty"`

	// A reference to a StoredInfoType to use with scanning.
	// Structure is documented below.
	StoredType []StoredTypeInitParameters `json:"storedType,omitempty" tf:"stored_type,omitempty"`

	// Message for detecting output from deidentification transformations that support reversing.
	SurrogateType []SurrogateTypeInitParameters `json:"surrogateType,omitempty" tf:"surrogate_type,omitempty"`
}

type CustomInfoTypesObservation struct {

	// Dictionary which defines the rule.
	// Structure is documented below.
	Dictionary []DictionaryObservation `json:"dictionary,omitempty" tf:"dictionary,omitempty"`

	// If set to EXCLUSION_TYPE_EXCLUDE this infoType will not cause a finding to be returned. It still can be used for rules matching.
	// Possible values are: EXCLUSION_TYPE_EXCLUDE.
	ExclusionType *string `json:"exclusionType,omitempty" tf:"exclusion_type,omitempty"`

	// Type of information the findings limit applies to. Only one limit per infoType should be provided. If InfoTypeLimit does
	// not have an infoType, the DLP API applies the limit against all infoTypes that are found but not
	// specified in another InfoTypeLimit.
	// Structure is documented below.
	InfoType []InfoTypeObservation `json:"infoType,omitempty" tf:"info_type,omitempty"`

	// Likelihood to return for this CustomInfoType. This base value can be altered by a detection rule if the finding meets the criteria
	// specified by the rule.
	// Default value is VERY_LIKELY.
	// Possible values are: VERY_UNLIKELY, UNLIKELY, POSSIBLE, LIKELY, VERY_LIKELY.
	Likelihood *string `json:"likelihood,omitempty" tf:"likelihood,omitempty"`

	// Regular expression which defines the rule.
	// Structure is documented below.
	Regex []RegexObservation `json:"regex,omitempty" tf:"regex,omitempty"`

	// Optional custom sensitivity for this InfoType. This only applies to data profiling.
	// Structure is documented below.
	SensitivityScore []CustomInfoTypesSensitivityScoreObservation `json:"sensitivityScore,omitempty" tf:"sensitivity_score,omitempty"`

	// A reference to a StoredInfoType to use with scanning.
	// Structure is documented below.
	StoredType []StoredTypeObservation `json:"storedType,omitempty" tf:"stored_type,omitempty"`

	// Message for detecting output from deidentification transformations that support reversing.
	SurrogateType []SurrogateTypeParameters `json:"surrogateType,omitempty" tf:"surrogate_type,omitempty"`
}

type CustomInfoTypesParameters struct {

	// Dictionary which defines the rule.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Dictionary []DictionaryParameters `json:"dictionary,omitempty" tf:"dictionary,omitempty"`

	// If set to EXCLUSION_TYPE_EXCLUDE this infoType will not cause a finding to be returned. It still can be used for rules matching.
	// Possible values are: EXCLUSION_TYPE_EXCLUDE.
	// +kubebuilder:validation:Optional
	ExclusionType *string `json:"exclusionType,omitempty" tf:"exclusion_type,omitempty"`

	// Type of information the findings limit applies to. Only one limit per infoType should be provided. If InfoTypeLimit does
	// not have an infoType, the DLP API applies the limit against all infoTypes that are found but not
	// specified in another InfoTypeLimit.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	InfoType []InfoTypeParameters `json:"infoType" tf:"info_type,omitempty"`

	// Likelihood to return for this CustomInfoType. This base value can be altered by a detection rule if the finding meets the criteria
	// specified by the rule.
	// Default value is VERY_LIKELY.
	// Possible values are: VERY_UNLIKELY, UNLIKELY, POSSIBLE, LIKELY, VERY_LIKELY.
	// +kubebuilder:validation:Optional
	Likelihood *string `json:"likelihood,omitempty" tf:"likelihood,omitempty"`

	// Regular expression which defines the rule.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Regex []RegexParameters `json:"regex,omitempty" tf:"regex,omitempty"`

	// Optional custom sensitivity for this InfoType. This only applies to data profiling.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	SensitivityScore []CustomInfoTypesSensitivityScoreParameters `json:"sensitivityScore,omitempty" tf:"sensitivity_score,omitempty"`

	// A reference to a StoredInfoType to use with scanning.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	StoredType []StoredTypeParameters `json:"storedType,omitempty" tf:"stored_type,omitempty"`

	// Message for detecting output from deidentification transformations that support reversing.
	// +kubebuilder:validation:Optional
	SurrogateType []SurrogateTypeParameters `json:"surrogateType,omitempty" tf:"surrogate_type,omitempty"`
}

type CustomInfoTypesSensitivityScoreInitParameters struct {

	// The sensitivity score applied to the resource.
	// Possible values are: SENSITIVITY_LOW, SENSITIVITY_MODERATE, SENSITIVITY_HIGH.
	Score *string `json:"score,omitempty" tf:"score,omitempty"`
}

type CustomInfoTypesSensitivityScoreObservation struct {

	// The sensitivity score applied to the resource.
	// Possible values are: SENSITIVITY_LOW, SENSITIVITY_MODERATE, SENSITIVITY_HIGH.
	Score *string `json:"score,omitempty" tf:"score,omitempty"`
}

type CustomInfoTypesSensitivityScoreParameters struct {

	// The sensitivity score applied to the resource.
	// Possible values are: SENSITIVITY_LOW, SENSITIVITY_MODERATE, SENSITIVITY_HIGH.
	// +kubebuilder:validation:Optional
	Score *string `json:"score" tf:"score,omitempty"`
}

type DictionaryCloudStoragePathInitParameters struct {

	// A url representing a file or path (no wildcards) in Cloud Storage. Example: gs://[BUCKET_NAME]/dictionary.txt
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type DictionaryCloudStoragePathObservation struct {

	// A url representing a file or path (no wildcards) in Cloud Storage. Example: gs://[BUCKET_NAME]/dictionary.txt
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type DictionaryCloudStoragePathParameters struct {

	// A url representing a file or path (no wildcards) in Cloud Storage. Example: gs://[BUCKET_NAME]/dictionary.txt
	// +kubebuilder:validation:Optional
	Path *string `json:"path" tf:"path,omitempty"`
}

type DictionaryInitParameters struct {

	// Newline-delimited file of words in Cloud Storage. Only a single file is accepted.
	// Structure is documented below.
	CloudStoragePath []CloudStoragePathInitParameters `json:"cloudStoragePath,omitempty" tf:"cloud_storage_path,omitempty"`

	// List of words or phrases to search for.
	// Structure is documented below.
	WordList []DictionaryWordListInitParameters `json:"wordList,omitempty" tf:"word_list,omitempty"`
}

type DictionaryObservation struct {

	// Newline-delimited file of words in Cloud Storage. Only a single file is accepted.
	// Structure is documented below.
	CloudStoragePath []CloudStoragePathObservation `json:"cloudStoragePath,omitempty" tf:"cloud_storage_path,omitempty"`

	// List of words or phrases to search for.
	// Structure is documented below.
	WordList []DictionaryWordListObservation `json:"wordList,omitempty" tf:"word_list,omitempty"`
}

type DictionaryParameters struct {

	// Newline-delimited file of words in Cloud Storage. Only a single file is accepted.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	CloudStoragePath []CloudStoragePathParameters `json:"cloudStoragePath,omitempty" tf:"cloud_storage_path,omitempty"`

	// List of words or phrases to search for.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	WordList []DictionaryWordListParameters `json:"wordList,omitempty" tf:"word_list,omitempty"`
}

type DictionaryWordListInitParameters struct {

	// Words or phrases defining the dictionary. The dictionary must contain at least one
	// phrase and every phrase must contain at least 2 characters that are letters or digits.
	Words []*string `json:"words,omitempty" tf:"words,omitempty"`
}

type DictionaryWordListObservation struct {

	// Words or phrases defining the dictionary. The dictionary must contain at least one
	// phrase and every phrase must contain at least 2 characters that are letters or digits.
	Words []*string `json:"words,omitempty" tf:"words,omitempty"`
}

type DictionaryWordListParameters struct {

	// Words or phrases defining the dictionary. The dictionary must contain at least one
	// phrase and every phrase must contain at least 2 characters that are letters or digits.
	// +kubebuilder:validation:Optional
	Words []*string `json:"words" tf:"words,omitempty"`
}

type ExcludeByHotwordInitParameters struct {

	// Regular expression pattern defining what qualifies as a hotword.
	// Structure is documented below.
	HotwordRegex []HotwordRegexInitParameters `json:"hotwordRegex,omitempty" tf:"hotword_regex,omitempty"`

	// Proximity of the finding within which the entire hotword must reside. The total length of the window cannot
	// exceed 1000 characters. Note that the finding itself will be included in the window, so that hotwords may be
	// used to match substrings of the finding itself. For example, the certainty of a phone number regex
	// (\d{3}) \d{3}-\d{4} could be adjusted upwards if the area code is known to be the local area code of a company
	// office using the hotword regex (xxx), where xxx is the area code in question.
	// Structure is documented below.
	Proximity []ProximityInitParameters `json:"proximity,omitempty" tf:"proximity,omitempty"`
}

type ExcludeByHotwordObservation struct {

	// Regular expression pattern defining what qualifies as a hotword.
	// Structure is documented below.
	HotwordRegex []HotwordRegexObservation `json:"hotwordRegex,omitempty" tf:"hotword_regex,omitempty"`

	// Proximity of the finding within which the entire hotword must reside. The total length of the window cannot
	// exceed 1000 characters. Note that the finding itself will be included in the window, so that hotwords may be
	// used to match substrings of the finding itself. For example, the certainty of a phone number regex
	// (\d{3}) \d{3}-\d{4} could be adjusted upwards if the area code is known to be the local area code of a company
	// office using the hotword regex (xxx), where xxx is the area code in question.
	// Structure is documented below.
	Proximity []ProximityObservation `json:"proximity,omitempty" tf:"proximity,omitempty"`
}

type ExcludeByHotwordParameters struct {

	// Regular expression pattern defining what qualifies as a hotword.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	HotwordRegex []HotwordRegexParameters `json:"hotwordRegex" tf:"hotword_regex,omitempty"`

	// Proximity of the finding within which the entire hotword must reside. The total length of the window cannot
	// exceed 1000 characters. Note that the finding itself will be included in the window, so that hotwords may be
	// used to match substrings of the finding itself. For example, the certainty of a phone number regex
	// (\d{3}) \d{3}-\d{4} could be adjusted upwards if the area code is known to be the local area code of a company
	// office using the hotword regex (xxx), where xxx is the area code in question.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Proximity []ProximityParameters `json:"proximity" tf:"proximity,omitempty"`
}

type ExcludeInfoTypesInfoTypesInitParameters struct {

	// Resource name of the requested StoredInfoType, for example organizations/433245324/storedInfoTypes/432452342
	// or projects/project-id/storedInfoTypes/432452342.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Optional custom sensitivity for this InfoType. This only applies to data profiling.
	// Structure is documented below.
	SensitivityScore []ExcludeInfoTypesInfoTypesSensitivityScoreInitParameters `json:"sensitivityScore,omitempty" tf:"sensitivity_score,omitempty"`

	// Version of the information type to use. By default, the version is set to stable
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type ExcludeInfoTypesInfoTypesObservation struct {

	// Resource name of the requested StoredInfoType, for example organizations/433245324/storedInfoTypes/432452342
	// or projects/project-id/storedInfoTypes/432452342.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Optional custom sensitivity for this InfoType. This only applies to data profiling.
	// Structure is documented below.
	SensitivityScore []ExcludeInfoTypesInfoTypesSensitivityScoreObservation `json:"sensitivityScore,omitempty" tf:"sensitivity_score,omitempty"`

	// Version of the information type to use. By default, the version is set to stable
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type ExcludeInfoTypesInfoTypesParameters struct {

	// Resource name of the requested StoredInfoType, for example organizations/433245324/storedInfoTypes/432452342
	// or projects/project-id/storedInfoTypes/432452342.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Optional custom sensitivity for this InfoType. This only applies to data profiling.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	SensitivityScore []ExcludeInfoTypesInfoTypesSensitivityScoreParameters `json:"sensitivityScore,omitempty" tf:"sensitivity_score,omitempty"`

	// Version of the information type to use. By default, the version is set to stable
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type ExcludeInfoTypesInfoTypesSensitivityScoreInitParameters struct {

	// The sensitivity score applied to the resource.
	// Possible values are: SENSITIVITY_LOW, SENSITIVITY_MODERATE, SENSITIVITY_HIGH.
	Score *string `json:"score,omitempty" tf:"score,omitempty"`
}

type ExcludeInfoTypesInfoTypesSensitivityScoreObservation struct {

	// The sensitivity score applied to the resource.
	// Possible values are: SENSITIVITY_LOW, SENSITIVITY_MODERATE, SENSITIVITY_HIGH.
	Score *string `json:"score,omitempty" tf:"score,omitempty"`
}

type ExcludeInfoTypesInfoTypesSensitivityScoreParameters struct {

	// The sensitivity score applied to the resource.
	// Possible values are: SENSITIVITY_LOW, SENSITIVITY_MODERATE, SENSITIVITY_HIGH.
	// +kubebuilder:validation:Optional
	Score *string `json:"score" tf:"score,omitempty"`
}

type ExcludeInfoTypesInitParameters struct {

	// List of infoTypes this rule set is applied to.
	// Structure is documented below.
	InfoTypes []ExcludeInfoTypesInfoTypesInitParameters `json:"infoTypes,omitempty" tf:"info_types,omitempty"`
}

type ExcludeInfoTypesObservation struct {

	// List of infoTypes this rule set is applied to.
	// Structure is documented below.
	InfoTypes []ExcludeInfoTypesInfoTypesObservation `json:"infoTypes,omitempty" tf:"info_types,omitempty"`
}

type ExcludeInfoTypesParameters struct {

	// List of infoTypes this rule set is applied to.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	InfoTypes []ExcludeInfoTypesInfoTypesParameters `json:"infoTypes" tf:"info_types,omitempty"`
}

type ExclusionRuleDictionaryInitParameters struct {

	// Newline-delimited file of words in Cloud Storage. Only a single file is accepted.
	// Structure is documented below.
	CloudStoragePath []DictionaryCloudStoragePathInitParameters `json:"cloudStoragePath,omitempty" tf:"cloud_storage_path,omitempty"`

	// List of words or phrases to search for.
	// Structure is documented below.
	WordList []ExclusionRuleDictionaryWordListInitParameters `json:"wordList,omitempty" tf:"word_list,omitempty"`
}

type ExclusionRuleDictionaryObservation struct {

	// Newline-delimited file of words in Cloud Storage. Only a single file is accepted.
	// Structure is documented below.
	CloudStoragePath []DictionaryCloudStoragePathObservation `json:"cloudStoragePath,omitempty" tf:"cloud_storage_path,omitempty"`

	// List of words or phrases to search for.
	// Structure is documented below.
	WordList []ExclusionRuleDictionaryWordListObservation `json:"wordList,omitempty" tf:"word_list,omitempty"`
}

type ExclusionRuleDictionaryParameters struct {

	// Newline-delimited file of words in Cloud Storage. Only a single file is accepted.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	CloudStoragePath []DictionaryCloudStoragePathParameters `json:"cloudStoragePath,omitempty" tf:"cloud_storage_path,omitempty"`

	// List of words or phrases to search for.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	WordList []ExclusionRuleDictionaryWordListParameters `json:"wordList,omitempty" tf:"word_list,omitempty"`
}

type ExclusionRuleDictionaryWordListInitParameters struct {

	// Words or phrases defining the dictionary. The dictionary must contain at least one
	// phrase and every phrase must contain at least 2 characters that are letters or digits.
	Words []*string `json:"words,omitempty" tf:"words,omitempty"`
}

type ExclusionRuleDictionaryWordListObservation struct {

	// Words or phrases defining the dictionary. The dictionary must contain at least one
	// phrase and every phrase must contain at least 2 characters that are letters or digits.
	Words []*string `json:"words,omitempty" tf:"words,omitempty"`
}

type ExclusionRuleDictionaryWordListParameters struct {

	// Words or phrases defining the dictionary. The dictionary must contain at least one
	// phrase and every phrase must contain at least 2 characters that are letters or digits.
	// +kubebuilder:validation:Optional
	Words []*string `json:"words" tf:"words,omitempty"`
}

type ExclusionRuleInitParameters struct {

	// Dictionary which defines the rule.
	// Structure is documented below.
	Dictionary []ExclusionRuleDictionaryInitParameters `json:"dictionary,omitempty" tf:"dictionary,omitempty"`

	// Drop if the hotword rule is contained in the proximate context.
	// For tabular data, the context includes the column name.
	// Structure is documented below.
	ExcludeByHotword []ExcludeByHotwordInitParameters `json:"excludeByHotword,omitempty" tf:"exclude_by_hotword,omitempty"`

	// When true, excludes type information of the findings.
	ExcludeInfoTypes []ExcludeInfoTypesInitParameters `json:"excludeInfoTypes,omitempty" tf:"exclude_info_types,omitempty"`

	// How the rule is applied. See the documentation for more information: https://cloud.google.com/dlp/docs/reference/rest/v2/InspectConfig#MatchingType
	// Possible values are: MATCHING_TYPE_FULL_MATCH, MATCHING_TYPE_PARTIAL_MATCH, MATCHING_TYPE_INVERSE_MATCH.
	MatchingType *string `json:"matchingType,omitempty" tf:"matching_type,omitempty"`

	// Regular expression which defines the rule.
	// Structure is documented below.
	Regex []ExclusionRuleRegexInitParameters `json:"regex,omitempty" tf:"regex,omitempty"`
}

type ExclusionRuleObservation struct {

	// Dictionary which defines the rule.
	// Structure is documented below.
	Dictionary []ExclusionRuleDictionaryObservation `json:"dictionary,omitempty" tf:"dictionary,omitempty"`

	// Drop if the hotword rule is contained in the proximate context.
	// For tabular data, the context includes the column name.
	// Structure is documented below.
	ExcludeByHotword []ExcludeByHotwordObservation `json:"excludeByHotword,omitempty" tf:"exclude_by_hotword,omitempty"`

	// When true, excludes type information of the findings.
	ExcludeInfoTypes []ExcludeInfoTypesObservation `json:"excludeInfoTypes,omitempty" tf:"exclude_info_types,omitempty"`

	// How the rule is applied. See the documentation for more information: https://cloud.google.com/dlp/docs/reference/rest/v2/InspectConfig#MatchingType
	// Possible values are: MATCHING_TYPE_FULL_MATCH, MATCHING_TYPE_PARTIAL_MATCH, MATCHING_TYPE_INVERSE_MATCH.
	MatchingType *string `json:"matchingType,omitempty" tf:"matching_type,omitempty"`

	// Regular expression which defines the rule.
	// Structure is documented below.
	Regex []ExclusionRuleRegexObservation `json:"regex,omitempty" tf:"regex,omitempty"`
}

type ExclusionRuleParameters struct {

	// Dictionary which defines the rule.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Dictionary []ExclusionRuleDictionaryParameters `json:"dictionary,omitempty" tf:"dictionary,omitempty"`

	// Drop if the hotword rule is contained in the proximate context.
	// For tabular data, the context includes the column name.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	ExcludeByHotword []ExcludeByHotwordParameters `json:"excludeByHotword,omitempty" tf:"exclude_by_hotword,omitempty"`

	// When true, excludes type information of the findings.
	// +kubebuilder:validation:Optional
	ExcludeInfoTypes []ExcludeInfoTypesParameters `json:"excludeInfoTypes,omitempty" tf:"exclude_info_types,omitempty"`

	// How the rule is applied. See the documentation for more information: https://cloud.google.com/dlp/docs/reference/rest/v2/InspectConfig#MatchingType
	// Possible values are: MATCHING_TYPE_FULL_MATCH, MATCHING_TYPE_PARTIAL_MATCH, MATCHING_TYPE_INVERSE_MATCH.
	// +kubebuilder:validation:Optional
	MatchingType *string `json:"matchingType" tf:"matching_type,omitempty"`

	// Regular expression which defines the rule.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Regex []ExclusionRuleRegexParameters `json:"regex,omitempty" tf:"regex,omitempty"`
}

type ExclusionRuleRegexInitParameters struct {

	// The index of the submatch to extract as findings. When not specified, the entire match is returned. No more than 3 may be included.
	GroupIndexes []*float64 `json:"groupIndexes,omitempty" tf:"group_indexes,omitempty"`

	// Pattern defining the regular expression.
	// Its syntax (https://github.com/google/re2/wiki/Syntax) can be found under the google/re2 repository on GitHub.
	Pattern *string `json:"pattern,omitempty" tf:"pattern,omitempty"`
}

type ExclusionRuleRegexObservation struct {

	// The index of the submatch to extract as findings. When not specified, the entire match is returned. No more than 3 may be included.
	GroupIndexes []*float64 `json:"groupIndexes,omitempty" tf:"group_indexes,omitempty"`

	// Pattern defining the regular expression.
	// Its syntax (https://github.com/google/re2/wiki/Syntax) can be found under the google/re2 repository on GitHub.
	Pattern *string `json:"pattern,omitempty" tf:"pattern,omitempty"`
}

type ExclusionRuleRegexParameters struct {

	// The index of the submatch to extract as findings. When not specified, the entire match is returned. No more than 3 may be included.
	// +kubebuilder:validation:Optional
	GroupIndexes []*float64 `json:"groupIndexes,omitempty" tf:"group_indexes,omitempty"`

	// Pattern defining the regular expression.
	// Its syntax (https://github.com/google/re2/wiki/Syntax) can be found under the google/re2 repository on GitHub.
	// +kubebuilder:validation:Optional
	Pattern *string `json:"pattern" tf:"pattern,omitempty"`
}

type HotwordRegexInitParameters struct {

	// The index of the submatch to extract as findings. When not specified, the entire match is returned. No more than 3 may be included.
	GroupIndexes []*float64 `json:"groupIndexes,omitempty" tf:"group_indexes,omitempty"`

	// Pattern defining the regular expression.
	// Its syntax (https://github.com/google/re2/wiki/Syntax) can be found under the google/re2 repository on GitHub.
	Pattern *string `json:"pattern,omitempty" tf:"pattern,omitempty"`
}

type HotwordRegexObservation struct {

	// The index of the submatch to extract as findings. When not specified, the entire match is returned. No more than 3 may be included.
	GroupIndexes []*float64 `json:"groupIndexes,omitempty" tf:"group_indexes,omitempty"`

	// Pattern defining the regular expression.
	// Its syntax (https://github.com/google/re2/wiki/Syntax) can be found under the google/re2 repository on GitHub.
	Pattern *string `json:"pattern,omitempty" tf:"pattern,omitempty"`
}

type HotwordRegexParameters struct {

	// The index of the submatch to extract as findings. When not specified, the entire match is returned. No more than 3 may be included.
	// +kubebuilder:validation:Optional
	GroupIndexes []*float64 `json:"groupIndexes,omitempty" tf:"group_indexes,omitempty"`

	// Pattern defining the regular expression.
	// Its syntax (https://github.com/google/re2/wiki/Syntax) can be found under the google/re2 repository on GitHub.
	// +kubebuilder:validation:Optional
	Pattern *string `json:"pattern" tf:"pattern,omitempty"`
}

type HotwordRuleHotwordRegexInitParameters struct {

	// The index of the submatch to extract as findings. When not specified, the entire match is returned. No more than 3 may be included.
	GroupIndexes []*float64 `json:"groupIndexes,omitempty" tf:"group_indexes,omitempty"`

	// Pattern defining the regular expression.
	// Its syntax (https://github.com/google/re2/wiki/Syntax) can be found under the google/re2 repository on GitHub.
	Pattern *string `json:"pattern,omitempty" tf:"pattern,omitempty"`
}

type HotwordRuleHotwordRegexObservation struct {

	// The index of the submatch to extract as findings. When not specified, the entire match is returned. No more than 3 may be included.
	GroupIndexes []*float64 `json:"groupIndexes,omitempty" tf:"group_indexes,omitempty"`

	// Pattern defining the regular expression.
	// Its syntax (https://github.com/google/re2/wiki/Syntax) can be found under the google/re2 repository on GitHub.
	Pattern *string `json:"pattern,omitempty" tf:"pattern,omitempty"`
}

type HotwordRuleHotwordRegexParameters struct {

	// The index of the submatch to extract as findings. When not specified, the entire match is returned. No more than 3 may be included.
	// +kubebuilder:validation:Optional
	GroupIndexes []*float64 `json:"groupIndexes,omitempty" tf:"group_indexes,omitempty"`

	// Pattern defining the regular expression.
	// Its syntax (https://github.com/google/re2/wiki/Syntax) can be found under the google/re2 repository on GitHub.
	// +kubebuilder:validation:Optional
	Pattern *string `json:"pattern" tf:"pattern,omitempty"`
}

type HotwordRuleInitParameters struct {

	// Regular expression pattern defining what qualifies as a hotword.
	// Structure is documented below.
	HotwordRegex []HotwordRuleHotwordRegexInitParameters `json:"hotwordRegex,omitempty" tf:"hotword_regex,omitempty"`

	// Likelihood adjustment to apply to all matching findings.
	// Structure is documented below.
	LikelihoodAdjustment []LikelihoodAdjustmentInitParameters `json:"likelihoodAdjustment,omitempty" tf:"likelihood_adjustment,omitempty"`

	// Proximity of the finding within which the entire hotword must reside. The total length of the window cannot
	// exceed 1000 characters. Note that the finding itself will be included in the window, so that hotwords may be
	// used to match substrings of the finding itself. For example, the certainty of a phone number regex
	// (\d{3}) \d{3}-\d{4} could be adjusted upwards if the area code is known to be the local area code of a company
	// office using the hotword regex (xxx), where xxx is the area code in question.
	// Structure is documented below.
	Proximity []HotwordRuleProximityInitParameters `json:"proximity,omitempty" tf:"proximity,omitempty"`
}

type HotwordRuleObservation struct {

	// Regular expression pattern defining what qualifies as a hotword.
	// Structure is documented below.
	HotwordRegex []HotwordRuleHotwordRegexObservation `json:"hotwordRegex,omitempty" tf:"hotword_regex,omitempty"`

	// Likelihood adjustment to apply to all matching findings.
	// Structure is documented below.
	LikelihoodAdjustment []LikelihoodAdjustmentObservation `json:"likelihoodAdjustment,omitempty" tf:"likelihood_adjustment,omitempty"`

	// Proximity of the finding within which the entire hotword must reside. The total length of the window cannot
	// exceed 1000 characters. Note that the finding itself will be included in the window, so that hotwords may be
	// used to match substrings of the finding itself. For example, the certainty of a phone number regex
	// (\d{3}) \d{3}-\d{4} could be adjusted upwards if the area code is known to be the local area code of a company
	// office using the hotword regex (xxx), where xxx is the area code in question.
	// Structure is documented below.
	Proximity []HotwordRuleProximityObservation `json:"proximity,omitempty" tf:"proximity,omitempty"`
}

type HotwordRuleParameters struct {

	// Regular expression pattern defining what qualifies as a hotword.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	HotwordRegex []HotwordRuleHotwordRegexParameters `json:"hotwordRegex" tf:"hotword_regex,omitempty"`

	// Likelihood adjustment to apply to all matching findings.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	LikelihoodAdjustment []LikelihoodAdjustmentParameters `json:"likelihoodAdjustment" tf:"likelihood_adjustment,omitempty"`

	// Proximity of the finding within which the entire hotword must reside. The total length of the window cannot
	// exceed 1000 characters. Note that the finding itself will be included in the window, so that hotwords may be
	// used to match substrings of the finding itself. For example, the certainty of a phone number regex
	// (\d{3}) \d{3}-\d{4} could be adjusted upwards if the area code is known to be the local area code of a company
	// office using the hotword regex (xxx), where xxx is the area code in question.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Proximity []HotwordRuleProximityParameters `json:"proximity" tf:"proximity,omitempty"`
}

type HotwordRuleProximityInitParameters struct {

	// Number of characters after the finding to consider. Either this or window_before must be specified
	WindowAfter *float64 `json:"windowAfter,omitempty" tf:"window_after,omitempty"`

	// Number of characters before the finding to consider. Either this or window_after must be specified
	WindowBefore *float64 `json:"windowBefore,omitempty" tf:"window_before,omitempty"`
}

type HotwordRuleProximityObservation struct {

	// Number of characters after the finding to consider. Either this or window_before must be specified
	WindowAfter *float64 `json:"windowAfter,omitempty" tf:"window_after,omitempty"`

	// Number of characters before the finding to consider. Either this or window_after must be specified
	WindowBefore *float64 `json:"windowBefore,omitempty" tf:"window_before,omitempty"`
}

type HotwordRuleProximityParameters struct {

	// Number of characters after the finding to consider. Either this or window_before must be specified
	// +kubebuilder:validation:Optional
	WindowAfter *float64 `json:"windowAfter,omitempty" tf:"window_after,omitempty"`

	// Number of characters before the finding to consider. Either this or window_after must be specified
	// +kubebuilder:validation:Optional
	WindowBefore *float64 `json:"windowBefore,omitempty" tf:"window_before,omitempty"`
}

type InfoTypeInitParameters struct {

	// Resource name of the requested StoredInfoType, for example organizations/433245324/storedInfoTypes/432452342
	// or projects/project-id/storedInfoTypes/432452342.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Optional custom sensitivity for this InfoType. This only applies to data profiling.
	// Structure is documented below.
	SensitivityScore []InfoTypeSensitivityScoreInitParameters `json:"sensitivityScore,omitempty" tf:"sensitivity_score,omitempty"`

	// Version of the information type to use. By default, the version is set to stable
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type InfoTypeObservation struct {

	// Resource name of the requested StoredInfoType, for example organizations/433245324/storedInfoTypes/432452342
	// or projects/project-id/storedInfoTypes/432452342.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Optional custom sensitivity for this InfoType. This only applies to data profiling.
	// Structure is documented below.
	SensitivityScore []InfoTypeSensitivityScoreObservation `json:"sensitivityScore,omitempty" tf:"sensitivity_score,omitempty"`

	// Version of the information type to use. By default, the version is set to stable
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type InfoTypeParameters struct {

	// Resource name of the requested StoredInfoType, for example organizations/433245324/storedInfoTypes/432452342
	// or projects/project-id/storedInfoTypes/432452342.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Optional custom sensitivity for this InfoType. This only applies to data profiling.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	SensitivityScore []InfoTypeSensitivityScoreParameters `json:"sensitivityScore,omitempty" tf:"sensitivity_score,omitempty"`

	// Version of the information type to use. By default, the version is set to stable
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type InfoTypeSensitivityScoreInitParameters struct {

	// The sensitivity score applied to the resource.
	// Possible values are: SENSITIVITY_LOW, SENSITIVITY_MODERATE, SENSITIVITY_HIGH.
	Score *string `json:"score,omitempty" tf:"score,omitempty"`
}

type InfoTypeSensitivityScoreObservation struct {

	// The sensitivity score applied to the resource.
	// Possible values are: SENSITIVITY_LOW, SENSITIVITY_MODERATE, SENSITIVITY_HIGH.
	Score *string `json:"score,omitempty" tf:"score,omitempty"`
}

type InfoTypeSensitivityScoreParameters struct {

	// The sensitivity score applied to the resource.
	// Possible values are: SENSITIVITY_LOW, SENSITIVITY_MODERATE, SENSITIVITY_HIGH.
	// +kubebuilder:validation:Optional
	Score *string `json:"score" tf:"score,omitempty"`
}

type InspectConfigInfoTypesInitParameters struct {

	// Resource name of the requested StoredInfoType, for example organizations/433245324/storedInfoTypes/432452342
	// or projects/project-id/storedInfoTypes/432452342.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Optional custom sensitivity for this InfoType. This only applies to data profiling.
	// Structure is documented below.
	SensitivityScore []InspectConfigInfoTypesSensitivityScoreInitParameters `json:"sensitivityScore,omitempty" tf:"sensitivity_score,omitempty"`

	// Version of the information type to use. By default, the version is set to stable
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type InspectConfigInfoTypesObservation struct {

	// Resource name of the requested StoredInfoType, for example organizations/433245324/storedInfoTypes/432452342
	// or projects/project-id/storedInfoTypes/432452342.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Optional custom sensitivity for this InfoType. This only applies to data profiling.
	// Structure is documented below.
	SensitivityScore []InspectConfigInfoTypesSensitivityScoreObservation `json:"sensitivityScore,omitempty" tf:"sensitivity_score,omitempty"`

	// Version of the information type to use. By default, the version is set to stable
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type InspectConfigInfoTypesParameters struct {

	// Resource name of the requested StoredInfoType, for example organizations/433245324/storedInfoTypes/432452342
	// or projects/project-id/storedInfoTypes/432452342.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Optional custom sensitivity for this InfoType. This only applies to data profiling.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	SensitivityScore []InspectConfigInfoTypesSensitivityScoreParameters `json:"sensitivityScore,omitempty" tf:"sensitivity_score,omitempty"`

	// Version of the information type to use. By default, the version is set to stable
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type InspectConfigInfoTypesSensitivityScoreInitParameters struct {

	// The sensitivity score applied to the resource.
	// Possible values are: SENSITIVITY_LOW, SENSITIVITY_MODERATE, SENSITIVITY_HIGH.
	Score *string `json:"score,omitempty" tf:"score,omitempty"`
}

type InspectConfigInfoTypesSensitivityScoreObservation struct {

	// The sensitivity score applied to the resource.
	// Possible values are: SENSITIVITY_LOW, SENSITIVITY_MODERATE, SENSITIVITY_HIGH.
	Score *string `json:"score,omitempty" tf:"score,omitempty"`
}

type InspectConfigInfoTypesSensitivityScoreParameters struct {

	// The sensitivity score applied to the resource.
	// Possible values are: SENSITIVITY_LOW, SENSITIVITY_MODERATE, SENSITIVITY_HIGH.
	// +kubebuilder:validation:Optional
	Score *string `json:"score" tf:"score,omitempty"`
}

type InspectConfigInitParameters struct {

	// List of options defining data content to scan. If empty, text, images, and other content will be included.
	// Each value may be one of: CONTENT_TEXT, CONTENT_IMAGE.
	ContentOptions []*string `json:"contentOptions,omitempty" tf:"content_options,omitempty"`

	// Custom info types to be used. See https://cloud.google.com/dlp/docs/creating-custom-infotypes to learn more.
	// Structure is documented below.
	CustomInfoTypes []CustomInfoTypesInitParameters `json:"customInfoTypes,omitempty" tf:"custom_info_types,omitempty"`

	// When true, excludes type information of the findings.
	ExcludeInfoTypes *bool `json:"excludeInfoTypes,omitempty" tf:"exclude_info_types,omitempty"`

	// When true, a contextual quote from the data that triggered a finding is included in the response.
	IncludeQuote *bool `json:"includeQuote,omitempty" tf:"include_quote,omitempty"`

	// Restricts what infoTypes to look for. The values must correspond to InfoType values returned by infoTypes.list
	// or listed at https://cloud.google.com/dlp/docs/infotypes-reference.
	// When no InfoTypes or CustomInfoTypes are specified in a request, the system may automatically choose what detectors to run.
	// By default this may be all types, but may change over time as detectors are updated.
	// Structure is documented below.
	InfoTypes []InspectConfigInfoTypesInitParameters `json:"infoTypes,omitempty" tf:"info_types,omitempty"`

	// Configuration to control the number of findings returned.
	// Structure is documented below.
	Limits []LimitsInitParameters `json:"limits,omitempty" tf:"limits,omitempty"`

	// Only returns findings equal or above this threshold. See https://cloud.google.com/dlp/docs/likelihood for more info
	// Default value is POSSIBLE.
	// Possible values are: VERY_UNLIKELY, UNLIKELY, POSSIBLE, LIKELY, VERY_LIKELY.
	MinLikelihood *string `json:"minLikelihood,omitempty" tf:"min_likelihood,omitempty"`

	// Set of rules to apply to the findings for this InspectConfig. Exclusion rules, contained in the set are executed in the end,
	// other rules are executed in the order they are specified for each info type.
	// Structure is documented below.
	RuleSet []RuleSetInitParameters `json:"ruleSet,omitempty" tf:"rule_set,omitempty"`
}

type InspectConfigObservation struct {

	// List of options defining data content to scan. If empty, text, images, and other content will be included.
	// Each value may be one of: CONTENT_TEXT, CONTENT_IMAGE.
	ContentOptions []*string `json:"contentOptions,omitempty" tf:"content_options,omitempty"`

	// Custom info types to be used. See https://cloud.google.com/dlp/docs/creating-custom-infotypes to learn more.
	// Structure is documented below.
	CustomInfoTypes []CustomInfoTypesObservation `json:"customInfoTypes,omitempty" tf:"custom_info_types,omitempty"`

	// When true, excludes type information of the findings.
	ExcludeInfoTypes *bool `json:"excludeInfoTypes,omitempty" tf:"exclude_info_types,omitempty"`

	// When true, a contextual quote from the data that triggered a finding is included in the response.
	IncludeQuote *bool `json:"includeQuote,omitempty" tf:"include_quote,omitempty"`

	// Restricts what infoTypes to look for. The values must correspond to InfoType values returned by infoTypes.list
	// or listed at https://cloud.google.com/dlp/docs/infotypes-reference.
	// When no InfoTypes or CustomInfoTypes are specified in a request, the system may automatically choose what detectors to run.
	// By default this may be all types, but may change over time as detectors are updated.
	// Structure is documented below.
	InfoTypes []InspectConfigInfoTypesObservation `json:"infoTypes,omitempty" tf:"info_types,omitempty"`

	// Configuration to control the number of findings returned.
	// Structure is documented below.
	Limits []LimitsObservation `json:"limits,omitempty" tf:"limits,omitempty"`

	// Only returns findings equal or above this threshold. See https://cloud.google.com/dlp/docs/likelihood for more info
	// Default value is POSSIBLE.
	// Possible values are: VERY_UNLIKELY, UNLIKELY, POSSIBLE, LIKELY, VERY_LIKELY.
	MinLikelihood *string `json:"minLikelihood,omitempty" tf:"min_likelihood,omitempty"`

	// Set of rules to apply to the findings for this InspectConfig. Exclusion rules, contained in the set are executed in the end,
	// other rules are executed in the order they are specified for each info type.
	// Structure is documented below.
	RuleSet []RuleSetObservation `json:"ruleSet,omitempty" tf:"rule_set,omitempty"`
}

type InspectConfigParameters struct {

	// List of options defining data content to scan. If empty, text, images, and other content will be included.
	// Each value may be one of: CONTENT_TEXT, CONTENT_IMAGE.
	// +kubebuilder:validation:Optional
	ContentOptions []*string `json:"contentOptions,omitempty" tf:"content_options,omitempty"`

	// Custom info types to be used. See https://cloud.google.com/dlp/docs/creating-custom-infotypes to learn more.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	CustomInfoTypes []CustomInfoTypesParameters `json:"customInfoTypes,omitempty" tf:"custom_info_types,omitempty"`

	// When true, excludes type information of the findings.
	// +kubebuilder:validation:Optional
	ExcludeInfoTypes *bool `json:"excludeInfoTypes,omitempty" tf:"exclude_info_types,omitempty"`

	// When true, a contextual quote from the data that triggered a finding is included in the response.
	// +kubebuilder:validation:Optional
	IncludeQuote *bool `json:"includeQuote,omitempty" tf:"include_quote,omitempty"`

	// Restricts what infoTypes to look for. The values must correspond to InfoType values returned by infoTypes.list
	// or listed at https://cloud.google.com/dlp/docs/infotypes-reference.
	// When no InfoTypes or CustomInfoTypes are specified in a request, the system may automatically choose what detectors to run.
	// By default this may be all types, but may change over time as detectors are updated.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	InfoTypes []InspectConfigInfoTypesParameters `json:"infoTypes,omitempty" tf:"info_types,omitempty"`

	// Configuration to control the number of findings returned.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Limits []LimitsParameters `json:"limits,omitempty" tf:"limits,omitempty"`

	// Only returns findings equal or above this threshold. See https://cloud.google.com/dlp/docs/likelihood for more info
	// Default value is POSSIBLE.
	// Possible values are: VERY_UNLIKELY, UNLIKELY, POSSIBLE, LIKELY, VERY_LIKELY.
	// +kubebuilder:validation:Optional
	MinLikelihood *string `json:"minLikelihood,omitempty" tf:"min_likelihood,omitempty"`

	// Set of rules to apply to the findings for this InspectConfig. Exclusion rules, contained in the set are executed in the end,
	// other rules are executed in the order they are specified for each info type.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	RuleSet []RuleSetParameters `json:"ruleSet,omitempty" tf:"rule_set,omitempty"`
}

type InspectTemplateInitParameters struct {

	// A description of the inspect template.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// User set display name of the inspect template.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The core content of the template.
	// Structure is documented below.
	InspectConfig []InspectConfigInitParameters `json:"inspectConfig,omitempty" tf:"inspect_config,omitempty"`

	// The parent of the inspect template in any of the following formats:
	Parent *string `json:"parent,omitempty" tf:"parent,omitempty"`

	// The template id can contain uppercase and lowercase letters, numbers, and hyphens;
	// that is, it must match the regular expression: [a-zA-Z\d-_]+. The maximum length is
	// 100 characters. Can be empty to allow the system to generate one.
	TemplateID *string `json:"templateId,omitempty" tf:"template_id,omitempty"`
}

type InspectTemplateObservation struct {

	// A description of the inspect template.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// User set display name of the inspect template.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// an identifier for the resource with format {{parent}}/inspectTemplates/{{name}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The core content of the template.
	// Structure is documented below.
	InspectConfig []InspectConfigObservation `json:"inspectConfig,omitempty" tf:"inspect_config,omitempty"`

	// The resource name of the inspect template. Set by the server.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The parent of the inspect template in any of the following formats:
	Parent *string `json:"parent,omitempty" tf:"parent,omitempty"`

	// The template id can contain uppercase and lowercase letters, numbers, and hyphens;
	// that is, it must match the regular expression: [a-zA-Z\d-_]+. The maximum length is
	// 100 characters. Can be empty to allow the system to generate one.
	TemplateID *string `json:"templateId,omitempty" tf:"template_id,omitempty"`
}

type InspectTemplateParameters struct {

	// A description of the inspect template.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// User set display name of the inspect template.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The core content of the template.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	InspectConfig []InspectConfigParameters `json:"inspectConfig,omitempty" tf:"inspect_config,omitempty"`

	// The parent of the inspect template in any of the following formats:
	// +kubebuilder:validation:Optional
	Parent *string `json:"parent,omitempty" tf:"parent,omitempty"`

	// The template id can contain uppercase and lowercase letters, numbers, and hyphens;
	// that is, it must match the regular expression: [a-zA-Z\d-_]+. The maximum length is
	// 100 characters. Can be empty to allow the system to generate one.
	// +kubebuilder:validation:Optional
	TemplateID *string `json:"templateId,omitempty" tf:"template_id,omitempty"`
}

type LikelihoodAdjustmentInitParameters struct {

	// Set the likelihood of a finding to a fixed value. Either this or relative_likelihood can be set.
	// Possible values are: VERY_UNLIKELY, UNLIKELY, POSSIBLE, LIKELY, VERY_LIKELY.
	FixedLikelihood *string `json:"fixedLikelihood,omitempty" tf:"fixed_likelihood,omitempty"`

	// Increase or decrease the likelihood by the specified number of levels. For example,
	// if a finding would be POSSIBLE without the detection rule and relativeLikelihood is 1,
	// then it is upgraded to LIKELY, while a value of -1 would downgrade it to UNLIKELY.
	// Likelihood may never drop below VERY_UNLIKELY or exceed VERY_LIKELY, so applying an
	// adjustment of 1 followed by an adjustment of -1 when base likelihood is VERY_LIKELY
	// will result in a final likelihood of LIKELY. Either this or fixed_likelihood can be set.
	RelativeLikelihood *float64 `json:"relativeLikelihood,omitempty" tf:"relative_likelihood,omitempty"`
}

type LikelihoodAdjustmentObservation struct {

	// Set the likelihood of a finding to a fixed value. Either this or relative_likelihood can be set.
	// Possible values are: VERY_UNLIKELY, UNLIKELY, POSSIBLE, LIKELY, VERY_LIKELY.
	FixedLikelihood *string `json:"fixedLikelihood,omitempty" tf:"fixed_likelihood,omitempty"`

	// Increase or decrease the likelihood by the specified number of levels. For example,
	// if a finding would be POSSIBLE without the detection rule and relativeLikelihood is 1,
	// then it is upgraded to LIKELY, while a value of -1 would downgrade it to UNLIKELY.
	// Likelihood may never drop below VERY_UNLIKELY or exceed VERY_LIKELY, so applying an
	// adjustment of 1 followed by an adjustment of -1 when base likelihood is VERY_LIKELY
	// will result in a final likelihood of LIKELY. Either this or fixed_likelihood can be set.
	RelativeLikelihood *float64 `json:"relativeLikelihood,omitempty" tf:"relative_likelihood,omitempty"`
}

type LikelihoodAdjustmentParameters struct {

	// Set the likelihood of a finding to a fixed value. Either this or relative_likelihood can be set.
	// Possible values are: VERY_UNLIKELY, UNLIKELY, POSSIBLE, LIKELY, VERY_LIKELY.
	// +kubebuilder:validation:Optional
	FixedLikelihood *string `json:"fixedLikelihood,omitempty" tf:"fixed_likelihood,omitempty"`

	// Increase or decrease the likelihood by the specified number of levels. For example,
	// if a finding would be POSSIBLE without the detection rule and relativeLikelihood is 1,
	// then it is upgraded to LIKELY, while a value of -1 would downgrade it to UNLIKELY.
	// Likelihood may never drop below VERY_UNLIKELY or exceed VERY_LIKELY, so applying an
	// adjustment of 1 followed by an adjustment of -1 when base likelihood is VERY_LIKELY
	// will result in a final likelihood of LIKELY. Either this or fixed_likelihood can be set.
	// +kubebuilder:validation:Optional
	RelativeLikelihood *float64 `json:"relativeLikelihood,omitempty" tf:"relative_likelihood,omitempty"`
}

type LimitsInitParameters struct {

	// Configuration of findings limit given for specified infoTypes.
	// Structure is documented below.
	MaxFindingsPerInfoType []MaxFindingsPerInfoTypeInitParameters `json:"maxFindingsPerInfoType,omitempty" tf:"max_findings_per_info_type,omitempty"`

	// Max number of findings that will be returned for each item scanned. The maximum returned is 2000.
	MaxFindingsPerItem *float64 `json:"maxFindingsPerItem,omitempty" tf:"max_findings_per_item,omitempty"`

	// Max number of findings that will be returned per request/job. The maximum returned is 2000.
	MaxFindingsPerRequest *float64 `json:"maxFindingsPerRequest,omitempty" tf:"max_findings_per_request,omitempty"`
}

type LimitsObservation struct {

	// Configuration of findings limit given for specified infoTypes.
	// Structure is documented below.
	MaxFindingsPerInfoType []MaxFindingsPerInfoTypeObservation `json:"maxFindingsPerInfoType,omitempty" tf:"max_findings_per_info_type,omitempty"`

	// Max number of findings that will be returned for each item scanned. The maximum returned is 2000.
	MaxFindingsPerItem *float64 `json:"maxFindingsPerItem,omitempty" tf:"max_findings_per_item,omitempty"`

	// Max number of findings that will be returned per request/job. The maximum returned is 2000.
	MaxFindingsPerRequest *float64 `json:"maxFindingsPerRequest,omitempty" tf:"max_findings_per_request,omitempty"`
}

type LimitsParameters struct {

	// Configuration of findings limit given for specified infoTypes.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	MaxFindingsPerInfoType []MaxFindingsPerInfoTypeParameters `json:"maxFindingsPerInfoType,omitempty" tf:"max_findings_per_info_type,omitempty"`

	// Max number of findings that will be returned for each item scanned. The maximum returned is 2000.
	// +kubebuilder:validation:Optional
	MaxFindingsPerItem *float64 `json:"maxFindingsPerItem" tf:"max_findings_per_item,omitempty"`

	// Max number of findings that will be returned per request/job. The maximum returned is 2000.
	// +kubebuilder:validation:Optional
	MaxFindingsPerRequest *float64 `json:"maxFindingsPerRequest" tf:"max_findings_per_request,omitempty"`
}

type MaxFindingsPerInfoTypeInfoTypeInitParameters struct {

	// Resource name of the requested StoredInfoType, for example organizations/433245324/storedInfoTypes/432452342
	// or projects/project-id/storedInfoTypes/432452342.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Optional custom sensitivity for this InfoType. This only applies to data profiling.
	// Structure is documented below.
	SensitivityScore []MaxFindingsPerInfoTypeInfoTypeSensitivityScoreInitParameters `json:"sensitivityScore,omitempty" tf:"sensitivity_score,omitempty"`

	// Version of the information type to use. By default, the version is set to stable
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type MaxFindingsPerInfoTypeInfoTypeObservation struct {

	// Resource name of the requested StoredInfoType, for example organizations/433245324/storedInfoTypes/432452342
	// or projects/project-id/storedInfoTypes/432452342.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Optional custom sensitivity for this InfoType. This only applies to data profiling.
	// Structure is documented below.
	SensitivityScore []MaxFindingsPerInfoTypeInfoTypeSensitivityScoreObservation `json:"sensitivityScore,omitempty" tf:"sensitivity_score,omitempty"`

	// Version of the information type to use. By default, the version is set to stable
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type MaxFindingsPerInfoTypeInfoTypeParameters struct {

	// Resource name of the requested StoredInfoType, for example organizations/433245324/storedInfoTypes/432452342
	// or projects/project-id/storedInfoTypes/432452342.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Optional custom sensitivity for this InfoType. This only applies to data profiling.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	SensitivityScore []MaxFindingsPerInfoTypeInfoTypeSensitivityScoreParameters `json:"sensitivityScore,omitempty" tf:"sensitivity_score,omitempty"`

	// Version of the information type to use. By default, the version is set to stable
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type MaxFindingsPerInfoTypeInfoTypeSensitivityScoreInitParameters struct {

	// The sensitivity score applied to the resource.
	// Possible values are: SENSITIVITY_LOW, SENSITIVITY_MODERATE, SENSITIVITY_HIGH.
	Score *string `json:"score,omitempty" tf:"score,omitempty"`
}

type MaxFindingsPerInfoTypeInfoTypeSensitivityScoreObservation struct {

	// The sensitivity score applied to the resource.
	// Possible values are: SENSITIVITY_LOW, SENSITIVITY_MODERATE, SENSITIVITY_HIGH.
	Score *string `json:"score,omitempty" tf:"score,omitempty"`
}

type MaxFindingsPerInfoTypeInfoTypeSensitivityScoreParameters struct {

	// The sensitivity score applied to the resource.
	// Possible values are: SENSITIVITY_LOW, SENSITIVITY_MODERATE, SENSITIVITY_HIGH.
	// +kubebuilder:validation:Optional
	Score *string `json:"score" tf:"score,omitempty"`
}

type MaxFindingsPerInfoTypeInitParameters struct {

	// Type of information the findings limit applies to. Only one limit per infoType should be provided. If InfoTypeLimit does
	// not have an infoType, the DLP API applies the limit against all infoTypes that are found but not
	// specified in another InfoTypeLimit.
	// Structure is documented below.
	InfoType []MaxFindingsPerInfoTypeInfoTypeInitParameters `json:"infoType,omitempty" tf:"info_type,omitempty"`

	// Max findings limit for the given infoType.
	MaxFindings *float64 `json:"maxFindings,omitempty" tf:"max_findings,omitempty"`
}

type MaxFindingsPerInfoTypeObservation struct {

	// Type of information the findings limit applies to. Only one limit per infoType should be provided. If InfoTypeLimit does
	// not have an infoType, the DLP API applies the limit against all infoTypes that are found but not
	// specified in another InfoTypeLimit.
	// Structure is documented below.
	InfoType []MaxFindingsPerInfoTypeInfoTypeObservation `json:"infoType,omitempty" tf:"info_type,omitempty"`

	// Max findings limit for the given infoType.
	MaxFindings *float64 `json:"maxFindings,omitempty" tf:"max_findings,omitempty"`
}

type MaxFindingsPerInfoTypeParameters struct {

	// Type of information the findings limit applies to. Only one limit per infoType should be provided. If InfoTypeLimit does
	// not have an infoType, the DLP API applies the limit against all infoTypes that are found but not
	// specified in another InfoTypeLimit.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	InfoType []MaxFindingsPerInfoTypeInfoTypeParameters `json:"infoType" tf:"info_type,omitempty"`

	// Max findings limit for the given infoType.
	// +kubebuilder:validation:Optional
	MaxFindings *float64 `json:"maxFindings" tf:"max_findings,omitempty"`
}

type ProximityInitParameters struct {

	// Number of characters after the finding to consider. Either this or window_before must be specified
	WindowAfter *float64 `json:"windowAfter,omitempty" tf:"window_after,omitempty"`

	// Number of characters before the finding to consider. Either this or window_after must be specified
	WindowBefore *float64 `json:"windowBefore,omitempty" tf:"window_before,omitempty"`
}

type ProximityObservation struct {

	// Number of characters after the finding to consider. Either this or window_before must be specified
	WindowAfter *float64 `json:"windowAfter,omitempty" tf:"window_after,omitempty"`

	// Number of characters before the finding to consider. Either this or window_after must be specified
	WindowBefore *float64 `json:"windowBefore,omitempty" tf:"window_before,omitempty"`
}

type ProximityParameters struct {

	// Number of characters after the finding to consider. Either this or window_before must be specified
	// +kubebuilder:validation:Optional
	WindowAfter *float64 `json:"windowAfter,omitempty" tf:"window_after,omitempty"`

	// Number of characters before the finding to consider. Either this or window_after must be specified
	// +kubebuilder:validation:Optional
	WindowBefore *float64 `json:"windowBefore,omitempty" tf:"window_before,omitempty"`
}

type RegexInitParameters struct {

	// The index of the submatch to extract as findings. When not specified, the entire match is returned. No more than 3 may be included.
	GroupIndexes []*float64 `json:"groupIndexes,omitempty" tf:"group_indexes,omitempty"`

	// Pattern defining the regular expression.
	// Its syntax (https://github.com/google/re2/wiki/Syntax) can be found under the google/re2 repository on GitHub.
	Pattern *string `json:"pattern,omitempty" tf:"pattern,omitempty"`
}

type RegexObservation struct {

	// The index of the submatch to extract as findings. When not specified, the entire match is returned. No more than 3 may be included.
	GroupIndexes []*float64 `json:"groupIndexes,omitempty" tf:"group_indexes,omitempty"`

	// Pattern defining the regular expression.
	// Its syntax (https://github.com/google/re2/wiki/Syntax) can be found under the google/re2 repository on GitHub.
	Pattern *string `json:"pattern,omitempty" tf:"pattern,omitempty"`
}

type RegexParameters struct {

	// The index of the submatch to extract as findings. When not specified, the entire match is returned. No more than 3 may be included.
	// +kubebuilder:validation:Optional
	GroupIndexes []*float64 `json:"groupIndexes,omitempty" tf:"group_indexes,omitempty"`

	// Pattern defining the regular expression.
	// Its syntax (https://github.com/google/re2/wiki/Syntax) can be found under the google/re2 repository on GitHub.
	// +kubebuilder:validation:Optional
	Pattern *string `json:"pattern" tf:"pattern,omitempty"`
}

type RuleSetInfoTypesInitParameters struct {

	// Resource name of the requested StoredInfoType, for example organizations/433245324/storedInfoTypes/432452342
	// or projects/project-id/storedInfoTypes/432452342.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Optional custom sensitivity for this InfoType. This only applies to data profiling.
	// Structure is documented below.
	SensitivityScore []RuleSetInfoTypesSensitivityScoreInitParameters `json:"sensitivityScore,omitempty" tf:"sensitivity_score,omitempty"`

	// Version of the information type to use. By default, the version is set to stable
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type RuleSetInfoTypesObservation struct {

	// Resource name of the requested StoredInfoType, for example organizations/433245324/storedInfoTypes/432452342
	// or projects/project-id/storedInfoTypes/432452342.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Optional custom sensitivity for this InfoType. This only applies to data profiling.
	// Structure is documented below.
	SensitivityScore []RuleSetInfoTypesSensitivityScoreObservation `json:"sensitivityScore,omitempty" tf:"sensitivity_score,omitempty"`

	// Version of the information type to use. By default, the version is set to stable
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type RuleSetInfoTypesParameters struct {

	// Resource name of the requested StoredInfoType, for example organizations/433245324/storedInfoTypes/432452342
	// or projects/project-id/storedInfoTypes/432452342.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Optional custom sensitivity for this InfoType. This only applies to data profiling.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	SensitivityScore []RuleSetInfoTypesSensitivityScoreParameters `json:"sensitivityScore,omitempty" tf:"sensitivity_score,omitempty"`

	// Version of the information type to use. By default, the version is set to stable
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type RuleSetInfoTypesSensitivityScoreInitParameters struct {

	// The sensitivity score applied to the resource.
	// Possible values are: SENSITIVITY_LOW, SENSITIVITY_MODERATE, SENSITIVITY_HIGH.
	Score *string `json:"score,omitempty" tf:"score,omitempty"`
}

type RuleSetInfoTypesSensitivityScoreObservation struct {

	// The sensitivity score applied to the resource.
	// Possible values are: SENSITIVITY_LOW, SENSITIVITY_MODERATE, SENSITIVITY_HIGH.
	Score *string `json:"score,omitempty" tf:"score,omitempty"`
}

type RuleSetInfoTypesSensitivityScoreParameters struct {

	// The sensitivity score applied to the resource.
	// Possible values are: SENSITIVITY_LOW, SENSITIVITY_MODERATE, SENSITIVITY_HIGH.
	// +kubebuilder:validation:Optional
	Score *string `json:"score" tf:"score,omitempty"`
}

type RuleSetInitParameters struct {

	// List of infoTypes this rule set is applied to.
	// Structure is documented below.
	InfoTypes []RuleSetInfoTypesInitParameters `json:"infoTypes,omitempty" tf:"info_types,omitempty"`

	// Set of rules to be applied to infoTypes. The rules are applied in order.
	// Structure is documented below.
	Rules []RulesInitParameters `json:"rules,omitempty" tf:"rules,omitempty"`
}

type RuleSetObservation struct {

	// List of infoTypes this rule set is applied to.
	// Structure is documented below.
	InfoTypes []RuleSetInfoTypesObservation `json:"infoTypes,omitempty" tf:"info_types,omitempty"`

	// Set of rules to be applied to infoTypes. The rules are applied in order.
	// Structure is documented below.
	Rules []RulesObservation `json:"rules,omitempty" tf:"rules,omitempty"`
}

type RuleSetParameters struct {

	// List of infoTypes this rule set is applied to.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	InfoTypes []RuleSetInfoTypesParameters `json:"infoTypes" tf:"info_types,omitempty"`

	// Set of rules to be applied to infoTypes. The rules are applied in order.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Rules []RulesParameters `json:"rules" tf:"rules,omitempty"`
}

type RulesInitParameters struct {

	// The rule that specifies conditions when findings of infoTypes specified in InspectionRuleSet are removed from results.
	// Structure is documented below.
	ExclusionRule []ExclusionRuleInitParameters `json:"exclusionRule,omitempty" tf:"exclusion_rule,omitempty"`

	// Hotword-based detection rule.
	// Structure is documented below.
	HotwordRule []HotwordRuleInitParameters `json:"hotwordRule,omitempty" tf:"hotword_rule,omitempty"`
}

type RulesObservation struct {

	// The rule that specifies conditions when findings of infoTypes specified in InspectionRuleSet are removed from results.
	// Structure is documented below.
	ExclusionRule []ExclusionRuleObservation `json:"exclusionRule,omitempty" tf:"exclusion_rule,omitempty"`

	// Hotword-based detection rule.
	// Structure is documented below.
	HotwordRule []HotwordRuleObservation `json:"hotwordRule,omitempty" tf:"hotword_rule,omitempty"`
}

type RulesParameters struct {

	// The rule that specifies conditions when findings of infoTypes specified in InspectionRuleSet are removed from results.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	ExclusionRule []ExclusionRuleParameters `json:"exclusionRule,omitempty" tf:"exclusion_rule,omitempty"`

	// Hotword-based detection rule.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	HotwordRule []HotwordRuleParameters `json:"hotwordRule,omitempty" tf:"hotword_rule,omitempty"`
}

type StoredTypeInitParameters struct {

	// Resource name of the requested StoredInfoType, for example organizations/433245324/storedInfoTypes/432452342
	// or projects/project-id/storedInfoTypes/432452342.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type StoredTypeObservation struct {

	// Resource name of the requested StoredInfoType, for example organizations/433245324/storedInfoTypes/432452342
	// or projects/project-id/storedInfoTypes/432452342.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type StoredTypeParameters struct {

	// Resource name of the requested StoredInfoType, for example organizations/433245324/storedInfoTypes/432452342
	// or projects/project-id/storedInfoTypes/432452342.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`
}

type SurrogateTypeInitParameters struct {
}

type SurrogateTypeObservation struct {
}

type SurrogateTypeParameters struct {
}

// InspectTemplateSpec defines the desired state of InspectTemplate
type InspectTemplateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InspectTemplateParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider InspectTemplateInitParameters `json:"initProvider,omitempty"`
}

// InspectTemplateStatus defines the observed state of InspectTemplate.
type InspectTemplateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InspectTemplateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// InspectTemplate is the Schema for the InspectTemplates API. An inspect job template.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type InspectTemplate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.parent) || (has(self.initProvider) && has(self.initProvider.parent))",message="spec.forProvider.parent is a required parameter"
	Spec   InspectTemplateSpec   `json:"spec"`
	Status InspectTemplateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InspectTemplateList contains a list of InspectTemplates
type InspectTemplateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []InspectTemplate `json:"items"`
}

// Repository type metadata.
var (
	InspectTemplate_Kind             = "InspectTemplate"
	InspectTemplate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: InspectTemplate_Kind}.String()
	InspectTemplate_KindAPIVersion   = InspectTemplate_Kind + "." + CRDGroupVersion.String()
	InspectTemplate_GroupVersionKind = CRDGroupVersion.WithKind(InspectTemplate_Kind)
)

func init() {
	SchemeBuilder.Register(&InspectTemplate{}, &InspectTemplateList{})
}
