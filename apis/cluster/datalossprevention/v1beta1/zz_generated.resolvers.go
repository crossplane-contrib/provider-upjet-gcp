// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	apisresolver "github.com/upbound/provider-gcp/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *JobTrigger) ResolveReferences( // ResolveReferences of this JobTrigger.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.InspectJob); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.InspectJob[i3].Actions); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.InspectJob[i3].Actions[i4].Deidentify); i5++ {
				for i6 := 0; i6 < len(mg.Spec.ForProvider.InspectJob[i3].Actions[i4].Deidentify[i5].TransformationDetailsStorageConfig); i6++ {
					for i7 := 0; i7 < len(mg.Spec.ForProvider.InspectJob[i3].Actions[i4].Deidentify[i5].TransformationDetailsStorageConfig[i6].Table); i7++ {
						{
							m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta1", "Dataset", "DatasetList")
							if err != nil {
								return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
							}
							rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
								CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.InspectJob[i3].Actions[i4].Deidentify[i5].TransformationDetailsStorageConfig[i6].Table[i7].DatasetID),
								Extract:      reference.ExternalName(),
								Reference:    mg.Spec.ForProvider.InspectJob[i3].Actions[i4].Deidentify[i5].TransformationDetailsStorageConfig[i6].Table[i7].DatasetIDRef,
								Selector:     mg.Spec.ForProvider.InspectJob[i3].Actions[i4].Deidentify[i5].TransformationDetailsStorageConfig[i6].Table[i7].DatasetIDSelector,
								To:           reference.To{List: l, Managed: m},
							})
						}
						if err != nil {
							return errors.Wrap(err, "mg.Spec.ForProvider.InspectJob[i3].Actions[i4].Deidentify[i5].TransformationDetailsStorageConfig[i6].Table[i7].DatasetID")
						}
						mg.Spec.ForProvider.InspectJob[i3].Actions[i4].Deidentify[i5].TransformationDetailsStorageConfig[i6].Table[i7].DatasetID = reference.ToPtrValue(rsp.ResolvedValue)
						mg.Spec.ForProvider.InspectJob[i3].Actions[i4].Deidentify[i5].TransformationDetailsStorageConfig[i6].Table[i7].DatasetIDRef = rsp.ResolvedReference

					}
				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.InspectJob); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.InspectJob[i3].Actions); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.InspectJob[i3].Actions[i4].Deidentify); i5++ {
				for i6 := 0; i6 < len(mg.Spec.ForProvider.InspectJob[i3].Actions[i4].Deidentify[i5].TransformationDetailsStorageConfig); i6++ {
					for i7 := 0; i7 < len(mg.Spec.ForProvider.InspectJob[i3].Actions[i4].Deidentify[i5].TransformationDetailsStorageConfig[i6].Table); i7++ {
						{
							m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta1", "Table", "TableList")
							if err != nil {
								return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
							}
							rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
								CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.InspectJob[i3].Actions[i4].Deidentify[i5].TransformationDetailsStorageConfig[i6].Table[i7].TableID),
								Extract:      reference.ExternalName(),
								Reference:    mg.Spec.ForProvider.InspectJob[i3].Actions[i4].Deidentify[i5].TransformationDetailsStorageConfig[i6].Table[i7].TableIDRef,
								Selector:     mg.Spec.ForProvider.InspectJob[i3].Actions[i4].Deidentify[i5].TransformationDetailsStorageConfig[i6].Table[i7].TableIDSelector,
								To:           reference.To{List: l, Managed: m},
							})
						}
						if err != nil {
							return errors.Wrap(err, "mg.Spec.ForProvider.InspectJob[i3].Actions[i4].Deidentify[i5].TransformationDetailsStorageConfig[i6].Table[i7].TableID")
						}
						mg.Spec.ForProvider.InspectJob[i3].Actions[i4].Deidentify[i5].TransformationDetailsStorageConfig[i6].Table[i7].TableID = reference.ToPtrValue(rsp.ResolvedValue)
						mg.Spec.ForProvider.InspectJob[i3].Actions[i4].Deidentify[i5].TransformationDetailsStorageConfig[i6].Table[i7].TableIDRef = rsp.ResolvedReference

					}
				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.InspectJob); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.InspectJob[i3].Actions); i4++ {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.InspectJob[i3].Actions[i4].Deidentify); i5++ {
				for i6 := 0; i6 < len(mg.Spec.InitProvider.InspectJob[i3].Actions[i4].Deidentify[i5].TransformationDetailsStorageConfig); i6++ {
					for i7 := 0; i7 < len(mg.Spec.InitProvider.InspectJob[i3].Actions[i4].Deidentify[i5].TransformationDetailsStorageConfig[i6].Table); i7++ {
						{
							m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta1", "Dataset", "DatasetList")
							if err != nil {
								return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
							}
							rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
								CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.InspectJob[i3].Actions[i4].Deidentify[i5].TransformationDetailsStorageConfig[i6].Table[i7].DatasetID),
								Extract:      reference.ExternalName(),
								Reference:    mg.Spec.InitProvider.InspectJob[i3].Actions[i4].Deidentify[i5].TransformationDetailsStorageConfig[i6].Table[i7].DatasetIDRef,
								Selector:     mg.Spec.InitProvider.InspectJob[i3].Actions[i4].Deidentify[i5].TransformationDetailsStorageConfig[i6].Table[i7].DatasetIDSelector,
								To:           reference.To{List: l, Managed: m},
							})
						}
						if err != nil {
							return errors.Wrap(err, "mg.Spec.InitProvider.InspectJob[i3].Actions[i4].Deidentify[i5].TransformationDetailsStorageConfig[i6].Table[i7].DatasetID")
						}
						mg.Spec.InitProvider.InspectJob[i3].Actions[i4].Deidentify[i5].TransformationDetailsStorageConfig[i6].Table[i7].DatasetID = reference.ToPtrValue(rsp.ResolvedValue)
						mg.Spec.InitProvider.InspectJob[i3].Actions[i4].Deidentify[i5].TransformationDetailsStorageConfig[i6].Table[i7].DatasetIDRef = rsp.ResolvedReference

					}
				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.InspectJob); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.InspectJob[i3].Actions); i4++ {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.InspectJob[i3].Actions[i4].Deidentify); i5++ {
				for i6 := 0; i6 < len(mg.Spec.InitProvider.InspectJob[i3].Actions[i4].Deidentify[i5].TransformationDetailsStorageConfig); i6++ {
					for i7 := 0; i7 < len(mg.Spec.InitProvider.InspectJob[i3].Actions[i4].Deidentify[i5].TransformationDetailsStorageConfig[i6].Table); i7++ {
						{
							m, l, err = apisresolver.GetManagedResource("bigquery.gcp.upbound.io", "v1beta1", "Table", "TableList")
							if err != nil {
								return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
							}
							rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
								CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.InspectJob[i3].Actions[i4].Deidentify[i5].TransformationDetailsStorageConfig[i6].Table[i7].TableID),
								Extract:      reference.ExternalName(),
								Reference:    mg.Spec.InitProvider.InspectJob[i3].Actions[i4].Deidentify[i5].TransformationDetailsStorageConfig[i6].Table[i7].TableIDRef,
								Selector:     mg.Spec.InitProvider.InspectJob[i3].Actions[i4].Deidentify[i5].TransformationDetailsStorageConfig[i6].Table[i7].TableIDSelector,
								To:           reference.To{List: l, Managed: m},
							})
						}
						if err != nil {
							return errors.Wrap(err, "mg.Spec.InitProvider.InspectJob[i3].Actions[i4].Deidentify[i5].TransformationDetailsStorageConfig[i6].Table[i7].TableID")
						}
						mg.Spec.InitProvider.InspectJob[i3].Actions[i4].Deidentify[i5].TransformationDetailsStorageConfig[i6].Table[i7].TableID = reference.ToPtrValue(rsp.ResolvedValue)
						mg.Spec.InitProvider.InspectJob[i3].Actions[i4].Deidentify[i5].TransformationDetailsStorageConfig[i6].Table[i7].TableIDRef = rsp.ResolvedReference

					}
				}
			}
		}
	}

	return nil
}
