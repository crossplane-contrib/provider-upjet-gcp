# SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
#
# SPDX-License-Identifier: CC0-1.0

---
apiVersion: iam.aws.upbound.io/v1beta1
kind: Role
metadata:
  name: containeraws-gcp-upbound-api-role
spec:
  forProvider:
    assumeRolePolicy: |
      {
          "Version": "2012-10-17",
          "Statement": [
              {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                  "Federated": "accounts.google.com"
              },
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                  "StringEquals": {
                  "accounts.google.com:sub": "service-111111111111@gcp-sa-gkemulticloud.iam.gserviceaccount.com"
                  }
            }
          }
        ]
      }
---
apiVersion: iam.aws.upbound.io/v1beta1
kind: Policy
metadata:
  name: containeraws-gcp-upbound-api-policy
spec:
  forProvider:
    policy: |
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "",
            "Effect": "Allow",
            "Action": [
              "ec2:AuthorizeSecurityGroupEgress",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:CreateLaunchTemplate",
              "ec2:CreateNetworkInterface",
              "ec2:CreateSecurityGroup",
              "ec2:CreateTags",
              "ec2:CreateVolume",
              "ec2:DeleteLaunchTemplate",
              "ec2:DeleteNetworkInterface",
              "ec2:DeleteSecurityGroup",
              "ec2:DeleteVolume",
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeKeyPairs",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "ec2:GetConsoleOutput",
              "ec2:ModifyNetworkInterfaceAttribute",
              "ec2:RevokeSecurityGroupEgress",
              "ec2:RevokeSecurityGroupIngress",
              "ec2:RunInstances",
              "iam:AWSServiceName",
              "iam:CreateServiceLinkedRole",
              "iam:PassRole",
              "autoscaling:CreateAutoScalingGroup",
              "autoscaling:CreateOrUpdateTags",
              "autoscaling:DeleteAutoScalingGroup",
              "autoscaling:DeleteTags",
              "autoscaling:DescribeAutoScalingGroups",
              "autoscaling:TerminateInstanceInAutoScalingGroup",
              "autoscaling:UpdateAutoScalingGroup",
              "elasticloadbalancing:CreateListener",
              "elasticloadbalancing:CreateLoadBalancer",
              "elasticloadbalancing:CreateTargetGroup",
              "elasticloadbalancing:DeleteListener",
              "elasticloadbalancing:DeleteLoadBalancer",
              "elasticloadbalancing:DeleteTargetGroup",
              "elasticloadbalancing:DescribeListeners",
              "elasticloadbalancing:DescribeLoadBalancers",
              "elasticloadbalancing:DescribeTargetGroups",
              "elasticloadbalancing:DescribeTargetHealth",
              "elasticloadbalancing:ModifyTargetGroupAttributes",
              "kms:DescribeKey",
              "kms:Encrypt",
              "kms:GenerateDataKeyWithoutPlaintext"
            ],
            "Resource": "*"
          }
        ]
      }
---
apiVersion: iam.aws.upbound.io/v1beta1
kind: RolePolicyAttachment
metadata:
  name: containeraws-gcp-upbound-api-policy
spec:
  forProvider:
    policyArnRef:
      name: containeraws-gcp-upbound-api-policy
    roleRef:
      name: containeraws-gcp-upbound-api-role
---
apiVersion: iam.aws.upbound.io/v1beta1
kind: Role
metadata:
  name: containeraws-gcp-upbound-ctp-role
spec:
  forProvider:
    assumeRolePolicy: |
      {
          "Version": "2012-10-17",
          "Statement": [
          {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                  "Service": "ec2.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
          }
        ]
      }
---
apiVersion: iam.aws.upbound.io/v1beta1
kind: Policy
metadata:
  name: containeraws-gcp-upbound-ctp-policy
spec:
  forProvider:
    policy: |
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "",
            "Effect": "Allow",
            "Action": [
              "ec2:AttachNetworkInterface",
              "ec2:AttachVolume",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:CreateRoute",
              "ec2:CreateSecurityGroup",
              "ec2:CreateSnapshot",
              "ec2:CreateTags",
              "ec2:CreateVolume",
              "ec2:DeleteRoute",
              "ec2:DeleteSecurityGroup",
              "ec2:DeleteSnapshot",
              "ec2:DeleteTags",
              "ec2:DeleteVolume",
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeDhcpOptions",
              "ec2:DescribeInstances",
              "ec2:DescribeInstanceTypes",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeLaunchTemplateVersions",
              "ec2:DescribeRegions",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSnapshots",
              "ec2:DescribeSubnets",
              "ec2:DescribeTags",
              "ec2:DescribeVolumes",
              "ec2:DescribeVolumesModifications",
              "ec2:DescribeVpcs",
              "ec2:DetachVolume",
              "ec2:ModifyInstanceAttribute",
              "ec2:ModifyVolume",
              "ec2:RevokeSecurityGroupIngress",
              "autoscaling:DescribeAutoScalingGroups",
              "autoscaling:DescribeAutoScalingInstances",
              "autoscaling:DescribeLaunchConfigurations",
              "autoscaling:DescribeTags",
              "autoscaling:SetDesiredCapacity",
              "autoscaling:TerminateInstanceInAutoScalingGroup",
              "elasticloadbalancing:AddTags",
              "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer",
              "elasticloadbalancing:AttachLoadBalancerToSubnets",
              "elasticloadbalancing:ConfigureHealthCheck",
              "elasticloadbalancing:CreateListener",
              "elasticloadbalancing:CreateLoadBalancer",
              "elasticloadbalancing:CreateLoadBalancerListeners",
              "elasticloadbalancing:CreateLoadBalancerPolicy",
              "elasticloadbalancing:CreateTargetGroup",
              "elasticloadbalancing:DeleteListener",
              "elasticloadbalancing:DeleteLoadBalancer",
              "elasticloadbalancing:DeleteLoadBalancerListeners",
              "elasticloadbalancing:DeleteTargetGroup",
              "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
              "elasticloadbalancing:DeregisterTargets",
              "elasticloadbalancing:DescribeListeners",
              "elasticloadbalancing:DescribeLoadBalancerAttributes",
              "elasticloadbalancing:DescribeLoadBalancerPolicies",
              "elasticloadbalancing:DescribeLoadBalancers",
              "elasticloadbalancing:DescribeTargetGroups",
              "elasticloadbalancing:DescribeTargetHealth",
              "elasticloadbalancing:DetachLoadBalancerFromSubnets",
              "elasticloadbalancing:ModifyListener",
              "elasticloadbalancing:ModifyLoadBalancerAttributes",
              "elasticloadbalancing:ModifyTargetGroup",
              "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
              "elasticloadbalancing:RegisterTargets",
              "elasticloadbalancing:SetLoadBalancerPoliciesForBackendServer",
              "elasticloadbalancing:SetLoadBalancerPoliciesOfListener",
              "kms:CreateGrant",
              "kms:Decrypt",
              "kms:Encrypt",
              "kms:GrantIsForAWSResource"
            ],
            "Resource": "*"
          }
        ]
      }
---
apiVersion: iam.aws.upbound.io/v1beta1
kind: RolePolicyAttachment
metadata:
  name: containeraws-gcp-upbound-ctp-policy
spec:
  forProvider:
    policyArnRef:
      name: containeraws-gcp-upbound-ctp-policy
    roleRef:
      name: containeraws-gcp-upbound-ctp-role
---
apiVersion: iam.aws.upbound.io/v1beta1
kind: InstanceProfile
metadata:
  name: containeraws-gcp-upbound-ctp-profile
spec:
  forProvider:
    roleRef:
      name: containeraws-gcp-upbound-ctp-role
---
apiVersion: iam.aws.upbound.io/v1beta1
kind: Role
metadata:
  name: containeraws-gcp-upbound-nodepool-role
spec:
  forProvider:
    assumeRolePolicy: |
      {
          "Version": "2012-10-17",
          "Statement": [
          {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
              "Service": "ec2.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
          }
        ]
      }
---
apiVersion: iam.aws.upbound.io/v1beta1
kind: Policy
metadata:
  name: containeraws-gcp-upbound-nodepool-policy
spec:
  forProvider:
    policy: |
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": ["kms:Decrypt"],
            "Resource": "arn:aws:kms:my-aws-region:012345678910:alias/containeraws-gcp-upbound"
          }
        ]
      }
---
apiVersion: iam.aws.upbound.io/v1beta1
kind: RolePolicyAttachment
metadata:
  name: containeraws-gcp-upbound-nodepool-policy
spec:
  forProvider:
    policyArnRef:
      name: containeraws-gcp-upbound-nodepool-policy
    roleRef:
      name: containeraws-gcp-upbound-nodepool-role
---
apiVersion: iam.aws.upbound.io/v1beta1
kind: InstanceProfile
metadata:
  name: containeraws-gcp-upbound-nodepool-profile
spec:
  forProvider:
    roleRef:
      name: containeraws-gcp-upbound-nodepool-role
