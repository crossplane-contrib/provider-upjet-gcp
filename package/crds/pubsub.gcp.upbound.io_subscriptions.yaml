---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: subscriptions.pubsub.gcp.upbound.io
spec:
  group: pubsub.gcp.upbound.io
  names:
    categories:
    - crossplane
    - managed
    - gcp
    kind: Subscription
    listKind: SubscriptionList
    plural: subscriptions
    singular: subscription
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: READY
      type: string
    - jsonPath: .status.conditions[?(@.type=='Synced')].status
      name: SYNCED
      type: string
    - jsonPath: .metadata.annotations.crossplane\.io/external-name
      name: EXTERNAL-NAME
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: Subscription is the Schema for the Subscriptions API. A named
          resource representing the stream of messages from a single, specific topic,
          to be delivered to the subscribing application.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: SubscriptionSpec defines the desired state of Subscription
            properties:
              deletionPolicy:
                default: Delete
                description: DeletionPolicy specifies what will happen to the underlying
                  external when this managed resource is deleted - either "Delete"
                  or "Orphan" the external resource.
                enum:
                - Orphan
                - Delete
                type: string
              forProvider:
                properties:
                  ackDeadlineSeconds:
                    description: This value is the maximum time after a subscriber
                      receives a message before the subscriber should acknowledge
                      the message. After message delivery but before the ack deadline
                      expires and before the message is acknowledged, it is an outstanding
                      message and will not be delivered again during that time (on
                      a best-effort basis). For pull subscriptions, this value is
                      used as the initial value for the ack deadline. To override
                      this value for a given message, call subscriptions.modifyAckDeadline
                      with the corresponding ackId if using pull. The minimum custom
                      deadline you can specify is 10 seconds. The maximum custom deadline
                      you can specify is 600 seconds (10 minutes). If this parameter
                      is 0, a default value of 10 seconds is used. For push delivery,
                      this value is also used to set the request timeout for the call
                      to the push endpoint. If the subscriber never acknowledges the
                      message, the Pub/Sub system will eventually redeliver the message.
                    type: number
                  bigqueryConfig:
                    description: If delivery to BigQuery is used with this subscription,
                      this field is used to configure it. Either pushConfig or bigQueryConfig
                      can be set, but not both. If both are empty, then the subscriber
                      will pull and ack messages using API methods. Structure is documented
                      below.
                    items:
                      properties:
                        dropUnknownFields:
                          description: When true and useTopicSchema is true, any fields
                            that are a part of the topic schema that are not part
                            of the BigQuery table schema are dropped when writing
                            to BigQuery. Otherwise, the schemas must be kept in sync
                            and any messages with extra fields are not written and
                            remain in the subscription's backlog.
                          type: boolean
                        table:
                          description: The name of the table to which to write data,
                            of the form {projectId}:{datasetId}.{tableId}
                          type: string
                        useTopicSchema:
                          description: When true, use the topic's schema as the columns
                            to write to in BigQuery, if it exists.
                          type: boolean
                        writeMetadata:
                          description: When true, write the subscription name, messageId,
                            publishTime, attributes, and orderingKey to additional
                            columns in the table. The subscription name, messageId,
                            and publishTime fields are put in their own columns while
                            all other message properties (other than data) are written
                            to a JSON object in the attributes column.
                          type: boolean
                      required:
                      - table
                      type: object
                    type: array
                  deadLetterPolicy:
                    description: A policy that specifies the conditions for dead lettering
                      messages in this subscription. If dead_letter_policy is not
                      set, dead lettering is disabled. The Cloud Pub/Sub service account
                      associated with this subscription's parent project (i.e., service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com)
                      must have permission to Acknowledge() messages on this subscription.
                      Structure is documented below.
                    items:
                      properties:
                        deadLetterTopic:
                          description: The name of the topic to which dead letter
                            messages should be published. Format is projects/{project}/topics/{topic}.
                            The Cloud Pub/Sub service account associated with the
                            enclosing subscription's parent project (i.e., service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com)
                            must have permission to Publish() to this topic. The operation
                            will fail if the topic does not exist. Users should ensure
                            that there is a subscription attached to this topic since
                            messages published to a topic with no subscriptions are
                            lost.
                          type: string
                        deadLetterTopicRef:
                          description: Reference to a Topic in pubsub to populate
                            deadLetterTopic.
                          properties:
                            name:
                              description: Name of the referenced object.
                              type: string
                            policy:
                              description: Policies for referencing.
                              properties:
                                resolution:
                                  default: Required
                                  description: Resolution specifies whether resolution
                                    of this reference is required. The default is
                                    'Required', which means the reconcile will fail
                                    if the reference cannot be resolved. 'Optional'
                                    means this reference will be a no-op if it cannot
                                    be resolved.
                                  enum:
                                  - Required
                                  - Optional
                                  type: string
                                resolve:
                                  description: Resolve specifies when this reference
                                    should be resolved. The default is 'IfNotPresent',
                                    which will attempt to resolve the reference only
                                    when the corresponding field is not present. Use
                                    'Always' to resolve the reference on every reconcile.
                                  enum:
                                  - Always
                                  - IfNotPresent
                                  type: string
                              type: object
                          required:
                          - name
                          type: object
                        deadLetterTopicSelector:
                          description: Selector for a Topic in pubsub to populate
                            deadLetterTopic.
                          properties:
                            matchControllerRef:
                              description: MatchControllerRef ensures an object with
                                the same controller reference as the selecting object
                                is selected.
                              type: boolean
                            matchLabels:
                              additionalProperties:
                                type: string
                              description: MatchLabels ensures an object with matching
                                labels is selected.
                              type: object
                            policy:
                              description: Policies for selection.
                              properties:
                                resolution:
                                  default: Required
                                  description: Resolution specifies whether resolution
                                    of this reference is required. The default is
                                    'Required', which means the reconcile will fail
                                    if the reference cannot be resolved. 'Optional'
                                    means this reference will be a no-op if it cannot
                                    be resolved.
                                  enum:
                                  - Required
                                  - Optional
                                  type: string
                                resolve:
                                  description: Resolve specifies when this reference
                                    should be resolved. The default is 'IfNotPresent',
                                    which will attempt to resolve the reference only
                                    when the corresponding field is not present. Use
                                    'Always' to resolve the reference on every reconcile.
                                  enum:
                                  - Always
                                  - IfNotPresent
                                  type: string
                              type: object
                          type: object
                        maxDeliveryAttempts:
                          description: The maximum number of delivery attempts for
                            any message. The value must be between 5 and 100. The
                            number of delivery attempts is defined as 1 + (the sum
                            of number of NACKs and number of times the acknowledgement
                            deadline has been exceeded for the message). A NACK is
                            any call to ModifyAckDeadline with a 0 deadline. Note
                            that client libraries may automatically extend ack_deadlines.
                            This field will be honored on a best effort basis. If
                            this parameter is 0, a default value of 5 is used.
                          type: number
                      type: object
                    type: array
                  enableExactlyOnceDelivery:
                    description: 'If true, Pub/Sub provides the following guarantees
                      for the delivery of a message with a given value of messageId
                      on this Subscriptions'':'
                    type: boolean
                  enableMessageOrdering:
                    description: If true, messages published with the same orderingKey
                      in PubsubMessage will be delivered to the subscribers in the
                      order in which they are received by the Pub/Sub system. Otherwise,
                      they may be delivered in any order.
                    type: boolean
                  expirationPolicy:
                    description: A policy that specifies the conditions for this subscription's
                      expiration. A subscription is considered active as long as any
                      connected subscriber is successfully consuming messages from
                      the subscription or is issuing operations on the subscription.
                      If expirationPolicy is not set, a default policy with ttl of
                      31 days will be used.  If it is set but ttl is "", the resource
                      never expires.  The minimum allowed value for expirationPolicy.ttl
                      is 1 day. Structure is documented below.
                    items:
                      properties:
                        ttl:
                          description: Specifies the "time-to-live" duration for an
                            associated resource. The resource expires if it is not
                            active for a period of ttl. If ttl is not set, the associated
                            resource never expires. A duration in seconds with up
                            to nine fractional digits, terminated by 's'. Example
                            - "3.5s".
                          type: string
                      required:
                      - ttl
                      type: object
                    type: array
                  filter:
                    description: The subscription only delivers the messages that
                      match the filter. Pub/Sub automatically acknowledges the messages
                      that don't match the filter. You can filter messages by their
                      attributes. The maximum length of a filter is 256 bytes. After
                      creating the subscription, you can't modify the filter.
                    type: string
                  labels:
                    additionalProperties:
                      type: string
                    description: A set of key/value label pairs to assign to this
                      Subscription.
                    type: object
                  messageRetentionDuration:
                    description: 'How long to retain unacknowledged messages in the
                      subscription''s backlog, from the moment a message is published.
                      If retain_acked_messages is true, then this also configures
                      the retention of acknowledged messages, and thus configures
                      how far back in time a subscriptions.seek can be done. Defaults
                      to 7 days. Cannot be more than 7 days ("604800s") or less than
                      10 minutes ("600s"). A duration in seconds with up to nine fractional
                      digits, terminated by ''s''. Example: "600.5s".'
                    type: string
                  project:
                    description: The ID of the project in which the resource belongs.
                      If it is not provided, the provider project is used.
                    type: string
                  pushConfig:
                    description: If push delivery is used with this subscription,
                      this field is used to configure it. An empty pushConfig signifies
                      that the subscriber will pull and ack messages using API methods.
                      Structure is documented below.
                    items:
                      properties:
                        attributes:
                          additionalProperties:
                            type: string
                          description: 'Endpoint configuration attributes. Every endpoint
                            has a set of API supported attributes that can be used
                            to control different aspects of the message delivery.
                            The currently supported attribute is x-goog-version, which
                            you can use to change the format of the pushed message.
                            This attribute indicates the version of the data expected
                            by the endpoint. This controls the shape of the pushed
                            message (i.e., its fields and metadata). The endpoint
                            version is based on the version of the Pub/Sub API. If
                            not present during the subscriptions.create call, it will
                            default to the version of the API used to make such call.
                            If not present during a subscriptions.modifyPushConfig
                            call, its value will not be changed. subscriptions.get
                            calls will always return a valid version, even if the
                            subscription was created without this attribute. The possible
                            values for this attribute are:'
                          type: object
                        oidcToken:
                          description: If specified, Pub/Sub will generate and attach
                            an OIDC JWT token as an Authorization header in the HTTP
                            request for every pushed message. Structure is documented
                            below.
                          items:
                            properties:
                              audience:
                                description: 'Audience to be used when generating
                                  OIDC token. The audience claim identifies the recipients
                                  that the JWT is intended for. The audience value
                                  is a single case-sensitive string. Having multiple
                                  values (array) for the audience field is not supported.
                                  More info about the OIDC JWT token audience here:
                                  https://tools.ietf.org/html/rfc7519#section-4.1.3
                                  Note: if not specified, the Push endpoint URL will
                                  be used.'
                                type: string
                              serviceAccountEmail:
                                description: Service account email to be used for
                                  generating the OIDC token. The caller (for subscriptions.create,
                                  subscriptions.patch, and subscriptions.modifyPushConfig
                                  RPCs) must have the iam.serviceAccounts.actAs permission
                                  for the service account.
                                type: string
                            required:
                            - serviceAccountEmail
                            type: object
                          type: array
                        pushEndpoint:
                          description: A URL locating the endpoint to which messages
                            should be pushed. For example, a Webhook endpoint might
                            use "https://example.com/push".
                          type: string
                      required:
                      - pushEndpoint
                      type: object
                    type: array
                  retainAckedMessages:
                    description: Indicates whether to retain acknowledged messages.
                      If true, then messages are not expunged from the subscription's
                      backlog, even if they are acknowledged, until they fall out
                      of the messageRetentionDuration window.
                    type: boolean
                  retryPolicy:
                    description: A policy that specifies how Pub/Sub retries message
                      delivery for this subscription. If not set, the default retry
                      policy is applied. This generally implies that messages will
                      be retried as soon as possible for healthy subscribers. RetryPolicy
                      will be triggered on NACKs or acknowledgement deadline exceeded
                      events for a given message Structure is documented below.
                    items:
                      properties:
                        maximumBackoff:
                          description: 'The maximum delay between consecutive deliveries
                            of a given message. Value should be between 0 and 600
                            seconds. Defaults to 600 seconds. A duration in seconds
                            with up to nine fractional digits, terminated by ''s''.
                            Example: "3.5s".'
                          type: string
                        minimumBackoff:
                          description: 'The minimum delay between consecutive deliveries
                            of a given message. Value should be between 0 and 600
                            seconds. Defaults to 10 seconds. A duration in seconds
                            with up to nine fractional digits, terminated by ''s''.
                            Example: "3.5s".'
                          type: string
                      type: object
                    type: array
                  topic:
                    description: A reference to a Topic resource.
                    type: string
                  topicRef:
                    description: Reference to a Topic to populate topic.
                    properties:
                      name:
                        description: Name of the referenced object.
                        type: string
                      policy:
                        description: Policies for referencing.
                        properties:
                          resolution:
                            default: Required
                            description: Resolution specifies whether resolution of
                              this reference is required. The default is 'Required',
                              which means the reconcile will fail if the reference
                              cannot be resolved. 'Optional' means this reference
                              will be a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: Resolve specifies when this reference should
                              be resolved. The default is 'IfNotPresent', which will
                              attempt to resolve the reference only when the corresponding
                              field is not present. Use 'Always' to resolve the reference
                              on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    required:
                    - name
                    type: object
                  topicSelector:
                    description: Selector for a Topic to populate topic.
                    properties:
                      matchControllerRef:
                        description: MatchControllerRef ensures an object with the
                          same controller reference as the selecting object is selected.
                        type: boolean
                      matchLabels:
                        additionalProperties:
                          type: string
                        description: MatchLabels ensures an object with matching labels
                          is selected.
                        type: object
                      policy:
                        description: Policies for selection.
                        properties:
                          resolution:
                            default: Required
                            description: Resolution specifies whether resolution of
                              this reference is required. The default is 'Required',
                              which means the reconcile will fail if the reference
                              cannot be resolved. 'Optional' means this reference
                              will be a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: Resolve specifies when this reference should
                              be resolved. The default is 'IfNotPresent', which will
                              attempt to resolve the reference only when the corresponding
                              field is not present. Use 'Always' to resolve the reference
                              on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    type: object
                type: object
              providerConfigRef:
                default:
                  name: default
                description: ProviderConfigReference specifies how the provider that
                  will be used to create, observe, update, and delete this managed
                  resource should be configured.
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                  policy:
                    description: Policies for referencing.
                    properties:
                      resolution:
                        default: Required
                        description: Resolution specifies whether resolution of this
                          reference is required. The default is 'Required', which
                          means the reconcile will fail if the reference cannot be
                          resolved. 'Optional' means this reference will be a no-op
                          if it cannot be resolved.
                        enum:
                        - Required
                        - Optional
                        type: string
                      resolve:
                        description: Resolve specifies when this reference should
                          be resolved. The default is 'IfNotPresent', which will attempt
                          to resolve the reference only when the corresponding field
                          is not present. Use 'Always' to resolve the reference on
                          every reconcile.
                        enum:
                        - Always
                        - IfNotPresent
                        type: string
                    type: object
                required:
                - name
                type: object
              providerRef:
                description: 'ProviderReference specifies the provider that will be
                  used to create, observe, update, and delete this managed resource.
                  Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`'
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                  policy:
                    description: Policies for referencing.
                    properties:
                      resolution:
                        default: Required
                        description: Resolution specifies whether resolution of this
                          reference is required. The default is 'Required', which
                          means the reconcile will fail if the reference cannot be
                          resolved. 'Optional' means this reference will be a no-op
                          if it cannot be resolved.
                        enum:
                        - Required
                        - Optional
                        type: string
                      resolve:
                        description: Resolve specifies when this reference should
                          be resolved. The default is 'IfNotPresent', which will attempt
                          to resolve the reference only when the corresponding field
                          is not present. Use 'Always' to resolve the reference on
                          every reconcile.
                        enum:
                        - Always
                        - IfNotPresent
                        type: string
                    type: object
                required:
                - name
                type: object
              publishConnectionDetailsTo:
                description: PublishConnectionDetailsTo specifies the connection secret
                  config which contains a name, metadata and a reference to secret
                  store config to which any connection details for this managed resource
                  should be written. Connection details frequently include the endpoint,
                  username, and password required to connect to the managed resource.
                properties:
                  configRef:
                    default:
                      name: default
                    description: SecretStoreConfigRef specifies which secret store
                      config should be used for this ConnectionSecret.
                    properties:
                      name:
                        description: Name of the referenced object.
                        type: string
                      policy:
                        description: Policies for referencing.
                        properties:
                          resolution:
                            default: Required
                            description: Resolution specifies whether resolution of
                              this reference is required. The default is 'Required',
                              which means the reconcile will fail if the reference
                              cannot be resolved. 'Optional' means this reference
                              will be a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: Resolve specifies when this reference should
                              be resolved. The default is 'IfNotPresent', which will
                              attempt to resolve the reference only when the corresponding
                              field is not present. Use 'Always' to resolve the reference
                              on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    required:
                    - name
                    type: object
                  metadata:
                    description: Metadata is the metadata for connection secret.
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: Annotations are the annotations to be added to
                          connection secret. - For Kubernetes secrets, this will be
                          used as "metadata.annotations". - It is up to Secret Store
                          implementation for others store types.
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        description: Labels are the labels/tags to be added to connection
                          secret. - For Kubernetes secrets, this will be used as "metadata.labels".
                          - It is up to Secret Store implementation for others store
                          types.
                        type: object
                      type:
                        description: Type is the SecretType for the connection secret.
                          - Only valid for Kubernetes Secret Stores.
                        type: string
                    type: object
                  name:
                    description: Name is the name of the connection secret.
                    type: string
                required:
                - name
                type: object
              writeConnectionSecretToRef:
                description: WriteConnectionSecretToReference specifies the namespace
                  and name of a Secret to which any connection details for this managed
                  resource should be written. Connection details frequently include
                  the endpoint, username, and password required to connect to the
                  managed resource. This field is planned to be replaced in a future
                  release in favor of PublishConnectionDetailsTo. Currently, both
                  could be set independently and connection details would be published
                  to both without affecting each other.
                properties:
                  name:
                    description: Name of the secret.
                    type: string
                  namespace:
                    description: Namespace of the secret.
                    type: string
                required:
                - name
                - namespace
                type: object
            required:
            - forProvider
            type: object
          status:
            description: SubscriptionStatus defines the observed state of Subscription.
            properties:
              atProvider:
                properties:
                  id:
                    description: an identifier for the resource with format projects/{{project}}/subscriptions/{{name}}
                    type: string
                type: object
              conditions:
                description: Conditions of the resource.
                items:
                  description: A Condition that may apply to a resource.
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time this condition
                        transitioned from one status to another.
                      format: date-time
                      type: string
                    message:
                      description: A Message containing details about this condition's
                        last transition from one status to another, if any.
                      type: string
                    reason:
                      description: A Reason for this condition's last transition from
                        one status to another.
                      type: string
                    status:
                      description: Status of this condition; is it currently True,
                        False, or Unknown?
                      type: string
                    type:
                      description: Type of this condition. At most one of each condition
                        type may apply to a resource at any point in time.
                      type: string
                  required:
                  - lastTransitionTime
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
