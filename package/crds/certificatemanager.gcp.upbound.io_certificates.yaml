---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  name: certificates.certificatemanager.gcp.upbound.io
spec:
  group: certificatemanager.gcp.upbound.io
  names:
    categories:
    - crossplane
    - managed
    - gcp
    kind: Certificate
    listKind: CertificateList
    plural: certificates
    singular: certificate
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: READY
      type: string
    - jsonPath: .status.conditions[?(@.type=='Synced')].status
      name: SYNCED
      type: string
    - jsonPath: .metadata.annotations.crossplane\.io/external-name
      name: EXTERNAL-NAME
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: Certificate is the Schema for the Certificates API. Certificate
          represents a HTTP-reachable backend for a Certificate.
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: CertificateSpec defines the desired state of Certificate
            properties:
              deletionPolicy:
                default: Delete
                description: |-
                  DeletionPolicy specifies what will happen to the underlying external
                  when this managed resource is deleted - either "Delete" or "Orphan" the
                  external resource.
                  This field is planned to be deprecated in favor of the ManagementPolicies
                  field in a future release. Currently, both could be set independently and
                  non-default values would be honored if the feature flag is enabled.
                  See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
                enum:
                - Orphan
                - Delete
                type: string
              forProvider:
                properties:
                  description:
                    description: A human-readable description of the resource.
                    type: string
                  labels:
                    additionalProperties:
                      type: string
                    description: Set of label tags associated with the Certificate
                      resource.
                    type: object
                    x-kubernetes-map-type: granular
                  location:
                    description: The Certificate Manager location. If not specified,
                      "global" is used.
                    type: string
                  managed:
                    description: |-
                      Configuration and state of a Managed Certificate.
                      Certificate Manager provisions and renews Managed Certificates
                      automatically, for as long as it's authorized to do so.
                      Structure is documented below.
                    items:
                      properties:
                        dnsAuthorizations:
                          description: Authorizations that will be used for performing
                            domain authorization. Either issuanceConfig or dnsAuthorizations
                            should be specificed, but not both.
                          items:
                            type: string
                          type: array
                        domains:
                          description: |-
                            The domains for which a managed SSL certificate will be generated.
                            Wildcard domains are only supported with DNS challenge resolution
                          items:
                            type: string
                          type: array
                        issuanceConfig:
                          description: |-
                            The resource name for a CertificateIssuanceConfig used to configure private PKI certificates in the format projects//locations//certificateIssuanceConfigs/*.
                            If this field is not set, the certificates will instead be publicly signed as documented at https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs#caa.
                            Either issuanceConfig or dnsAuthorizations should be specificed, but not both.
                          type: string
                      type: object
                    type: array
                  project:
                    description: |-
                      The ID of the project in which the resource belongs.
                      If it is not provided, the provider project is used.
                    type: string
                  scope:
                    description: |-
                      The scope of the certificate.
                      DEFAULT: Certificates with default scope are served from core Google data centers.
                      If unsure, choose this option.
                      EDGE_CACHE: Certificates with scope EDGE_CACHE are special-purposed certificates,
                      served from non-core Google data centers.
                      Currently allowed only for managed certificates.
                    type: string
                  selfManaged:
                    description: |-
                      Certificate data for a SelfManaged Certificate.
                      SelfManaged Certificates are uploaded by the user. Updating such
                      certificates before they expire remains the user's responsibility.
                      Structure is documented below.
                    items:
                      properties:
                        certificatePemSecretRef:
                          description: |-
                            Deprecated The certificate chain in PEM-encoded form.
                            Leaf certificate comes first, followed by intermediate ones if any.
                            Note: This property is sensitive and will not be displayed in the plan.
                          properties:
                            key:
                              description: The key to select.
                              type: string
                            name:
                              description: Name of the secret.
                              type: string
                            namespace:
                              description: Namespace of the secret.
                              type: string
                          required:
                          - key
                          - name
                          - namespace
                          type: object
                        pemCertificate:
                          description: |-
                            The certificate chain in PEM-encoded form.
                            Leaf certificate comes first, followed by intermediate ones if any.
                          type: string
                        pemPrivateKeySecretRef:
                          description: |-
                            The private key of the leaf certificate in PEM-encoded form.
                            Note: This property is sensitive and will not be displayed in the plan.
                          properties:
                            key:
                              description: The key to select.
                              type: string
                            name:
                              description: Name of the secret.
                              type: string
                            namespace:
                              description: Namespace of the secret.
                              type: string
                          required:
                          - key
                          - name
                          - namespace
                          type: object
                        privateKeyPemSecretRef:
                          description: |-
                            Deprecated The private key of the leaf certificate in PEM-encoded form.
                            Note: This property is sensitive and will not be displayed in the plan.
                          properties:
                            key:
                              description: The key to select.
                              type: string
                            name:
                              description: Name of the secret.
                              type: string
                            namespace:
                              description: Namespace of the secret.
                              type: string
                          required:
                          - key
                          - name
                          - namespace
                          type: object
                      type: object
                    type: array
                type: object
              initProvider:
                description: |-
                  THIS IS A BETA FIELD. It will be honored
                  unless the Management Policies feature flag is disabled.
                  InitProvider holds the same fields as ForProvider, with the exception
                  of Identifier and other resource reference fields. The fields that are
                  in InitProvider are merged into ForProvider when the resource is created.
                  The same fields are also added to the terraform ignore_changes hook, to
                  avoid updating them after creation. This is useful for fields that are
                  required on creation, but we do not desire to update them after creation,
                  for example because of an external controller is managing them, like an
                  autoscaler.
                properties:
                  description:
                    description: A human-readable description of the resource.
                    type: string
                  labels:
                    additionalProperties:
                      type: string
                    description: Set of label tags associated with the Certificate
                      resource.
                    type: object
                    x-kubernetes-map-type: granular
                  managed:
                    description: |-
                      Configuration and state of a Managed Certificate.
                      Certificate Manager provisions and renews Managed Certificates
                      automatically, for as long as it's authorized to do so.
                      Structure is documented below.
                    items:
                      properties:
                        dnsAuthorizations:
                          description: Authorizations that will be used for performing
                            domain authorization. Either issuanceConfig or dnsAuthorizations
                            should be specificed, but not both.
                          items:
                            type: string
                          type: array
                        domains:
                          description: |-
                            The domains for which a managed SSL certificate will be generated.
                            Wildcard domains are only supported with DNS challenge resolution
                          items:
                            type: string
                          type: array
                        issuanceConfig:
                          description: |-
                            The resource name for a CertificateIssuanceConfig used to configure private PKI certificates in the format projects//locations//certificateIssuanceConfigs/*.
                            If this field is not set, the certificates will instead be publicly signed as documented at https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs#caa.
                            Either issuanceConfig or dnsAuthorizations should be specificed, but not both.
                          type: string
                      type: object
                    type: array
                  project:
                    description: |-
                      The ID of the project in which the resource belongs.
                      If it is not provided, the provider project is used.
                    type: string
                  scope:
                    description: |-
                      The scope of the certificate.
                      DEFAULT: Certificates with default scope are served from core Google data centers.
                      If unsure, choose this option.
                      EDGE_CACHE: Certificates with scope EDGE_CACHE are special-purposed certificates,
                      served from non-core Google data centers.
                      Currently allowed only for managed certificates.
                    type: string
                  selfManaged:
                    description: |-
                      Certificate data for a SelfManaged Certificate.
                      SelfManaged Certificates are uploaded by the user. Updating such
                      certificates before they expire remains the user's responsibility.
                      Structure is documented below.
                    items:
                      properties:
                        pemCertificate:
                          description: |-
                            The certificate chain in PEM-encoded form.
                            Leaf certificate comes first, followed by intermediate ones if any.
                          type: string
                      type: object
                    type: array
                type: object
              managementPolicies:
                default:
                - '*'
                description: |-
                  THIS IS A BETA FIELD. It is on by default but can be opted out
                  through a Crossplane feature flag.
                  ManagementPolicies specify the array of actions Crossplane is allowed to
                  take on the managed and external resources.
                  This field is planned to replace the DeletionPolicy field in a future
                  release. Currently, both could be set independently and non-default
                  values would be honored if the feature flag is enabled. If both are
                  custom, the DeletionPolicy field will be ignored.
                  See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
                  and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
                items:
                  description: |-
                    A ManagementAction represents an action that the Crossplane controllers
                    can take on an external resource.
                  enum:
                  - Observe
                  - Create
                  - Update
                  - Delete
                  - LateInitialize
                  - '*'
                  type: string
                type: array
              providerConfigRef:
                default:
                  name: default
                description: |-
                  ProviderConfigReference specifies how the provider that will be used to
                  create, observe, update, and delete this managed resource should be
                  configured.
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                  policy:
                    description: Policies for referencing.
                    properties:
                      resolution:
                        default: Required
                        description: |-
                          Resolution specifies whether resolution of this reference is required.
                          The default is 'Required', which means the reconcile will fail if the
                          reference cannot be resolved. 'Optional' means this reference will be
                          a no-op if it cannot be resolved.
                        enum:
                        - Required
                        - Optional
                        type: string
                      resolve:
                        description: |-
                          Resolve specifies when this reference should be resolved. The default
                          is 'IfNotPresent', which will attempt to resolve the reference only when
                          the corresponding field is not present. Use 'Always' to resolve the
                          reference on every reconcile.
                        enum:
                        - Always
                        - IfNotPresent
                        type: string
                    type: object
                required:
                - name
                type: object
              publishConnectionDetailsTo:
                description: |-
                  PublishConnectionDetailsTo specifies the connection secret config which
                  contains a name, metadata and a reference to secret store config to
                  which any connection details for this managed resource should be written.
                  Connection details frequently include the endpoint, username,
                  and password required to connect to the managed resource.
                properties:
                  configRef:
                    default:
                      name: default
                    description: |-
                      SecretStoreConfigRef specifies which secret store config should be used
                      for this ConnectionSecret.
                    properties:
                      name:
                        description: Name of the referenced object.
                        type: string
                      policy:
                        description: Policies for referencing.
                        properties:
                          resolution:
                            default: Required
                            description: |-
                              Resolution specifies whether resolution of this reference is required.
                              The default is 'Required', which means the reconcile will fail if the
                              reference cannot be resolved. 'Optional' means this reference will be
                              a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: |-
                              Resolve specifies when this reference should be resolved. The default
                              is 'IfNotPresent', which will attempt to resolve the reference only when
                              the corresponding field is not present. Use 'Always' to resolve the
                              reference on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    required:
                    - name
                    type: object
                  metadata:
                    description: Metadata is the metadata for connection secret.
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: |-
                          Annotations are the annotations to be added to connection secret.
                          - For Kubernetes secrets, this will be used as "metadata.annotations".
                          - It is up to Secret Store implementation for others store types.
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        description: |-
                          Labels are the labels/tags to be added to connection secret.
                          - For Kubernetes secrets, this will be used as "metadata.labels".
                          - It is up to Secret Store implementation for others store types.
                        type: object
                      type:
                        description: |-
                          Type is the SecretType for the connection secret.
                          - Only valid for Kubernetes Secret Stores.
                        type: string
                    type: object
                  name:
                    description: Name is the name of the connection secret.
                    type: string
                required:
                - name
                type: object
              writeConnectionSecretToRef:
                description: |-
                  WriteConnectionSecretToReference specifies the namespace and name of a
                  Secret to which any connection details for this managed resource should
                  be written. Connection details frequently include the endpoint, username,
                  and password required to connect to the managed resource.
                  This field is planned to be replaced in a future release in favor of
                  PublishConnectionDetailsTo. Currently, both could be set independently
                  and connection details would be published to both without affecting
                  each other.
                properties:
                  name:
                    description: Name of the secret.
                    type: string
                  namespace:
                    description: Namespace of the secret.
                    type: string
                required:
                - name
                - namespace
                type: object
            required:
            - forProvider
            type: object
          status:
            description: CertificateStatus defines the observed state of Certificate.
            properties:
              atProvider:
                properties:
                  description:
                    description: A human-readable description of the resource.
                    type: string
                  id:
                    description: an identifier for the resource with format projects/{{project}}/locations/{{location}}/certificates/{{name}}
                    type: string
                  labels:
                    additionalProperties:
                      type: string
                    description: Set of label tags associated with the Certificate
                      resource.
                    type: object
                    x-kubernetes-map-type: granular
                  location:
                    description: The Certificate Manager location. If not specified,
                      "global" is used.
                    type: string
                  managed:
                    description: |-
                      Configuration and state of a Managed Certificate.
                      Certificate Manager provisions and renews Managed Certificates
                      automatically, for as long as it's authorized to do so.
                      Structure is documented below.
                    items:
                      properties:
                        authorizationAttemptInfo:
                          description: |-
                            (Output)
                            Detailed state of the latest authorization attempt for each domain
                            specified for this Managed Certificate.
                            Structure is documented below.
                          items:
                            properties:
                              details:
                                description: |-
                                  (Output)
                                  Human readable explanation about the issue. Provided to help address
                                  the configuration issues.
                                  Not guaranteed to be stable. For programmatic access use reason field.
                                type: string
                              domain:
                                description: |-
                                  (Output)
                                  Domain name of the authorization attempt.
                                type: string
                              failureReason:
                                description: |-
                                  (Output)
                                  Reason for failure of the authorization attempt for the domain.
                                type: string
                              state:
                                description: |-
                                  (Output)
                                  A state of this Managed Certificate.
                                type: string
                            type: object
                          type: array
                        dnsAuthorizations:
                          description: Authorizations that will be used for performing
                            domain authorization. Either issuanceConfig or dnsAuthorizations
                            should be specificed, but not both.
                          items:
                            type: string
                          type: array
                        domains:
                          description: |-
                            The domains for which a managed SSL certificate will be generated.
                            Wildcard domains are only supported with DNS challenge resolution
                          items:
                            type: string
                          type: array
                        issuanceConfig:
                          description: |-
                            The resource name for a CertificateIssuanceConfig used to configure private PKI certificates in the format projects//locations//certificateIssuanceConfigs/*.
                            If this field is not set, the certificates will instead be publicly signed as documented at https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs#caa.
                            Either issuanceConfig or dnsAuthorizations should be specificed, but not both.
                          type: string
                        provisioningIssue:
                          description: |-
                            (Output)
                            Information about issues with provisioning this Managed Certificate.
                            Structure is documented below.
                          items:
                            properties:
                              details:
                                description: |-
                                  (Output)
                                  Human readable explanation about the issue. Provided to help address
                                  the configuration issues.
                                  Not guaranteed to be stable. For programmatic access use reason field.
                                type: string
                              reason:
                                description: |-
                                  (Output)
                                  Reason for provisioning failures.
                                type: string
                            type: object
                          type: array
                        state:
                          description: |-
                            (Output)
                            A state of this Managed Certificate.
                          type: string
                      type: object
                    type: array
                  project:
                    description: |-
                      The ID of the project in which the resource belongs.
                      If it is not provided, the provider project is used.
                    type: string
                  scope:
                    description: |-
                      The scope of the certificate.
                      DEFAULT: Certificates with default scope are served from core Google data centers.
                      If unsure, choose this option.
                      EDGE_CACHE: Certificates with scope EDGE_CACHE are special-purposed certificates,
                      served from non-core Google data centers.
                      Currently allowed only for managed certificates.
                    type: string
                  selfManaged:
                    description: |-
                      Certificate data for a SelfManaged Certificate.
                      SelfManaged Certificates are uploaded by the user. Updating such
                      certificates before they expire remains the user's responsibility.
                      Structure is documented below.
                    items:
                      properties:
                        pemCertificate:
                          description: |-
                            The certificate chain in PEM-encoded form.
                            Leaf certificate comes first, followed by intermediate ones if any.
                          type: string
                      type: object
                    type: array
                type: object
              conditions:
                description: Conditions of the resource.
                items:
                  description: A Condition that may apply to a resource.
                  properties:
                    lastTransitionTime:
                      description: |-
                        LastTransitionTime is the last time this condition transitioned from one
                        status to another.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        A Message containing details about this condition's last transition from
                        one status to another, if any.
                      type: string
                    reason:
                      description: A Reason for this condition's last transition from
                        one status to another.
                      type: string
                    status:
                      description: Status of this condition; is it currently True,
                        False, or Unknown?
                      type: string
                    type:
                      description: |-
                        Type of this condition. At most one of each condition type may apply to
                        a resource at any point in time.
                      type: string
                  required:
                  - lastTransitionTime
                  - reason
                  - status
                  - type
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - type
                x-kubernetes-list-type: map
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
